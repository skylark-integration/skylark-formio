/**
 * skylark-formio - A version of formio.js that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-formio/
 * @license MIT
 */
(function(factory,globals) {
  var define = globals.define,
      require = globals.require,
      isAmd = (typeof define === 'function' && define.amd),
      isCmd = (!isAmd && typeof exports !== 'undefined');

  if (!isAmd && !define) {
    var map = {};
    function absolute(relative, base) {
        if (relative[0]!==".") {
          return relative;
        }
        var stack = base.split("/"),
            parts = relative.split("/");
        stack.pop(); 
        for (var i=0; i<parts.length; i++) {
            if (parts[i] == ".")
                continue;
            if (parts[i] == "..")
                stack.pop();
            else
                stack.push(parts[i]);
        }
        return stack.join("/");
    }
    define = globals.define = function(id, deps, factory) {
        if (typeof factory == 'function') {
            map[id] = {
                factory: factory,
                deps: deps.map(function(dep){
                  return absolute(dep,id);
                }),
                resolved: false,
                exports: null
            };
            require(id);
        } else {
            map[id] = {
                factory : null,
                resolved : true,
                exports : factory
            };
        }
    };
    require = globals.require = function(id) {
        if (!map.hasOwnProperty(id)) {
            throw new Error('Module ' + id + ' has not been defined');
        }
        var module = map[id];
        if (!module.resolved) {
            var args = [];

            module.deps.forEach(function(dep){
                args.push(require(dep));
            })

            module.exports = module.factory.apply(globals, args) || null;
            module.resolved = true;
        }
        return module.exports;
    };
  }
  
  if (!define) {
     throw new Error("The module utility (ex: requirejs or skylark-utils) is not loaded!");
  }

  factory(define,require);

  if (!isAmd) {
    var skylarkjs = require("skylark-langx-ns");

    if (isCmd) {
      module.exports = skylarkjs;
    } else {
      globals.skylarkjs  = skylarkjs;
    }
  }

})(function(define,require) {

define('skylark-langx-ns/_attach',[],function(){
    return  function attach(obj1,path,obj2) {
        if (typeof path == "string") {
            path = path.split(".");//[path]
        };
        var length = path.length,
            ns=obj1,
            i=0,
            name = path[i++];

        while (i < length) {
            ns = ns[name] = ns[name] || {};
            name = path[i++];
        }

        if (ns[name]) {
            if (obj2) {
                throw new Error("This namespace already exists:" + path);
            }

        } else {
            ns[name] = obj2 || {};
        }
        return ns[name];
    }
});
define('skylark-langx-ns/ns',[
    "./_attach"
], function(_attach) {
    var root = {
    	attach : function(path,obj) {
    		return _attach(root,path,obj);
    	}
    };
    return root;
});

define('skylark-langx-ns/main',[
	"./ns"
],function(skylark){
	return skylark;
});
define('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });

define('skylark-langx/skylark',[
    "skylark-langx-ns"
], function(ns) {
	return ns;
});

define('skylark-langx-arrays/arrays',[
  "skylark-langx-ns"
],function(skylark){
    return skylark.attach("langx.arrays");
});
define('skylark-langx-arrays/base-find-index',[
  "./arrays"
],function(arrays){
    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    return arrays.baseFindIndex = baseFindIndex;
});
define('skylark-langx-arrays/base-indexof',[
  "./arrays",
  "./base-find-index"
],function(arrays,baseFindIndex){

    /**
     * The base implementation of `isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
	
	return arrays.baseIndexOf = baseIndexOf;
});
define('skylark-langx-arrays/filter',[
  "./arrays"
],function(arrays){
   var _filter = Array.prototype.filter;
 
    function filter(array,func) {
      return _filter.call(array,func);
    }

    return arrays.filter = filter;
	
});
define('skylark-langx-arrays/compact',[
  "./arrays",
  "./filter"
],function(arrays,filter){

    function compact(array) {
        return filter(array, function(item) {
            return item != null;
        });
    }

    return arrays.compact = compact;
});
define('skylark-langx-arrays/in-array',[
  "./arrays"
],function(arrays){
    function inArray(item, array) {
        if (!array) {
            return -1;
        }
        var i;

        if (array.indexOf) {
            return array.indexOf(item);
        }

        i = array.length;
        while (i--) {
            if (array[i] === item) {
                return i;
            }
        }

        return -1;
    }

    return arrays.inArray = inArray;
	
});
define('skylark-langx-arrays/contains',[
  "./arrays",
  "./in-array"
],function(arrays,inArray){

    function contains(array,item) {
      return inArray(item,array);
    }
	
	return arrays.contains = contains;
});
define('skylark-langx-funcs/funcs',[
  "skylark-langx-ns",
],function(skylark,types,objects){
        



    function noop() {
    }




    return skylark.attach("langx.funcs",{
        noop : noop,

        returnTrue: function() {
            return true;
        },

        returnFalse: function() {
            return false;
        }

    });
});
define('skylark-langx-funcs/rest-arguments',[
	"./funcs"
],function(funcs){

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  function restArguments(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  }

  return funcs.restArguments = restArguments;	
});
define('skylark-langx-funcs/bind-all',[
	"./funcs",
	"./rest-arguments"
],function(funcs,restArguments){

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  return funcs.bindAll = restArguments(function(obj, keys) {
    ///keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = obj[key].bind(obj);
    }
  });

});

define('skylark-langx-types/types',[
    "skylark-langx-ns"
],function(skylark){
    var nativeIsArray = Array.isArray, 
        toString = {}.toString;
    
    var type = (function() {
        var class2type = {};

        // Populate the class2type map
        "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" ").forEach(function(name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });

        return function type(obj) {
            return obj == null ? String(obj) :
                class2type[toString.call(obj)] || "object";
        };
    })();

 
    var  isArray = nativeIsArray || function(obj) {
        return object && object.constructor === Array;
    };


    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function/string/element and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * isArrayLike([1, 2, 3])
     * // => true
     *
     * isArrayLike(document.body.children)
     * // => false
     *
     * isArrayLike('abc')
     * // => true
     *
     * isArrayLike(Function)
     * // => false
     */    
    function isArrayLike(obj) {
        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * isBoolean(false)
     * // => true
     *
     * isBoolean(null)
     * // => false
     */
    function isBoolean(obj) {
       return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
       //return typeof(obj) === "boolean";
    }

    function isDefined(obj) {
        return typeof obj !== 'undefined';
    }

    function isDocument(obj) {
        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;
    }

   // Is a given value a DOM element?
    function isElement(obj) {
        return !!(obj && obj.nodeType === 1);
    }   

    function isEmptyObject(obj) {
        var name;
        for (name in obj) {
            if (obj[name] !== null) {
                return false;
            }
        }
        return true;
    }


    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * isFunction(parseInt)
     * // => true
     *
     * isFunction(/abc/)
     * // => false
     */
    function isFunction(value) {
        return type(value) == "function";
    }



    function isHtmlNode(obj) {
        return obj && obj.nodeType; // obj instanceof Node; //Consider the elements in IFRAME
    }

    function isInstanceOf( /*Object*/ value, /*Type*/ type) {
        //Tests whether the value is an instance of a type.
        if (value === undefined) {
            return false;
        } else if (value === null || type == Object) {
            return true;
        } else if (typeof value === "number") {
            return type === Number;
        } else if (typeof value === "string") {
            return type === String;
        } else if (typeof value === "boolean") {
            return type === Boolean;
        } else if (typeof value === "string") {
            return type === String;
        } else {
            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);
        }
    }

    function isNull(obj) {
        return obj === null;
    }

    function isNumber(obj) {
        return typeof obj == 'number';
    }

    function isObject(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;        
        //return type(obj) == "object";
    }

    function isPlainObject(obj) {
        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;
    }

    function isString(obj) {
        return typeof obj === 'string';
    }

    function isWindow(obj) {
        return obj && obj == obj.window;
    }

    function isSameOrigin(href) {
        if (href) {
            var origin = location.protocol + '//' + location.hostname;
            if (location.port) {
                origin += ':' + location.port;
            }
            return href.startsWith(origin);
        }
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ;
       //|| (isObjectLike(value) && objectToString.call(value) == symbolTag); // modified by lwf
    }

    // Is a given variable undefined?
    function isUndefined(obj) {
        return obj === void 0;
    }


    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }   

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }





    return skylark.attach("langx.types",{

        isArray: isArray,

        isArrayLike: isArrayLike,

        isBoolean: isBoolean,

        isDefined: isDefined,

        isDocument: isDocument,

        isElement,

        isEmpty : isEmptyObject,

        isEmptyObject: isEmptyObject,

        isFunction: isFunction,

        isHtmlNode: isHtmlNode,

        isNaN : function (obj) {
            return isNaN(obj);
        },

        isNull: isNull,


        isNumber: isNumber,

        isNumeric: isNumber,

        isObject: isObject,

        isPlainObject: isPlainObject,

        isString: isString,

        isSameOrigin: isSameOrigin,

        isSymbol : isSymbol,

        isUndefined: isUndefined,

        isWindow: isWindow,

        type: type,

        toFinite : toFinite,
        toNumber : toNumber,
        toInteger : toInteger
        
    });

});
define('skylark-langx-types/main',[
	"./types"
],function(types){
	return types;
});
define('skylark-langx-types', ['skylark-langx-types/main'], function (main) { return main; });

define('skylark-langx-funcs/defer',[
    "skylark-langx-types",
    "./funcs"
],function(types,funcs){

    function defer(fn,trigger,args,context) {
        var ret = {
            cancel : null
        },
        fn1 = fn;

        if (!types.isNumber(trigger) && !types.isFunction(trigger)) {
            context = args;
            args = trigger;
            trigger = 0;
        }

        if (args) {
            fn1 = function() {
                fn.apply(context,args);
            };
        }

        if (types.isFunction(trigger)) {
            var canceled = false;
            trigger(function(){
                if (!canceled) {
                    fn1();
                }
            });

            ret.cancel = function() {
                canceled = true;
            }

        } else {
            var  id;
            if (trigger == 0 && requestAnimationFrame) {
                id = requestAnimationFrame(fn1);
                ret.cancel = function() {
                    return cancelAnimationFrame(id);
                };
            } else {
                id = setTimeout(fn1,trigger);
                ret.cancel = function() {
                    return clearTimeout(id);
                };
            }            
        }

        return ret;
    }

    return funcs.defer = defer;
});
define('skylark-langx-funcs/debounce',[
	"./funcs",
    "./defer"
],function(funcs,defer){
   
    function debounce(fn, wait,useAnimationFrame) {
        var timeout,
            defered,
            debounced = function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (useAnimationFrame) {
                        defered = defer(fn,args,context);
                    } else {
                        fn.apply(context, args);
                    }
                };

                cancel();
                timeout = setTimeout(later, wait);

                return {
                    cancel 
                };
            },
            cancel = debounced.cancel = function () {
                if (timeout) {
                    clearTimeout(timeout);
                }
                if (defered) {
                    defered.cancel();
                }
                timeout = void 0;
                defered = void 0;
            };

        return debounced;
    }

    return funcs.debounce = debounce;

});
define('skylark-langx-objects/objects',[
    "skylark-langx-ns",
    "skylark-langx-types"
],function(skylark,types){

    return skylark.attach("langx.objects",{
        attach : skylark.attach
    });

});
define('skylark-langx-objects/all-keys',[
    "skylark-langx-types",
    "./objects"
],function(types,objects){

    // Retrieve all the property names of an object.
    function allKeys(obj) {
        if (!types.isObject(obj)) return [];
        var keys = [];
        for (var key in obj) keys.push(key);
        return keys;
    }

    return objects.allKeys = allKeys;

});
define('skylark-langx-objects/assign',[
	"skylark-langx-types",
	"./objects"
],function(types,objects) {

	return objects.assign = Object.assign;
});
define('skylark-langx-objects/to-key',[
	"skylark-langx-types",
	"./objects"
],function(types,objects) {

	const isSymbol = types.isSymbol,
		  isString = types.isString;

	/** Used as references for various `Number` constants. */
	const INFINITY = 1 / 0

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (isString(value) || isSymbol(value)) {
	    return value
	  }
	  const result = `${value}`
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result
	}

	return objects.toKey = toKey;

});
define('skylark-langx-objects/is-key',[
	"skylark-langx-types",
	"./objects"
],function(types,objects) {

	const isSymbol = types.isSymbol,
		  isArray = types.isArray;

	/** Used to match property names within property paths. */
	const reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/
	const reIsPlainProp = /^\w*$/

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false
	  }
	  const type = typeof value
	  if (type === 'number' || type === 'boolean' || value == null || isSymbol(value)) {
	    return true
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object))
	}

	return objects.isKey = isKey;
});
define('skylark-langx-objects/_cast_path',[
	"skylark-langx-types",
	"./objects",
	"./is-key"
],function(types,objects,isKey) {
	const charCodeOfDot = '.'.charCodeAt(0)
	const reEscapeChar = /\\(\\)?/g
	const rePropName = RegExp(
	  // Match anything that isn't a dot or bracket.
	  '[^.[\\]]+' + '|' +
	  // Or match property names within brackets.
	  '\\[(?:' +
	    // Match a non-string expression.
	    '([^"\'][^[]*)' + '|' +
	    // Or match strings (supports escaping characters).
	    '(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2' +
	  ')\\]'+ '|' +
	  // Or match "" as the space between consecutive dots or empty brackets.
	  '(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))'
	  , 'g')

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	const stringToPath = ((string) => {
	  const result = []
	  if (string.charCodeAt(0) === charCodeOfDot) {
	    result.push('')
	  }
	  string.replace(rePropName, (match, expression, quote, subString) => {
	    let key = match
	    if (quote) {
	      key = subString.replace(reEscapeChar, '$1')
	    }
	    else if (expression) {
	      key = expression.trim()
	    }
	    result.push(key)
	  })
	  return result
	});

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (types.isArray(value)) {
	    return value
	  }
	  return isKey(value, object) ? [value] : stringToPath(value)
	}

	return castPath;
});
define('skylark-langx-objects/get',[
	"skylark-langx-types",
	"./objects",
	"./to-key",
	"./_cast_path"
],function(types,objects,toKey,castPath) {

	/**
	 * The base implementation of `get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object)

	  let index = 0
	  const length = path.length

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])]
	  }
	  return (index && index == length) ? object : undefined
	}


	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @see has, hasIn, set, unset
	 * @example
	 *
	 * const object = { 'a': [{ 'b': { 'c': 3 } }] }
	 *
	 * get(object, 'a[0].b.c')
	 * // => 3
	 *
	 * get(object, ['a', '0', 'b', 'c'])
	 * // => 3
	 *
	 * get(object, 'a.b.c', 'default')
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  const result = object == null ? undefined : baseGet(object, path)
	  return result === undefined ? defaultValue : result
	}

	return objects.get = get;
});
define('skylark-langx-objects/base-at',[
	"./objects",
	"./get"
],function(objects,get) {

	/**
	 * The base implementation of `at` without support for individual paths.
	 *
	 * @param {Object} object The object to iterate over.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Array} Returns the picked elements.
	 */
	function baseAt(object, paths) {
	  let index = -1
	  const length = paths.length
	  const result = new Array(length)
	  const skip = object == null

	  while (++index < length) {
	    result[index] = skip ? undefined : get(object, paths[index])
	  }
	  return result
	}

	return objects.baseAt = baseAt;
});
define('skylark-langx-objects/clone',[
    "skylark-langx-types",
    "./objects"
],function(types,objects) {
    var isPlainObject = types.isPlainObject,
        isArray = types.isArray;

    function clone( /*anything*/ src,checkCloneMethod) {
        var copy;
        if (src === undefined || src === null) {
            copy = src;
        } else if (checkCloneMethod && src.clone) {
            copy = src.clone();
        } else if (isArray(src)) {
            copy = [];
            for (var i = 0; i < src.length; i++) {
                copy.push(clone(src[i]));
            }
        } else if (isPlainObject(src)) {
            copy = {};
            for (var key in src) {
                copy[key] = clone(src[key]);
            }
        } else {
            copy = src;
        }

        return copy;

    }

    return objects.clone = clone;
});
define('skylark-langx-objects/defaults',[
    "./objects",
    "./all-keys"
],function(objects,allKeys){
  // An internal function for creating assigner functions.
  function createAssigner(keysFunc, defaults) {
      return function(obj) {
        var length = arguments.length;
        if (defaults) obj = Object(obj);  
        if (length < 2 || obj == null) return obj;
        for (var index = 1; index < length; index++) {
          var source = arguments[index],
              keys = keysFunc(source),
              l = keys.length;
          for (var i = 0; i < l; i++) {
            var key = keys[i];
            if (!defaults || obj[key] === void 0) obj[key] = source[key];
          }
        }
        return obj;
     };
  }
  
  return objects.defaults = createAssigner(allKeys, true);
});
define('skylark-langx-objects/each',[
    "./objects"
],function(objects) {

    function each(obj, callback,isForEach) {
        var length, key, i, undef, value;

        if (obj) {
            length = obj.length;

            if (length === undef) {
                // Loop object items
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        value = obj[key];
                        if ((isForEach ? callback.call(value, value, key) : callback.call(value, key, value) ) === false) {
                            break;
                        }
                    }
                }
            } else {
                // Loop array items
                for (i = 0; i < length; i++) {
                    value = obj[i];
                    if ((isForEach ? callback.call(value, value, i) : callback.call(value, i, value) )=== false) {
                        break;
                    }
                }
            }
        }

        return this;
    }

    return objects.each = each;
});
define('skylark-langx-objects/_mixin',[
    "skylark-langx-types",
    "./objects"
],function(types,objects) {

    var isPlainObject = types.isPlainObject;

    function _mixin(target, source, deep, safe) {
        for (var key in source) {
            //if (!source.hasOwnProperty(key)) {
            //    continue;
            //}
            if (safe && target[key] !== undefined) {
                continue;
            }
            // if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
            //    if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
            if (deep && isPlainObject(source[key])) {
                if (!isPlainObject(target[key])) {
                    target[key] = {};
                }
                //if (isArray(source[key]) && !isArray(target[key])) {
                //    target[key] = [];
                //}
                _mixin(target[key], source[key], deep, safe);
            } else if (source[key] !== undefined) {
                target[key] = source[key]
            }
        }
        return target;
    }

    return _mixin;
});
define('skylark-langx-objects/_parse_mixin_args',[
    "skylark-langx-types",
    "./objects"
],function(types,objects) {

    var slice = Array.prototype.slice,
        isBoolean = types.isBoolean;

    function _parseMixinArgs(args) {
        var params = slice.call(arguments, 0),
            target = params.shift(),
            deep = false;
        if (isBoolean(params[params.length - 1])) {
            deep = params.pop();
        }

        return {
            target: target,
            sources: params,
            deep: deep
        };
    }
    
    return _parseMixinArgs;
});
define('skylark-langx-objects/mixin',[
	"skylark-langx-types",
	"./objects",
  "./_mixin",
  "./_parse_mixin_args"
],function(types,objects,_mixin,_parseMixinArgs) {


    function mixin() {
        var args = _parseMixinArgs.apply(this, arguments);

        args.sources.forEach(function(source) {
            _mixin(args.target, source, args.deep, false);
        });
        return args.target;
    }


    return objects.mixin = mixin;
	
});
define('skylark-langx-objects/extend',[
    "./objects",
    "./mixin"
],function(objects,mixin) {
    var slice = Array.prototype.slice;

    function extend(target) {
        var deep, args = slice.call(arguments, 1);
        if (typeof target == 'boolean') {
            deep = target
            target = args.shift()
        }
        if (args.length == 0) {
            args = [target];
            target = this;
        }
        args.forEach(function(arg) {
            mixin(target, arg, deep);
        });
        return target;
    }

    return objects.extend = extend;
});
define('skylark-langx-objects/for-each',[
 	"./objects",
 	"./each"
],function(objects,each){

    function forEach (obj, fn) {
    	if (!obj) {
    		return;
    	}
     	if (obj.forEach) {
     		obj.forEach(fn);
     	} else {
     		each(obj,fn,true);
     	}
    }

	return objects.forEach = forEach;
});
define('skylark-langx-objects/has',[
    "skylark-langx-types",
    "./objects"
],function(types,objects){
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function has(obj, path) {
        if (!types.isArray(path)) {
            return obj != null && hasOwnProperty.call(obj, path);
        }
        var length = path.length;
        for (var i = 0; i < length; i++) {
            var key = path[i];
            if (obj == null || !hasOwnProperty.call(obj, key)) {
                return false;
            }
            obj = obj[key];
        }
        return !!length;
    }

    return objects.has = has;
});
define('skylark-langx-objects/includes',[
    "./objects"
],function(objects) {

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }



    return objects.includes = includes;
});
define('skylark-langx-objects/is-equal',[
	"skylark-langx-types",
	"./objects"
],function(types,objects) {
    var isFunction = types.isFunction;


    // Internal recursive comparison function for `isEqual`.
    var eq, deepEq;
    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

    eq = function(a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        // `null` or `undefined` only equal to itself (strict comparison).
        if (a == null || b == null) return false;
        // `NaN`s are equivalent, but non-reflexive.
        if (a !== a) return b !== b;
        // Exhaust primitive checks
        var type = typeof a;
        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
        return deepEq(a, b, aStack, bStack);
    };

    // Internal recursive comparison function for `isEqual`.
    deepEq = function(a, b, aStack, bStack) {
        // Unwrap any wrapped objects.
        //if (a instanceof _) a = a._wrapped;
        //if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;
        switch (className) {
            // Strings, numbers, regular expressions, dates, and booleans are compared by value.
            case '[object RegExp]':
            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
            case '[object String]':
                // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                // equivalent to `new String("5")`.
                return '' + a === '' + b;
            case '[object Number]':
                // `NaN`s are equivalent, but non-reflexive.
                // Object(NaN) is equivalent to NaN.
                if (+a !== +a) return +b !== +b;
                // An `egal` comparison is performed for other numeric values.
                return +a === 0 ? 1 / +a === 1 / b : +a === +b;
            case '[object Date]':
            case '[object Boolean]':
                // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                // millisecond representations. Note that invalid dates with millisecond representations
                // of `NaN` are not equivalent.
                return +a === +b;
            case '[object Symbol]':
                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
        }

        var areArrays = className === '[object Array]';
        if (!areArrays) {
            if (typeof a != 'object' || typeof b != 'object') return false;
            // Objects with different constructors are not equivalent, but `Object`s or `Array`s
            // from different frames are.
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&
                               isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
                return false;
            }
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

        // Initializing stack of traversed objects.
        // It's done here since we only need them for objects and arrays comparison.
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
            // Linear search. Performance is inversely proportional to the number of
            // unique nested structures.
            if (aStack[length] === a) return bStack[length] === b;
        }

        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);

        // Recursively compare objects and arrays.
        if (areArrays) {
            // Compare array lengths to determine if a deep comparison is necessary.
            length = a.length;
            if (length !== b.length) return false;
            // Deep compare the contents, ignoring non-numeric properties.
            while (length--) {
                if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
        } else {
            // Deep compare objects.
            var keys = Object.keys(a), key;
            length = keys.length;
            // Ensure that both objects contain the same number of properties before comparing deep equality.
            if (Object.keys(b).length !== length) return false;
            while (length--) {
                // Deep compare each member
                key = keys[length];
                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;
            }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return true;
    };


   // Perform a deep comparison to check if two objects are equal.
    function isEqual(a, b) {
        return eq(a, b);
    }

    return objects.isEqual = isEqual;
	
});
define('skylark-langx-objects/keys',[
    "skylark-langx-types",
    "./objects",
    "./has"
],function(types,objects,has){

    // Retrieve the names of an object's own properties.
    // Delegates to **ECMAScript 5**'s native `Object.keys`.
    function keys(obj) {
        if (!types.isObject(obj)) return [];  
        var keys = [];
        for (var key in obj) if (has(obj, key)) keys.push(key);
        return keys;
    }

    return objects.keys = keys;
});
define('skylark-langx-objects/is-match',[
    "skylark-langx-types",
    "./objects",
    "./keys"
],function(types,objects,keys) {

    // Returns whether an object has a given set of `key:value` pairs.
    function isMatch(object, attrs) {
        var keys = keys(attrs), length = keys.length;
        if (object == null) return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
          var key = keys[i];
          if (attrs[key] !== obj[key] || !(key in obj)) return false;
        }
        return true;
    }    

    return objects.isMatch = isMatch;
});
define('skylark-langx-objects/omit',[
    "./objects",
    "./mixin"
],function(objects,mixin) {

   // Return a copy of the object without the blacklisted properties.
    function omit(obj, prop1,prop2) {
        if (!obj) {
            return null;
        }
        var result = mixin({},obj);
        for(var i=1;i<arguments.length;i++) {
            var pn = arguments[i];
            if (pn in obj) {
                delete result[pn];
            }
        }
        return result;

    }
    
    return objects.omit = omit;
});
define('skylark-langx-objects/pick',[
    "./objects"
],function(objects) {

   // Return a copy of the object only containing the whitelisted properties.
    function pick(obj,prop1,prop2) {
        if (!obj) {
            return null;
        }
        var result = {};
        for(var i=1;i<arguments.length;i++) {
            var pn = arguments[i];
            if (pn in obj) {
                result[pn] = obj[pn];
            }
        }
        return result;
    }
    
    return objects.pick = pick;
});
define('skylark-langx-objects/remove-items',[
    "skylark-langx-types",
    "./objects"
],function(types,objects){
    function removeItem(items, item) {
        if (types.isArray(items)) {
            var idx = items.indexOf(item);
            if (idx != -1) {
                items.splice(idx, 1);
            }
        } else if (types.isPlainObject(items)) {
            for (var key in items) {
                if (items[key] == item) {
                    delete items[key];
                    break;
                }
            }
        }

        return this;
    }

    return objects.removeItem = removeItem;
});
define('skylark-langx-objects/result',[
  "skylark-langx-types",
  "./objects",
  "./to-key",
  "./_cast_path"
],function(types,objects,toKey,castPath) {
	var isArray = types.isArray,
		isFunction = types.isFunction;

  /**
   * This method is like `get` except that if the resolved value is a
   * function it's invoked with the `this` binding of its parent object and
   * its result is returned.
   *
   * @since 0.1.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to resolve.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * const object = { 'a': [{ 'b': { 'c1': 3, 'c2': () => 4 } }] }
   *
   * result(object, 'a[0].b.c1')
   * // => 3
   *
   * result(object, 'a[0].b.c2')
   * // => 4
   *
   * result(object, 'a[0].b.c3', 'default')
   * // => 'default'
   *
   * result(object, 'a[0].b.c3', () => 'default')
   * // => 'default'
   */
  function result(object, path, defaultValue) {
    path = castPath(path, object)

    let index = -1
    let length = path.length

    // Ensure the loop is entered when path is empty.
    if (!length) {
      length = 1
      object = undefined
    }
    while (++index < length) {
      let value = object == null ? undefined : object[toKey(path[index])]
      if (value === undefined) {
        index = length
        value = defaultValue
      }
      object = isFunction(value) ? value.call(object) : value
    }
    return object
  }

  return objects.result = result;	
});
define('skylark-langx-objects/safe-mixin',[
	"./objects",
  "./_mixin",
  "./_parse_mixin_args"
],function(objects,_mixin,_parseMixinArgs) {

    function safeMixin() {
        var args = _parseMixinArgs.apply(this, arguments);

        args.sources.forEach(function(source) {
            _mixin(args.target, source, args.deep, true);
        });
        return args.target;
    }

    return objects.safeMixin = safeMixin;
});
define('skylark-langx-objects/scall',[
    "./objects"
],function(objects) {
    const  slice = Array.prototype.slice;

    function scall(obj,method,arg1,arg2) {
        if (obj && obj[method]) {
            var args = slice.call(arguments, 2);

            return obj[method].apply(obj,args);
        }
    }

    return objects.scall = scall;
});
define('skylark-langx-objects/is-index',[
	"skylark-langx-types",
	"./objects"
],function(types,objects) {
	/** Used as references for various `Number` constants. */
	const MAX_SAFE_INTEGER = 9007199254740991

	/** Used to detect unsigned integer values. */
	const reIsUint = /^(?:0|[1-9]\d*)$/

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  const type = typeof value
	  length = length == null ? MAX_SAFE_INTEGER : length

	  return !!length &&
	    (type === 'number' ||
	      (type !== 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length)
	}

	return objects.isIndex = isIndex;
});
define('skylark-langx-objects/set',[
	"skylark-langx-types",
	"./objects",
	"./_cast_path",
	"./is-index",
	"./to-key"
],function(types,objects,castPath,isIndex,toKey) {
	/**
	 * The base implementation of `set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!types.isObject(object)) {
	    return object
	  }
	  path = castPath(path, object)

	  const length = path.length
	  const lastIndex = length - 1

	  let index = -1
	  let nested = object

	  while (nested != null && ++index < length) {
	    const key = toKey(path[index])
	    let newValue = value

	    if (index != lastIndex) {
	      const objValue = nested[key]
	      newValue = customizer ? customizer(objValue, key, nested) : undefined
	      if (newValue === undefined) {
	        newValue = types.isObject(objValue)
	          ? objValue
	          : (isIndex(path[index + 1]) ? [] : {})
	      }
	    }
	    nested[key] = newValue; //  assignValues() lwf
	    nested = nested[key];
	  }
	  return object
	}

	/**
	 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	 * it's created. Arrays are created for missing index properties while objects
	 * are created for all other missing properties. Use `setWith` to customize
	 * `path` creation.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns `object`.
	 * @see has, hasIn, get, unset
	 * @example
	 *
	 * const object = { 'a': [{ 'b': { 'c': 3 } }] }
	 *
	 * set(object, 'a[0].b.c', 4)
	 * console.log(object.a[0].b.c)
	 * // => 4
	 *
	 * set(object, ['x', '0', 'y', 'z'], 5)
	 * console.log(object.x[0].y.z)
	 * // => 5
	 */
	function set(object, path, value) {
	  return object == null ? object : baseSet(object, path, value)
	}


	return objects.set = set;

});
 define('skylark-langx-objects/shadow',[
	"./objects"
],function(objects) {

    function shadow(obj, prop, value) {
        Object.defineProperty(obj, prop, {
            value,
            enumerable: true,
            configurable: true,
            writable: false
        });
        return value;
    }

    return objects.shadow = shadow;
});
define('skylark-langx-objects/unset',[
	"skylark-langx-types",
	"./objects",
	"./set"
],function(types,objects,set) {

	/**
	 * Removes the property at `path` of `object`.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 * @see get, has, set
	 * @example
	 *
	 * const object = { 'a': [{ 'b': { 'c': 7 } }] }
	 * unset(object, 'a[0].b.c')
	 * // => true
	 *
	 * console.log(object)
	 * // => { 'a': [{ 'b': {} }] }
	 *
	 * unset(object, ['a', '0', 'b', 'c'])
	 * // => true
	 *
	 * console.log(object)
	 * // => { 'a': [{ 'b': {} }] }
	 */
	function unset(object, path) {
	  return object == null ? true : set(object, path,undefined)
	}

	return objects.unset = unset;
});
define('skylark-langx-objects/values',[
    "skylark-langx-types",
    "./objects",
    "./all-keys"
],function(types,objects,allKeys){
    // Retrieve the values of an object's properties.
    function values(obj) {
        var keys = allKeys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
            values[i] = obj[keys[i]];
        }
        return values;
    }

    return objects.values = values;
});
define('skylark-langx-objects/main',[
	"./objects",
	"./all-keys",
	"./assign",
	"./base-at",
	"./clone",
	"./defaults",
	"./each",
	"./extend",
	"./for-each",
	"./get",
	"./has",
	"./includes",
	"./is-equal",
	"./is-key",
	"./is-match",
	"./keys",
	"./mixin",
	"./omit",
	"./pick",
	"./remove-items",
	"./result",
	"./safe-mixin",
	"./scall",
	"./set",
	"./shadow",
	"./to-key",
	"./unset",
	"./values"
],function(objects){
	return objects;
});
define('skylark-langx-objects', ['skylark-langx-objects/main'], function (main) { return main; });

define('skylark-langx-funcs/delegate',[
  "skylark-langx-objects",
  "./funcs"
],function(objects,funcs){
	var mixin = objects.mixin;

    var delegate = (function() {
        // boodman/crockford delegation w/ cornford optimization
        function TMP() {}
        return function(obj, props) {
            TMP.prototype = obj;
            var tmp = new TMP();
            TMP.prototype = null;
            if (props) {
                mixin(tmp, props);
            }
            return tmp; // Object
        };
    })();

    return funcs.delegate = delegate;

});
define('skylark-langx-funcs/loop',[
	"./funcs"
],function(funcs){

	/**
	 * Animation timer is a special type of timer that uses the requestAnimationFrame method.
	 *
	 * This timer calls the method with the same rate as the screen refesh rate.
	 * 
	 * Loop time can be changed dinamically.
	 *
	 * @class AnimationTimer
	 * @param {Function} callback Timer callback function.
	 */
	function AnimationTimer(callback)
	{
		this.callback = callback;

		this.running = false;
		this.id = -1;
	}

	/**
	 * Start timer, is the timer is already running dosen't do anything.
	 * 
	 * @method start
	 */
	AnimationTimer.prototype.start = function()
	{
		if(this.running)
		{
			return;
		}

		this.running = true;

		var self = this;
		function run()
		{
			self.callback();

			if(self.running)
			{
				self.id = requestAnimationFrame(run);
			}
		}

		run();
	};

	/**
	 * Stop animation timer.
	 * 
	 * @method stop
	 */
	AnimationTimer.prototype.stop = function()
	{
		this.running = false;
		cancelAnimationFrame(this.id);
	};

	function loop(fn) {
		return new AnimationTimer(fn);
    }

    return funcs.loop = loop;
});
define('skylark-langx-funcs/negate',[
	"./funcs"
],function(funcs){
   
    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0
     * }
     *
     * filter([1, 2, 3, 4, 5, 6], negate(isEven))
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate !== 'function') {
        throw new TypeError('Expected a function')
      }
      return function(...args) {
        return !predicate.apply(this, args)
      }
    }


    return funcs.negate = negate;

});
define('skylark-langx-funcs/proxy',[
  "skylark-langx-types",
	"./funcs"
],function(types,funcs){
    var slice = Array.prototype.slice,
        isFunction = types.isFunction,
        isString = types.isString;

    function proxy(fn, context) {
        var args = (2 in arguments) && slice.call(arguments, 2)
        if (isFunction(fn)) {
            var proxyFn = function() {
                return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);
            }
            return proxyFn;
        } else if (isString(context)) {
            if (args) {
                args.unshift(fn[context], fn)
                return proxy.apply(null, args)
            } else {
                return proxy(fn[context], fn);
            }
        } else {
            throw new TypeError("expected function");
        }
    }

    return funcs.bind = funcs.proxy = proxy;

});
define('skylark-langx-funcs/template',[
  "skylark-langx-objects",
  "./funcs",
  "./proxy"
],function(objects,funcs,proxy){
    //ref : underscore
    var slice = Array.prototype.slice;
   
    // By default, Underscore uses ERB-style template delimiters, change the
    // following template settings to use alternative delimiters.
    var templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };

    // When customizing `templateSettings`, if you don't want to define an
    // interpolation, evaluation or escaping regex, we need one that is
    // guaranteed not to match.
    var noMatch = /(.)^/;


    // Certain characters need to be escaped so that they can be put into a
    // string literal.
    var escapes = {
      "'":      "'",
      '\\':     '\\',
      '\r':     'r',
      '\n':     'n',
      '\t':     't',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;


    function template(text, data, settings) {
        var render;
        settings = objects.defaults({}, settings,templateSettings);

        // Combine delimiters into one regular expression via alternation.
        var matcher = RegExp([
          (settings.escape || noMatch).source,
          (settings.interpolate || noMatch).source,
          (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');

        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset)
              .replace(escaper, function(match) { return '\\' + escapes[match]; });

          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          }
          if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          }
          if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
          index = offset + match.length;
          return match;
        });
        source += "';\n";

        // If a variable is not specified, place data values in local scope.
        if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

        source = "var __t,__p='',__j=Array.prototype.join," +
          "print=function(){__p+=__j.call(arguments,'');};\n" +
          source + 'return __p;\n';

        try {
          render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
          e.source = source;
          throw e;
        }

        if (data) {
          return render(data,this)
        }
        var template = proxy(function(data) {
          return render.call(this, data,this);
        },this);

        // Provide the compiled source as a convenience for precompilation.
        var argument = settings.variable || 'obj';
        template.source = 'function(' + argument + '){\n' + source + '}';

        return template;
    }

    template.templateSettings = funcs.templateSettings = templateSettings;

    return funcs.template = template;

});
define('skylark-langx-funcs/throttle',[
  "./funcs"
],function(funcs){

    const throttle = function (fn, wait) {
        let last = window.performance.now();
        const throttled = function (...args) {
            const now = window.performance.now();
            if (now - last >= wait) {
                fn(...args);
                last = now;
            }
        };
        return throttled;
    };

    /*
    function throttle(func, delay) {
        var timer = null;

        return function() {
            var context = this,
                args = arguments;

            if ( timer === null ) {
                timer = setTimeout(function() {
                    func.apply(context, args);
                    timer = null;
                }, delay);
            }
        };
    }
    */


    return funcs.throttle = throttle;
});
define('skylark-langx-funcs/main',[
	"./funcs",
	"./bind-all",
	"./debounce",
	"./defer",
	"./delegate",
	"./loop",
	"./negate",
	"./proxy",
	"./rest-arguments",
	"./template",
	"./throttle"
],function(funcs){
	return funcs;
});
define('skylark-langx-funcs', ['skylark-langx-funcs/main'], function (main) { return main; });

define('skylark-langx-arrays/flatten',[
  "skylark-langx-types",
  "./arrays"
],function(types,arrays){

    function flatten(array) {
        if (types.isArrayLike(array)) {
            var result = [];
            for (var i = 0; i < array.length; i++) {
                var item = array[i];
                if (types.isArrayLike(item)) {
                    for (var j = 0; j < item.length; j++) {
                        result.push(item[j]);
                    }
                } else {
                    result.push(item);
                }
            }
            return result;
        } else {
            return array;
        }
        //return array.length > 0 ? concat.apply([], array) : array;
    }

    return arrays.flatten = flatten;
});
define('skylark-langx-arrays/difference',[
  "skylark-langx-funcs",
  "./arrays",
  "./flatten",
  "./filter",
  "./contains"
],function(funcs,arrays,flatten,filter,contains){
   // Take the difference between one array and a number of other arrays.
    // Only the elements present in just the first array will remain.
    var difference  = funcs.restArguments(function(array, rest) {
      rest = flatten(rest, true, true);
      return filter(array, function(value){
        return !contains(rest, value);
      });
    });

    return arrays.difference = difference;
	
});
define('skylark-langx-arrays/find',[
  "./arrays"
],function(arrays){
    var _find = Array.prototype.find;

    function find(array,func) {
      return _find.call(array,func);
    }

    return arrays.find = find;
});
define('skylark-langx-arrays/first',[
  "./arrays"
],function(arrays){
    function first(items,n) {
      if (n) {
          return items.slice(0,n);
      } else {
          return items[0];
      }
    }

    return arrays.first = first;
});
define('skylark-langx-arrays/grep',[
  "skylark-langx-objects",
  "./arrays"
],function(objects,arrays){
    function grep(array, callback) {
        var out = [];

        objects.each(array, function(i, item) {
            if (callback(item, i)) {
                out.push(item);
            }
        });

        return out;
    }

    return arrays.grep = grep;
});
define('skylark-langx-arrays/indexof',[
  "./arrays"
],function(arrays){

    function indexOf(array,item) {
      return array.indexOf(item);
    }

    return arrays.indexOf = indexOf;
});
define('skylark-langx-arrays/last',[
  "./arrays"
],function(arrays){
    // Get the last element of an array. 
    function last(arr) {
        return arr[arr.length - 1];     
    }

    return arrays.last = last;
});
define('skylark-langx-arrays/make-array',[
	"skylark-langx-types",
 	"./arrays"
],function(types,arrays){
    function makeArray(obj, offset, startWith) {
       if (types.isArrayLike(obj) ) {
        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));
      }

      // array of single index
      return [ obj ];             
    }

	return arrays.makeArray = makeArray;	
});
define('skylark-langx-arrays/map',[
	"skylark-langx-types",
  	"./arrays",
  	"./flatten"
],function(types,arrays,flatten){
    function map(elements, callback) {
        var value, values = [],
            i, key
        if (types.isArrayLike(elements))
            for (i = 0; i < elements.length; i++) {
                value = callback.call(elements[i], elements[i], i);
                if (value != null) values.push(value)
            }
        else
            for (key in elements) {
                value = callback.call(elements[key], elements[key], key);
                if (value != null) values.push(value)
            }
        return flatten(values)
    }

    return arrays.map = map;
});
define('skylark-langx-arrays/merge',[
  "./arrays"
],function(arrays){

    function merge( first, second ) {
      var l = second.length,
          i = first.length,
          j = 0;

      if ( typeof l === "number" ) {
        for ( ; j < l; j++ ) {
          first[ i++ ] = second[ j ];
        }
      } else {
        while ( second[j] !== undefined ) {
          first[ i++ ] = second[ j++ ];
        }
      }

      first.length = i;

      return first;
    }

    return arrays.merge = merge;
	
});
define('skylark-langx-arrays/pull-at',[
  "skylark-langx-types",
  "skylark-langx-objects",
  "./arrays"
],function(types,objects,arrays){

	/**
	 * Removes elements from `array` corresponding to `indexes` and returns an
	 * array of removed elements.
	 *
	 * **Note:** Unlike `at`, this method mutates `array`.
	 *
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	 * @returns {Array} Returns the new array of removed elements.
	 * @see pull, pullAll, pullAllBy, pullAllWith, remove, reject
	 * @example
	 *
	 * const array = ['a', 'b', 'c', 'd']
	 * const pulled = pullAt(array, [1, 3])
	 *
	 * console.log(array)
	 * // => ['a', 'c']
	 *
	 * console.log(pulled)
	 * // => ['b', 'd']
	 */
	function pullAt(array, ...indexes) {
	  const length = array == null ? 0 : array.length
	  const result = objects.baseAt(array, indexes)

	  indexes.sort(function(a, b) {
  		return a - b;
	  });

	  for (let i= indexes.length-1;i>=0;i--) {
	  	array.slice(indexes[i],1);
	  }

	  return result
	}

	return arrays.pullAt = pullAt;
});

define('skylark-langx-arrays/reduce',[
  "./arrays"
],function(arrays){

    function reduce(array,callback,initialValue) {
        return Array.prototype.reduce.call(array,callback,initialValue);
    }

    return arrays.reduce = reduce;	
});
define('skylark-langx-arrays/uniq',[
  "./arrays",
  "./filter"
],function(arrays,filter){

    function uniq(array) {
        return filter.call(array, function(item, idx) {
            return array.indexOf(item) == idx;
        })
    }
	
	return arrays.uniq = uniq;
});
define('skylark-langx-arrays/without',[
	"skylark-langx-funcs",
  "./arrays",
  "./difference"
],function(funcs,arrays,difference){

    // Return a version of the array that does not contain the specified value(s).
    var without = funcs.restArguments(function(array, otherArrays) {
      return difference(array, otherArrays);
    });

    return arrays.without = without;
});
define('skylark-langx-arrays/main',[
	"./arrays",
	"./base-find-index",
	"./base-indexof",
	"./compact",
	"./contains",
	"./difference",
	"./filter",
	"./find",
	"./first",
	"./flatten",
	"./grep",
	"./in-array",
	"./indexof",
	"./last",
	"./make-array",
	"./map",
	"./merge",
	"./pull-at",
	"./reduce",
	"./uniq",
	"./without"
],function(arrays){
	return arrays;
});
define('skylark-langx-arrays', ['skylark-langx-arrays/main'], function (main) { return main; });

define('skylark-langx/arrays',[
	"skylark-langx-arrays"
],function(arrays){
  return arrays;
});
define('skylark-langx-constructs/constructs',[
  "skylark-langx-ns"
],function(skylark){

    return skylark.attach("langx.constructs",{});
});
define('skylark-langx-constructs/inherit',[
	"./constructs"
],function(constructs){

    function inherit(ctor,base) {
        ///var f = function() {};
        ///f.prototype = base.prototype;
        ///
        ///ctor.prototype = new f();

	    if ((typeof base !== "function") && base) {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    ctor.prototype = Object.create(base && base.prototype, {
	      constructor: {
	        value: ctor,
	        writable: true,
	        configurable: true
	      }
	    });

	    if (base) {
	    	//tor.__proto__ = base;
	    	Object.setPrototypeOf(ctor, base);
	    } 
    }

    return constructs.inherit = inherit
});
define('skylark-langx-constructs/klass',[
  "skylark-langx-ns",
  "skylark-langx-types",
  "skylark-langx-objects",
  "skylark-langx-arrays",
  "./constructs",
  "./inherit"
],function(skylark,types,objects,arrays,constructs,inherit){
    var uniq = arrays.uniq,
        has = objects.has,
        mixin = objects.mixin,
        isArray = types.isArray,
        isDefined = types.isDefined;

/* for reference 
 function klass(props,parent) {
    var ctor = function(){
        this._construct();
    };
    ctor.prototype = props;
    if (parent) {
        ctor._proto_ = parent;
        props.__proto__ = parent.prototype;
    }
    return ctor;
}

// Type some JavaScript code here.
let animal = klass({
  _construct(){
      this.name = this.name + ",hi";
  },
    
  name: "Animal",
  eat() {         // [[HomeObject]] == animal
    alert(`${this.name} eats.`);
  }
    
    
});


let rabbit = klass({
  name: "Rabbit",
  _construct(){
      super._construct();
  },
  eat() {         // [[HomeObject]] == rabbit
    super.eat();
  }
},animal);

let longEar = klass({
  name: "Long Ear",
  eat() {         // [[HomeObject]] == longEar
    super.eat();
  }
},rabbit);
*/
    


    var f1 = function() {
        function extendClass(ctor, props, options) {
            // Copy the properties to the prototype of the class.
            var proto = ctor.prototype,
                _super = ctor.superclass.prototype,
                noOverrided = options && options.noOverrided,
                overrides = options && options.overrides || {};

            for (var name in props) {
                if (name === "constructor") {
                    continue;
                }

                // Check if we're overwriting an existing function
                var prop = props[name];
                if (typeof props[name] == "function") {
                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == "function" ?
                          (function(name, fn, superFn) {
                            return function() {
                                var tmp = this.overrided;

                                // Add a new ._super() method that is the same method
                                // but on the super-class
                                this.overrided = superFn;

                                // The method only need to be bound temporarily, so we
                                // remove it when we're done executing
                                var ret = fn.apply(this, arguments);

                                this.overrided = tmp;

                                return ret;
                            };
                        })(name, prop, _super[name]) :
                        prop;
                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {
                    Object.defineProperty(proto,name,prop);
                } else {
                    proto[name] = prop;
                }
            }
            return ctor;
        }

        function serialMixins(ctor,mixins) {
            var result = [];

            mixins.forEach(function(mixin){
                if (has(mixin,"__mixins__")) {
                     throw new Error("nested mixins");
                }
                var clss = [];
                while (mixin) {
                    clss.unshift(mixin);
                    mixin = mixin.superclass;
                }
                result = result.concat(clss);
            });

            result = uniq(result);

            result = result.filter(function(mixin){
                var cls = ctor;
                while (cls) {
                    if (mixin === cls) {
                        return false;
                    }
                    if (has(cls,"__mixins__")) {
                        var clsMixines = cls["__mixins__"];
                        for (var i=0; i<clsMixines.length;i++) {
                            if (clsMixines[i]===mixin) {
                                return false;
                            }
                        }
                    }
                    cls = cls.superclass;
                }
                return true;
            });

            if (result.length>0) {
                return result;
            } else {
                return false;
            }
        }

        function mergeMixins(ctor,mixins) {
            var newCtor =ctor;
            for (var i=0;i<mixins.length;i++) {
                var xtor = new Function();

                inherit(xtor,newCtor)
                //xtor.prototype = Object.create(newCtor.prototype);
                //xtor.__proto__ = newCtor;
                xtor.superclass = null;
                mixin(xtor.prototype,mixins[i].prototype);
                xtor.prototype.__mixin__ = mixins[i];
                newCtor = xtor;
            }

            return newCtor;
        }

        function _constructor ()  {
            if (this._construct) {
                return this._construct.apply(this, arguments);
            } else  if (this.init) {
                return this.init.apply(this, arguments);
            }
        }

        return function createClass(props, parent, mixins,options) {
            if (isArray(parent)) {
                options = mixins;
                mixins = parent;
                parent = null;
            }
            parent = parent || Object;

            if (isDefined(mixins) && !isArray(mixins)) {
                options = mixins;
                mixins = false;
            }

            var innerParent = parent;

            if (mixins) {
                mixins = serialMixins(innerParent,mixins);
            }

            if (mixins) {
                innerParent = mergeMixins(innerParent,mixins);
            }

            var klassName = props.klassName || "",
                ctor = new Function(
                    "return function " + klassName + "() {" +
                    "var inst = this," +
                    " ctor = arguments.callee;" +
                    "if (!(inst instanceof ctor)) {" +
                    "inst = Object.create(ctor.prototype);" +
                    "}" +
                    "return ctor._constructor.apply(inst, arguments) || inst;" + 
                    "}"
                )();


            // Populate our constructed prototype object
            ///ctor.prototype = Object.create(innerParent.prototype);

            // Enforce the constructor to be what we expect
            ///ctor.prototype.constructor = ctor;
  
            // And make this class extendable
            ///ctor.__proto__ = innerParent;

            inherit(ctor,innerParent);

            ctor.superclass = parent;

            if (!ctor._constructor) {
                ctor._constructor = _constructor;
            } 

            if (mixins) {
                ctor.__mixins__ = mixins;
            }

            if (!ctor.partial) {
                ctor.partial = function(props, options) {
                    return extendClass(this, props, options);
                };
            }
            if (!ctor.inherit) {
                ctor.inherit = function(props, mixins,options) {
                    return createClass(props, this, mixins,options);
                };
            }

            ctor.partial(props, options);

            return ctor;
        };
    }

    var createClass = f1();

    return constructs.klass = createClass;
});
define('skylark-langx-constructs/main',[
	"./constructs",
	"./inherit",
	"./klass"
],function(constructs){
	return constructs;
});
define('skylark-langx-constructs', ['skylark-langx-constructs/main'], function (main) { return main; });

define('skylark-langx-klass/klass',[
  "skylark-langx-ns",
  "skylark-langx-constructs"
],function(skylark,constructs){

    return skylark.attach("langx.klass",constructs.klass);
});
define('skylark-langx-klass/main',[
	"./klass"
],function(klass){
	return klass;
});
define('skylark-langx-klass', ['skylark-langx-klass/main'], function (main) { return main; });

define('skylark-langx/klass',[
    "skylark-langx-klass"
],function(klass){
    return klass;
});
define('skylark-langx/array-store',[
    "./klass"
],function(klass){
    var SimpleQueryEngine = function(query, options){
        // summary:
        //      Simple query engine that matches using filter functions, named filter
        //      functions or objects by name-value on a query object hash
        //
        // description:
        //      The SimpleQueryEngine provides a way of getting a QueryResults through
        //      the use of a simple object hash as a filter.  The hash will be used to
        //      match properties on data objects with the corresponding value given. In
        //      other words, only exact matches will be returned.
        //
        //      This function can be used as a template for more complex query engines;
        //      for example, an engine can be created that accepts an object hash that
        //      contains filtering functions, or a string that gets evaluated, etc.
        //
        //      When creating a new dojo.store, simply set the store's queryEngine
        //      field as a reference to this function.
        //
        // query: Object
        //      An object hash with fields that may match fields of items in the store.
        //      Values in the hash will be compared by normal == operator, but regular expressions
        //      or any object that provides a test() method are also supported and can be
        //      used to match strings by more complex expressions
        //      (and then the regex's or object's test() method will be used to match values).
        //
        // options: dojo/store/api/Store.QueryOptions?
        //      An object that contains optional information such as sort, start, and count.
        //
        // returns: Function
        //      A function that caches the passed query under the field "matches".  See any
        //      of the "query" methods on dojo.stores.
        //
        // example:
        //      Define a store with a reference to this engine, and set up a query method.
        //
        //  |   var myStore = function(options){
        //  |       //  ...more properties here
        //  |       this.queryEngine = SimpleQueryEngine;
        //  |       //  define our query method
        //  |       this.query = function(query, options){
        //  |           return QueryResults(this.queryEngine(query, options)(this.data));
        //  |       };
        //  |   };

        // create our matching query function
        switch(typeof query){
            default:
                throw new Error("Can not query with a " + typeof query);
            case "object": case "undefined":
                var queryObject = query;
                query = function(object){
                    for(var key in queryObject){
                        var required = queryObject[key];
                        if(required && required.test){
                            // an object can provide a test method, which makes it work with regex
                            if(!required.test(object[key], object)){
                                return false;
                            }
                        }else if(required != object[key]){
                            return false;
                        }
                    }
                    return true;
                };
                break;
            case "string":
                // named query
                if(!this[query]){
                    throw new Error("No filter function " + query + " was found in store");
                }
                query = this[query];
                // fall through
            case "function":
                // fall through
        }
        
        function filter(arr, callback, thisObject){
            // summary:
            //      Returns a new Array with those items from arr that match the
            //      condition implemented by callback.
            // arr: Array
            //      the array to iterate over.
            // callback: Function|String
            //      a function that is invoked with three arguments (item,
            //      index, array). The return of this function is expected to
            //      be a boolean which determines whether the passed-in item
            //      will be included in the returned array.
            // thisObject: Object?
            //      may be used to scope the call to callback
            // returns: Array
            // description:
            //      This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when
            //      run over sparse arrays, this implementation passes the "holes" in the sparse array to
            //      the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.
            //      For more details, see:
            //      https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
            // example:
            //  | // returns [2, 3, 4]
            //  | array.filter([1, 2, 3, 4], function(item){ return item>1; });

            // TODO: do we need "Ctr" here like in map()?
            var i = 0, l = arr && arr.length || 0, out = [], value;
            if(l && typeof arr == "string") arr = arr.split("");
            if(typeof callback == "string") callback = cache[callback] || buildFn(callback);
            if(thisObject){
                for(; i < l; ++i){
                    value = arr[i];
                    if(callback.call(thisObject, value, i, arr)){
                        out.push(value);
                    }
                }
            }else{
                for(; i < l; ++i){
                    value = arr[i];
                    if(callback(value, i, arr)){
                        out.push(value);
                    }
                }
            }
            return out; // Array
        }

        function execute(array){
            // execute the whole query, first we filter
            var results = filter(array, query);
            // next we sort
            var sortSet = options && options.sort;
            if(sortSet){
                results.sort(typeof sortSet == "function" ? sortSet : function(a, b){
                    for(var sort, i=0; sort = sortSet[i]; i++){
                        var aValue = a[sort.attribute];
                        var bValue = b[sort.attribute];
                        // valueOf enables proper comparison of dates
                        aValue = aValue != null ? aValue.valueOf() : aValue;
                        bValue = bValue != null ? bValue.valueOf() : bValue;
                        if (aValue != bValue){
                            // modified by lwf 2016/07/09
                            //return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;
                            return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;
                        }
                    }
                    return 0;
                });
            }
            // now we paginate
            if(options && (options.start || options.count)){
                var total = results.length;
                results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));
                results.total = total;
            }
            return results;
        }
        execute.matches = query;
        return execute;
    };

    var QueryResults = function(results){
        // summary:
        //      A function that wraps the results of a store query with additional
        //      methods.
        // description:
        //      QueryResults is a basic wrapper that allows for array-like iteration
        //      over any kind of returned data from a query.  While the simplest store
        //      will return a plain array of data, other stores may return deferreds or
        //      promises; this wrapper makes sure that *all* results can be treated
        //      the same.
        //
        //      Additional methods include `forEach`, `filter` and `map`.
        // results: Array|dojo/promise/Promise
        //      The result set as an array, or a promise for an array.
        // returns:
        //      An array-like object that can be used for iterating over.
        // example:
        //      Query a store and iterate over the results.
        //
        //  |   store.query({ prime: true }).forEach(function(item){
        //  |       //  do something
        //  |   });

        if(!results){
            return results;
        }

        var isPromise = !!results.then;
        // if it is a promise it may be frozen
        if(isPromise){
            results = Object.delegate(results);
        }
        function addIterativeMethod(method){
            // Always add the iterative methods so a QueryResults is
            // returned whether the environment is ES3 or ES5
            results[method] = function(){
                var args = arguments;
                var result = Deferred.when(results, function(results){
                    //Array.prototype.unshift.call(args, results);
                    return QueryResults(Array.prototype[method].apply(results, args));
                });
                // forEach should only return the result of when()
                // when we're wrapping a promise
                if(method !== "forEach" || isPromise){
                    return result;
                }
            };
        }

        addIterativeMethod("forEach");
        addIterativeMethod("filter");
        addIterativeMethod("map");
        if(results.total == null){
            results.total = Deferred.when(results, function(results){
                return results.length;
            });
        }
        return results; // Object
    };

    var ArrayStore = klass({
        "klassName": "ArrayStore",

        "queryEngine": SimpleQueryEngine,
        
        "idProperty": "id",


        get: function(id){
            // summary:
            //      Retrieves an object by its identity
            // id: Number
            //      The identity to use to lookup the object
            // returns: Object
            //      The object in the store that matches the given id.
            return this.data[this.index[id]];
        },

        getIdentity: function(object){
            return object[this.idProperty];
        },

        put: function(object, options){
            var data = this.data,
                index = this.index,
                idProperty = this.idProperty;
            var id = object[idProperty] = (options && "id" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();
            if(id in index){
                // object exists
                if(options && options.overwrite === false){
                    throw new Error("Object already exists");
                }
                // replace the entry in data
                data[index[id]] = object;
            }else{
                // add the new object
                index[id] = data.push(object) - 1;
            }
            return id;
        },

        add: function(object, options){
            (options = options || {}).overwrite = false;
            // call put with overwrite being false
            return this.put(object, options);
        },

        remove: function(id){
            // summary:
            //      Deletes an object by its identity
            // id: Number
            //      The identity to use to delete the object
            // returns: Boolean
            //      Returns true if an object was removed, falsy (undefined) if no object matched the id
            var index = this.index;
            var data = this.data;
            if(id in index){
                data.splice(index[id], 1);
                // now we have to reindex
                this.setData(data);
                return true;
            }
        },
        query: function(query, options){
            // summary:
            //      Queries the store for objects.
            // query: Object
            //      The query to use for retrieving objects from the store.
            // options: dojo/store/api/Store.QueryOptions?
            //      The optional arguments to apply to the resultset.
            // returns: dojo/store/api/Store.QueryResults
            //      The results of the query, extended with iterative methods.
            //
            // example:
            //      Given the following store:
            //
            //  |   var store = new Memory({
            //  |       data: [
            //  |           {id: 1, name: "one", prime: false },
            //  |           {id: 2, name: "two", even: true, prime: true},
            //  |           {id: 3, name: "three", prime: true},
            //  |           {id: 4, name: "four", even: true, prime: false},
            //  |           {id: 5, name: "five", prime: true}
            //  |       ]
            //  |   });
            //
            //  ...find all items where "prime" is true:
            //
            //  |   var results = store.query({ prime: true });
            //
            //  ...or find all items where "even" is true:
            //
            //  |   var results = store.query({ even: true });
            return QueryResults(this.queryEngine(query, options)(this.data));
        },

        setData: function(data){
            // summary:
            //      Sets the given data as the source for this store, and indexes it
            // data: Object[]
            //      An array of objects to use as the source of data.
            if(data.items){
                // just for convenience with the data format IFRS expects
                this.idProperty = data.identifier || this.idProperty;
                data = this.data = data.items;
            }else{
                this.data = data;
            }
            this.index = {};
            for(var i = 0, l = data.length; i < l; i++){
                this.index[data[i][this.idProperty]] = i;
            }
        },

        init: function(options) {
            for(var i in options){
                this[i] = options[i];
            }
            this.setData(this.data || []);
        }

    });

	return ArrayStore;
});
define('skylark-langx-aspect/aspect',[
    "skylark-langx-ns"
],function(skylark){

  var undefined, nextId = 0;
    function advise(dispatcher, type, advice, receiveArguments){
        var previous = dispatcher[type];
        var around = type == "around";
        var signal;
        if(around){
            var advised = advice(function(){
                return previous.advice(this, arguments);
            });
            signal = {
                remove: function(){
                    if(advised){
                        advised = dispatcher = advice = null;
                    }
                },
                advice: function(target, args){
                    return advised ?
                        advised.apply(target, args) :  // called the advised function
                        previous.advice(target, args); // cancelled, skip to next one
                }
            };
        }else{
            // create the remove handler
            signal = {
                remove: function(){
                    if(signal.advice){
                        var previous = signal.previous;
                        var next = signal.next;
                        if(!next && !previous){
                            delete dispatcher[type];
                        }else{
                            if(previous){
                                previous.next = next;
                            }else{
                                dispatcher[type] = next;
                            }
                            if(next){
                                next.previous = previous;
                            }
                        }

                        // remove the advice to signal that this signal has been removed
                        dispatcher = advice = signal.advice = null;
                    }
                },
                id: nextId++,
                advice: advice,
                receiveArguments: receiveArguments
            };
        }
        if(previous && !around){
            if(type == "after"){
                // add the listener to the end of the list
                // note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug
                while(previous.next && (previous = previous.next)){}
                previous.next = signal;
                signal.previous = previous;
            }else if(type == "before"){
                // add to beginning
                dispatcher[type] = signal;
                signal.next = previous;
                previous.previous = signal;
            }
        }else{
            // around or first one just replaces
            dispatcher[type] = signal;
        }
        return signal;
    }
    function aspect(type){
        return function(target, methodName, advice, receiveArguments){
            var existing = target[methodName], dispatcher;
            if(!existing || existing.target != target){
                // no dispatcher in place
                target[methodName] = dispatcher = function(){
                    var executionId = nextId;
                    // before advice
                    var args = arguments;
                    var before = dispatcher.before;
                    while(before){
                        args = before.advice.apply(this, args) || args;
                        before = before.next;
                    }
                    // around advice
                    if(dispatcher.around){
                        var results = dispatcher.around.advice(this, args);
                    }
                    // after advice
                    var after = dispatcher.after;
                    while(after && after.id < executionId){
                        if(after.receiveArguments){
                            var newResults = after.advice.apply(this, args);
                            // change the return value only if a new value was returned
                            results = newResults === undefined ? results : newResults;
                        }else{
                            results = after.advice.call(this, results, args);
                        }
                        after = after.next;
                    }
                    return results;
                };
                if(existing){
                    dispatcher.around = {advice: function(target, args){
                        return existing.apply(target, args);
                    }};
                }
                dispatcher.target = target;
            }
            var results = advise((dispatcher || existing), type, advice, receiveArguments);
            advice = null;
            return results;
        };
    }

    return skylark.attach("langx.aspect",{
        after: aspect("after"),
 
        around: aspect("around"),
        
        before: aspect("before")
    });
});
define('skylark-langx-aspect/main',[
	"./aspect"
],function(aspect){
	return aspect;
});
define('skylark-langx-aspect', ['skylark-langx-aspect/main'], function (main) { return main; });

define('skylark-langx/aspect',[
    "skylark-langx-aspect"
],function(aspect){
  return aspect;
});
define('skylark-langx-async/deferred',[
    "skylark-langx-arrays",
	"skylark-langx-funcs",
    "skylark-langx-objects"
],function(arrays,funcs,objects){
    "use strict";

    var slice = Array.prototype.slice,
        proxy = funcs.proxy,
        makeArray = arrays.makeArray,
        result = objects.result,
        mixin = objects.mixin;

    mixin(Promise.prototype,{
        always: function(handler) {
            //this.done(handler);
            //this.fail(handler);
            this.then(handler,handler);
            return this;
        },
        done : function() {
            for (var i = 0;i<arguments.length;i++) {
                this.then(arguments[i]);
            }
            return this;
        },
        fail : function(handler) { 
            //return mixin(Promise.prototype.catch.call(this,handler),added);
            //return this.then(null,handler);
            this.catch(handler);
            return this;
         }
    });


    var Deferred = function() {
        var self = this,
            p = this.promise = makePromise2(new Promise(function(resolve, reject) {
                self._resolve = resolve;
                self._reject = reject;
            }));

        //wrapPromise(p,self);

        //this[PGLISTENERS] = [];
        //this[PGNOTIFIES] = [];

        //this.resolve = Deferred.prototype.resolve.bind(this);
        //this.reject = Deferred.prototype.reject.bind(this);
        //this.progress = Deferred.prototype.progress.bind(this);

    };

   
    function makePromise2(promise) {
        // Don't modify any promise that has been already modified.
        if (promise.isResolved) return promise;

        // Set initial state
        var isPending = true;
        var isRejected = false;
        var isResolved = false;

        // Observe the promise, saving the fulfillment in a closure scope.
        var result = promise.then(
            function(v) {
                isResolved = true;
                isPending = false;
                return v; 
            }, 
            function(e) {
                isRejected = true;
                isPending = false;
                throw e; 
            }
        );

        result.isResolved = function() { return isResolved; };
        result.isPending = function() { return isPending; };
        result.isRejected = function() { return isRejected; };

        result.state = function() {
            if (isResolved) {
                return 'resolved';
            }
            if (isRejected) {
                return 'rejected';
            }
            return 'pending';
        };

        var notified = [],
            listeners = [];

          
        result.then = function(onResolved,onRejected,onProgress) {
            if (onProgress) {
                this.progress(onProgress);
            }
            return makePromise2(Promise.prototype.then.call(this,
                onResolved && function(args) {
                    if (args && args.__ctx__ !== undefined) {
                        return onResolved.apply(args.__ctx__,args);
                    } else {
                        return onResolved(args);
                    }
                },
                onRejected && function(args){
                    if (args && args.__ctx__ !== undefined) {
                        return onRejected.apply(args.__ctx__,args);
                    } else {
                        return onRejected(args);
                    }
                }
            ));
        };

        result.progress = function(handler) {
            notified.forEach(function (value) {
                handler(value);
            });
            listeners.push(handler);
            return this;
        };

        result.pipe = result.then;

        result.notify = function(value) {
            try {
                notified.push(value);

                return listeners.forEach(function (listener) {
                    return listener(value);
                });
            } catch (error) {
            this.reject(error);
            }
            return this;
        };

        return result;
    }

 
    Deferred.prototype.resolve = function(value) {
        var args = slice.call(arguments);
        return this.resolveWith(null,args);
    };

    Deferred.prototype.resolveWith = function(context,args) {
        args = args ? makeArray(args) : []; 
        args.__ctx__ = context;
        this._resolve(args);
        this._resolved = true;
        return this;
    };

    Deferred.prototype.notify = function(value) {
        var p = result(this,"promise");
        p.notify(value);
        return this;
    };

    Deferred.prototype.reject = function(reason) {
        var args = slice.call(arguments);
        return this.rejectWith(null,args);
    };

    Deferred.prototype.rejectWith = function(context,args) {
        args = args ? makeArray(args) : []; 
        args.__ctx__ = context;
        this._reject(args);
        this._rejected = true;
        return this;
    };

    Deferred.prototype.isResolved = function() {
        var p = result(this,"promise");
        return p.isResolved();
    };

    Deferred.prototype.isRejected = function() {
        var p = result(this,"promise");
        return p.isRejected();
    };

    Deferred.prototype.state = function() {
        var p = result(this,"promise");
        return p.state();
    };

    Deferred.prototype.then = function(callback, errback, progback) {
        var p = result(this,"promise");
        return p.then(callback, errback, progback);
    };

    Deferred.prototype.progress = function(progback){
        var p = result(this,"promise");
        return p.progress(progback);
    };
   
    Deferred.prototype.catch = function(errback) {
        var p = result(this,"promise");
        return p.catch(errback);
    };


    Deferred.prototype.always  = function() {
        var p = result(this,"promise");
        p.always.apply(p,arguments);
        return this;
    };

    Deferred.prototype.done  = function() {
        var p = result(this,"promise");
        p.done.apply(p,arguments);
        return this;
    };

    Deferred.prototype.fail = function(errback) {
        var p = result(this,"promise");
        p.fail(errback);
        return this;
    };


    Deferred.all = function(array) {
        //return wrapPromise(Promise.all(array));
        var d = new Deferred();
        Promise.all(array).then(d.resolve.bind(d),d.reject.bind(d));
        return result(d,"promise");
    };

    Deferred.first = function(array) {
        return makePromise2(Promise.race(array));
    };


    Deferred.when = function(valueOrPromise, callback, errback, progback) {
        var receivedPromise = valueOrPromise && typeof valueOrPromise.then === "function";
        var nativePromise = receivedPromise && valueOrPromise instanceof Promise;

        if (!receivedPromise) {
            if (arguments.length > 1) {
                return callback ? callback(valueOrPromise) : valueOrPromise;
            } else {
                return new Deferred().resolve(valueOrPromise);
            }
        } else if (!nativePromise) {
            var deferred = new Deferred(valueOrPromise.cancel);
            valueOrPromise.then(proxy(deferred.resolve,deferred), proxy(deferred.reject,deferred), deferred.notify);
            valueOrPromise = deferred.promise;
        }

        if (callback || errback || progback) {
            return valueOrPromise.then(callback, errback, progback);
        }
        return valueOrPromise;
    };

    Deferred.reject = function(err) {
        var d = new Deferred();
        d.reject(err);
        return d.promise;
    };

    Deferred.resolve = function(data) {
        var d = new Deferred();
        d.resolve.apply(d,arguments);
        return d.promise;
    };

    Deferred.immediate = Deferred.resolve;


    Deferred.promise = function(callback) {
        var d = new Deferred();

        callback(d.resolve.bind(d),d.reject.bind(d),d.progress.bind(d));

        return d.promise;
    };

    return Deferred;
});
define('skylark-langx-async/async',[
    "skylark-langx-ns",
    "skylark-langx-objects",
    "./deferred"
],function(skylark,objects,Deferred){
    var each = objects.each;
    
    var async = {
        Deferred : Deferred,

        parallel : function(arr,args,ctx) {
            var rets = [];
            ctx = ctx || null;
            args = args || [];

            each(arr,function(i,func){
                rets.push(func.apply(ctx,args));
            });

            return Deferred.all(rets);
        },

        series : function(arr,args,ctx) {
            var rets = [],
                d = new Deferred(),
                p = d.promise;

            ctx = ctx || null;
            args = args || [];

            d.resolve();
            each(arr,function(i,func){
                p = p.then(function(){
                    return func.apply(ctx,args);
                });
                rets.push(p);
            });

            return Deferred.all(rets);
        },

        waterful : function(arr,args,ctx) {
            var d = new Deferred(),
                p = d.promise;

            ctx = ctx || null;
            args = args || [];

            d.resolveWith(ctx,args);

            each(arr,function(i,func){
                p = p.then(func);
            });
            return p;
        }
    };

	return skylark.attach("langx.async",async);	
});
define('skylark-langx-async/main',[
	"./async"
],function(async){
	return async;
});
define('skylark-langx-async', ['skylark-langx-async/main'], function (main) { return main; });

define('skylark-langx/async',[
    "skylark-langx-async"
],function(async){
    return async;
});
define('skylark-langx-binary/binary',[
  "skylark-langx-ns",
],function(skylark){
	"use strict";


	/**
	 * Create arraybuffer from binary string
	 *
	 * @method fromBinaryString
	 * @param {String} str
	 * @return {Arraybuffer} data
	 */
	function fromBinaryString(str) {
		var length = str.length;
		var arraybuffer = new ArrayBuffer(length);
		var view = new Uint8Array(arraybuffer);

		for(var i = 0; i < length; i++)
		{
			view[i] = str.charCodeAt(i);
		}

		return arraybuffer;
	}

	/**
	 * Create arraybuffer from base64 string
	 *
	 * @method fromBase64
	 * @param {String} base64
	 * @return {Arraybuffer} data
	 */
	function fromBase64(str){
		var encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
		var length = str.length / 4 * 3;
		var arraybuffer = new ArrayBuffer(length);
		var view = new Uint8Array(arraybuffer);

		var a, b, c, d;

		for(var i = 0, j = 0; i < length; i += 3)
		{
			a = encoding.indexOf(str.charAt(j++));
			b = encoding.indexOf(str.charAt(j++));
			c = encoding.indexOf(str.charAt(j++));
			d = encoding.indexOf(str.charAt(j++));

			view[i] = (a << 2) | (b >> 4);
			if(c !== 64)
			{
				view[i+1] = ((b & 15) << 4) | (c >> 2);
			}
			if(d !== 64)
			{
				view[i+2] = ((c & 3) << 6) | d;
			}
		}

		return arraybuffer;
	}

	/**
	 * Create arraybuffer from Nodejs buffer
	 *
	 * @method fromBuffer
	 * @param {Buffer} buffer
	 * @return {Arraybuffer} data
	 */
	function fromBuffer(buffer)	{
		var array = new ArrayBuffer(buffer.length);
		var view = new Uint8Array(array);

		for(var i = 0; i < buffer.length; i++)
		{
			view[i] = buffer[i];
		}

		return array;

		//Faster but the results is failing the "instanceof ArrayBuffer" test
		//return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);
	}

    function readInt8(data, offset) {
        return data[offset] << 24 >> 24;
    }
    function readUint16(data, offset) {
        return data[offset] << 8 | data[offset + 1];
    }
    function readUint32(data, offset) {
        return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
    }


	return skylark.attach("langx.binary",{
		fromBase64,
		fromBinaryString,
		fromBuffer,
		readInt8,
		readUint16,
		readUint32
	});
});
define('skylark-langx-binary/main',[
	"./binary"
],function(binary){
	return binary;
});
define('skylark-langx-binary', ['skylark-langx-binary/main'], function (main) { return main; });

define('skylark-langx/binary',[
	"skylark-langx-binary"
],function(binary){
  return binary;
});
define('skylark-langx/constructs',[
	"skylark-langx-constructs"
],function(constructs){
  return constructs;
});
define('skylark-langx-datetimes/datetimes',[
    "skylark-langx-ns"
],function(skylark){
     function parseMilliSeconds(str) {

        var strs = str.split(' ');
        var number = parseInt(strs[0]);

        if (isNaN(number)){
            return 0;
        }

        var min = 60000 * 60;

        switch (strs[1].trim().replace(/\./g, '')) {
            case 'minutes':
            case 'minute':
            case 'min':
            case 'mm':
            case 'm':
                return 60000 * number;
            case 'hours':
            case 'hour':
            case 'HH':
            case 'hh':
            case 'h':
            case 'H':
                return min * number;
            case 'seconds':
            case 'second':
            case 'sec':
            case 'ss':
            case 's':
                return 1000 * number;
            case 'days':
            case 'day':
            case 'DD':
            case 'dd':
            case 'd':
                return (min * 24) * number;
            case 'months':
            case 'month':
            case 'MM':
            case 'M':
                return (min * 24 * 28) * number;
            case 'weeks':
            case 'week':
            case 'W':
            case 'w':
                return (min * 24 * 7) * number;
            case 'years':
            case 'year':
            case 'yyyy':
            case 'yy':
            case 'y':
                return (min * 24 * 365) * number;
            default:
                return 0;
        }
    };
	
	return skylark.attach("langx.datetimes",{
		parseMilliSeconds
	});
});
define('skylark-langx-datetimes/to_date',[
	"skylark-langx-types",
    "./datetimes"
],function(types,datetimes){

//original :pdf.js-2.7.750/src/display/display_utils.js

  /**
class PDFDateString {
   * Convert a PDF date string to a JavaScript `Date` object.
   *
   * The PDF date string format is described in section 7.9.4 of the official
   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth
   * edition) Adobe describes the same format including a trailing apostrophe.
   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain
   * them. We ignore all apostrophes as they are not necessary for date parsing.
   *
   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time
   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'
   * parts of the date string).
   *
   * @param {string} input
   * @returns {Date|null}
   *
  static toDateObject(input) {
   **/


	let pdfDateStringRegex;

	function toDate(input) {
    if (!input || !types.isString(input)) {
      return null;
    }

    // Lazily initialize the regular expression.
    if (!pdfDateStringRegex) {
      pdfDateStringRegex = new RegExp(
        "^D:" + // Prefix (required)
          "(\\d{4})" + // Year (required)
          "(\\d{2})?" + // Month (optional)
          "(\\d{2})?" + // Day (optional)
          "(\\d{2})?" + // Hour (optional)
          "(\\d{2})?" + // Minute (optional)
          "(\\d{2})?" + // Second (optional)
          "([Z|+|-])?" + // Universal time relation (optional)
          "(\\d{2})?" + // Offset hour (optional)
          "'?" + // Splitting apostrophe (optional)
          "(\\d{2})?" + // Offset minute (optional)
          "'?" // Trailing apostrophe (optional)
      );
    }

    // Optional fields that don't satisfy the requirements from the regular
    // expression (such as incorrect digit counts or numbers that are out of
    // range) will fall back the defaults from the specification.
    const matches = pdfDateStringRegex.exec(input);
    if (!matches) {
      return null;
    }

    // JavaScript's `Date` object expects the month to be between 0 and 11
    // instead of 1 and 12, so we have to correct for that.
    const year = parseInt(matches[1], 10);
    let month = parseInt(matches[2], 10);
    month = month >= 1 && month <= 12 ? month - 1 : 0;
    let day = parseInt(matches[3], 10);
    day = day >= 1 && day <= 31 ? day : 1;
    let hour = parseInt(matches[4], 10);
    hour = hour >= 0 && hour <= 23 ? hour : 0;
    let minute = parseInt(matches[5], 10);
    minute = minute >= 0 && minute <= 59 ? minute : 0;
    let second = parseInt(matches[6], 10);
    second = second >= 0 && second <= 59 ? second : 0;
    const universalTimeRelation = matches[7] || "Z";
    let offsetHour = parseInt(matches[8], 10);
    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
    let offsetMinute = parseInt(matches[9], 10) || 0;
    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;

    // Universal time relation 'Z' means that the local time is equal to the
    // universal time, whereas the relations '+'/'-' indicate that the local
    // time is later respectively earlier than the universal time. Every date
    // is normalized to universal time.
    if (universalTimeRelation === "-") {
      hour += offsetHour;
      minute += offsetMinute;
    } else if (universalTimeRelation === "+") {
      hour -= offsetHour;
      minute -= offsetMinute;
    }

    return new Date(Date.UTC(year, month, day, hour, minute, second));
  }

  return datetimes.toDate = toDate;

});
define('skylark-langx-datetimes/main',[
	"./datetimes",
	"./to_date"
],function(datetimes){
	return datetimes;
});
define('skylark-langx-datetimes', ['skylark-langx-datetimes/main'], function (main) { return main; });

define('skylark-langx/datetimes',[
    "skylark-langx-datetimes"
],function(datetimes){
    return datetimes;
});
define('skylark-langx/deferred',[
    "skylark-langx-async"
],function(async){
    return async.Deferred;
});
define('skylark-langx-events/events',[
	"skylark-langx-ns"
],function(skylark){
	return skylark.attach("langx.events",{});
});
define('skylark-langx-hoster/hoster',[
    "skylark-langx-ns"
],function(skylark){
	// The javascript host environment, brower and nodejs are supported.
	var hoster = {
		"isBrowser" : true, // default
		"isNode" : null,
		"global" : this,
		"browser" : null,
		"node" : null
	};

	if (typeof process == "object" && process.versions && process.versions.node && process.versions.v8) {
		hoster.isNode = true;
		hoster.isBrowser = false;
	}

	hoster.global = (function(){
		if (typeof global !== 'undefined' && typeof global !== 'function') {
			// global spec defines a reference to the global object called 'global'
			// https://github.com/tc39/proposal-global
			// `global` is also defined in NodeJS
			return global;
		} else if (typeof window !== 'undefined') {
			// window is defined in browsers
			return window;
		}
		else if (typeof self !== 'undefined') {
			// self is defined in WebWorkers
			return self;
		}
		return this;
	})();

	var _document = null;

	Object.defineProperty(hoster,"document",function(){
		if (!_document) {
			var w = typeof window === 'undefined' ? require('html-element') : window;
			_document = w.document;
		}

		return _document;
	});

	if (hoster.global.CustomEvent === undefined) {
		hoster.global.CustomEvent = function(type,props) {
			this.type = type;
			this.props = props;
		};
	}

	if (hoster.isBrowser) {
	    function uaMatch( ua ) {
		    ua = ua.toLowerCase();

			//IE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie|iemobile)/i),
			//Edge = !!navigator.userAgent.match(/Edge/i),
			//FireFox = !!navigator.userAgent.match(/firefox/i),
			//Safari = !!(navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && !navigator.userAgent.match(/android/i)),
			//IOS = !!(navigator.userAgent.match(/iP(ad|od|hone)/i)),

		    var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		      /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		      /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		      /(msie) ([\w.]+)/.exec( ua ) ||
		      ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		      [];

		    return {
		      browser: match[ 1 ] || '',
		      version: match[ 2 ] || '0'
		    };
	  	};

	    var matched = uaMatch( navigator.userAgent );

	    var browser = hoster.browser = {};

	    if ( matched.browser ) {
	      browser[ matched.browser ] = true;
	      browser.version = matched.version;
	    }

	    // Chrome is Webkit, but Webkit is also Safari.
	    if ( browser.chrome ) {
	      browser.webkit = true;
	    } else if ( browser.webkit ) {
	      browser.safari = true;
	    }
	}

	hoster.detects = {};

	return  skylark.attach("langx.hoster",hoster);
});
define('skylark-langx-hoster/detects/mobile',[
    "../hoster"
],function(hoster){
    //refer : https://github.com/kaimallea/isMobile

    var appleIphone = /iPhone/i;
    var appleIpod = /iPod/i;
    var appleTablet = /iPad/i;
    var appleUniversal = /\biOS-universal(?:.+)Mac\b/i;
    var androidPhone = /\bAndroid(?:.+)Mobile\b/i;
    var androidTablet = /Android/i;
    var amazonPhone = /(?:SD4930UR|\bSilk(?:.+)Mobile\b)/i;
    var amazonTablet = /Silk/i;
    var windowsPhone = /Windows Phone/i;
    var windowsTablet = /\bWindows(?:.+)ARM\b/i;
    var otherBlackBerry = /BlackBerry/i;
    var otherBlackBerry10 = /BB10/i;
    var otherOpera = /Opera Mini/i;
    var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
    var otherFirefox = /Mobile(?:.+)Firefox\b/i;
    var isAppleTabletOnIos13 = function (navigator) {
        return (typeof navigator !== 'undefined' &&
            navigator.platform === 'MacIntel' &&
            typeof navigator.maxTouchPoints === 'number' &&
            navigator.maxTouchPoints > 1 &&
            typeof MSStream === 'undefined');
    };
    function createMatch(userAgent) {
        return function (regex) { return regex.test(userAgent); };
    }
    
    function detectMobile(param) {
        var nav = {
            userAgent: '',
            platform: '',
            maxTouchPoints: 0
        };
        if (!param && typeof navigator !== 'undefined') {
            nav = {
                userAgent: navigator.userAgent,
                platform: navigator.platform,
                maxTouchPoints: navigator.maxTouchPoints || 0
            };
        }
        else if (typeof param === 'string') {
            nav.userAgent = param;
        }
        else if (param && param.userAgent) {
            nav = {
                userAgent: param.userAgent,
                platform: param.platform,
                maxTouchPoints: param.maxTouchPoints || 0
            };
        }
        var userAgent = nav.userAgent;
        var tmp = userAgent.split('[FBAN');
        if (typeof tmp[1] !== 'undefined') {
            userAgent = tmp[0];
        }
        tmp = userAgent.split('Twitter');
        if (typeof tmp[1] !== 'undefined') {
            userAgent = tmp[0];
        }
        var match = createMatch(userAgent);
        var result = {
            apple: {
                phone: match(appleIphone) && !match(windowsPhone),
                ipod: match(appleIpod),
                tablet: !match(appleIphone) &&
                    (match(appleTablet) || isAppleTabletOnIos13(nav)) &&
                    !match(windowsPhone),
                universal: match(appleUniversal),
                device: (match(appleIphone) ||
                    match(appleIpod) ||
                    match(appleTablet) ||
                    match(appleUniversal) ||
                    isAppleTabletOnIos13(nav)) &&
                    !match(windowsPhone)
            },
            amazon: {
                phone: match(amazonPhone),
                tablet: !match(amazonPhone) && match(amazonTablet),
                device: match(amazonPhone) || match(amazonTablet)
            },
            android: {
                phone: (!match(windowsPhone) && match(amazonPhone)) ||
                    (!match(windowsPhone) && match(androidPhone)),
                tablet: !match(windowsPhone) &&
                    !match(amazonPhone) &&
                    !match(androidPhone) &&
                    (match(amazonTablet) || match(androidTablet)),
                device: (!match(windowsPhone) &&
                    (match(amazonPhone) ||
                        match(amazonTablet) ||
                        match(androidPhone) ||
                        match(androidTablet))) ||
                    match(/\bokhttp\b/i)
            },
            windows: {
                phone: match(windowsPhone),
                tablet: match(windowsTablet),
                device: match(windowsPhone) || match(windowsTablet)
            },
            other: {
                blackberry: match(otherBlackBerry),
                blackberry10: match(otherBlackBerry10),
                opera: match(otherOpera),
                firefox: match(otherFirefox),
                chrome: match(otherChrome),
                device: match(otherBlackBerry) ||
                    match(otherBlackBerry10) ||
                    match(otherOpera) ||
                    match(otherFirefox) ||
                    match(otherChrome)
            },
            any: false,
            phone: false,
            tablet: false
        };
        result.any =
            result.apple.device ||
                result.android.device ||
                result.windows.device ||
                result.other.device;
        result.phone =
            result.apple.phone || result.android.phone || result.windows.phone;
        result.tablet =
            result.apple.tablet || result.android.tablet || result.windows.tablet;
        return result;
    }

    return hoster.detects.mobile = detectMobile;
});

define('skylark-langx-hoster/is-mobile',[
    "./hoster",
    "./detects/mobile"
],function(hoster,detectMobile){
    if (hoster.isMobile == undefined) {
        hoster.isMobile = detectMobile();
    }

    return hoster.isMobile;
});

define('skylark-langx-hoster/main',[
	"./hoster",
	"./is-mobile"
],function(hoster){
	return hoster;
});
define('skylark-langx-hoster', ['skylark-langx-hoster/main'], function (main) { return main; });

define('skylark-langx-events/event',[
  "skylark-langx-objects",
  "skylark-langx-funcs",
  "skylark-langx-klass",
  "skylark-langx-hoster",
    "./events"
],function(objects,funcs,klass,events){
    var eventMethods = {
        preventDefault: "isDefaultPrevented",
        stopImmediatePropagation: "isImmediatePropagationStopped",
        stopPropagation: "isPropagationStopped"
     };
        

    function compatible(event, source) {
        if (source || !event.isDefaultPrevented) {
            if (!source) {
                source = event;
            }

            objects.each(eventMethods, function(name, predicate) {
                var sourceMethod = source[name];
                event[name] = function() {
                    this[predicate] = funcs.returnTrue;
                    return sourceMethod && sourceMethod.apply(source, arguments);
                }
                event[predicate] = funcs.returnFalse;
            });
        }
        return event;
    }


    /*
    var Event = klass({
        _construct : function(type,props) {
            CustomEvent.call(this,type.props);
            objects.safeMixin(this, props);
            compatible(this);
        }
    },CustomEvent);
    */

    class Event extends CustomEvent {
        constructor(type,props) {
            super(type,props);
            objects.safeMixin(this, props);
            compatible(this);
        } 
    }


    Event.compatible = compatible;

    return events.Event = Event;
    
});
define('skylark-langx-events/listener',[
  "skylark-langx-types",
  "skylark-langx-objects",
  "skylark-langx-arrays",
  "skylark-langx-klass",
  "./events",
  "./event"
],function(types,objects,arrays,klass,events,Event){
    var slice = Array.prototype.slice,
        compact = arrays.compact,
        isDefined = types.isDefined,
        isUndefined = types.isUndefined,
        isPlainObject = types.isPlainObject,
        isFunction = types.isFunction,
        isBoolean = types.isBoolean,
        isString = types.isString,
        isEmptyObject = types.isEmptyObject,
        mixin = objects.mixin,
        safeMixin = objects.safeMixin;


    var Listener = klass({

        listenTo: function(obj, event, selector,callback, /*used internally*/ one) {
            if (!obj) {
                return this;
            }

            if (types.isPlainObject(event)){
                //listenTo(obj,callbacks,one)
                if (types.isBoolean(selector)) {
                    one = selector;
                    selector = null;
                } else if (types.isBoolean(callback)) {
                    one = callback;
                }
                var callbacks = event;
                for (var name in callbacks) {

                    var match = name.match( /^([\w:-]*)\s*(.*)$/ );
                    var name1 = match[ 1 ];
                    var selector1 = match[ 2 ] || selector;

                    if (selector1) {
                        this.listenTo(obj,name1,selector1,callbacks[name],one);
                    } else {
                        this.listenTo(obj,name1,callbacks[name],one);
                    }

                }
                return this;
            }

            if (isBoolean(callback)) {
                one = callback;
                callback = selector;
                selector = null;
            } else if (isBoolean(selector)) {
                one = selector;
                callback = selector = null;
            } else if (isUndefined(callback)){
                one = false;
                callback = selector;
                selector = null;
            }



            if (!callback) {
                callback = "handleEvent";
            }
            
            // Bind callbacks on obj,
            if (isString(callback)) {
                callback = this[callback];
            }

            if (one) {
                if (selector) {
                    obj.one(event, selector,callback, this);
                } else {
                    obj.one(event, callback, this);
                }
            } else {
                 if (selector) {
                    obj.on(event, selector, callback, this);
                } else {
                    obj.on(event, callback, this);
                }
            }

            //keep track of them on listening.
            var listeningTo = this._listeningTo || (this._listeningTo = []),
                listening;

            for (var i = 0; i < listeningTo.length; i++) {
                if (listeningTo[i].obj == obj) {
                    listening = listeningTo[i];
                    break;
                }
            }
            if (!listening) {
                listeningTo.push(
                    listening = {
                        obj: obj,
                        events: {}
                    }
                );
            }
            var listeningEvents = listening.events,
                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];
            if (listeningEvent.indexOf(callback) == -1) {
                listeningEvent.push(callback);
            }

            return this;
        },

        listenToOnce: function(obj, event,selector, callback) {
            return this.listenTo(obj, event,selector, callback, 1);
        },

        unlistenTo: function(obj, event, callback) {
            var listeningTo = this._listeningTo;
            if (!listeningTo) {
                return this;
            }

            if (isString(callback)) {
                callback = this[callback];
            }

            for (var i = 0; i < listeningTo.length; i++) {
                var listening = listeningTo[i];

                if (obj && obj != listening.obj) {
                    continue;
                }

                var listeningEvents = listening.events;

                for (var eventName in listeningEvents) {
                    if (event && event != eventName) {
                        continue;
                    }

                    var listeningEvent = listeningEvents[eventName];

                    if (!listeningEvent) { 
                        continue;
                    }

                    for (var j = 0; j < listeningEvent.length; j++) {
                        if (!callback || callback == listeningEvent[i]) {
                            listening.obj.off(eventName, listeningEvent[i], this);
                            listeningEvent[i] = null;
                        }
                    }

                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);

                    if (isEmptyObject(listeningEvent)) {
                        listeningEvents[eventName] = null;
                    }

                }

                if (isEmptyObject(listeningEvents)) {
                    listeningTo[i] = null;
                }
            }

            listeningTo = this._listeningTo = compact(listeningTo);
            if (isEmptyObject(listeningTo)) {
                this._listeningTo = null;
            }

            return this;
        }
    });

    return events.Listener = Listener;

});
define('skylark-langx-events/emitter',[
  "skylark-langx-types",
  "skylark-langx-objects",
  "skylark-langx-arrays",
  "skylark-langx-klass",
  "./events",
  "./event",
  "./listener"
],function(types,objects,arrays,klass,events,Event,Listener){
    var slice = Array.prototype.slice,
        compact = arrays.compact,
        isDefined = types.isDefined,
        isPlainObject = types.isPlainObject,
        isFunction = types.isFunction,
        isString = types.isString,
        isEmptyObject = types.isEmptyObject,
        mixin = objects.mixin,
        safeMixin = objects.safeMixin;

    function parse(event) {
        var segs = ("" + event).split(".");
        return {
            name: segs[0],
            ns: segs.slice(1).join(" ")
        };
    }

    
    var queues  = new Map();


    var Emitter = Listener.inherit({
        _prepareArgs : function(e,args) {
            if (isDefined(args)) {
                args = [e].concat(args);
            } else {
                args = [e];
            }
            return args;
        },

        on: function(events, selector, data, callback, ctx, /*used internally*/ one) {
            var self = this,
                _hub = this._hub || (this._hub = {});

            if (isPlainObject(events)) {
                ctx = callback;
                each(events, function(type, fn) {
                    self.on(type, selector, data, fn, ctx, one);
                });
                return this;
            }

            if (!isString(selector) && !isFunction(callback)) {
                ctx = callback;
                callback = data;
                data = selector;
                selector = undefined;
            }

            if (isFunction(data)) {
                ctx = callback;
                callback = data;
                data = null;
            }

            if (!callback ) {
                throw new Error("No callback function");
            } else if (!isFunction(callback)) {
                throw new Error("The callback  is not afunction");
            }

            if (isString(events)) {
                events = events.split(/\s/)
            }

            events.forEach(function(event) {
                var parsed = parse(event),
                    name = parsed.name,
                    ns = parsed.ns;

                (_hub[name] || (_hub[name] = [])).push({
                    fn: callback,
                    selector: selector,
                    data: data,
                    ctx: ctx,
                    ns : ns,
                    one: one
                });
            });

            return this;
        },

        one: function(events, selector, data, callback, ctx) {
            return this.on(events, selector, data, callback, ctx, 1);
        },

        emit: function(e /*,argument list*/ ) {
            if (!this._hub) {
                return this;
            }

            var self = this;

            if (isString(e)) {
                e = new Event(e); //new CustomEvent(e);
            }

            Object.defineProperty(e,"target",{
                value : this
            });

            var args = slice.call(arguments, 1);

            args = this._prepareArgs(e,args);

            [e.type || e.name, "all"].forEach(function(eventName) {
                var parsed = parse(eventName),
                    name = parsed.name,
                    ns = parsed.ns;

                var listeners = self._hub[name];
                if (!listeners) {
                    return;
                }

                var len = listeners.length,
                    reCompact = false;

                for (var i = 0; i < len; i++) {
                    if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {
                        return this;
                    }
                    var listener = listeners[i];
                    if (ns && (!listener.ns ||  !listener.ns.startsWith(ns))) {
                        continue;
                    }

                    if (listener.data) {
                        e.data = mixin({}, listener.data, e.data);
                    }
                    if (args.length == 2 && isPlainObject(args[1])) {
                        e.data = e.data || {};
                        mixin(e.data,args[1]);
                    }

                    listener.fn.apply(listener.ctx, args);
                    if (listener.one) {
                        listeners[i] = null;
                        reCompact = true;
                    }
                }

                if (reCompact) {
                    self._hub[eventName] = compact(listeners);
                }

            });
            return this;
        },

        queueEmit : function (event) {
            const type = event.type || event;
            let map = queues.get(this);
            if (!map) {
                map = new Map();
                queues.set(this, map);
            }
            const oldTimeout = map.get(type);
            map.delete(type);
            window.clearTimeout(oldTimeout);
            const timeout = window.setTimeout(() => {
                if (map.size === 0) {
                    map = null;
                    queues.delete(this);
                }
                this.trigger(event);
            }, 0);
            map.set(type, timeout);
        },

        listened: function(event) {
            var evtArr = ((this._hub || (this._events = {}))[event] || []);
            return evtArr.length > 0;
        },

        off: function(events, callback) {
            if (!events) {
              this._hub = null;
              return;
            }
            var _hub = this._hub || (this._hub = {});
            if (isString(events)) {
                events = events.split(/\s/)
            }

            events.forEach(function(event) {
                var parsed = parse(event),
                    name = parsed.name,
                    ns = parsed.ns;

                var evts = _hub[name];

                if (evts) {
                    var liveEvents = [];

                    if (callback || ns) {
                        for (var i = 0, len = evts.length; i < len; i++) {
                            
                            if (callback && evts[i].fn !== callback && evts[i].fn._ !== callback) {
                                liveEvents.push(evts[i]);
                                continue;
                            } 

                            if (ns && (!evts[i].ns || evts[i].ns.indexOf(ns)!=0)) {
                                liveEvents.push(evts[i]);
                                continue;
                            }
                        }
                    }

                    if (liveEvents.length) {
                        _hub[name] = liveEvents;
                    } else {
                        delete _hub[name];
                    }

                }
            });

            return this;
        },

        trigger  : function() {
            return this.emit.apply(this,arguments);
        },

        queueTrigger : function (event) {
            return this.queueEmit.apply(this,arguments);
        }

    });


    return events.Emitter = Emitter;

});
define('skylark-langx-events/create-event',[
	"./events",
	"./event"
],function(events,Event){
    function createEvent(type,props) {
        //var e = new CustomEvent(type,props);
        //return safeMixin(e, props);
        return new Event(type,props);
    };

    return events.createEvent = createEvent;	
});
define('skylark-langx-events/main',[
	"./events",
	"./event",
	"./listener",
	"./emitter",
	"./create-event"
],function(events){
	return events;
});
define('skylark-langx-events', ['skylark-langx-events/main'], function (main) { return main; });

define('skylark-langx/emitter',[
    "skylark-langx-events"
],function(events){
    return events.Emitter;
});
define('skylark-langx/evented',[
    "./emitter"
],function(Emitter){
    return Emitter;
});
define('skylark-langx/events',[
	"skylark-langx-events"
],function(events){
	return events;
});
define('skylark-langx/funcs',[
    "skylark-langx-funcs"
],function(funcs){
    return funcs;
});
define('skylark-langx-globals/globals',[
	"skylark-langx-ns"
],function(ns) {
	var globals = (function(){
		if (typeof global !== 'undefined' && typeof global !== 'function') {
			// global spec defines a reference to the global object called 'global'
			// https://github.com/tc39/proposal-global
			// `global` is also defined in NodeJS
			return global;
		} else if (typeof window !== 'undefined') {
			// window is defined in browsers
			return window;
		}
		else if (typeof self !== 'undefined') {
			// self is defined in WebWorkers
			return self;
		}
		return this;
	})();

	return ns.attach("langx.globals",globals);

});
define('skylark-langx-globals/console',[
	"./globals"
], function(globals) {
	return globals.console = console;
});
define('skylark-langx-globals/document',[
	"./globals"
], function(globals) {
	var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {};

	var doccy;

	if (typeof document !== 'undefined') {
	    doccy = document;
	} else {
        try {
            doccy  = require('min-document');
        } catch(e) {
            console.warn("min-document is not finded!",e);
        }
   	}


	return globals.document = doccy;
});




define('skylark-langx-globals/window',[
	"./globals"
], function(globals) {

	var win = (function() {
		if (typeof window !== "undefined") {
		    return window;
		} else {
		    return {};
		}
	})();

	return globals.window = win;
});

define('skylark-langx-globals/main',[
	"./globals",
	"./console",
	"./document",
	"./window"
],function(globals){

	return globals;
});
define('skylark-langx-globals', ['skylark-langx-globals/main'], function (main) { return main; });

define('skylark-langx/globals',[
    "skylark-langx-globals"
],function(globals){
    return globals;
});
define('skylark-langx/hoster',[
	"skylark-langx-hoster"
],function(hoster){
	return hoster;
});
define('skylark-langx-maths/maths',[
    "skylark-langx-ns",
    "skylark-langx-types"
],function(skylark,types){


	var _lut = [];

	for ( var i = 0; i < 256; i ++ ) {

		_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

	}

	var maths = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,



		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * maths.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * maths.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		ceilPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

		},

		floorPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

		},

		setQuaternionFromProperEuler: function ( q, a, b, c, order ) {

			// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

			// rotations are applied to the axes in the order specified by 'order'
			// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
			// angles are in radians

			var cos = Math.cos;
			var sin = Math.sin;

			var c2 = cos( b / 2 );
			var s2 = sin( b / 2 );

			var c13 = cos( ( a + c ) / 2 );
			var s13 = sin( ( a + c ) / 2 );

			var c1_3 = cos( ( a - c ) / 2 );
			var s1_3 = sin( ( a - c ) / 2 );

			var c3_1 = cos( ( c - a ) / 2 );
			var s3_1 = sin( ( c - a ) / 2 );

			if ( order === 'XYX' ) {

				q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );

			} else if ( order === 'YZY' ) {

				q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );

			} else if ( order === 'ZXZ' ) {

				q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );

			} else if ( order === 'XZX' ) {

				q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );

			} else if ( order === 'YXY' ) {

				q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );

			} else if ( order === 'ZYZ' ) {

				q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );

			} else {

				console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );

			}

		}

	};



	return  skylark.attach("langx.maths",maths);
});
define('skylark-langx-maths/main',[
	"./maths"
],function(maths){
	return maths;
});
define('skylark-langx-maths', ['skylark-langx-maths/main'], function (main) { return main; });

define('skylark-langx/maths',[
    "skylark-langx-maths"
],function(maths){
    return maths;
});
define('skylark-langx-numerics/numerics',[
    "skylark-langx-ns",
    "skylark-langx-types"
],function(skylark,types){

	return  skylark.attach("langx.numerics",{
		toFinite : types.toFinite,
		toNumber : types.toNumber,
		toInteger : types.toInteger
	});
});
define('skylark-langx-numerics/maths',[
    "skylark-langx-ns",
    "skylark-langx-types",
    "./numerics"
],function(skylark,types,numerics){


	var _lut = [];

	for ( var i = 0; i < 256; i ++ ) {

		_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

	}

	var maths = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,



		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) return 0;
			if ( x >= max ) return 1;

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * maths.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * maths.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		ceilPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

		},

		floorPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

		},

		setQuaternionFromProperEuler: function ( q, a, b, c, order ) {

			// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

			// rotations are applied to the axes in the order specified by 'order'
			// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
			// angles are in radians

			var cos = Math.cos;
			var sin = Math.sin;

			var c2 = cos( b / 2 );
			var s2 = sin( b / 2 );

			var c13 = cos( ( a + c ) / 2 );
			var s13 = sin( ( a + c ) / 2 );

			var c1_3 = cos( ( a - c ) / 2 );
			var s1_3 = sin( ( a - c ) / 2 );

			var c3_1 = cos( ( c - a ) / 2 );
			var s3_1 = sin( ( c - a ) / 2 );

			if ( order === 'XYX' ) {

				q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );

			} else if ( order === 'YZY' ) {

				q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );

			} else if ( order === 'ZXZ' ) {

				q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );

			} else if ( order === 'XZX' ) {

				q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );

			} else if ( order === 'YXY' ) {

				q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );

			} else if ( order === 'ZYZ' ) {

				q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );

			} else {

				console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );

			}

		}

	};


	return  numerics.maths = maths;
});
define('skylark-langx-numerics/quaternion',[
	"skylark-langx-klass",
	"./numerics",
	"./maths"
] ,function(klass,numerics,maths) {

	var Quaternion = klass({
		"klassName" : "Quaternion",

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this._onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this._onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this._onChangeCallback();

			}

		},

		w: {

			get: function () {

				return this._w;

			},

			set: function ( value ) {

				this._w = value;
				this._onChangeCallback();

			}

		},

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this._onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this._onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( ! ( euler && euler.isEuler ) ) {

				throw new Error( 'mathsQuaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var cos = Math.cos;
			var sin = Math.sin;

			var c1 = cos( x / 2 );
			var c2 = cos( y / 2 );
			var c3 = cos( z / 2 );

			var s1 = sin( x / 2 );
			var s2 = sin( y / 2 );
			var s3 = sin( z / 2 );

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) this._onChangeCallback();

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this._onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this._onChangeCallback();

			return this;

		},

		setFromUnitVectors: function ( vFrom, vTo ) {

			// assumes direction vectors vFrom and vTo are normalized

			var EPS = 0.000001;

			var r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					this._x = - vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;

				} else {

					this._x = 0;
					this._y = - vFrom.z;
					this._z = vFrom.y;
					this._w = r;

				}

			} else {

				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;

			}

			return this.normalize();

		},

		angleTo: function ( q ) {

			return 2 * Math.acos( Math.abs( maths.clamp( this.dot( q ), - 1, 1 ) ) );

		},

		rotateTowards: function ( q, step ) {

			var angle = this.angleTo( q );

			if ( angle === 0 ) return this;

			var t = Math.min( 1, step / angle );

			this.slerp( q, t );

			return this;

		},

		inverse: function () {

			// quaternion is assumed to have unit length

			return this.conjugate();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this._onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this._onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'mathsQuaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this._onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if ( sqrSinHalfTheta <= Number.EPSILON ) {

				var s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;

				this.normalize();
				this._onChangeCallback();

				return this;

			}

			var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this._onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this._onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		fromBufferAttribute: function ( attribute, index ) {

			this._x = attribute.getX( index );
			this._y = attribute.getY( index );
			this._z = attribute.getZ( index );
			this._w = attribute.getW( index );

			return this;

		},

		_onChange: function ( callback ) {

			this._onChangeCallback = callback;

			return this;

		},

		_onChangeCallback: function () {},


		"_construct" : function ( x, y, z, w ) {

			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._w = ( w !== undefined ) ? w : 1;

		}


	})


	Object.assign( Quaternion, {

		slerp: function ( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	Object.assign( Quaternion.prototype, {


	} );


	return numerics.Quaternion = Quaternion;


});
define('skylark-langx-numerics/vector3',[
	"skylark-langx-klass",
	"./numerics",
	"./maths",
	"./quaternion"
] ,function(
	klass,
	numerics,
	maths,
	Quaternion
) {

	var _quaternion = new Quaternion();

	var Vector3 = klass({
		"klassName" : "Vector3",

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'mathsVector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'mathsVector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'mathsVector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'mathsVector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

		},

		applyAxisAngle: function ( axis, angle ) {

			return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyNormalMatrix: function ( m ) {

			return this.applyMatrix3( m ).normalize();

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix = qw * x + qy * z - qz * y;
			var iy = qw * y + qz * x - qx * z;
			var iz = qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function ( camera ) {

			return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

		},

		unproject: function ( camera ) {

			return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

		},

		transformDirection: function ( m ) {

			// input: mathsMatrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		// TODO lengthSquared?

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'mathsVector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			return this.crossVectors( this, v );

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( v ) {

			var denominator = v.lengthSq();

			if ( denominator === 0 ) return this.set( 0, 0, 0 );

			var scalar = v.dot( this ) / denominator;

			return this.copy( v ).multiplyScalar( scalar );

		},

		projectOnPlane: function ( planeNormal ) {

			_vector.copy( this ).projectOnVector( planeNormal );

			return this.sub( _vector );

		},

		reflect: function ( normal ) {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		},

		angleTo: function ( v ) {

			var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

			if ( denominator === 0 ) return Math.PI / 2;

			var theta = this.dot( v ) / denominator;

			// clamp, to handle numerical problems

			return Math.acos( MathUtils.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function ( s ) {

			return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

		},

		setFromSphericalCoords: function ( radius, phi, theta ) {

			var sinPhiRadius = Math.sin( phi ) * radius;

			this.x = sinPhiRadius * Math.sin( theta );
			this.y = Math.cos( phi ) * radius;
			this.z = sinPhiRadius * Math.cos( theta );

			return this;

		},

		setFromCylindrical: function ( c ) {

			return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

		},

		setFromCylindricalCoords: function ( radius, theta, y ) {

			this.x = radius * Math.sin( theta );
			this.y = y;
			this.z = radius * Math.cos( theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			var e = m.elements;

			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];

			return this;

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			return this.fromArray( m.elements, index * 4 );

		},

		setFromMatrix3Column: function ( m, index ) {

			return this.fromArray( m.elements, index * 3 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'mathsVector3: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );

			return this;

		},


		"_construct" : function ( x, y, z ) {

			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;

		}

	});

	var _vector = new Vector3();


	return numerics.Vector3 = Vector3;
});
define('skylark-langx-numerics/matrix4',[
	"skylark-langx-klass",
	"./numerics",
	"./vector3"
] ,function(
	klass,
	numerics,
	Vector3
) {

	var _v1 = new Vector3();
	var _zero = new Vector3( 0, 0, 0 );
	var _one = new Vector3( 1, 1, 1 );
	var _x = new Vector3();
	var _y = new Vector3();
	var _z = new Vector3();

	var Matrix4 = klass({
		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements, me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);

			return this;

		},

		extractRotation: function ( m ) {

			// this method does not support reflection matrices

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;
			te[ 3 ] = 0;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;
			te[ 7 ] = 0;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;
			te[ 11 ] = 0;

			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'mathsMatrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// bottom row
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// last column
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			return this.compose( _zero, q, _one );

		},

		lookAt: function ( eye, target, up ) {

			var te = this.elements;

			_z.subVectors( eye, target );

			if ( _z.lengthSq() === 0 ) {

				// eye and target are in the same position

				_z.z = 1;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

			if ( _x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					_z.x += 0.0001;

				} else {

					_z.z += 0.0001;

				}

				_z.normalize();
				_x.crossVectors( up, _z );

			}

			_x.normalize();
			_y.crossVectors( _z, _x );

			te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
			te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
			te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

			return this;

		},

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'mathsMatrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		setPosition: function ( x, y, z ) {

			var te = this.elements;

			if ( x.isVector3 ) {

				te[ 12 ] = x.x;
				te[ 13 ] = x.y;
				te[ 14 ] = x.z;

			} else {

				te[ 12 ] = x;
				te[ 13 ] = y;
				te[ 14 ] = z;

			}

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			if ( throwOnDegenerate !== undefined ) {

				console.warn( "mathsMatrix4: .getInverse() can no longer be configured to throw on degenerate." );

			}

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeShear: function ( x, y, z ) {

			this.set(

				1, y, z, 0,
				x, 1, z, 0,
				x, y, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			var te = this.elements;

			var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
			var x2 = x + x,	y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			var sx = scale.x, sy = scale.y, sz = scale.z;

			te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
			te[ 1 ] = ( xy + wz ) * sx;
			te[ 2 ] = ( xz - wy ) * sx;
			te[ 3 ] = 0;

			te[ 4 ] = ( xy - wz ) * sy;
			te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
			te[ 6 ] = ( yz + wx ) * sy;
			te[ 7 ] = 0;

			te[ 8 ] = ( xz + wy ) * sz;
			te[ 9 ] = ( yz - wx ) * sz;
			te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
			te[ 11 ] = 0;

			te[ 12 ] = position.x;
			te[ 13 ] = position.y;
			te[ 14 ] = position.z;
			te[ 15 ] = 1;

			return this;

		},

		decompose: function ( position, quaternion, scale ) {

			var te = this.elements;

			var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) sx = - sx;

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			_m1.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			_m1.elements[ 0 ] *= invSX;
			_m1.elements[ 1 ] *= invSX;
			_m1.elements[ 2 ] *= invSX;

			_m1.elements[ 4 ] *= invSY;
			_m1.elements[ 5 ] *= invSY;
			_m1.elements[ 6 ] *= invSY;

			_m1.elements[ 8 ] *= invSZ;
			_m1.elements[ 9 ] *= invSZ;
			_m1.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( _m1 );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		},

		makePerspective: function ( left, right, top, bottom, near, far ) {

			if ( far === undefined ) {

				console.warn( 'mathsMatrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

			}

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for ( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		},

		"_construct" : function() {

			this.elements = [

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			];

			if ( arguments.length > 0 ) {

				console.error( 'mathsMatrix4: the constructor no longer reads arguments. use .set() instead.' );

			}

		}

	});

	var _m1 = new Matrix4();

	return numerics.Matrix4 =  Matrix4 ;

});
define('skylark-langx-numerics/euler',[
	"skylark-langx-klass",
	"./numerics",
	"./maths",
	"./quaternion",
	"./vector3",
	"./matrix4"
] ,function(
	klass,
	numerics,
	maths,
	Quaternion,
	Vector3,
	Matrix4
) {

	var _matrix = new Matrix4();
	var _quaternion = new Quaternion();

	var Euler = klass({
		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this._onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this._onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this._onChangeCallback();

			}

		},

		order: {

			get: function () {

				return this._order;

			},

			set: function ( value ) {

				this._order = value;
				this._onChangeCallback();

			}

		},

		isEuler: true,

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this._onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this._onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = maths.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.9999999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.9999999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'skylark-nunustudio/editor/gui/element/RendererCanvasEuler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) this._onChangeCallback();

			return this;

		},

		setFromQuaternion: function ( q, order, update ) {

			_matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( _matrix, order, update );

		},

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function ( newOrder ) {

			// WARNING: this discards revolution information -bhouston

			_quaternion.setFromEuler( this );

			return this.setFromQuaternion( _quaternion, newOrder );

		},

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this._onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		_onChange: function ( callback ) {

			this._onChangeCallback = callback;

			return this;

		},

		_onChangeCallback: function () {},


		"_construct" : function ( x, y, z, order ) {

			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._order = order || Euler.DefaultOrder;

		}


	});


	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';


	return numerics.Euler = Euler ;
});

define('skylark-langx-numerics/matrix3',[
	"skylark-langx-klass",
	"./numerics"
] ,function(klass,numerics) {

	var Matrix3 = klass({
		"klassName" : "Matrix3",

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrix3Column( this, 0 );
			yAxis.setFromMatrix3Column( this, 1 );
			zAxis.setFromMatrix3Column( this, 2 );

			return this;

		},

		setFromMatrix4: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		multiply: function ( m ) {

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

			var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( throwOnDegenerate !== undefined ) {

				console.warn( "mathsMatrix3: .getInverse() can no longer be configured to throw on degenerate." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

			var c = Math.cos( rotation );
			var s = Math.sin( rotation );

			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);

		},

		scale: function ( sx, sy ) {

			var te = this.elements;

			te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
			te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

			return this;

		},

		rotate: function ( theta ) {

			var c = Math.cos( theta );
			var s = Math.sin( theta );

			var te = this.elements;

			var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
			var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

			te[ 0 ] = c * a11 + s * a21;
			te[ 3 ] = c * a12 + s * a22;
			te[ 6 ] = c * a13 + s * a23;

			te[ 1 ] = - s * a11 + c * a21;
			te[ 4 ] = - s * a12 + c * a22;
			te[ 7 ] = - s * a13 + c * a23;

			return this;

		},

		translate: function ( tx, ty ) {

			var te = this.elements;

			te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
			te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 9; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			for ( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];

			return array;

		},


		"_construct" : function () {

			this.elements = [

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			];

			if ( arguments.length > 0 ) {

				console.error( 'Matrix3: the constructor no longer reads arguments. use .set() instead.' );

			}

		}

	});


	return numerics.Matrix3 = Matrix3;
});
define('skylark-langx-numerics/transform',[
	"skylark-langx-klass",	
    "./numerics",
], function(klass,numerics) {

    var Transform =  klass({
        "klassName": "Transform",
		"value": {
			get : function(){
				return this._.value;
			}
		}
	});

	return numerics.Transform =Transform;
});

define('skylark-langx-numerics/matrix-transform',[
    "./numerics",
	"./transform"
],function(numerics,Transform) {

    var MatrixTransform =  Transform.inherit({
        "klassName": "MatrixTransform",

		"value"	:	{
			get : function(){
				return this.matrix.clone();
			}
		},
		
		"matrix" : {
			get : function(){
				return this._.matrix;
			}
		},

		clone : /*ScaleTransform*/function() {
		},
		
		transform : /*Point*/function(/*Point*/point) {
		},
		
		//�w�肳�ꂽ���E�{�b�N�X��ϊ����A��������傤�Ǌi�[�ł���傫���̎����s���E�{�b�N�X��Ԃ��܂��B
		transformBounds : /*Rect*/function(/*Rect*/rect) {
		},		
		"_construct" : function(/*Martix*/matrix) {
            var _ = this._ = {};
			
			_.matrix = matrix;
		}
				
	});

	return numerics.MatrixTransform = MatrixTransform;
	
});	

define('skylark-langx-numerics/plane',[
	"skylark-langx-klass",
	"./numerics",
	"./matrix3",
	"./vector3"
] ,function(
	klass,
	numerics,
	Matrix3,
	Vector3
) {


	var _vector1 = new Vector3();
	var _vector2 = new Vector3();
	var _normalMatrix = new Matrix3();

	var Plane = klass({
		"klassName" : "Plane",

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );

			return this;

		},

		setFromCoplanarPoints: function ( a, b, c ) {

			var normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'mathsPlane: .projectPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

		},

		intersectLine: function ( line, target ) {

			if ( target === undefined ) {

				console.warn( 'mathsPlane: .intersectLine() target is now required' );
				target = new Vector3();

			}

			var direction = line.delta( _vector1 );

			var denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return target.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return target.copy( direction ).multiplyScalar( t ).add( line.start );

		},

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'mathsPlane: .coplanarPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function ( matrix, optionalNormalMatrix ) {

			var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

			var referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		},

		translate: function ( offset ) {

			this.constant -= offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		},


		"_construct" : function( normal, constant ) {

			// normal is assumed to be normalized

			this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
			this.constant = ( constant !== undefined ) ? constant : 0;

		}

	});


	return numerics.Plane = Plane;
});
define('skylark-langx-numerics/rotate-transform',[
    "./numerics",
	"./transform",
	"./matrix-transform"
],function(numerics,Transform,Matrix) {


    var RotateTransform = numerics.RotateTransform = Transform.inherit({
        "klassName": "RotateTransform",

        "value": {
            get: function() {
                return Matrix.rotateAt(this.angle, this.centerX, this.centerY);
            }
        },

        "angle": {
            get : function() {
                return this._.angle;
            }
        },
        // cy: Number
        //		The Y coordinate of the center of the circle, default value 0.
        "centerX": {
            get : function() {
                return this._.centerX;
            }
        },
        // r: Number
        //		The radius, default value 100.
        "centerY": {
            get : function() {
                return this._.centerY;
            }
        },

		clone : /*ScaleTransform*/function() {
		},
		
		transform : /*Point*/function(/*Point*/point) {
		},
		
		transformBounds : /*Rect*/function(/*Rect*/rect) {
		},
		
		"init" : function(/*Number*/angle,/*Number*/centerX,/*Number*/centerY) {
			var _ = this._ = {};
			_.angle = angle ? angle :0;
			_.centerX = centerX ? centerX :0;
			_.centerY = centerY ? centerY :0;
		}
	});

	return RotateTransform;
	
});	

define('skylark-langx-numerics/scale-transform',[
    "./numerics",
    "./transform",
    "./matrix-transform"
], function(numerics, Transform, Matrix) {

   var ScaleTransform =  Transform.inherit({
        "klassName": "ScaleTransform",

        "value": {
            get: function() {
                    return Matrix.scaleAt(this.scaleX, this.scaleY, this.centerX, this.centerY);
            }
        },

        "scaleX": {
            get : function() {
                return this._.scaleX;
            }
        },

        "scaleY": {
            get : function() {
                return this._.scaleY;
            }
        },

        // cy: Number
        //      The Y coordinate of the center of the circle, default value 0.
        "centerX": {
            get : function() {
                return this._.centerX;
            }
        },
        // r: Number
        //      The radius, default value 100.
        "centerY": {
            get : function() {
                return this._.centerY;
            }
        },

        clone: /*ScaleTransform*/ function() {},

        transform: /*Point*/ function( /*Point*/ point) {},

        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},

        "_construct": function( /*Number*/ scaleX, /*Number*/ scaleY, /*Number*/ centerX, /*Number*/ centerY) {
            var _ = this._ = {};

            _.scaleX = scaleX ? scaleX : 1;
            _.scaleY = scaleY ? scaleY : 1;
            _.centerX = centerX ? centerX : 0;
            _.centerY = centerY ? centerY : 0;
        }
    });

    return numerics.ScaleTransform = ScaleTransform;

});

define('skylark-langx-numerics/skew-transform',[
    "./numerics",
    "./transform",
    "./matrix-transform"
], function(numerics, Transform, Matrix) {

   var SkewTransform = Transform.inherit({
        "klassName": "SkewTransform",

        "value": {
            get: function() {
                    return Matrix.scaleAt(this.skewX, this.skewY);
            }
        },

        "skewX": {
            get : function() {
                return this._.skewX;
            }
        },

        "skewY": {
            get : function() {
                return this._.skewY;
            }
        },

        clone: /*SkewTransform*/ function() {},

        transform: /*Point*/ function( /*Point*/ point) {},

        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},

        "_construct": function( /*Number*/ skewX, /*Number*/ skewY) {
            var _ = this._ = {};

            _.skewX = skewX ? skewX : 0;
            _.skewY = skewY ? skewY : 0;
        }
    });

    return numerics.SkewTransform = SkewTransform;

});

define('skylark-langx-numerics/vector2',[
	"skylark-langx-klass",
	"./numerics"
] ,function(klass,numerics) {

	var Vector2 = klass({
		"klassName" : "Vector2",

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;
		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},


		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		cross: function ( v ) {

			return this.x * v.y - this.y * v.x;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( - this.y, - this.x ) + Math.PI;

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},


		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;
		},

		"_construct" : function ( x, y ) {

			this.x = x || 0;
			this.y = y || 0;

		}


	});


	/*
	Object.defineProperties( Vector2.prototype, {

		"width": {

			get: function () {

				return this.x;

			},

			set: function ( value ) {

				this.x = value;

			}

		},

		"height": {

			get: function () {

				return this.y;

			},

			set: function ( value ) {

				this.y = value;

			}

		}

	} );
	*/




	return numerics.Vector2 = Vector2 ;
});

define( 'skylark-langx-numerics/transform-matrix',[
    "skylark-langx-klass",
    "./numerics",
    "./vector2"
], function(klass,numerics,Vector2){
	// reference easeljs/numerics/Matrix2D  and dojox/gfx/matrix
	
	var DEG_TO_RAD = Math.PI/180;
	var _degToRadCache = {};
	var degToRad = function(degree){
		return _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));
	};
	var radToDeg = function(radian){ return radian / Math.PI * 180; };
	

	//Represents a 3 x 3 affine transformation matrix used for transformation in 2-D space.
	//|----------|
	//|m11|m21|dx| 
	//|----------|
	//|m12|m22|dy|
	//|----------|
	//|  0|  0| 1|
	//|----------|
	
    var TransformMatrix =  klass({
        "klassName": "TransformMatrix",

		"_multiplyPoint"	: 	function(p){
			// summary:
			//		applies the matrix to a point
			// p: Point
			//		a point
			// returns: Point
			var _ = this._,
				x = p.x * _.m11 + p.y * _.m21  + _.dx,
			    y = p.x * _.m12 +  p.y * _.m22 + _.dy;

			return new Vector2(x,y); // Point
		},

       "m11": {
       		//Position (0, 0) in a 3x3 affine transformation matrix.
            get : function() {
                return this._.m11;
            }
        },

       "m12": {
       		//Position (0, 1) in a 3x3 affine transformation matrix.
            get : function() {
                return this._.m12;
            }
        },

       "m21": {
       		//Position (1, 0) in a 3x3 affine transformation matrix.
            get : function() {
                return this._.m21;
            }
        },

       "m22": {
       		//Position (1, 1) in a 3x3 affine transformation matrix.
            get : function() {
                return this._.m22;
            }
        },

       "dx": {
       		// Position (2, 1) in a 3x3 affine transformation matrix.
            get : function() {
                return this._.dx;
            }
        },

       "dy": {
       		// Position (2, 1) in a 3x3 affine transformation matrix.
            get : function() {
                return this._.dy;
            }
        },

       "alpha": {
       		// Property representing the alpha that will be applied to a display object. This is not part of matrix
       		// operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.
            get : function() {
                return this._.alpha;
            }
        },

       "shadow": {
       		// Property representing the shadow that will be applied to a display object. This is not part of matrix
       		// operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values..
            get : function() {
                return this._.shadow;
            }
        },

       "compositeOperation": {
			/**
			 * Property representing the compositeOperation that will be applied to a display object. This is not part of
			 * matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated
			 * compositeOperation values. You can find a list of valid composite operations at:
			 * <a href="https://developer.mozilla.org/en/Canvas_tutorial/Compositing">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>
			 * @property compositeOperation
			 * @type String
			 **/
            get : function() {
                return this._.compositeOperation;
            }
        },

        //Converts the specified point with TransformMatrix and returns the result.
		multiplyPoint: /*Vector2*/function(/*Vector2 */ p){
			// summary:
			//		applies the matrix to a point
			return this._multiplyPoint(p); // Vector2
		},
				/**
				 * 指定した矩形を TransformMatrix で変換し、その結果を返します。
				 */
		multiplyRectangle: /*Rect*/function(/*Rect*/ rect){
			// summary:
			//		Applies the matrix to a rectangle.
			// returns: Rect
			if(this.isIdentity())
				return rect.clone(); // Rect
			var p0 = this.multiplyPoint(rect.leftTop),
				p1 = this.multiplyPoint(rect.leftBottom),
				p2 = this.multiplyPoint(rect.right),
				p3 = this.multiplyPoint(rect.rightBottom),
				minx = Math.min(p0.x, p1.x, p2.x, p3.x),
				miny = Math.min(p0.y, p1.y, p2.y, p3.y),
				maxx = Math.max(p0.x, p1.x, p2.x, p3.x),
				maxy = Math.max(p0.y, p1.y, p2.y, p3.y);
			return new Rect(minx,miny,maxx-minx,maxy-miny);  // Rect
		},
		/**
		 * Concatenates the specified matrix properties with this matrix. All parameters are required.
		 * @method prepend
		 * @param {Number} m11
		 * @param {Number} m12
		 * @param {Number} m21
		 * @param {Number} m22
		 * @param {Number} dx
		 * @param {Number} dy
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		prepend : function(m11, m12, m21, m22, dx, dy) {
			var tx1 = this.dx;
			if (m11 != 1 || m12 != 0 || m21 != 0 || m22 != 1) {
				var a1 = this.m11;
				var c1 = this.m21;
				this.m11  = a1*m11+this.m12*m21;
				this.m12  = a1*m12+this.m12*m22;
				this.m21  = c1*m11+this.m22*m21;
				this.m22  = c1*m12+this.m22*m22;
			}
			this.dx = tx1*m11+this.dy*m21+dx;
			this.dy = tx1*m12+this.dy*m22+dy;
			return this;
		},

		/**
		 * Appends the specified matrix properties with this matrix. All parameters are required.
		 * 指定した Matrixをこの Matrixに追加します。
		 * @method append
		 * @param {Number} m11
		 * @param {Number} m12
		 * @param {Number} m21
		 * @param {Number} m22
		 * @param {Number} dx
		 * @param {Number} dy
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		append : function(m11, m12, m21, m22, dx, dy) {
			var a1 = this.m11;
			var b1 = this.m12;
			var c1 = this.m21;
			var d1 = this.m22;

			this.m11  = m11*a1+m12*c1;
			this.m12  = m11*b1+m12*d1;
			this.m21  = m21*a1+m22*c1;
			this.m22  = m21*b1+m22*d1;
			this.dx = dx*a1+dy*c1+this.dx;
			this.dy = dx*b1+dy*d1+this.dy;
			return this;
		},

		/**
		 * Prepends the specified matrix with this matrix.
		 * @method prependMatrix
		 * @param {TransformMatrix} matrix
		 **/
		prependMatrix : function(matrix) {
			this.prepend(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);
			this.prependProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);
			return this;
		},

		/**
		 * Appends the specified matrix with this matrix.
		 * 指定した Matrixをこの Matrixに追加します。
		 * @method appendMatrix
		 * @param {TransformMatrix} matrix
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		appendMatrix : function(matrix) {
			this.append(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);
			this.appendProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);
			return this;
		},

		/**
		 * Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.
		 * For example, you can use this to generate a matrix from a display object: var mtx = new TransformMatrix();
		 * mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
		 * @method prependTransform
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} scaleX
		 * @param {Number} scaleY
		 * @param {Number} rotation
		 * @param {Number} skewX
		 * @param {Number} skewY
		 * @param {Number} regX Optional.
		 * @param {Number} regY Optional.
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		prependTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
			if (rotation%360) {
				var r = rotation*DEG_TO_RAD;
				var cos = Math.cos(r);
				var sin = Math.sin(r);
			} else {
				cos = 1;
				sin = 0;
			}

			if (regX || regY) {
				// append the registration offset:
				this.dx -= regX; this.dy -= regY;
			}
			if (skewX || skewY) {
				// TODO: can this be combined into a single prepend operation?
				skewX *= DEG_TO_RAD;
				skewY *= DEG_TO_RAD;
				this.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);
				this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
			} else {
				this.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);
			}
			return this;
		},

		/**
		 * Generates matrix properties from the specified display object transform properties, and appends them with this matrix.
		 * For example, you can use this to generate a matrix from a display object: var mtx = new TransformMatrix();
		 * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
		 * @method appendTransform
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} scaleX
		 * @param {Number} scaleY
		 * @param {Number} rotation
		 * @param {Number} skewX
		 * @param {Number} skewY
		 * @param {Number} regX Optional.
		 * @param {Number} regY Optional.
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		appendTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
			if (rotation%360) {
				var r = rotation*DEG_TO_RAD;
				var cos = Math.cos(r);
				var sin = Math.sin(r);
			} else {
				cos = 1;
				sin = 0;
			}

			if (skewX || skewY) {
				// TODO: can this be combined into a single append?
				skewX *= DEG_TO_RAD;
				skewY *= DEG_TO_RAD;
				this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
				this.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);
			} else {
				this.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);
			}

			if (regX || regY) {
				// prepend the registration offset:
				this.dx -= regX*this.m11+regY*this.m21; 
				this.dy -= regX*this.m12+regY*this.m22;
			}
			return this;
		},

		/**
		 * Applies a rotation transformation to the matrix.
		 * @method rotate
		 * @param {Number} angle The angle in degrees.
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		rotate : function(angle) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);

			var a1 = this.m11;
			var c1 = this.m21;
			var tx1 = this.dx;

			this.m11 = a1*cos-this.m12*sin;
			this.m12 = a1*sin+this.m12*cos;
			this.m21 = c1*cos-this.m22*sin;
			this.m22 = c1*sin+this.m22*cos;
			this.dx = tx1*cos-this.dy*sin;
			this.dy = tx1*sin+this.dy*cos;
			return this;
		},

		/**
		 * Applies a skew transformation to the matrix.
		 * @method skew
		 * @param {Number} skewX The amount to skew horizontally in degrees.
		 * @param {Number} skewY The amount to skew vertically in degrees.
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		*/
		skew : function(skewX, skewY) {
			skewX = skewX*DEG_TO_RAD;
			skewY = skewY*DEG_TO_RAD;
			this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);
			return this;
		},

		/**
		 * Applies a scale transformation to the matrix.
		 * @method scale
		 * @param {Number} x
		 * @param {Number} y
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		scale : function(x, y) {
			this.m11 *= x;
			this.m22 *= y;
			this.dx *= x;
			this.dy *= y;
			return this;
		},

		/**
		 * Translates the matrix on the x and y axes.
		 * @method translate
		 * @param {Number} x
		 * @param {Number} y
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		translate : function(x, y) {
			this.dx += x;
			this.dy += y;
			return this;
		},

		/**
		 * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).
		 * @method identity
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		identity : function() {
			this.alpha = this.m11 = this.m22 = 1;
			this.m12 = this.m21 = this.dx = this.dy = 0;
			this.shadow = this.compositeOperation = null;
			return this;
		},

		/**
		 * Inverts the matrix, causing it to perform the opposite transformation.
		 * @method invert
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		 **/
		invert : function() {
			var a1 = this.m11;
			var b1 = this.m12;
			var c1 = this.m21;
			var d1 = this.m22;
			var tx1 = this.dx;
			var n = a1*d1-b1*c1;

			this.m11 = d1/n;
			this.m12 = -b1/n;
			this.m21 = -c1/n;
			this.m22 = a1/n;
			this.dx = (c1*this.dy-d1*tx1)/n;
			this.dy = -(a1*this.dy-b1*tx1)/n;
			return this;
		},

		/**
		 * Returns true if the matrix is an identity matrix.
		 * @method isIdentity
		 * @return {Boolean}
		 **/
		isIdentity : function() {
			return this.dx == 0 && this.dy == 0 && this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1;
		},

		/**
		 * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values
		 * may not match the transform properties you used to generate the matrix, though they will produce the same visual
		 * results.
		 * @method decompose
		 * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		*/
		decompose : function(target) {
			// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation
			// even when scale is negative
			if (target == null) { target = {}; }
			target.x = this.dx;
			target.y = this.dy;
			target.scaleX = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);
			target.scaleY = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);

			var skewX = Math.atan2(-this.m21, this.m22);
			var skewY = Math.atan2(this.m12, this.m11);

			if (skewX == skewY) {
				target.rotation = skewY/DEG_TO_RAD;
				if (this.m11 < 0 && this.m22 >= 0) {
					target.rotation += (target.rotation <= 0) ? 180 : -180;
				}
				target.skewX = target.skewY = 0;
			} else {
				target.skewX = skewX/DEG_TO_RAD;
				target.skewY = skewY/DEG_TO_RAD;
			}
			return target;
		},

		/**
		 * Reinitializes all matrix properties to those specified.
		 * @method appendProperties
		 * @param {Number} m11
		 * @param {Number} m12
		 * @param {Number} m21
		 * @param {Number} m22
		 * @param {Number} dx
		 * @param {Number} dy
		 * @param {Number} alpha desired alpha value
		 * @param {Shadow} shadow desired shadow value
		 * @param {String} compositeOperation desired composite operation value
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		*/
		reinitialize : function(m11,m12,m21,m22,dx,dy,alpha,shadow,compositeOperation) {
			this._initialize(m11,m12,m21,m22,dx,dy);
			this.alpha = alpha || 1;
			this.shadow = shadow;
			this.compositeOperation = compositeOperation;
			return this;
		},

		/**
		 * Appends the specified visual properties to the current matrix.
		 * @method appendProperties
		 * @param {Number} alpha desired alpha value
		 * @param {Shadow} shadow desired shadow value
		 * @param {String} compositeOperation desired composite operation value
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		*/
		appendProperties : function(alpha, shadow, compositeOperation) {
			this.alpha *= alpha;
			this.shadow = shadow || this.shadow;
			this.compositeOperation = compositeOperation || this.compositeOperation;
			return this;
		},

		/**
		 * Prepends the specified visual properties to the current matrix.
		 * @method prependProperties
		 * @param {Number} alpha desired alpha value
		 * @param {Shadow} shadow desired shadow value
		 * @param {String} compositeOperation desired composite operation value
		 * @return {TransformMatrix} This matrix. Useful for chaining method calls.
		*/
		prependProperties : function(alpha, shadow, compositeOperation) {
			this.alpha *= alpha;
			this.shadow = this.shadow || shadow;
			this.compositeOperation = this.compositeOperation || compositeOperation;
			return this;
		},

		/**
		 *Multiply TransformMatrix by another TransformMatrix.
		 */
		multiply: function(matrix){
			// summary:
			//		combines matrices by multiplying them sequentially in the given order
			// matrix: TransformMatrix
			//		a 2D matrix-like object,
			//		all subsequent arguments are matrix-like objects too

			// combine matrices
			var m11 = this.m11,m12 = this.m12,m21 = this.m21,m22=this.m22,dx=this.dx,dy=this.dy;
			var r = matrix;
			this.m11 = m11 * r.m11 + m21 * r.m12;
			this.m12 = m12 * r.m11 + m22 * r.m12;
			this.m21 = m11 * r.m21 + m21 * r.m22;
			this.m22 = m12 * r.m21 + m22 * r.m22;
			this.dx =  m11 * r.dx + m21 * r.dy + dx;
			this.dy =  m12 * r.dx + m22 * r.dy + dy;
			return this // TransformMatrix
		},

		/**
		 * Returns a clone of the TransformMatrix instance.
		 * @method clone
		 * @return {TransformMatrix} a clone of the TransformMatrix instance.
		 **/
		clone : function() {

			var _ = this._,
				mtx = new TransformMatrix(_.m11, _.m12, _.m21, _.m22, _.dx, _.dy);
			mtx.shadow = this.shadow;
			mtx.alpha = this.alpha;
			mtx.compositeOperation = this.compositeOperation;
			return mtx;
		},

		/**
		 * Returns a string representation of this object.
		 * @method toString
		 * @return {String} a string representation of the instance.
		 **/
		toString : function() {
			var _ = this._;
			return "[TransformMatrix (m11="+_.m11+" m12="+_.m12+" m21="+_.m21+" m22="+_.m22+" dx="+_.dx+" dy="+_.dy+")]";
		},
		
		"_construct" : function(m11, m12, m21, m22, dx, dy) {
			var _ = this._ = {};
			_.m11 = m11 || 1;
			_.m12 = m12 || 0;
			_.m21 = m21 || 0;
			_.m22 = m22 || 1;
			_.dx = dx || 0;
			_.dy = dy || 0;
		}

	});
	
	Object.assign(TransformMatrix,{
		translate: function(a, b){
			// summary:
			//		forms a translation matrix
			// description:
			//		The resulting matrix is used to translate (move) points by specified offsets.
			// a: Number
			//		an x coordinate value
			// b: Number
			//		a y coordinate value
			// returns: TransformMatrix
			//|----------| |-----------|
			//|m11|m21|dx| |  1|   0| a|
			//|----------| |-----------|
			//|m12|m22|dy| |  0|   1| b|
			//|----------| |-----------|
			//|  0|  0| 1| |  0|   0| 1|
			//|----------| |-----------|

			return new TransformMatrix(1,0,0,1,a,b); // TransformMatrix
		},
		scale: function(a, b){
			// summary:
			//		forms a scaling matrix
			// description:
			//		The resulting matrix is used to scale (magnify) points by specified offsets.
			// a: Number
			//		a scaling factor used for the x coordinate
			// b: Number?
			//		a scaling factor used for the y coordinate
			// returns: TransformMatrix
			//|----------| |-----------|
			//|m11|m21|dx| |  a|   0| 0|
			//|----------| |-----------|
			//|m12|m22|dy| |  0|   b| 0|
			//|----------| |-----------|
			//|  0|  0| 1| |  0|   0| 1|
			//|----------| |-----------|
			return new TransformMatrix(a,0,0,b?b:a,0,0); // TransformMatrix
		},
		rotate: function(angle){
			// summary:
			//		forms a rotating matrix
			// description:
			//		The resulting matrix is used to rotate points
			//		around the origin of coordinates (0, 0) by specified angle.
			// angle: Number
			//		an angle of rotation in radians (>0 for CW)
			// returns: TransformMatrix
			//|----------| |-----------|
			//|m11|m21|dx| |cos|-sin| 0|
			//|----------| |-----------|
			//|m12|m22|dy| |sin| cos| 0|
			//|----------| |-----------|
			//|  0|  0| 1| |  0|   0| 1|
			//|----------| |-----------|
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			return new TransformMatrix(cos,sin,-sin,cos,0,0); // TransformMatrix
		},
		rotateg: function(degree){
			// summary:
			//		forms a rotating matrix
			// description:
			//		The resulting matrix is used to rotate points
			//		around the origin of coordinates (0, 0) by specified degree.
			//		Seerotate() for comparison.
			// degree: Number
			//		an angle of rotation in degrees (>0 for CW)
			// returns: TransformMatrix
			return this.rotate(degToRad(degree)); // TransformMatrix
		},
		skewX: function(angle) {
			//TODO : will be modified
			// summary:
			//		forms an x skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the x dimension
			//		around the origin of coordinates (0, 0) by specified angle.
			// angle: Number
			//		a skewing angle in radians
			// returns: TransformMatrix
			//|----------| |-----------|
			//|m11|m21|dx| |  1| tan| 0|
			//|----------| |-----------|
			//|m12|m22|dy| |  0|   1| 0|
			//|----------| |-----------|
			//|  0|  0| 1| |  0|   0| 1|
			//|----------| |-----------|
			var tan = Math.tan(angle);
			return new TransformMatrix(1,0,tan,1); // TransformMatrix
		},
		skewXg: function(degree){
			//TODO : will be modified
			// summary:
			//		forms an x skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the x dimension
			//		around the origin of coordinates (0, 0) by specified degree.
			//		See dojox/gfx/matrix.skewX() for comparison.
			// degree: Number
			//		a skewing angle in degrees
			// returns: TransformMatrix
			return this.skewX(degToRad(degree)); // dojox/gfx/matrix.TransformMatrix
		},
		skewY: function(angle){
			//TODO : will be modified
			// summary:
			//		forms a y skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the y dimension
			//		around the origin of coordinates (0, 0) by specified angle.
			// angle: Number
			//		a skewing angle in radians
			// returns: TransformMatrix
			//|----------| |-----------|
			//|m11|m21|dx| |  1|   0| 0|
			//|----------| |-----------|
			//|m12|m22|dy| |tan|   1| 0|
			//|----------| |-----------|
			//|  0|  0| 1| |  0|   0| 1|
			//|----------| |-----------|
			var tan = Math.tan(angle);

			return new TransformMatrix(1,tan,0,1); // TransformMatrix
		},
		skewYg: function(degree){
			//TODO : will be modified
			// summary:
			//		forms a y skewing matrix
			// description:
			//		The resulting matrix is used to skew points in the y dimension
			//		around the origin of coordinates (0, 0) by specified degree.
			//		See skewY() for comparison.
			// degree: Number
			//		a skewing angle in degrees
			// returns: TransformMatrix
			return this.skewY(degToRad(degree)); // TransformMatrix
		},
		reflect: function(a, b){
			// summary:
			//		forms a reflection matrix
			// description:
			//		The resulting matrix is used to reflect points around a vector,
			//		which goes through the origin.
			// a: dojox/gfx.Point|Number
			//		a point-like object, which specifies a vector of reflection, or an X value
			// b: Number?
			//		a Y value
			// returns: TransformMatrix
			if(arguments.length == 1){
				b = a.y;
				a = a.x;
			}
			// make a unit vector
			var a2 = a * a, b2 = b * b, n2 = a2 + b2, 
				xx=2 * a2 / n2 - 1, 
				xy = 2 * a * b / n2,
				yx = xy,
				yy = 2 * b2 / n2 - 1;
			return new TransformMatrix(xx,yx,xy, yy); // TransformMatrix
		},
		project: function(a, b){
			// summary:
			//		forms an orthogonal projection matrix
			// description:
			//		The resulting matrix is used to project points orthogonally on a vector,
			//		which goes through the origin.
			// a:   Number
			//		an x coordinate value
			// b: Number?
			//		a y coordinate value
			// returns: TransformMatrix

			// make a unit vector
			var a2 = a * a, b2 = b * b, n2 = a2 + b2, 
				xx = a2 / n2,
				xy = a * b / n2
				yx = xy,
				yy = b2 / n2;
			return new TransformMatrix(xx,yx,xy,yy); // TransformMatrix
		},

		// common operations

		// high level operations

		_sandwich: function(matrix, x, y){
			// summary:
			//		applies a matrix at a central point
			// matrix: TransformMatrix
			//		a 2D matrix-like object, which is applied at a central point
			// x: Number
			//		an x component of the central point
			// y: Number
			//		a y component of the central point
			return this.translate(x, y).multiply(matrix)
			                           .multiply(this.translate(-x, -y)); // TransformMatrix
		},
		scaleAt: function(a, b, c, d){
			// summary:
			//		scales a picture using a specified point as a center of scaling
			// description:
			//		Compare with scale().
			// a: Number
			//		a scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates
			// b: Number?
			//		a scaling factor used for the y coordinate
			// c: Number|Point
			//		an x component of a central point, or a central point
			// d: Number
			//		a y component of a central point
			// returns: TransformMatrix
			switch(arguments.length){
				case 4:
					// a and b are scale factor components, c and d are components of a point
					return this._sandwich(this.scale(a, b), c, d); // TransformMatrix
				case 3:
					if(typeof c == "number"){
						return this._sandwich(this.scale(a), b, c); // TransformMatrix
					}
					return this._sandwich(this.scale(a, b), c.x, c.y); // TransformMatrix
			}
			return this._sandwich(this.scale(a), b.x, b.y); // TransformMatrix
		},
		rotateAt: function(angle, a, b){
			// summary:
			//		rotates a picture using a specified point as a center of rotation
			// description:
			//		Compare with rotate().
			// angle: Number
			//		an angle of rotation in radians (>0 for CW)
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: TransformMatrix
			if(arguments.length > 2){
				return this._sandwich(this.rotate(angle), a, b); // TransformMatrix
			}
			return this._sandwich(this.rotate(angle), a.x, a.y); // TransformMatrix
		},
		rotategAt: function(degree, a, b){
			// summary:
			//		rotates a picture using a specified point as a center of rotation
			// description:
			//		Compare with rotateg().
			// degree: Number
			//		an angle of rotation in degrees (>0 for CW)
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: TransformMatrix
			if(arguments.length > 2){
				return this._sandwich(this.rotateg(degree), a, b); // TransformMatrix
			}
			return this._sandwich(this.rotateg(degree), a.x, a.y); // TransformMatrix
		},
		skewXAt: function(angle, a, b){
			// summary:
			//		skews a picture along the x axis using a specified point as a center of skewing
			// description:
			//		Compare with skewX().
			// angle: Number
			//		a skewing angle in radians
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: TransformMatrix
			if(arguments.length > 2){
				return this._sandwich(this.skewX(angle), a, b); // TransformMatrix
			}
			return this._sandwich(this.skewX(angle), a.x, a.y); // TransformMatrix
		},
		skewXgAt: function(degree, a, b){
			// summary:
			//		skews a picture along the x axis using a specified point as a center of skewing
			// description:
			//		Compare with skewXg().
			// degree: Number
			//		a skewing angle in degrees
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: TransformMatrix
			if(arguments.length > 2){
				return this._sandwich(this.skewXg(degree), a, b); // TransformMatrix
			}
			return this._sandwich(this.skewXg(degree), a.x, a.y); // TransformMatrix
		},
		skewYAt: function(angle, a, b){
			// summary:
			//		skews a picture along the y axis using a specified point as a center of skewing
			// description:
			//		Compare with skewY().
			// angle: Number
			//		a skewing angle in radians
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: TransformMatrix
			if(arguments.length > 2){
				return this._sandwich(this.skewY(angle), a, b); // TransformMatrix
			}
			return this._sandwich(this.skewY(angle), a.x, a.y); // TransformMatrix
		},
		skewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){
			// summary:
			//		skews a picture along the y axis using a specified point as a center of skewing
			// description:
			//		Compare with skewYg().
			// degree: Number
			//		a skewing angle in degrees
			// a: Number|dojox/gfx.Point
			//		an x component of a central point, or a central point
			// b: Number?
			//		a y component of a central point
			// returns: TransformMatrix
			if(arguments.length > 2){
				return this._sandwich(this.skewYg(degree), a, b); // TransformMatrix
			}
			return this._sandwich(this.skewYg(degree), a.x, a.y); // TransformMatrix
		}
	
	
	});

	return numerics.TransformMatrix = TransformMatrix;
});

define('skylark-langx-numerics/translate-transform',[
    "./numerics",
    "./transform",
    "./matrix-transform"
],function(numerics,Transform,Matrix,Point,Rect) {

    //|1   0   dx|
    //|0   1   dy|
    //|0   0    1|

   var TranslateTransform =  Transform.inherit({
        "klassName": "TranslateTransform",

        "value": {
            get: function() {
                    return Matrix.scaleAt(this.x, this.y);
            }
        },

        "x": {
            get : function() {
                return this._.x;
            }
        },

        "y": {
            get : function() {
                return this._.y;
            }
        },

        clone: /*SkewTransform*/ function() {},

        transform: /*Point*/ function( /*Point*/ point) {},

        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},

        "init": function( /*Number*/ x, /*Number*/ y) {
            var _ = this._;

            _.x = x ? x : 0;
            _.y = y ? y : 0;
        }
    });

    return numerics.TranslateTransform =TranslateTransform;
});	

define('skylark-langx-numerics/vector4',[
	"skylark-langx-klass",
	"./numerics"
] ,function(klass,numerics) {

	var Vector4 = klass({
		"klassName" : "Vector4",

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;
		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;
		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				this.x = 1;
				this.y = 0;
				this.z = 0;

			} else {

				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
			this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) offset = 0;

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'Vector4: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );

			return this;

		},


		"_construct" :function ( x, y, z, w ) {

			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
			this.w = ( w !== undefined ) ? w : 1;

		}

	});

/*
	Object.defineProperties( Vector4.prototype, {

		"width": {

			get: function () {

				return this.z;

			},

			set: function ( value ) {

				this.z = value;

			}

		},

		"height": {

			get: function () {

				return this.w;

			},

			set: function ( value ) {

				this.w = value;

			}

		}

	} );
*/

	return numerics.Vector4 = Vector4 ;

});
define('skylark-langx-numerics/main',[
	"./numerics",
	"./euler",
	"./maths",
	"./matrix3",
	"./matrix4",
	"./matrix-transform",
	"./plane",
	"./quaternion",
	"./rotate-transform",
	"./scale-transform",
	"./skew-transform",
	"./transform",
	"./transform-matrix",
	"./translate-transform",
	"./vector2",
	"./vector3",
	"./vector4"
],function(numerics){
	return numerics;
});
define('skylark-langx-numerics', ['skylark-langx-numerics/main'], function (main) { return main; });

define('skylark-langx/numerics',[
	"skylark-langx-numerics"
],function(numerics){
	return numerics;
});
define('skylark-langx/objects',[
    "skylark-langx-objects"
],function(objects){
    return objects;
});
define('skylark-langx/Evented',[
    "./emitter"
],function(Emitter){
    return Emitter;
});
define('skylark-langx-strings/strings',[
    "skylark-langx-ns"
],function(skylark){
    return skylark.attach("langx.strings");
});
define('skylark-langx-strings/base64',[
	"./strings"
],function(strings) {

	// private property
	const _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

	// private method for UTF-8 encoding
	function _utf8_encode(string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";

		for (var n = 0; n < string.length; n++) {

			var c = string.charCodeAt(n);

			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}

		}

		return utftext;
	}

	// private method for UTF-8 decoding
	function _utf8_decode(utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;

		while ( i < utftext.length ) {

			c = utftext.charCodeAt(i);

			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}

		}

		return string;
	}

	// public method for encoding
	function encode(input, binary) {
		binary = (binary != null) ? binary : false;
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;

		if (!binary)
		{
			input = _utf8_encode(input);
		}

		while (i < input.length) {

			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);

			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;

			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}

			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

		}

		return output;
	}

	// public method for decoding
	function decode(input, binary) {
		binary = (binary != null) ? binary : false;
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;

		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

		while (i < input.length) {

			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));

			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;

			output = output + String.fromCharCode(chr1);

			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}

		}

		if (!binary) {
			output = _utf8_decode(output);
		}

		return output;

	}


	return strings.base64 = {
		decode,
		encode
	};
	
});
define('skylark-langx-strings/camel-case',[
	"./strings"
],function(strings){
    function camelCase(str) {
        return str.replace(/-([\da-z])/g, function(a) {
            return a.toUpperCase().replace('-', '');
        });
    }

	
	return strings.camelCase = camelCase;
});
define('skylark-langx-strings/dasherize',[
	"./strings"
],function(strings){
     /*
     * Converts camel case into dashes.
     * @param {String} str
     * @return {String}
     * @exapmle marginTop -> margin-top
     */
    function dasherize(str) {
        return str.replace(/::/g, '/')
            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
            .replace(/([a-z\d])([A-Z])/g, '$1_$2')
            .replace(/_/g, '-')
            .toLowerCase();
    }

	
	return strings.dasherize = dasherize;
});
define('skylark-langx-strings/deserialize-value',[
	"./strings"
],function(strings){
    function deserializeValue(value) {
        try {
            return value ?
                value == "true" ||
                (value == "false" ? false :
                    value == "null" ? null :
                    +value + "" == value ? +value :
                    /^[\[\{]/.test(value) ? JSON.parse(value) :
                    value) : value;
        } catch (e) {
            return value;
        }
    }



	
	return strings.deserializeValue = deserializeValue;
});
define('skylark-langx-strings/escape-html',[
	"./strings"
],function(strings){
    // add default escape function for escaping HTML entities
    var escapeCharMap = Object.freeze({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;',
    });
    function replaceChar(c) {
        return escapeCharMap[c];
    }
    var escapeChars = /[&<>"'`=]/g;

    function escapeHTML(str) {
        if (str == null) {
            return '';
        }
        if (!str) {
            return String(str);
        }

        return str.toString().replace(escapeChars, replaceChar);
    }

	
	return strings.escapeHTML = escapeHTML;
});
define('skylark-langx-strings/generate-uuid',[
	"./strings"
],function(strings){
    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c === 'x' ? r : ((r & 0x3) | 0x8);
            return v.toString(16);
        });
    }

	return strings.generateUUID = generateUUID;
});
define('skylark-langx-strings/lower-first',[
	"./strings"
],function(strings){
    function lowerFirst(str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
    }
	
	return strings.lowerFirst = lowerFirst;
});
define('skylark-langx-strings/ltrim',[
	"./strings"
],function(strings){

    function ltrim(str) {
        return str.replace(/^\s+/, '');
    }
	
	return strings.ltrim = ltrim;
});
define('skylark-langx-strings/rtrim',[
	"./strings"
],function(strings){
    function rtrim(str) {
        return str.replace(/\s+$/, '');
    }
	
	return strings.rtrim = rtrim;
});
define('skylark-langx-strings/serialize-value',[
	"./strings"
],function(strings){
    function serializeValue(value) {
        return JSON.stringify(value)
    }
	
	return strings.serializeValue = serializeValue;
});
define('skylark-langx-strings/slugify',[
	"./strings"
],function(strings){
    // Slugify a string
    function slugify(str) {
        str = str.replace(/^\s+|\s+$/g, '');

        // Make the string lowercase
        str = str.toLowerCase();

        // Remove accents, swap ñ for n, etc
        var from = "ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;";
        var to   = "AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------";
        for (var i=0, l=from.length ; i<l ; i++) {
            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
        }

        // Remove invalid chars
        //str = str.replace(/[^a-z0-9 -]/g, '') 
        // Collapse whitespace and replace by -
        str = str.replace(/\s+/g, '-') 
        // Collapse dashes
        .replace(/-+/g, '-'); 

        return str;
    }    

	return strings.slugify = slugify;
});
define('skylark-langx-strings/substitute',[
	"./strings"
],function(strings){
    function substitute( /*String*/ template,
        /*Object|Array*/
        map,
        /*Function?*/
        transform,
        /*Object?*/
        thisObject) {
        // summary:
        //    Performs parameterized substitutions on a string. Throws an
        //    exception if any parameter is unmatched.
        // template:
        //    a string with expressions in the form `${key}` to be replaced or
        //    `${key:format}` which specifies a format function. keys are case-sensitive.
        // map:
        //    hash to search for substitutions
        // transform:
        //    a function to process all parameters before substitution takes


        thisObject = thisObject || window;
        transform = transform ?
            proxy(thisObject, transform) : function(v) {
                return v;
            };

        function getObject(key, map) {
            if (key.match(/\./)) {
                var retVal,
                    getValue = function(keys, obj) {
                        var _k = keys.pop();
                        if (_k) {
                            if (!obj[_k]) return null;
                            return getValue(keys, retVal = obj[_k]);
                        } else {
                            return retVal;
                        }
                    };
                return getValue(key.split(".").reverse(), map);
            } else {
                return map[key];
            }
        }

        return template.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g,
            function(match, key, format) {
                var value = getObject(key, map);
                if (format) {
                    value = getObject(format, thisObject).call(thisObject, value, key);
                }
                return transform(value, key).toString();
            }); // String
    }

	return strings.substitute = substitute;
});
define('skylark-langx-strings/trim-null',[
	"./strings"
],function(strings){
    const NullCharactersRegExp = /\x00/g;

    /**
     * @param {string} str
     */
    function trimNull(str) {
      if (typeof str !== "string") {
        warn("The argument for removeNullCharacters must be a string.");
        return str;
      }
      return str.replace(NullCharactersRegExp, "");
    }

	
	return strings.trimNull = trimNull;
});
define('skylark-langx-strings/unique-id',[
	"./strings"
],function(strings){

    var idCounter = 0;
    function uniqueId (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
    }

	return strings.uniqueId = uniqueId;
});
define('skylark-langx-strings/upper-first',[
	"./strings"
],function(strings){

    function upperFirst(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
	
	return strings.upperFirst = upperFirst;
});
define('skylark-langx-strings/words',[
	"./strings"
],function(strings){
	/** Used to compose unicode character classes. */
	const rsAstralRange = '\\ud800-\\udfff'
	const rsComboMarksRange = '\\u0300-\\u036f'
	const reComboHalfMarksRange = '\\ufe20-\\ufe2f'
	const rsComboSymbolsRange = '\\u20d0-\\u20ff'
	const rsComboMarksExtendedRange = '\\u1ab0-\\u1aff'
	const rsComboMarksSupplementRange = '\\u1dc0-\\u1dff'
	const rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange + rsComboMarksExtendedRange + rsComboMarksSupplementRange
	const rsDingbatRange = '\\u2700-\\u27bf'
	const rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff'
	const rsMathOpRange = '\\xac\\xb1\\xd7\\xf7'
	const rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf'
	const rsPunctuationRange = '\\u2000-\\u206f'
	const rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000'
	const rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde'
	const rsVarRange = '\\ufe0e\\ufe0f'
	const rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange

	/** Used to compose unicode capture groups. */
	const rsApos = "['\u2019]"
	const rsBreak = `[${rsBreakRange}]`
	const rsCombo = `[${rsComboRange}]`
	const rsDigit = '\\d'
	const rsDingbat = `[${rsDingbatRange}]`
	const rsLower = `[${rsLowerRange}]`
	const rsMisc = `[^${rsAstralRange}${rsBreakRange + rsDigit + rsDingbatRange + rsLowerRange + rsUpperRange}]`
	const rsFitz = '\\ud83c[\\udffb-\\udfff]'
	const rsModifier = `(?:${rsCombo}|${rsFitz})`
	const rsNonAstral = `[^${rsAstralRange}]`
	const rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}'
	const rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]'
	const rsUpper = `[${rsUpperRange}]`
	const rsZWJ = '\\u200d'

	/** Used to compose unicode regexes. */
	const rsMiscLower = `(?:${rsLower}|${rsMisc})`
	const rsMiscUpper = `(?:${rsUpper}|${rsMisc})`
	const rsOptContrLower = `(?:${rsApos}(?:d|ll|m|re|s|t|ve))?`
	const rsOptContrUpper = `(?:${rsApos}(?:D|LL|M|RE|S|T|VE))?`
	const reOptMod = `${rsModifier}?`
	const rsOptVar = `[${rsVarRange}]?`
	const rsOptJoin = `(?:${rsZWJ}(?:${[rsNonAstral, rsRegional, rsSurrPair].join('|')})${rsOptVar + reOptMod})*`
	const rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])'
	const rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])'
	const rsSeq = rsOptVar + reOptMod + rsOptJoin
	const rsEmoji = `(?:${[rsDingbat, rsRegional, rsSurrPair].join('|')})${rsSeq}`

	const reUnicodeWords = RegExp([
	  `${rsUpper}?${rsLower}+${rsOptContrLower}(?=${[rsBreak, rsUpper, '$'].join('|')})`,
	  `${rsMiscUpper}+${rsOptContrUpper}(?=${[rsBreak, rsUpper + rsMiscLower, '$'].join('|')})`,
	  `${rsUpper}?${rsMiscLower}+${rsOptContrLower}`,
	  `${rsUpper}+${rsOptContrUpper}`,
	  rsOrdUpper,
	  rsOrdLower,
	  `${rsDigit}+`,
	  rsEmoji
	].join('|'), 'g')

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	  return string.match(reUnicodeWords)
	}


	const hasUnicodeWord = RegExp.prototype.test.bind(
	  /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/
	)

	/** Used to match words composed of alphanumeric characters. */
	const reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g

	function asciiWords(string) {
	  return string.match(reAsciiWord)
	}

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * words('fred, barney, & pebbles')
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * words('fred, barney, & pebbles', /[^, ]+/g)
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern) {
	  if (pattern === undefined) {
	    const result = hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string)
	    return result || []
	  }
	  return string.match(pattern) || []
	}

	
	return strings.words = words;
});
define('skylark-langx-strings/main',[
	"./strings",
	"./base64",
	"./camel-case",
	"./dasherize",
	"./deserialize-value",
	"./escape-html",
	"./generate-uuid",
	"./lower-first",
	"./ltrim",
	"./rtrim",
	"./serialize-value",
	"./slugify",
	"./substitute",
	"./trim-null",
	"./unique-id",
	"./upper-first",
	"./words"
],function(strings){
	return strings;
});
define('skylark-langx-strings', ['skylark-langx-strings/main'], function (main) { return main; });

define('skylark-langx/strings',[
    "skylark-langx-strings"
],function(strings){
    return strings;
});
define('skylark-langx/stateful',[
	"./Evented",
  "./strings",
  "./objects"
],function(Evented,strings,objects){
    var isEqual = objects.isEqual,
        mixin = objects.mixin,
        result = objects.result,
        isEmptyObject = objects.isEmptyObject,
        clone = objects.clone,
        uniqueId = strings.uniqueId;

    var Stateful = Evented.inherit({
        _construct : function(attributes, options) {
            var attrs = attributes || {};
            options || (options = {});
            this.cid = uniqueId(this.cidPrefix);
            this.attributes = {};
            if (options.collection) this.collection = options.collection;
            if (options.parse) attrs = this.parse(attrs, options) || {};
            var defaults = result(this, 'defaults');
            attrs = mixin({}, defaults, attrs);
            this.set(attrs, options);
            this.changed = {};
        },

        // A hash of attributes whose current and previous value differ.
        changed: null,

        // The value returned during the last failed validation.
        validationError: null,

        // The default name for the JSON `id` attribute is `"id"`. MongoDB and
        // CouchDB users may want to set this to `"_id"`.
        idAttribute: 'id',

        // The prefix is used to create the client id which is used to identify models locally.
        // You may want to override this if you're experiencing name clashes with model ids.
        cidPrefix: 'c',


        // Return a copy of the model's `attributes` object.
        toJSON: function(options) {
          return clone(this.attributes);
        },


        // Get the value of an attribute.
        get: function(attr) {
          return this.attributes[attr];
        },

        // Returns `true` if the attribute contains a value that is not null
        // or undefined.
        has: function(attr) {
          return this.get(attr) != null;
        },

        // Set a hash of model attributes on the object, firing `"change"`. This is
        // the core primitive operation of a model, updating the data and notifying
        // anyone who needs to know about the change in state. The heart of the beast.
        set: function(key, val, options) {
          if (key == null) return this;

          // Handle both `"key", value` and `{key: value}` -style arguments.
          var attrs;
          if (typeof key === 'object') {
            attrs = key;
            options = val;
          } else {
            (attrs = {})[key] = val;
          }

          options || (options = {});

          // Run validation.
          if (!this._validate(attrs, options)) return false;

          // Extract attributes and options.
          var unset      = options.unset;
          var silent     = options.silent;
          var changes    = [];
          var changing   = this._changing;
          this._changing = true;

          if (!changing) {
            this._previousAttributes = clone(this.attributes);
            this.changed = {};
          }

          var current = this.attributes;
          var changed = this.changed;
          var prev    = this._previousAttributes;

          // For each `set` attribute, update or delete the current value.
          for (var attr in attrs) {
            val = attrs[attr];
            if (!isEqual(current[attr], val)) changes.push(attr);
            if (!isEqual(prev[attr], val)) {
              changed[attr] = val;
            } else {
              delete changed[attr];
            }
            unset ? delete current[attr] : current[attr] = val;
          }

          // Update the `id`.
          if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);

          // Trigger all relevant attribute changes.
          if (!silent) {
            if (changes.length) this._pending = options;
            for (var i = 0; i < changes.length; i++) {
              this.trigger('change:' + changes[i], this, current[changes[i]], options);
            }
          }

          // You might be wondering why there's a `while` loop here. Changes can
          // be recursively nested within `"change"` events.
          if (changing) return this;
          if (!silent) {
            while (this._pending) {
              options = this._pending;
              this._pending = false;
              this.trigger('change', this, options);
            }
          }
          this._pending = false;
          this._changing = false;
          return this;
        },

        // Remove an attribute from the model, firing `"change"`. `unset` is a noop
        // if the attribute doesn't exist.
        unset: function(attr, options) {
          return this.set(attr, void 0, mixin({}, options, {unset: true}));
        },

        // Clear all attributes on the model, firing `"change"`.
        clear: function(options) {
          var attrs = {};
          for (var key in this.attributes) attrs[key] = void 0;
          return this.set(attrs, mixin({}, options, {unset: true}));
        },

        // Determine if the model has changed since the last `"change"` event.
        // If you specify an attribute name, determine if that attribute has changed.
        hasChanged: function(attr) {
          if (attr == null) return !isEmptyObject(this.changed);
          return this.changed[attr] !== undefined;
        },

        // Return an object containing all the attributes that have changed, or
        // false if there are no changed attributes. Useful for determining what
        // parts of a view need to be updated and/or what attributes need to be
        // persisted to the server. Unset attributes will be set to undefined.
        // You can also pass an attributes object to diff against the model,
        // determining if there *would be* a change.
        changedAttributes: function(diff) {
          if (!diff) return this.hasChanged() ? clone(this.changed) : false;
          var old = this._changing ? this._previousAttributes : this.attributes;
          var changed = {};
          for (var attr in diff) {
            var val = diff[attr];
            if (isEqual(old[attr], val)) continue;
            changed[attr] = val;
          }
          return !isEmptyObject(changed) ? changed : false;
        },

        // Get the previous value of an attribute, recorded at the time the last
        // `"change"` event was fired.
        previous: function(attr) {
          if (attr == null || !this._previousAttributes) return null;
          return this._previousAttributes[attr];
        },

        // Get all of the attributes of the model at the time of the previous
        // `"change"` event.
        previousAttributes: function() {
          return clone(this._previousAttributes);
        },

        // Create a new model with identical attributes to this one.
        clone: function() {
          return new this.constructor(this.attributes);
        },

        // A model is new if it has never been saved to the server, and lacks an id.
        isNew: function() {
          return !this.has(this.idAttribute);
        },

        // Check if the model is currently in a valid state.
        isValid: function(options) {
          return this._validate({}, mixin({}, options, {validate: true}));
        },

        // Run validation against the next complete set of model attributes,
        // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
        _validate: function(attrs, options) {
          if (!options.validate || !this.validate) return true;
          attrs = mixin({}, this.attributes, attrs);
          var error = this.validationError = this.validate(attrs, options) || null;
          if (!error) return true;
          this.trigger('invalid', this, error, mixin(options, {validationError: error}));
          return false;
        }
    });

	return Stateful;
});
define('skylark-langx-topic/topic',[
	"skylark-langx-ns",
	"skylark-langx-events"
],function(skylark,events){
	var hub = new events.Emitter();

	return skylark.attach("langx.topic",{
	    publish: function(name, arg1,argn) {
	        var data = [].slice.call(arguments, 1);

	        return hub.trigger({
	            type : name,
	            data : data
	        });
	    },

        subscribe: function(name, listener,ctx) {
        	var handler = function(e){
                listener.apply(ctx,e.data);
            };
            hub.on(name, handler);
            return {
            	remove : function(){
            		hub.off(name,handler);
            	}
            }

        }

	});
});
define('skylark-langx-topic/main',[
	"./topic"
],function(topic){
	return topic;
});
define('skylark-langx-topic', ['skylark-langx-topic/main'], function (main) { return main; });

define('skylark-langx/topic',[
	"skylark-langx-topic"
],function(topic){
	return topic;
});
define('skylark-langx/types',[
    "skylark-langx-types"
],function(types){
    return types;
});
define('skylark-langx-urls/urls',[
  "skylark-langx-ns"
],function(skylark){


    return skylark.attach("langx.urls",{

    });
});



define('skylark-langx-urls/create_object_url',[
    './urls'
], function (urls) {
    'use strict';

    const digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    function createObjectURL(data, contentType, forceDataSchema = false) {
        if (!forceDataSchema && URL.createObjectURL) {
            const blob = new Blob([data], { type: contentType });
            return URL.createObjectURL(blob);
        }
        let buffer = `data:${ contentType };base64,`;
        for (let i = 0, ii = data.length; i < ii; i += 3) {
            const b1 = data[i] & 255;
            const b2 = data[i + 1] & 255;
            const b3 = data[i + 2] & 255;
            const d1 = b1 >> 2, d2 = (b1 & 3) << 4 | b2 >> 4;
            const d3 = i + 1 < ii ? (b2 & 15) << 2 | b3 >> 6 : 64;
            const d4 = i + 2 < ii ? b3 & 63 : 64;
            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
        }
        return buffer;
    };


    return urls.createObjectURL = createObjectURL;

});


define('skylark-langx-urls/create_valid_absolute_url',[
    './urls'
], function (urls) {
    'use strict';

    function _isValidProtocol(url) {
        if (!url) {
            return false;
        }
        switch (url.protocol) {
        case 'http:':
        case 'https:':
        case 'ftp:':
        case 'mailto:':
        case 'tel:':
            return true;
        default:
            return false;
        }
    }
    function createValidAbsoluteUrl(url, baseUrl) {
        if (!url) {
            return null;
        }
        try {
            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
            if (_isValidProtocol(absoluteUrl)) {
                return absoluteUrl;
            }
        } catch (ex) {
        }
        return null;
    }

    return urls.createValidAbsoluteUrl = createValidAbsoluteUrl;

});


define('skylark-langx-urls/get-absolute-url',[
    './urls'
], function (urls) {
    'use strict';

    const getAbsoluteUrl = function (url) {
        if (!url.match(/^https?:\/\//)) {
            const div = document.createElement('div');
            div.innerHTML = `<a href="${ url }">x</a>`;
            url = div.firstChild.href;
        }
        return url;
    };

    return urls.getAbsoluteUrl = getAbsoluteUrl;

});
define('skylark-langx-urls/get-file-extension',[
    './urls'
], function (urls) {
    'use strict';

    const getFileExtension = function (path) {
        if (typeof path === 'string') {
            const splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
            const pathParts = splitPathRe.exec(path);
            if (pathParts) {
                return pathParts.pop().toLowerCase();
            }
        }
        return '';
    };

    return urls.getFileExtension = getFileExtension;

});
   define('skylark-langx-urls/get-file-name',[
    './urls'
], function (urls) {
    'use strict';

    function getFileName (url) {
        ///var fileName = url.split('/').pop() || "";
        ///return fileName;
        const anchor = url.indexOf('#');
        const query = url.indexOf('?');
        const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);
        return url.substring(url.lastIndexOf('/', end) + 1, end);         
    }




    return urls.getFileName = getFileName;

});
define('skylark-langx-urls/get-query',[
    './urls'
], function (urls) {
    'use strict';
	function getQuery(querystring) {
		var query = {};

		var pairs = querystring.split('&'),
		    length = pairs.length,
		    keyval = [],
		    i = 0;

		for (; i < length; i++) {
		  keyval = pairs[i].split('=', 2);
		  try {
		    keyval[0] = decodeURIComponent(keyval[0]); // key
		    keyval[1] = decodeURIComponent(keyval[1]); // value
		  } catch (e) {}

		  if (query[keyval[0]] === undefined) {
		    query[keyval[0]] = keyval[1];
		  } else {
		    query[keyval[0]] += ',' + keyval[1];
		  }
		}

		return query;
	}

	return urls.getQuery = getQuery;

});
define('skylark-langx-urls/parse-url',[
    './urls'
], function (urls) {
    'use strict';
    const parseUrl = function (url) {
        const props = [
            'protocol',
            'hostname',
            'port',
            'pathname',
            'search',
            'hash',
            'host'
        ];
        let a = document.createElement('a');
        a.href = url;
        const addToBody = a.host === '' && a.protocol !== 'file:';
        let div;
        if (addToBody) {
            div = document.createElement('div');
            div.innerHTML = `<a href="${ url }"></a>`;
            a = div.firstChild;
            div.setAttribute('style', 'display:none; position:absolute;');
            document.body.appendChild(div);
        }
        const details = {};
        for (let i = 0; i < props.length; i++) {
            details[props[i]] = a[props[i]];
        }
        if (details.protocol === 'http:') {
            details.host = details.host.replace(/:80$/, '');
        }
        if (details.protocol === 'https:') {
            details.host = details.host.replace(/:443$/, '');
        }
        if (!details.protocol) {
            details.protocol = window.location.protocol;
        }
        if (addToBody) {
            document.body.removeChild(div);
        }
        return details;
    };

    return urls.parseUrl = parseUrl;
});
define('skylark-langx-urls/is-cross-origin',[
    './urls',
    "./parse-url"
], function (urls,parseUrl) {
    'use strict';

    const isCrossOrigin = function (url, winLoc = window.location) {
        const urlInfo = parseUrl(url);
        const srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;
        const crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;
        return crossOrigin;
    };

    return urls.isCrossOrigin = isCrossOrigin;

});
define('skylark-langx-urls/is_same_origin',[
    './urls'
], function (urls) {
    'use strict';

    function isSameOrigin(baseUrl, otherUrl) {
        let base;
        try {
            base = new URL(baseUrl);
            if (!base.origin || base.origin === 'null') {
                return false;
            }
        } catch (e) {
            return false;
        }
        const other = new URL(otherUrl, base);
        return base.origin === other.origin;
    }

    return urls.isSameOrigin = isSameOrigin;

});

define('skylark-langx-urls/path',[
    "skylark-langx-types",
    "skylark-langx-constructs",
    "./urls"
], function(types,constructs,urls) {

    /**
     * @class Path
     * @constructor
     */
    var Path =   constructs.klass({
        _construct : function() {
            var _ = this._ = {
                segments : null,
                hasLeading : false,
                hasTrailing : false
            };
            if (arguments.length == 1 && types.isString(arguments[0])) {
                  this._parse(arguments[0]);
            } else  if (types.isArray(arguments[0])){
                _.segments = arguments[0];
                _.hasLeading = arguments[1] || false;
                _.hasTrailing = arguments[2] || false;
                this._canonicalize();                
            }
        },

        _canonicalize: function() {
            var doIt;
            var segments = this._.segments;
            for (var i = 0; i < segments.length; i++) {
                if (segments[i] == "." || segments[i] == "..") {
                    doIt = true;
                    break;
                }
            }
            if (doIt) {
                var stack = [];
                for (var i = 0; i < segments.length; i++) {
                    if (segments[i] == "..") {
                        if (stack.length == 0) {
                            // if the stack is empty we are going out of our scope
                            // so we need to accumulate segments.  But only if the original
                            // path is relative.  If it is absolute then we can't go any higher than
                            // root so simply toss the .. references.
                            if (!this.hasLeading) {
                                stack.push(segments[i]); //stack push
                            }
                        } else {
                            // if the top is '..' then we are accumulating segments so don't pop
                            if (".." == stack[stack.length - 1]) {
                                stack.push("..");
                            } else {
                                stack.pop();
                            }
                        }
                        //collapse current references
                    } else if (segments[i] != "." || segments.length == 1) {
                        stack.push(segments[i]); //stack push
                    }
                }
                //if the number of segments hasn't changed, then no modification needed
                if (stack.length == segments.length) {
                    return;
                }
                this._.segments = stack;
            }
        },

        _length: function(anotherPath) {
            return this._.segments.length;
        },


        _parse : function( /*String*/ path) {
            if (!path) {
                path = ".";
            }
            var _ = this._,
                segments = path.split("/");

            if (path.charAt(0) == "/") {
                _.hasLeading = true;
                segments.shift();
            }
            if (path.charAt(path.length - 1) == "/") {
                _.hasTrailing = true;
                // If the path ends in '/', split() will create an array whose last element
                // is an empty string. Remove that here.
                segments.pop();
            }
            _.segments = segments;
            _.path = path;

            this._canonicalize()
        },

        /*
         *
         *@method append
         *@parameter {Path|String}tail
         *@return {Path}
         */
        append: /*Path*/ function( /*Path*/ tail) {
            if (types.isString(tail)) {
                return this.appendPathStr(tail);
            } else {
                return this.appendPath(tail);
            }
        },

        /*
         *
         *@method appendPath
         *@parameter {Path}tail
         *@return {Path}
         */
        appendPath: /*Path*/ function( /*Path*/ tail) {
            if (tail.isAbsolute()) {
                return tail;
            }
            var mySegments = this.segments,
                tailSegments = tail.segments,
                newSegments = mySegments.concat(tailSegments),
                result = new Path(newSegments, this.hasLeading, tail.hasTrailing);
            return result;
        },

        /*
         *
         *@method appendPathStr
         *@parameter {String}tail
         *@return {Path}
         */
        appendPathStr: function( /*String*/ tail) {
            tail = new Path(tail || "");
            return this.appendPath(tail);
        },

        /*
         *
         *@method clone
         *@return {Path}
         */
        "clone": function() {
            return new Path(this.segments, this.hasLeading, this.hasTrailing);
        },

        /*
         *Tests if this path ends with the given path.
         *@method endsWidth
         *@parameter {String}tail
         *@return {Boolean}
         */
        "endsWith": /*Boolean*/ function( /*String*/ tail) {
            var segments = this.segments;
            var tailSegments = (new Path(tail)).segments;
            while (tailSegments.length > 0 && segments.length > 0) {
                if (tailSegments.pop() != segments.pop()) {
                    return false;
                }
            }
            return true;
        },

        /*
         *Tests this path for equality with the given object.
         *@method equals
         *@parameter {Path}another
         *@return {Boolean}
         */
        "equals": /*Boolean*/ function( /*Path*/ another) {
            var segments = this._.segments,
                anotherSegments = another._.segments;
            if (segments.length != anotherSegments.length) {
                return false;
            }
            for (var i = 0; i < segments.length; i++) {
                if (anotherSegments[i] != segments[i]) {
                    return false;
                };
            }
            return true;
        },

        /*
         *
         *@method firstSegment
         *@parameter {Number}length
         *@return {String}
         */
        firstSegment: /*String*/ function( /*Number*/ length) {
            var segments = this._.segments;
            return segments[length || 0];
        },

        /*
         *
         *@method getExtension
         *@return {String}
         */
        getExtension: function() {
            var extension = this._.extension,
                path = this._.path;
            if (!textension) {
                extension = this._.extension = path.substr(path.lastIndexOf('.') + 1);
            }
            return extension;
        },

        /*
         *
         *@method getSegments
         *@return {Array}
         */
        getSegments: /*Array*/ function() {
            return this.segments;
        },

        /*
         *Returns the parent path, or null if this path does not have a parent.
         *@method getParentPath
         *@return {Path}
         */
        getParentPath: /*Path*/ function() {
            var parentPath = this._.parentPath;
            if (!parentPath) {
                var parentSegments = this.segments;
                parentSegments.pop();
                parentPath = this._.parentPath = new Path(parentSegments, this.hasLeading);
            }
            return parentPath;
        },


        /*
         *Returns the root component of this path as a Path object, or null if this path does not have a root component.
         *@method getRoot
         *@return {Path}
         */
        "getRoot": /*Path*/ function() {
            //TODO: will be implemented
        },

        /*
         *Tells whether or not this path is absolute.
         *@method isAbsolute
         *@return {Boolean}
         */
        isAbsolute: /*Boolean*/ function() {
            return this.hasLeading;
        },


        /*
         *
         *@method lastSegment
         *@ return {String}
         */
        lastSegment: /*String*/ function() {
            var segments = this._.segments;
            return segments[segments.length - 1];
        },

        /*
         *
         *@method matchingFirstSegments
         *@parameter {Path}another
         *@return {Number}
         */
        matchingFirstSegments: /*Number*/ function( /*Path*/ another) {
            var mySegments = this.segments;
            var pathSegments = another.segments;
            var max = Math.min(mySegments.length, pathSegments.length);
            var count = 0;
            for (var i = 0; i < max; i++) {
                if (mySegments[i] != pathSegments[i]) {
                    return count;
                }
                count++;
            }
            return count;
        },

        /*
         *Returns a path that is this path with redundant name elements eliminated.
         *@method normalize
         *@return {Path}
         */
        "normalize": /*Path*/ function() {
            //TODO: will be implemented
        },


        /*
         *
         *@method removeFirstSegments
         *@parameter {Number}count
         *@return {Path}
         */
        removeFirstSegments: /*Path*/ function( /*Number*/ count) {
            var segments = this._.segments,
                hasLeading = this._.hasLeading;
            hasTrailing = this._.hasTrailing;

            return new Path(segments.slice(count, segments.length), hasLeading, hasTrailing);
        },

        /*
         *
         *@method removeLastSegments
         *@parameter {Number}count
         *@return {Path}
         */
        removeLastSegments: /*Path*/ function( /*Number?*/ count) {
            var segments = this._.segments,
                hasLeading = this._.hasLeading;
            hasTrailing = this._.hasTrailing;

            if (!count) {
                count = 1;
            }

            return new Path(segments.slice(0, segments.length - count), hasLeading, hasTrailing);
        },

        /*
         *
         *@method removeMatchingFirstSegments
         *@parameter {Path}another
         *@return {Path}
         */
        removeMatchingFirstSegments: /*Path*/ function( /*Path*/ another) {
            var match = this.matchingFirstSegments(another);
            return this.removeFirstSegments(match);
        },

        /*
         *
         *@method removeMatchingLastSegments
         *@parameter {Path}another
         *@return {Path}
         */
        removeMatchingLastSegments: /*Path*/ function( /*Path*/ another) {
            var match = this.matchingFirstSegments(anotherPath);
            return this.removeLastSegments(match);
        },

        /*
         *
         *@method removeRelative
         *@return {Path}
         */
        removeRelative: function() {
            var segs = this.segments;
            if (segs.length > 0 && segs[1] == ".")
                return this.removeFirstSegments(1);
            return this;
        },

        /*
         *Constructs a relative path between this path and a given path.
         *@method relativeTo
         *@parameter {Path}base
         *@return {Path}
         */
        relativeTo: /*Path*/ function( /*Path|String*/ base, /*Boolean*/ ignoreFilename) {
            if (typeof base == 'string') {
                base = new Path(base);
            }
            var mySegments = this.segments;
            if (this.isAbsolute()) {
                return this;
            }
            var baseSegments = base.segments;
            var commonLength = this.matchingFirstSegments(base);
            var baseSegmentLength = baseSegments.length;
            if (ignoreFilename) {
                baseSegmentLength = baseSegmentLength - 1;
            }
            var differenceLength = baseSegmentLength - commonLength;
            var newSegmentLength = differenceLength + mySegments.length - commonLength;
            if (newSegmentLength == 0) {
                return Path.EMPTY;
            }
            var newSegments = [];
            for (var i = 0; i < differenceLength; i++) {
                newSegments.push('..');
            }
            for (var i = commonLength; i < mySegments.length; i++) {
                newSegments.push(mySegments[i]);
            }
            return new Path(newSegments, false, this.hasTrailing);
        },

        /*
         *
         *@method segment
         *@parameter {Number}index
         *@return {String}
         */
        segment: /*String*/ function( /*Number*/ index) {
            var segments = this._.segments;
            if (segments.length < index) return null;
            return segments[index];
        },

        /*
         *
         *@method startsWith
         *@parameter {Path}index
         *@return {Boolean}
         */
        startsWith: /*Boolean*/ function( /*Path*/ another) {
            var count = this.matchingFirstSegments(another);
            return another._length() == count;
        },

        /*
         *
         *@method toString
         *@return {String}
         */
        toString: function() {
            var result = [],
                segments = this._.segments;
            if (this.hasLeading) {
                result.push("/");
            }
            for (var i = 0; i < segments.length; i++) {
                if (i > 0) {
                    result.push("/");
                }
                result.push(segments[i]);
            }
            if (this.hasTrailing) {
                result.push("/");
            }
            return result.join("");
        },

        hasLeading : {
            get : function() {
                return this._.hasLeading
            }
        },

        hasTrailing : {
            get : function() {
                return this._.hasTrailing
            }
        }

    });


    Path.EMPTY = new Path("");

    return urls.Path = Path;
});

define('skylark-langx-urls/main',[
	"./urls",
	"./create_object_url",
	"./create_valid_absolute_url",
	"./get-absolute-url",
	"./get-file-extension",
	"./get-file-name",
	"./get-query",
	"./is-cross-origin",
	"./is_same_origin",
	"./parse-url",
	"./path"
],function(urls){
	return urls;
});
define('skylark-langx-urls', ['skylark-langx-urls/main'], function (main) { return main; });

define('skylark-langx/urls',[
	"skylark-langx-urls"
],function(urls){
	return urls;
});
define('skylark-langx/langx',[
    "./skylark",
    "./arrays",
    "./array-store",
    "./aspect",
    "./async",
    "./binary",
    "./constructs",
    "./datetimes",
    "./deferred",
    "./emitter",
    "./evented",
    "./events",
    "./funcs",
    "./globals",
    "./hoster",
    "./klass",
    "./maths",
    "./numerics",
    "./objects",
    "./stateful",
    "./strings",
    "./topic",
    "./types",
    "./urls"
], function(
    skylark,
    arrays,
    ArrayStore,
    aspect,
    async,
    binary,
    constructs,
    datetimes,
    Deferred,
    Emitter,
    Evented,
    events,
    funcs,
    globals,
    hoster,
    klass,
    maths,
    numerics,
    objects,
    Stateful,
    strings,
    topic,
    types,
    urls
) {
    "use strict";
    var toString = {}.toString,
        concat = Array.prototype.concat,
        indexOf = Array.prototype.indexOf,
        slice = Array.prototype.slice,
        filter = Array.prototype.filter,
        mixin = objects.mixin,
        safeMixin = objects.safeMixin,
        isFunction = types.isFunction;


    function funcArg(context, arg, idx, payload) {
        return isFunction(arg) ? arg.call(context, idx, payload) : arg;
    }

    function getQueryParams(url) {
        var url = url || window.location.href,
            segs = url.split("?"),
            params = {};

        if (segs.length > 1) {
            segs[1].split("&").forEach(function(queryParam) {
                var nv = queryParam.split('=');
                params[nv[0]] = nv[1];
            });
        }
        return params;
    }


    function toPixel(value) {
        // style values can be floats, client code may want
        // to round for integer pixels.
        return parseFloat(value) || 0;
    }


    var _uid = 1;

    function uid(obj) {
        return obj._uid || (obj._uid = _uid++);
    }

    function langx() {
        return langx;
    }

    mixin(langx, {
        createEvent : Emitter.createEvent,

        funcArg: funcArg,

        getQueryParams: getQueryParams,

        toPixel: toPixel,

        uid: uid,

        URL: typeof window !== "undefined" ? window.URL || window.webkitURL : null

    });


    mixin(langx, arrays,aspect,datetimes,funcs,numerics,objects,strings,types,{
        ArrayStore : ArrayStore,

        async : async,
        
        Deferred: Deferred,

        Emitter: Emitter,

        Evented: Evented,

        hoster : hoster,

        klass : klass,
       
        Stateful: Stateful,

        topic : topic
    });

    return skylark.langx = langx;
});
define('skylark-langx/main',[
    "./langx"
], function(langx) {
    return langx;
});

define('skylark-langx', ['skylark-langx/main'], function (main) { return main; });

define('skylark-formio/vendors/kraaden/autocomplete',[],function(){
  /*
   * https://github.com/kraaden/autocomplete
   * Copyright (c) 2016 Denys Krasnoshchok
   * MIT License
   */
  function autocomplete(settings) {
      // just an alias to minimize JS file size
      var doc = document;
      var container = doc.createElement("div");
      var containerStyle = container.style;
      var userAgent = navigator.userAgent;
      var mobileFirefox = userAgent.indexOf("Firefox") !== -1 && userAgent.indexOf("Mobile") !== -1;
      var debounceWaitMs = settings.debounceWaitMs || 0;
      var preventSubmit = settings.preventSubmit || false;
      // 'keyup' event will not be fired on Mobile Firefox, so we have to use 'input' event instead
      var keyUpEventName = mobileFirefox ? "input" : "keyup";
      var items = [];
      var inputValue = "";
      var minLen = 2;
      var showOnFocus = settings.showOnFocus;
      var selected;
      var keypressCounter = 0;
      var debounceTimer;
      if (settings.minLength !== undefined) {
          minLen = settings.minLength;
      }
      if (!settings.input) {
          throw new Error("input undefined");
      }
      var input = settings.input;
      container.className = "autocomplete " + (settings.className || "");
      // IOS implementation for fixed positioning has many bugs, so we will use absolute positioning
      containerStyle.position = "absolute";
      /**
       * Detach the container from DOM
       */
      function detach() {
          var parent = container.parentNode;
          if (parent) {
              parent.removeChild(container);
          }
      }
      /**
       * Clear debouncing timer if assigned
       */
      function clearDebounceTimer() {
          if (debounceTimer) {
              window.clearTimeout(debounceTimer);
          }
      }
      /**
       * Attach the container to DOM
       */
      function attach() {
          if (!container.parentNode) {
              doc.body.appendChild(container);
          }
      }
      /**
       * Check if container for autocomplete is displayed
       */
      function containerDisplayed() {
          return !!container.parentNode;
      }
      /**
       * Clear autocomplete state and hide container
       */
      function clear() {
          // prevent the update call if there are pending AJAX requests
          keypressCounter++;
          items = [];
          inputValue = "";
          selected = undefined;
          detach();
      }
      /**
       * Update autocomplete position
       */
      function updatePosition() {
          if (!containerDisplayed()) {
              return;
          }
          containerStyle.height = "auto";
          containerStyle.width = input.offsetWidth + "px";
          var maxHeight = 0;
          var inputRect;
          function calc() {
              var docEl = doc.documentElement;
              var clientTop = docEl.clientTop || doc.body.clientTop || 0;
              var clientLeft = docEl.clientLeft || doc.body.clientLeft || 0;
              var scrollTop = window.pageYOffset || docEl.scrollTop;
              var scrollLeft = window.pageXOffset || docEl.scrollLeft;
              inputRect = input.getBoundingClientRect();
              var top = inputRect.top + input.offsetHeight + scrollTop - clientTop;
              var left = inputRect.left + scrollLeft - clientLeft;
              containerStyle.top = top + "px";
              containerStyle.left = left + "px";
              maxHeight = window.innerHeight - (inputRect.top + input.offsetHeight);
              if (maxHeight < 0) {
                  maxHeight = 0;
              }
              containerStyle.top = top + "px";
              containerStyle.bottom = "";
              containerStyle.left = left + "px";
              containerStyle.maxHeight = maxHeight + "px";
          }
          // the calc method must be called twice, otherwise the calculation may be wrong on resize event (chrome browser)
          calc();
          calc();
          if (settings.customize && inputRect) {
              settings.customize(input, inputRect, container, maxHeight);
          }
      }
      /**
       * Redraw the autocomplete div element with suggestions
       */
      function update() {
          // delete all children from autocomplete DOM container
          while (container.firstChild) {
              container.removeChild(container.firstChild);
          }
          // function for rendering autocomplete suggestions
          var render = function (item, currentValue) {
              var itemElement = doc.createElement("div");
              itemElement.textContent = item.label || "";
              return itemElement;
          };
          if (settings.render) {
              render = settings.render;
          }
          // function to render autocomplete groups
          var renderGroup = function (groupName, currentValue) {
              var groupDiv = doc.createElement("div");
              groupDiv.textContent = groupName;
              return groupDiv;
          };
          if (settings.renderGroup) {
              renderGroup = settings.renderGroup;
          }
          var fragment = doc.createDocumentFragment();
          var prevGroup = "#9?$";
          items.forEach(function (item) {
              if (item.group && item.group !== prevGroup) {
                  prevGroup = item.group;
                  var groupDiv = renderGroup(item.group, inputValue);
                  if (groupDiv) {
                      groupDiv.className += " group";
                      fragment.appendChild(groupDiv);
                  }
              }
              var div = render(item, inputValue);
              if (div) {
                  div.addEventListener("click", function (ev) {
                      settings.onSelect(item, input);
                      clear();
                      ev.preventDefault();
                      ev.stopPropagation();
                  });
                  if (item === selected) {
                      div.className += " selected";
                  }
                  fragment.appendChild(div);
              }
          });
          container.appendChild(fragment);
          if (items.length < 1) {
              if (settings.emptyMsg) {
                  var empty = doc.createElement("div");
                  empty.className = "empty";
                  empty.textContent = settings.emptyMsg;
                  container.appendChild(empty);
              }
              else {
                  clear();
                  return;
              }
          }
          attach();
          updatePosition();
          updateScroll();
      }
      function updateIfDisplayed() {
          if (containerDisplayed()) {
              update();
          }
      }
      function resizeEventHandler() {
          updateIfDisplayed();
      }
      function scrollEventHandler(e) {
          if (e.target !== container) {
              updateIfDisplayed();
          }
          else {
              e.preventDefault();
          }
      }
      function keyupEventHandler(ev) {
          var keyCode = ev.which || ev.keyCode || 0;
          var ignore = [38 /* Up */, 13 /* Enter */, 27 /* Esc */, 39 /* Right */, 37 /* Left */, 16 /* Shift */, 17 /* Ctrl */, 18 /* Alt */, 20 /* CapsLock */, 91 /* WindowsKey */, 9 /* Tab */];
          for (var _i = 0, ignore_1 = ignore; _i < ignore_1.length; _i++) {
              var key = ignore_1[_i];
              if (keyCode === key) {
                  return;
              }
          }
          if (keyCode >= 112 /* F1 */ && keyCode <= 123 /* F12 */) {
              return;
          }
          // the down key is used to open autocomplete
          if (keyCode === 40 /* Down */ && containerDisplayed()) {
              return;
          }
          startFetch(0 /* Keyboard */);
      }
      /**
       * Automatically move scroll bar if selected item is not visible
       */
      function updateScroll() {
          var elements = container.getElementsByClassName("selected");
          if (elements.length > 0) {
              var element = elements[0];
              // make group visible
              var previous = element.previousElementSibling;
              if (previous && previous.className.indexOf("group") !== -1 && !previous.previousElementSibling) {
                  element = previous;
              }
              if (element.offsetTop < container.scrollTop) {
                  container.scrollTop = element.offsetTop;
              }
              else {
                  var selectBottom = element.offsetTop + element.offsetHeight;
                  var containerBottom = container.scrollTop + container.offsetHeight;
                  if (selectBottom > containerBottom) {
                      container.scrollTop += selectBottom - containerBottom;
                  }
              }
          }
      }
      /**
       * Select the previous item in suggestions
       */
      function selectPrev() {
          if (items.length < 1) {
              selected = undefined;
          }
          else {
              if (selected === items[0]) {
                  selected = items[items.length - 1];
              }
              else {
                  for (var i = items.length - 1; i > 0; i--) {
                      if (selected === items[i] || i === 1) {
                          selected = items[i - 1];
                          break;
                      }
                  }
              }
          }
      }
      /**
       * Select the next item in suggestions
       */
      function selectNext() {
          if (items.length < 1) {
              selected = undefined;
          }
          if (!selected || selected === items[items.length - 1]) {
              selected = items[0];
              return;
          }
          for (var i = 0; i < (items.length - 1); i++) {
              if (selected === items[i]) {
                  selected = items[i + 1];
                  break;
              }
          }
      }
      function keydownEventHandler(ev) {
          var keyCode = ev.which || ev.keyCode || 0;
          if (keyCode === 38 /* Up */ || keyCode === 40 /* Down */ || keyCode === 27 /* Esc */) {
              var containerIsDisplayed = containerDisplayed();
              if (keyCode === 27 /* Esc */) {
                  clear();
              }
              else {
                  if (!containerDisplayed || items.length < 1) {
                      return;
                  }
                  keyCode === 38 /* Up */
                      ? selectPrev()
                      : selectNext();
                  update();
              }
              ev.preventDefault();
              if (containerIsDisplayed) {
                  ev.stopPropagation();
              }
              return;
          }
          if (keyCode === 13 /* Enter */) {
              if (selected) {
                  settings.onSelect(selected, input);
                  clear();
              }
              if (preventSubmit) {
                  ev.preventDefault();
              }
          }
      }
      function focusEventHandler() {
          if (showOnFocus) {
              startFetch(1 /* Focus */);
          }
      }
      function startFetch(trigger) {
          // if multiple keys were pressed, before we get update from server,
          // this may cause redrawing our autocomplete multiple times after the last key press.
          // to avoid this, the number of times keyboard was pressed will be
          // saved and checked before redraw our autocomplete box.
          var savedKeypressCounter = ++keypressCounter;
          var val = input.value;
          if (val.length >= minLen || trigger === 1 /* Focus */) {
              clearDebounceTimer();
              debounceTimer = window.setTimeout(function () {
                  settings.fetch(val, function (elements) {
                      if (keypressCounter === savedKeypressCounter && elements) {
                          items = elements;
                          inputValue = val;
                          selected = items.length > 0 ? items[0] : undefined;
                          update();
                      }
                  }, 0 /* Keyboard */);
              }, trigger === 0 /* Keyboard */ ? debounceWaitMs : 0);
          }
          else {
              clear();
          }
      }
      function blurEventHandler() {
          // we need to delay clear, because when we click on an item, blur will be called before click and remove items from DOM
          setTimeout(function () {
              if (doc.activeElement !== input) {
                  clear();
              }
          }, 200);
      }
      /**
       * Fixes #26: on long clicks focus will be lost and onSelect method will not be called
       */
      container.addEventListener("mousedown", function (evt) {
          evt.stopPropagation();
          evt.preventDefault();
      });
      /**
       * Fixes #30: autocomplete closes when scrollbar is clicked in IE
       * See: https://stackoverflow.com/a/9210267/13172349
       */
      container.addEventListener("focus", function () { return input.focus(); });
      /**
       * This function will remove DOM elements and clear event handlers
       */
      function destroy() {
          input.removeEventListener("focus", focusEventHandler);
          input.removeEventListener("keydown", keydownEventHandler);
          input.removeEventListener(keyUpEventName, keyupEventHandler);
          input.removeEventListener("blur", blurEventHandler);
          window.removeEventListener("resize", resizeEventHandler);
          doc.removeEventListener("scroll", scrollEventHandler, true);
          clearDebounceTimer();
          clear();
      }
      // setup event handlers
      input.addEventListener("keydown", keydownEventHandler);
      input.addEventListener(keyUpEventName, keyupEventHandler);
      input.addEventListener("blur", blurEventHandler);
      input.addEventListener("focus", focusEventHandler);
      window.addEventListener("resize", resizeEventHandler);
      doc.addEventListener("scroll", scrollEventHandler, true);
      return {
          destroy: destroy
      };
  }

  return autocomplete;

});

define('skylark-lodash/lodash',[
  "skylark-langx/skylark"
],function(skylark){

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.11';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('dÃ©jÃ  vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  return skylark.lodash = _;

});
define('skylark-lodash/main',[
	"./lodash"
],function(_){
	return _;
});
define('skylark-lodash', ['skylark-lodash/main'], function (main) { return main; });

define('skylark-formio/vendors/getify/npo',[],function(){
	return Promise;
});
define('skylark-formio/vendors/fetch-ponyfill/fetch',[],function(){

  var self = window;

  function fetchPonyfill(options) {
    var Promise = options && options.Promise || self.Promise;
    var XMLHttpRequest = options && options.XMLHttpRequest || self.XMLHttpRequest;
    var global = self;

    return (function () {
      var self = Object.create(global, {
        fetch: {
          value: undefined,
          writable: true
        }
      });

      (function(self) {
        'use strict';

        if (self.fetch) {
          return
        }

        var support = {
          searchParams: 'URLSearchParams' in self,
          iterable: 'Symbol' in self && 'iterator' in Symbol,
          blob: 'FileReader' in self && 'Blob' in self && (function() {
            try {
              new Blob()
              return true
            } catch(e) {
              return false
            }
          })(),
          formData: 'FormData' in self,
          arrayBuffer: 'ArrayBuffer' in self
        }

        if (support.arrayBuffer) {
          var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]'
          ]

          var isDataView = function(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj)
          }

          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
          }
        }

        function normalizeName(name) {
          if (typeof name !== 'string') {
            name = String(name)
          }
          if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
            throw new TypeError('Invalid character in header field name')
          }
          return name.toLowerCase()
        }

        function normalizeValue(value) {
          if (typeof value !== 'string') {
            value = String(value)
          }
          return value
        }

        // Build a destructive iterator for the value list
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift()
              return {done: value === undefined, value: value}
            }
          }

          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator
            }
          }

          return iterator
        }

        function Headers(headers) {
          this.map = {}

          if (headers instanceof Headers) {
            headers.forEach(function(value, name) {
              this.append(name, value)
            }, this)
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1])
            }, this)
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name])
            }, this)
          }
        }

        Headers.prototype.append = function(name, value) {
          name = normalizeName(name)
          value = normalizeValue(value)
          var oldValue = this.map[name]
          this.map[name] = oldValue ? oldValue+','+value : value
        }

        Headers.prototype['delete'] = function(name) {
          delete this.map[normalizeName(name)]
        }

        Headers.prototype.get = function(name) {
          name = normalizeName(name)
          return this.has(name) ? this.map[name] : null
        }

        Headers.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name))
        }

        Headers.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value)
        }

        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this)
            }
          }
        }

        Headers.prototype.keys = function() {
          var items = []
          this.forEach(function(value, name) { items.push(name) })
          return iteratorFor(items)
        }

        Headers.prototype.values = function() {
          var items = []
          this.forEach(function(value) { items.push(value) })
          return iteratorFor(items)
        }

        Headers.prototype.entries = function() {
          var items = []
          this.forEach(function(value, name) { items.push([name, value]) })
          return iteratorFor(items)
        }

        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries
        }

        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'))
          }
          body.bodyUsed = true
        }

        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result)
            }
            reader.onerror = function() {
              reject(reader.error)
            }
          })
        }

        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader()
          var promise = fileReaderReady(reader)
          reader.readAsArrayBuffer(blob)
          return promise
        }

        function readBlobAsText(blob) {
          var reader = new FileReader()
          var promise = fileReaderReady(reader)
          reader.readAsText(blob)
          return promise
        }

        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf)
          var chars = new Array(view.length)

          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i])
          }
          return chars.join('')
        }

        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0)
          } else {
            var view = new Uint8Array(buf.byteLength)
            view.set(new Uint8Array(buf))
            return view.buffer
          }
        }

        function Body() {
          this.bodyUsed = false

          this._initBody = function(body) {
            this._bodyInit = body
            if (!body) {
              this._bodyText = ''
            } else if (typeof body === 'string') {
              this._bodyText = body
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString()
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer)
              // IE 10-11 can't handle a DataView body.
              this._bodyInit = new Blob([this._bodyArrayBuffer])
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body)
            } else {
              throw new Error('unsupported BodyInit type')
            }

            if (!this.headers.get('content-type')) {
              if (typeof body === 'string') {
                this.headers.set('content-type', 'text/plain;charset=UTF-8')
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set('content-type', this._bodyBlob.type)
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
              }
            }
          }

          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this)
              if (rejected) {
                return rejected
              }

              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob)
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]))
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as blob')
              } else {
                return Promise.resolve(new Blob([this._bodyText]))
              }
            }

            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
              } else {
                return this.blob().then(readBlobAsArrayBuffer)
              }
            }
          }

          this.text = function() {
            var rejected = consumed(this)
            if (rejected) {
              return rejected
            }

            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob)
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as text')
            } else {
              return Promise.resolve(this._bodyText)
            }
          }

          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode)
            }
          }

          this.json = function() {
            return this.text().then(JSON.parse)
          }

          return this
        }

        // HTTP methods whose capitalization should be normalized
        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

        function normalizeMethod(method) {
          var upcased = method.toUpperCase()
          return (methods.indexOf(upcased) > -1) ? upcased : method
        }

        function Request(input, options) {
          options = options || {}
          var body = options.body

          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError('Already read')
            }
            this.url = input.url
            this.credentials = input.credentials
            if (!options.headers) {
              this.headers = new Headers(input.headers)
            }
            this.method = input.method
            this.mode = input.mode
            if (!body && input._bodyInit != null) {
              body = input._bodyInit
              input.bodyUsed = true
            }
          } else {
            this.url = String(input)
          }

          this.credentials = options.credentials || this.credentials || 'omit'
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers)
          }
          this.method = normalizeMethod(options.method || this.method || 'GET')
          this.mode = options.mode || this.mode || null
          this.referrer = null

          if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests')
          }
          this._initBody(body)
        }

        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit })
        }

        function decode(body) {
          var form = new FormData()
          body.trim().split('&').forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split('=')
              var name = split.shift().replace(/\+/g, ' ')
              var value = split.join('=').replace(/\+/g, ' ')
              form.append(decodeURIComponent(name), decodeURIComponent(value))
            }
          })
          return form
        }

        function parseHeaders(rawHeaders) {
          var headers = new Headers()
          rawHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(':')
            var key = parts.shift().trim()
            if (key) {
              var value = parts.join(':').trim()
              headers.append(key, value)
            }
          })
          return headers
        }

        Body.call(Request.prototype)

        function Response(bodyInit, options) {
          if (!options) {
            options = {}
          }

          this.type = 'default'
          this.status = 'status' in options ? options.status : 200
          this.ok = this.status >= 200 && this.status < 300
          this.statusText = 'statusText' in options ? options.statusText : 'OK'
          this.headers = new Headers(options.headers)
          this.url = options.url || ''
          this._initBody(bodyInit)
        }

        Body.call(Response.prototype)

        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          })
        }

        Response.error = function() {
          var response = new Response(null, {status: 0, statusText: ''})
          response.type = 'error'
          return response
        }

        var redirectStatuses = [301, 302, 303, 307, 308]

        Response.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code')
          }

          return new Response(null, {status: status, headers: {location: url}})
        }

        self.Headers = Headers
        self.Request = Request
        self.Response = Response

        self.fetch = function(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init)
            var xhr = new XMLHttpRequest()

            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || '')
              }
              options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
              var body = 'response' in xhr ? xhr.response : xhr.responseText
              resolve(new Response(body, options))
            }

            xhr.onerror = function() {
              reject(new TypeError('Network request failed'))
            }

            xhr.ontimeout = function() {
              reject(new TypeError('Network request failed'))
            }

            xhr.open(request.method, request.url, true)

            if (request.credentials === 'include') {
              xhr.withCredentials = true
            }

            if ('responseType' in xhr && support.blob) {
              xhr.responseType = 'blob'
            }

            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value)
            })

            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
          })
        }
        self.fetch.polyfill = true
      })(typeof self !== 'undefined' ? self : this);


      return {
        fetch: self.fetch,
        Headers: self.Headers,
        Request: self.Request,
        Response: self.Response
      };
    }());
  }

  return fetchPonyfill;
});

/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */
define('skylark-formio/vendors/eventemitter2/EventEmitter2',[],function() {
  var hasOwnProperty= Object.hasOwnProperty;
  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
  };
  var defaultMaxListeners = 10;
  var nextTickSupported= typeof process=='object' && typeof process.nextTick=='function';
  var symbolsSupported= typeof Symbol==='function';
  var reflectSupported= typeof Reflect === 'object';
  var setImmediateSupported= typeof setImmediate === 'function';
  var _setImmediate= setImmediateSupported ? setImmediate : setTimeout;
  var ownKeys= symbolsSupported? (reflectSupported && typeof Reflect.ownKeys==='function'? Reflect.ownKeys : function(obj){
    var arr= Object.getOwnPropertyNames(obj);
    arr.push.apply(arr, Object.getOwnPropertySymbols(obj));
    return arr;
  }) : Object.keys;

  function init() {
    this._events = {};
    if (this._conf) {
      configure.call(this, this._conf);
    }
  }

  function configure(conf) {
    if (conf) {
      this._conf = conf;

      conf.delimiter && (this.delimiter = conf.delimiter);

      if(conf.maxListeners!==undefined){
          this._maxListeners= conf.maxListeners;
      }

      conf.wildcard && (this.wildcard = conf.wildcard);
      conf.newListener && (this._newListener = conf.newListener);
      conf.removeListener && (this._removeListener = conf.removeListener);
      conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);
      conf.ignoreErrors && (this.ignoreErrors = conf.ignoreErrors);

      if (this.wildcard) {
        this.listenerTree = {};
      }
    }
  }

  function logPossibleMemoryLeak(count, eventName) {
    var errorMsg = '(node) warning: possible EventEmitter memory ' +
        'leak detected. ' + count + ' listeners added. ' +
        'Use emitter.setMaxListeners() to increase limit.';

    if(this.verboseMemoryLeak){
      errorMsg += ' Event name: ' + eventName + '.';
    }

    if(typeof process !== 'undefined' && process.emitWarning){
      var e = new Error(errorMsg);
      e.name = 'MaxListenersExceededWarning';
      e.emitter = this;
      e.count = count;
      process.emitWarning(e);
    } else {
      console.error(errorMsg);

      if (console.trace){
        console.trace();
      }
    }
  }

  var toArray = function (a, b, c) {
    var n = arguments.length;
    switch (n) {
      case 0:
        return [];
      case 1:
        return [a];
      case 2:
        return [a, b];
      case 3:
        return [a, b, c];
      default:
        var arr = new Array(n);
        while (n--) {
          arr[n] = arguments[n];
        }
        return arr;
    }
  };

  function toObject(keys, values) {
    var obj = {};
    var key;
    var len = keys.length;
    var valuesCount = values ? value.length : 0;
    for (var i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = i < valuesCount ? values[i] : undefined;
    }
    return obj;
  }

  function TargetObserver(emitter, target, options) {
    this._emitter = emitter;
    this._target = target;
    this._listeners = {};
    this._listenersCount = 0;

    var on, off;

    if (options.on || options.off) {
      on = options.on;
      off = options.off;
    }

    if (target.addEventListener) {
      on = target.addEventListener;
      off = target.removeEventListener;
    } else if (target.addListener) {
      on = target.addListener;
      off = target.removeListener;
    } else if (target.on) {
      on = target.on;
      off = target.off;
    }

    if (!on && !off) {
      throw Error('target does not implement any known event API');
    }

    if (typeof on !== 'function') {
      throw TypeError('on method must be a function');
    }

    if (typeof off !== 'function') {
      throw TypeError('off method must be a function');
    }

    this._on = on;
    this._off = off;

    var _observers= emitter._observers;
    if(_observers){
      _observers.push(this);
    }else{
      emitter._observers= [this];
    }
  }

  Object.assign(TargetObserver.prototype, {
    subscribe: function(event, localEvent, reducer){
      var observer= this;
      var target= this._target;
      var emitter= this._emitter;
      var listeners= this._listeners;
      var handler= function(){
        var args= toArray.apply(null, arguments);
        var eventObj= {
          data: args,
          name: localEvent,
          original: event
        };
        if(reducer){
          var result= reducer.call(target, eventObj);
          if(result!==false){
            emitter.emit.apply(emitter, [eventObj.name].concat(args))
          }
          return;
        }
        emitter.emit.apply(emitter, [localEvent].concat(args));
      };


      if(listeners[event]){
        throw Error('Event \'' + event + '\' is already listening');
      }

      this._listenersCount++;

      if(emitter._newListener && emitter._removeListener && !observer._onNewListener){

        this._onNewListener = function (_event) {
          if (_event === localEvent && listeners[event] === null) {
            listeners[event] = handler;
            observer._on.call(target, event, handler);
          }
        };

        emitter.on('newListener', this._onNewListener);

        this._onRemoveListener= function(_event){
          if(_event === localEvent && !emitter.hasListeners(_event) && listeners[event]){
            listeners[event]= null;
            observer._off.call(target, event, handler);
          }
        };

        listeners[event]= null;

        emitter.on('removeListener', this._onRemoveListener);
      }else{
        listeners[event]= handler;
        observer._on.call(target, event, handler);
      }
    },

    unsubscribe: function(event){
      var observer= this;
      var listeners= this._listeners;
      var emitter= this._emitter;
      var handler;
      var events;
      var off= this._off;
      var target= this._target;
      var i;

      if(event && typeof event!=='string'){
        throw TypeError('event must be a string');
      }

      function clearRefs(){
        if(observer._onNewListener){
          emitter.off('newListener', observer._onNewListener);
          emitter.off('removeListener', observer._onRemoveListener);
          observer._onNewListener= null;
          observer._onRemoveListener= null;
        }
        var index= findTargetIndex.call(emitter, observer);
        emitter._observers.splice(index, 1);
      }

      if(event){
        handler= listeners[event];
        if(!handler) return;
        off.call(target, event, handler);
        delete listeners[event];
        if(!--this._listenersCount){
          clearRefs();
        }
      }else{
        events= ownKeys(listeners);
        i= events.length;
        while(i-->0){
          event= events[i];
          off.call(target, event, listeners[event]);
        }
        this._listeners= {};
        this._listenersCount= 0;
        clearRefs();
      }
    }
  });

  function resolveOptions(options, schema, reducers, allowUnknown) {
    var computedOptions = Object.assign({}, schema);

    if (!options) return computedOptions;

    if (typeof options !== 'object') {
      throw TypeError('options must be an object')
    }

    var keys = Object.keys(options);
    var length = keys.length;
    var option, value;
    var reducer;

    function reject(reason) {
      throw Error('Invalid "' + option + '" option value' + (reason ? '. Reason: ' + reason : ''))
    }

    for (var i = 0; i < length; i++) {
      option = keys[i];
      if (!allowUnknown && !hasOwnProperty.call(schema, option)) {
        throw Error('Unknown "' + option + '" option');
      }
      value = options[option];
      if (value !== undefined) {
        reducer = reducers[option];
        computedOptions[option] = reducer ? reducer(value, reject) : value;
      }
    }
    return computedOptions;
  }

  function constructorReducer(value, reject) {
    if (typeof value !== 'function' || !value.hasOwnProperty('prototype')) {
      reject('value must be a constructor');
    }
    return value;
  }

  function makeTypeReducer(types) {
    var message= 'value must be type of ' + types.join('|');
    var len= types.length;
    var firstType= types[0];
    var secondType= types[1];

    if (len === 1) {
      return function (v, reject) {
        if (typeof v === firstType) {
          return v;
        }
        reject(message);
      }
    }

    if (len === 2) {
      return function (v, reject) {
        var kind= typeof v;
        if (kind === firstType || kind === secondType) return v;
        reject(message);
      }
    }

    return function (v, reject) {
      var kind = typeof v;
      var i = len;
      while (i-- > 0) {
        if (kind === types[i]) return v;
      }
      reject(message);
    }
  }

  var functionReducer= makeTypeReducer(['function']);

  var objectFunctionReducer= makeTypeReducer(['object', 'function']);

  function makeCancelablePromise(Promise, executor, options) {
    var isCancelable;
    var callbacks;
    var timer= 0;
    var subscriptionClosed;

    var promise = new Promise(function (resolve, reject, onCancel) {
      options= resolveOptions(options, {
        timeout: 0,
        overload: false
      }, {
        timeout: function(value, reject){
          value*= 1;
          if (typeof value !== 'number' || value < 0 || !Number.isFinite(value)) {
            reject('timeout must be a positive number');
          }
          return value;
        }
      });

      isCancelable = !options.overload && typeof Promise.prototype.cancel === 'function' && typeof onCancel === 'function';

      function cleanup() {
        if (callbacks) {
          callbacks = null;
        }
        if (timer) {
          clearTimeout(timer);
          timer = 0;
        }
      }

      var _resolve= function(value){
        cleanup();
        resolve(value);
      };

      var _reject= function(err){
        cleanup();
        reject(err);
      };

      if (isCancelable) {
        executor(_resolve, _reject, onCancel);
      } else {
        callbacks = [function(reason){
          _reject(reason || Error('canceled'));
        }];
        executor(_resolve, _reject, function (cb) {
          if (subscriptionClosed) {
            throw Error('Unable to subscribe on cancel event asynchronously')
          }
          if (typeof cb !== 'function') {
            throw TypeError('onCancel callback must be a function');
          }
          callbacks.push(cb);
        });
        subscriptionClosed= true;
      }

      if (options.timeout > 0) {
        timer= setTimeout(function(){
          var reason= Error('timeout');
          timer= 0;
          promise.cancel(reason);
          reject(reason);
        }, options.timeout);
      }
    });

    if (!isCancelable) {
      promise.cancel = function (reason) {
        if (!callbacks) {
          return;
        }
        var length = callbacks.length;
        for (var i = 1; i < length; i++) {
          callbacks[i](reason);
        }
        // internal callback to reject the promise
        callbacks[0](reason);
        callbacks = null;
      };
    }

    return promise;
  }

  function findTargetIndex(observer) {
    var observers = this._observers;
    if(!observers){
      return -1;
    }
    var len = observers.length;
    for (var i = 0; i < len; i++) {
      if (observers[i]._target === observer) return i;
    }
    return -1;
  }

  // Attention, function return type now is array, always !
  // It has zero elements if no any matches found and one or more
  // elements (leafs) if there are matches
  //
  function searchListenerTree(handlers, type, tree, i, typeLength) {
    if (!tree) {
      return null;
    }

    if (i === 0) {
      var kind = typeof type;
      if (kind === 'string') {
        var ns, n, l = 0, j = 0, delimiter = this.delimiter, dl = delimiter.length;
        if ((n = type.indexOf(delimiter)) !== -1) {
          ns = new Array(5);
          do {
            ns[l++] = type.slice(j, n);
            j = n + dl;
          } while ((n = type.indexOf(delimiter, j)) !== -1);

          ns[l++] = type.slice(j);
          type = ns;
          typeLength = l;
        } else {
          type = [type];
          typeLength = 1;
        }
      } else if (kind === 'object') {
        typeLength = type.length;
      } else {
        type = [type];
        typeLength = 1;
      }
    }

    var listeners= null, branch, xTree, xxTree, isolatedBranch, endReached, currentType = type[i],
        nextType = type[i + 1], branches, _listeners;

    if (i === typeLength && tree._listeners) {
      //
      // If at the end of the event(s) list and the tree has listeners
      // invoke those listeners.
      //
      if (typeof tree._listeners === 'function') {
        handlers && handlers.push(tree._listeners);
        return [tree];
      } else {
        handlers && handlers.push.apply(handlers, tree._listeners);
        return [tree];
      }
    }

    if (currentType === '*') {
      //
      // If the event emitted is '*' at this part
      // or there is a concrete match at this patch
      //
      branches= ownKeys(tree);
      n= branches.length;
      while(n-->0){
        branch= branches[n];
        if (branch !== '_listeners') {
          _listeners = searchListenerTree(handlers, type, tree[branch], i + 1, typeLength);
          if(_listeners){
            if(listeners){
              listeners.push.apply(listeners, _listeners);
            }else{
              listeners = _listeners;
            }
          }
        }
      }
      return listeners;
    } else if (currentType === '**') {
      endReached = (i + 1 === typeLength || (i + 2 === typeLength && nextType === '*'));
      if (endReached && tree._listeners) {
        // The next element has a _listeners, add it to the handlers.
        listeners = searchListenerTree(handlers, type, tree, typeLength, typeLength);
      }

      branches= ownKeys(tree);
      n= branches.length;
      while(n-->0){
        branch= branches[n];
        if (branch !== '_listeners') {
          if (branch === '*' || branch === '**') {
            if (tree[branch]._listeners && !endReached) {
              _listeners = searchListenerTree(handlers, type, tree[branch], typeLength, typeLength);
              if(_listeners){
                if(listeners){
                  listeners.push.apply(listeners, _listeners);
                }else{
                  listeners = _listeners;
                }
              }
            }
            _listeners = searchListenerTree(handlers, type, tree[branch], i, typeLength);
          } else if (branch === nextType) {
            _listeners = searchListenerTree(handlers, type, tree[branch], i + 2, typeLength);
          } else {
            // No match on this one, shift into the tree but not in the type array.
            _listeners = searchListenerTree(handlers, type, tree[branch], i, typeLength);
          }
          if(_listeners){
            if(listeners){
              listeners.push.apply(listeners, _listeners);
            }else{
              listeners = _listeners;
            }
          }
        }
      }
      return listeners;
    }else if (tree[currentType]) {
      listeners= searchListenerTree(handlers, type, tree[currentType], i + 1, typeLength);
    }

      xTree = tree['*'];
    if (xTree) {
      //
      // If the listener tree will allow any match for this part,
      // then recursively explore all branches of the tree
      //
      searchListenerTree(handlers, type, xTree, i + 1, typeLength);
    }

    xxTree = tree['**'];
    if (xxTree) {
      if (i < typeLength) {
        if (xxTree._listeners) {
          // If we have a listener on a '**', it will catch all, so add its handler.
          searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
        }

        // Build arrays of matching next branches and others.
        branches= ownKeys(xxTree);
        n= branches.length;
        while(n-->0){
          branch= branches[n];
          if (branch !== '_listeners') {
            if (branch === nextType) {
              // We know the next element will match, so jump twice.
              searchListenerTree(handlers, type, xxTree[branch], i + 2, typeLength);
            } else if (branch === currentType) {
              // Current node matches, move into the tree.
              searchListenerTree(handlers, type, xxTree[branch], i + 1, typeLength);
            } else {
              isolatedBranch = {};
              isolatedBranch[branch] = xxTree[branch];
              searchListenerTree(handlers, type, {'**': isolatedBranch}, i + 1, typeLength);
            }
          }
        }
      } else if (xxTree._listeners) {
        // We have reached the end and still on a '**'
        searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
      } else if (xxTree['*'] && xxTree['*']._listeners) {
        searchListenerTree(handlers, type, xxTree['*'], typeLength, typeLength);
      }
    }

    return listeners;
  }

  function growListenerTree(type, listener) {
    var len = 0, j = 0, i, delimiter = this.delimiter, dl= delimiter.length, ns;

    if(typeof type==='string') {
      if ((i = type.indexOf(delimiter)) !== -1) {
        ns = new Array(5);
        do {
          ns[len++] = type.slice(j, i);
          j = i + dl;
        } while ((i = type.indexOf(delimiter, j)) !== -1);

        ns[len++] = type.slice(j);
      }else{
        ns= [type];
        len= 1;
      }
    }else{
      ns= type;
      len= type.length;
    }

    //
    // Looks for two consecutive '**', if so, don't add the event at all.
    //
    if (len > 1) {
      for (i = 0; i + 1 < len; i++) {
        if (ns[i] === '**' && ns[i + 1] === '**') {
          return;
        }
      }
    }



    var tree = this.listenerTree, name;

    for (i = 0; i < len; i++) {
      name = ns[i];

      tree = tree[name] || (tree[name] = {});

      if (i === len - 1) {
        if (!tree._listeners) {
          tree._listeners = listener;
        } else {
          if (typeof tree._listeners === 'function') {
            tree._listeners = [tree._listeners];
          }

          tree._listeners.push(listener);

          if (
              !tree._listeners.warned &&
              this._maxListeners > 0 &&
              tree._listeners.length > this._maxListeners
          ) {
            tree._listeners.warned = true;
            logPossibleMemoryLeak.call(this, tree._listeners.length, name);
          }
        }
        return true;
      }
    }

    return true;
  }

  function collectTreeEvents(tree, events, root, asArray){
     var branches= ownKeys(tree);
     var i= branches.length;
     var branch, branchName, path;
     var hasListeners= tree['_listeners'];
     var isArrayPath;

     while(i-->0){
         branchName= branches[i];

         branch= tree[branchName];

         if(branchName==='_listeners'){
             path= root;
         }else {
             path = root ? root.concat(branchName) : [branchName];
         }

         isArrayPath= asArray || typeof branchName==='symbol';

         hasListeners && events.push(isArrayPath? path : path.join(this.delimiter));

         if(typeof branch==='object'){
             collectTreeEvents.call(this, branch, events, path, isArrayPath);
         }
     }

     return events;
  }

  function recursivelyGarbageCollect(root) {
    var keys = ownKeys(root);
    var i= keys.length;
    var obj, key, flag;
    while(i-->0){
      key = keys[i];
      obj = root[key];

      if(obj){
          flag= true;
          if(key !== '_listeners' && !recursivelyGarbageCollect(obj)){
             delete root[key];
          }
      }
    }

    return flag;
  }

  function Listener(emitter, event, listener){
    this.emitter= emitter;
    this.event= event;
    this.listener= listener;
  }

  Listener.prototype.off= function(){
    this.emitter.off(this.event, this.listener);
    return this;
  };

  function setupListener(event, listener, options){
      if (options === true) {
        promisify = true;
      } else if (options === false) {
        async = true;
      } else {
        if (!options || typeof options !== 'object') {
          throw TypeError('options should be an object or true');
        }
        var async = options.async;
        var promisify = options.promisify;
        var nextTick = options.nextTick;
        var objectify = options.objectify;
      }

      if (async || nextTick || promisify) {
        var _listener = listener;
        var _origin = listener._origin || listener;

        if (nextTick && !nextTickSupported) {
          throw Error('process.nextTick is not supported');
        }

        if (promisify === undefined) {
          promisify = listener.constructor.name === 'AsyncFunction';
        }

        listener = function () {
          var args = arguments;
          var context = this;
          var event = this.event;

          return promisify ? (nextTick ? Promise.resolve() : new Promise(function (resolve) {
            _setImmediate(resolve);
          }).then(function () {
            context.event = event;
            return _listener.apply(context, args)
          })) : (nextTick ? process.nextTick : _setImmediate)(function () {
            context.event = event;
            _listener.apply(context, args)
          });
        };

        listener._async = true;
        listener._origin = _origin;
      }

    return [listener, objectify? new Listener(this, event, listener): this];
  }

  function EventEmitter(conf) {
    this._events = {};
    this._newListener = false;
    this._removeListener = false;
    this.verboseMemoryLeak = false;
    configure.call(this, conf);
  }

  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property

  EventEmitter.prototype.listenTo= function(target, events, options){
    if(typeof target!=='object'){
      throw TypeError('target musts be an object');
    }

    var emitter= this;

    options = resolveOptions(options, {
      on: undefined,
      off: undefined,
      reducers: undefined
    }, {
      on: functionReducer,
      off: functionReducer,
      reducers: objectFunctionReducer
    });

    function listen(events){
      if(typeof events!=='object'){
        throw TypeError('events must be an object');
      }

      var reducers= options.reducers;
      var index= findTargetIndex.call(emitter, target);
      var observer;

      if(index===-1){
        observer= new TargetObserver(emitter, target, options);
      }else{
        observer= emitter._observers[index];
      }

      var keys= ownKeys(events);
      var len= keys.length;
      var event;
      var isSingleReducer= typeof reducers==='function';

      for(var i=0; i<len; i++){
        event= keys[i];
        observer.subscribe(
            event,
            events[event] || event,
            isSingleReducer ? reducers : reducers && reducers[event]
        );
      }
    }

    isArray(events)?
        listen(toObject(events)) :
        (typeof events==='string'? listen(toObject(events.split(/\s+/))): listen(events));

    return this;
  };

  EventEmitter.prototype.stopListeningTo = function (target, event) {
    var observers = this._observers;

    if(!observers){
      return false;
    }

    var i = observers.length;
    var observer;
    var matched= false;

    if(target && typeof target!=='object'){
      throw TypeError('target should be an object');
    }

    while (i-- > 0) {
      observer = observers[i];
      if (!target || observer._target === target) {
        observer.unsubscribe(event);
        matched= true;
      }
    }

    return matched;
  };

  // By default EventEmitters will print a warning if more than
  // 10 listeners are added to it. This is a useful default which
  // helps finding memory leaks.
  //
  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.

  EventEmitter.prototype.delimiter = '.';

  EventEmitter.prototype.setMaxListeners = function(n) {
    if (n !== undefined) {
      this._maxListeners = n;
      if (!this._conf) this._conf = {};
      this._conf.maxListeners = n;
    }
  };

  EventEmitter.prototype.getMaxListeners = function() {
    return this._maxListeners;
  };

  EventEmitter.prototype.event = '';

  EventEmitter.prototype.once = function(event, fn, options) {
    return this._once(event, fn, false, options);
  };

  EventEmitter.prototype.prependOnceListener = function(event, fn, options) {
    return this._once(event, fn, true, options);
  };

  EventEmitter.prototype._once = function(event, fn, prepend, options) {
    return this._many(event, 1, fn, prepend, options);
  };

  EventEmitter.prototype.many = function(event, ttl, fn, options) {
    return this._many(event, ttl, fn, false, options);
  };

  EventEmitter.prototype.prependMany = function(event, ttl, fn, options) {
    return this._many(event, ttl, fn, true, options);
  };

  EventEmitter.prototype._many = function(event, ttl, fn, prepend, options) {
    var self = this;

    if (typeof fn !== 'function') {
      throw new Error('many only accepts instances of Function');
    }

    function listener() {
      if (--ttl === 0) {
        self.off(event, listener);
      }
      return fn.apply(this, arguments);
    }

    listener._origin = fn;

    return this._on(event, listener, prepend, options);
  };

  EventEmitter.prototype.emit = function() {
    if (!this._events && !this._all) {
      return false;
    }

    this._events || init.call(this);

    var type = arguments[0], ns, wildcard= this.wildcard;
    var args,l,i,j, containsSymbol;

    if (type === 'newListener' && !this._newListener) {
      if (!this._events.newListener) {
        return false;
      }
    }

    if (wildcard) {
      ns= type;
      if(type!=='newListener' && type!=='removeListener'){
        if (typeof type === 'object') {
          l = type.length;
          if (symbolsSupported) {
            for (i = 0; i < l; i++) {
              if (typeof type[i] === 'symbol') {
                containsSymbol = true;
                break;
              }
            }
          }
          if (!containsSymbol) {
            type = type.join(this.delimiter);
          }
        }
      }
    }

    var al = arguments.length;
    var handler;

    if (this._all && this._all.length) {
      handler = this._all.slice();

      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          handler[i].call(this, type);
          break;
        case 2:
          handler[i].call(this, type, arguments[1]);
          break;
        case 3:
          handler[i].call(this, type, arguments[1], arguments[2]);
          break;
        default:
          handler[i].apply(this, arguments);
        }
      }
    }

    if (wildcard) {
      handler = [];
      searchListenerTree.call(this, handler, ns, this.listenerTree, 0, l);
    } else {
      handler = this._events[type];
      if (typeof handler === 'function') {
        this.event = type;
        switch (al) {
        case 1:
          handler.call(this);
          break;
        case 2:
          handler.call(this, arguments[1]);
          break;
        case 3:
          handler.call(this, arguments[1], arguments[2]);
          break;
        default:
          args = new Array(al - 1);
          for (j = 1; j < al; j++) args[j - 1] = arguments[j];
          handler.apply(this, args);
        }
        return true;
      } else if (handler) {
        // need to make copy of handlers because list can change in the middle
        // of emit call
        handler = handler.slice();
      }
    }

    if (handler && handler.length) {
      if (al > 3) {
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
      }
      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          handler[i].call(this);
          break;
        case 2:
          handler[i].call(this, arguments[1]);
          break;
        case 3:
          handler[i].call(this, arguments[1], arguments[2]);
          break;
        default:
          handler[i].apply(this, args);
        }
      }
      return true;
    } else if (!this.ignoreErrors && !this._all && type === 'error') {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
    }

    return !!this._all;
  };

  EventEmitter.prototype.emitAsync = function() {
    if (!this._events && !this._all) {
      return false;
    }

    this._events || init.call(this);

    var type = arguments[0], wildcard= this.wildcard, ns, containsSymbol;
    var args,l,i,j;

    if (type === 'newListener' && !this._newListener) {
        if (!this._events.newListener) { return Promise.resolve([false]); }
    }

    if (wildcard) {
      ns= type;
      if(type!=='newListener' && type!=='removeListener'){
        if (typeof type === 'object') {
          l = type.length;
          if (symbolsSupported) {
            for (i = 0; i < l; i++) {
              if (typeof type[i] === 'symbol') {
                containsSymbol = true;
                break;
              }
            }
          }
          if (!containsSymbol) {
            type = type.join(this.delimiter);
          }
        }
      }
    }

    var promises= [];

    var al = arguments.length;
    var handler;

    if (this._all) {
      for (i = 0, l = this._all.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          promises.push(this._all[i].call(this, type));
          break;
        case 2:
          promises.push(this._all[i].call(this, type, arguments[1]));
          break;
        case 3:
          promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));
          break;
        default:
          promises.push(this._all[i].apply(this, arguments));
        }
      }
    }

    if (wildcard) {
      handler = [];
      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
    } else {
      handler = this._events[type];
    }

    if (typeof handler === 'function') {
      this.event = type;
      switch (al) {
      case 1:
        promises.push(handler.call(this));
        break;
      case 2:
        promises.push(handler.call(this, arguments[1]));
        break;
      case 3:
        promises.push(handler.call(this, arguments[1], arguments[2]));
        break;
      default:
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
        promises.push(handler.apply(this, args));
      }
    } else if (handler && handler.length) {
      handler = handler.slice();
      if (al > 3) {
        args = new Array(al - 1);
        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
      }
      for (i = 0, l = handler.length; i < l; i++) {
        this.event = type;
        switch (al) {
        case 1:
          promises.push(handler[i].call(this));
          break;
        case 2:
          promises.push(handler[i].call(this, arguments[1]));
          break;
        case 3:
          promises.push(handler[i].call(this, arguments[1], arguments[2]));
          break;
        default:
          promises.push(handler[i].apply(this, args));
        }
      }
    } else if (!this.ignoreErrors && !this._all && type === 'error') {
      if (arguments[1] instanceof Error) {
        return Promise.reject(arguments[1]); // Unhandled 'error' event
      } else {
        return Promise.reject("Uncaught, unspecified 'error' event.");
      }
    }

    return Promise.all(promises);
  };

  EventEmitter.prototype.on = function(type, listener, options) {
    return this._on(type, listener, false, options);
  };

  EventEmitter.prototype.prependListener = function(type, listener, options) {
    return this._on(type, listener, true, options);
  };

  EventEmitter.prototype.onAny = function(fn) {
    return this._onAny(fn, false);
  };

  EventEmitter.prototype.prependAny = function(fn) {
    return this._onAny(fn, true);
  };

  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  EventEmitter.prototype._onAny = function(fn, prepend){
    if (typeof fn !== 'function') {
      throw new Error('onAny only accepts instances of Function');
    }

    if (!this._all) {
      this._all = [];
    }

    // Add the function to the event listener collection.
    if(prepend){
      this._all.unshift(fn);
    }else{
      this._all.push(fn);
    }

    return this;
  };

  EventEmitter.prototype._on = function(type, listener, prepend, options) {
    if (typeof type === 'function') {
      this._onAny(type, listener);
      return this;
    }

    if (typeof listener !== 'function') {
      throw new Error('on only accepts instances of Function');
    }
    this._events || init.call(this);

    var returnValue= this, temp;

    if (options !== undefined) {
      temp = setupListener.call(this, type, listener, options);
      listener = temp[0];
      returnValue = temp[1];
    }

    // To avoid recursion in the case that type == "newListeners"! Before
    // adding it to the listeners, first emit "newListeners".
    if (this._newListener) {
      this.emit('newListener', type, listener);
    }

    if (this.wildcard) {
      growListenerTree.call(this, type, listener);
      return returnValue;
    }

    if (!this._events[type]) {
      // Optimize the case of one listener. Don't need the extra array object.
      this._events[type] = listener;
    } else {
      if (typeof this._events[type] === 'function') {
        // Change to array.
        this._events[type] = [this._events[type]];
      }

      // If we've already got an array, just add
      if(prepend){
        this._events[type].unshift(listener);
      }else{
        this._events[type].push(listener);
      }

      // Check for listener leak
      if (
        !this._events[type].warned &&
        this._maxListeners > 0 &&
        this._events[type].length > this._maxListeners
      ) {
        this._events[type].warned = true;
        logPossibleMemoryLeak.call(this, this._events[type].length, type);
      }
    }

    return returnValue;
  };

  EventEmitter.prototype.off = function(type, listener) {
    if (typeof listener !== 'function') {
      throw new Error('removeListener only takes instances of Function');
    }

    var handlers,leafs=[];

    if(this.wildcard) {
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
      if(!leafs) return this;
    } else {
      // does not use listeners(), so no side effect of creating _events[type]
      if (!this._events[type]) return this;
      handlers = this._events[type];
      leafs.push({_listeners:handlers});
    }

    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
      var leaf = leafs[iLeaf];
      handlers = leaf._listeners;
      if (isArray(handlers)) {

        var position = -1;

        for (var i = 0, length = handlers.length; i < length; i++) {
          if (handlers[i] === listener ||
            (handlers[i].listener && handlers[i].listener === listener) ||
            (handlers[i]._origin && handlers[i]._origin === listener)) {
            position = i;
            break;
          }
        }

        if (position < 0) {
          continue;
        }

        if(this.wildcard) {
          leaf._listeners.splice(position, 1);
        }
        else {
          this._events[type].splice(position, 1);
        }

        if (handlers.length === 0) {
          if(this.wildcard) {
            delete leaf._listeners;
          }
          else {
            delete this._events[type];
          }
        }
        if (this._removeListener)
          this.emit("removeListener", type, listener);

        return this;
      }
      else if (handlers === listener ||
        (handlers.listener && handlers.listener === listener) ||
        (handlers._origin && handlers._origin === listener)) {
        if(this.wildcard) {
          delete leaf._listeners;
        }
        else {
          delete this._events[type];
        }
        if (this._removeListener)
          this.emit("removeListener", type, listener);
      }
    }

    this.listenerTree && recursivelyGarbageCollect(this.listenerTree);

    return this;
  };

  EventEmitter.prototype.offAny = function(fn) {
    var i = 0, l = 0, fns;
    if (fn && this._all && this._all.length > 0) {
      fns = this._all;
      for(i = 0, l = fns.length; i < l; i++) {
        if(fn === fns[i]) {
          fns.splice(i, 1);
          if (this._removeListener)
            this.emit("removeListenerAny", fn);
          return this;
        }
      }
    } else {
      fns = this._all;
      if (this._removeListener) {
        for(i = 0, l = fns.length; i < l; i++)
          this.emit("removeListenerAny", fns[i]);
      }
      this._all = [];
    }
    return this;
  };

  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

  EventEmitter.prototype.removeAllListeners = function (type) {
    if (type === undefined) {
      !this._events || init.call(this);
      return this;
    }

    if (this.wildcard) {
      var leafs = searchListenerTree.call(this, null, type, this.listenerTree, 0), leaf, i;
      if (!leafs) return this;
      for (i = 0; i < leafs.length; i++) {
        leaf = leafs[i];
        leaf._listeners = null;
      }
      this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
    } else if (this._events) {
      this._events[type] = null;
    }
    return this;
  };

  EventEmitter.prototype.listeners = function (type) {
    var _events = this._events;
    var keys, listeners, allListeners;
    var i;
    var listenerTree;

    if (type === undefined) {
      if (this.wildcard) {
        throw Error('event name required for wildcard emitter');
      }

      if (!_events) {
        return [];
      }

      keys = ownKeys(_events);
      i = keys.length;
      allListeners = [];
      while (i-- > 0) {
        listeners = _events[keys[i]];
        if (typeof listeners === 'function') {
          allListeners.push(listeners);
        } else {
          allListeners.push.apply(allListeners, listeners);
        }
      }
      return allListeners;
    } else {
      if (this.wildcard) {
        listenerTree= this.listenerTree;
        if(!listenerTree) return [];
        var handlers = [];
        var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
        searchListenerTree.call(this, handlers, ns, listenerTree, 0);
        return handlers;
      }

      if (!_events) {
        return [];
      }

      listeners = _events[type];

      if (!listeners) {
        return [];
      }
      return typeof listeners === 'function' ? [listeners] : listeners;
    }
  };

  EventEmitter.prototype.eventNames = function(nsAsArray){
    var _events= this._events;
    return this.wildcard? collectTreeEvents.call(this, this.listenerTree, [], null, nsAsArray) : (_events? ownKeys(_events) : []);
  };

  EventEmitter.prototype.listenerCount = function(type) {
    return this.listeners(type).length;
  };

  EventEmitter.prototype.hasListeners = function (type) {
    if (this.wildcard) {
      var handlers = [];
      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
      return handlers.length > 0;
    }

    var _events = this._events;
    var _all = this._all;

    return !!(_all && _all.length || _events && (type === undefined ? ownKeys(_events).length : _events[type]));
  };

  EventEmitter.prototype.listenersAny = function() {

    if(this._all) {
      return this._all;
    }
    else {
      return [];
    }

  };

  EventEmitter.prototype.waitFor = function (event, options) {
    var self = this;
    var type = typeof options;
    if (type === 'number') {
      options = {timeout: options};
    } else if (type === 'function') {
      options = {filter: options};
    }

    options= resolveOptions(options, {
      timeout: 0,
      filter: undefined,
      handleError: false,
      Promise: Promise,
      overload: false
    }, {
      filter: functionReducer,
      Promise: constructorReducer
    });

    return makeCancelablePromise(options.Promise, function (resolve, reject, onCancel) {
      function listener() {
        var filter= options.filter;
        if (filter && !filter.apply(self, arguments)) {
          return;
        }
        self.off(event, listener);
        if (options.handleError) {
          var err = arguments[0];
          err ? reject(err) : resolve(toArray.apply(null, arguments).slice(1));
        } else {
          resolve(toArray.apply(null, arguments));
        }
      }

      onCancel(function(){
        self.off(event, listener);
      });

      self._on(event, listener, false);
    }, {
      timeout: options.timeout,
      overload: options.overload
    })
  };

  function once(emitter, name, options) {
    options= resolveOptions(options, {
      Promise: Promise,
      timeout: 0,
      overload: false
    }, {
      Promise: constructorReducer
    });

    var _Promise= options.Promise;

    return makeCancelablePromise(_Promise, function(resolve, reject, onCancel){
      var handler;
      if (typeof emitter.addEventListener === 'function') {
        handler=  function () {
          resolve(toArray.apply(null, arguments));
        };

        onCancel(function(){
          emitter.removeEventListener(name, handler);
        });

        emitter.addEventListener(
            name,
            handler,
            {once: true}
        );
        return;
      }

      var eventListener = function(){
        errorListener && emitter.removeListener('error', errorListener);
        resolve(toArray.apply(null, arguments));
      };

      var errorListener;

      if (name !== 'error') {
        errorListener = function (err){
          emitter.removeListener(name, eventListener);
          reject(err);
        };

        emitter.once('error', errorListener);
      }

      onCancel(function(){
        errorListener && emitter.removeListener('error', errorListener);
        emitter.removeListener(name, eventListener);
      });

      emitter.once(name, eventListener);
    }, {
      timeout: options.timeout,
      overload: options.overload
    });
  }

  var prototype= EventEmitter.prototype;

  Object.defineProperties(EventEmitter, {
    defaultMaxListeners: {
      get: function () {
        return prototype._maxListeners;
      },
      set: function (n) {
        if (typeof n !== 'number' || n < 0 || Number.isNaN(n)) {
          throw TypeError('n must be a non-negative number')
        }
        prototype._maxListeners = n;
      },
      enumerable: true
    },
    once: {
      value: once,
      writable: true,
      configurable: true
    }
  });

  Object.defineProperties(prototype, {
      _maxListeners: {
          value: defaultMaxListeners,
          writable: true,
          configurable: true
      },
      _observers: {value: null, writable: true, configurable: true}
  });

     // AMD. Register as an anonymous module.
  return EventEmitter;
});
/* globals define,module */
/*
Using a Universal Module Loader that should be browser, require, and AMD friendly
http://ricostacruz.com/cheatsheets/umdjs.html
*/
define('skylark-formio/vendors/json-logic-js/logic',[], function() {
  "use strict";
  /* globals console:false */

  if ( ! Array.isArray) {
    Array.isArray = function(arg) {
      return Object.prototype.toString.call(arg) === "[object Array]";
    };
  }

  /**
   * Return an array that contains no duplicates (original not modified)
   * @param  {array} array   Original reference array
   * @return {array}         New array with no duplicates
   */
  function arrayUnique(array) {
    var a = [];
    for (var i=0, l=array.length; i<l; i++) {
      if (a.indexOf(array[i]) === -1) {
        a.push(array[i]);
      }
    }
    return a;
  }

  var jsonLogic = {};
  var operations = {
    "==": function(a, b) {
      return a == b;
    },
    "===": function(a, b) {
      return a === b;
    },
    "!=": function(a, b) {
      return a != b;
    },
    "!==": function(a, b) {
      return a !== b;
    },
    ">": function(a, b) {
      return a > b;
    },
    ">=": function(a, b) {
      return a >= b;
    },
    "<": function(a, b, c) {
      return (c === undefined) ? a < b : (a < b) && (b < c);
    },
    "<=": function(a, b, c) {
      return (c === undefined) ? a <= b : (a <= b) && (b <= c);
    },
    "!!": function(a) {
      return jsonLogic.truthy(a);
    },
    "!": function(a) {
      return !jsonLogic.truthy(a);
    },
    "%": function(a, b) {
      return a % b;
    },
    "log": function(a) {
      console.log(a); return a;
    },
    "in": function(a, b) {
      if(!b || typeof b.indexOf === "undefined") return false;
      return (b.indexOf(a) !== -1);
    },
    "cat": function() {
      return Array.prototype.join.call(arguments, "");
    },
    "substr":function(source, start, end) {
      if(end < 0){
        // JavaScript doesn't support negative end, this emulates PHP behavior
        var temp = String(source).substr(start);
        return temp.substr(0, temp.length + end);
      }
      return String(source).substr(start, end);
    },
    "+": function() {
      return Array.prototype.reduce.call(arguments, function(a, b) {
        return parseFloat(a, 10) + parseFloat(b, 10);
      }, 0);
    },
    "*": function() {
      return Array.prototype.reduce.call(arguments, function(a, b) {
        return parseFloat(a, 10) * parseFloat(b, 10);
      });
    },
    "-": function(a, b) {
      if(b === undefined) {
        return -a;
      }else{
        return a - b;
      }
    },
    "/": function(a, b) {
      return a / b;
    },
    "min": function() {
      return Math.min.apply(this, arguments);
    },
    "max": function() {
      return Math.max.apply(this, arguments);
    },
    "merge": function() {
      return Array.prototype.reduce.call(arguments, function(a, b) {
        return a.concat(b);
      }, []);
    },
    "var": function(a, b) {
      var not_found = (b === undefined) ? null : b;
      var data = this;
      if(typeof a === "undefined" || a==="" || a===null) {
        return data;
      }
      var sub_props = String(a).split(".");
      for(var i = 0; i < sub_props.length; i++) {
        if(data === null) {
          return not_found;
        }
        // Descending into data
        data = data[sub_props[i]];
        if(data === undefined) {
          return not_found;
        }
      }
      return data;
    },
    "missing": function() {
      /*
      Missing can receive many keys as many arguments, like {"missing:[1,2]}
      Missing can also receive *one* argument that is an array of keys,
      which typically happens if it's actually acting on the output of another command
      (like 'if' or 'merge')
      */

      var missing = [];
      var keys = Array.isArray(arguments[0]) ? arguments[0] : arguments;

      for(var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = jsonLogic.apply({"var": key}, this);
        if(value === null || value === "") {
          missing.push(key);
        }
      }

      return missing;
    },
    "missing_some": function(need_count, options) {
      // missing_some takes two arguments, how many (minimum) items must be present, and an array of keys (just like 'missing') to check for presence.
      var are_missing = jsonLogic.apply({"missing": options}, this);

      if(options.length - are_missing.length >= need_count) {
        return [];
      }else{
        return are_missing;
      }
    },
    "method": function(obj, method, args) {
      return obj[method].apply(obj, args);
    },

  };

  jsonLogic.is_logic = function(logic) {
    return (
      typeof logic === "object" && // An object
      logic !== null && // but not null
      ! Array.isArray(logic) && // and not an array
      Object.keys(logic).length === 1 // with exactly one key
    );
  };

  /*
  This helper will defer to the JsonLogic spec as a tie-breaker when different language interpreters define different behavior for the truthiness of primitives.  E.g., PHP considers empty arrays to be falsy, but Javascript considers them to be truthy. JsonLogic, as an ecosystem, needs one consistent answer.

  Spec and rationale here: http://jsonlogic.com/truthy
  */
  jsonLogic.truthy = function(value) {
    if(Array.isArray(value) && value.length === 0) {
      return false;
    }
    return !! value;
  };


  jsonLogic.get_operator = function(logic) {
    return Object.keys(logic)[0];
  };

  jsonLogic.get_values = function(logic) {
    return logic[jsonLogic.get_operator(logic)];
  };

  jsonLogic.apply = function(logic, data) {
    // Does this array contain logic? Only one way to find out.
    if(Array.isArray(logic)) {
      return logic.map(function(l) {
        return jsonLogic.apply(l, data);
      });
    }
    // You've recursed to a primitive, stop!
    if( ! jsonLogic.is_logic(logic) ) {
      return logic;
    }

    data = data || {};

    var op = jsonLogic.get_operator(logic);
    var values = logic[op];
    var i;
    var current;
    var scopedLogic, scopedData, filtered, initial;

    // easy syntax for unary operators, like {"var" : "x"} instead of strict {"var" : ["x"]}
    if( ! Array.isArray(values)) {
      values = [values];
    }

    // 'if', 'and', and 'or' violate the normal rule of depth-first calculating consequents, let each manage recursion as needed.
    if(op === "if" || op == "?:") {
      /* 'if' should be called with a odd number of parameters, 3 or greater
      This works on the pattern:
      if( 0 ){ 1 }else{ 2 };
      if( 0 ){ 1 }else if( 2 ){ 3 }else{ 4 };
      if( 0 ){ 1 }else if( 2 ){ 3 }else if( 4 ){ 5 }else{ 6 };

      The implementation is:
      For pairs of values (0,1 then 2,3 then 4,5 etc)
      If the first evaluates truthy, evaluate and return the second
      If the first evaluates falsy, jump to the next pair (e.g, 0,1 to 2,3)
      given one parameter, evaluate and return it. (it's an Else and all the If/ElseIf were false)
      given 0 parameters, return NULL (not great practice, but there was no Else)
      */
      for(i = 0; i < values.length - 1; i += 2) {
        if( jsonLogic.truthy( jsonLogic.apply(values[i], data) ) ) {
          return jsonLogic.apply(values[i+1], data);
        }
      }
      if(values.length === i+1) return jsonLogic.apply(values[i], data);
      return null;
    }else if(op === "and") { // Return first falsy, or last
      for(i=0; i < values.length; i+=1) {
        current = jsonLogic.apply(values[i], data);
        if( ! jsonLogic.truthy(current)) {
          return current;
        }
      }
      return current; // Last
    }else if(op === "or") {// Return first truthy, or last
      for(i=0; i < values.length; i+=1) {
        current = jsonLogic.apply(values[i], data);
        if( jsonLogic.truthy(current) ) {
          return current;
        }
      }
      return current; // Last




    }else if(op === 'filter'){
      scopedData = jsonLogic.apply(values[0], data);
      scopedLogic = values[1];

      if ( ! Array.isArray(scopedData)) {
          return [];
      }
      // Return only the elements from the array in the first argument,
      // that return truthy when passed to the logic in the second argument.
      // For parity with JavaScript, reindex the returned array
      return scopedData.filter(function(datum){
          return jsonLogic.truthy( jsonLogic.apply(scopedLogic, datum));
      });
  }else if(op === 'map'){
      scopedData = jsonLogic.apply(values[0], data);
      scopedLogic = values[1];

      if ( ! Array.isArray(scopedData)) {
          return [];
      }

      return scopedData.map(function(datum){
          return jsonLogic.apply(scopedLogic, datum);
      });

  }else if(op === 'reduce'){
      scopedData = jsonLogic.apply(values[0], data);
      scopedLogic = values[1];
      initial = typeof values[2] !== 'undefined' ? values[2] : null;

      if ( ! Array.isArray(scopedData)) {
          return initial;
      }

      return scopedData.reduce(
          function(accumulator, current){
              return jsonLogic.apply(
                  scopedLogic,
                  {'current':current, 'accumulator':accumulator}
              );
          },
          initial
      );

    }else if(op === "all") {
      scopedData = jsonLogic.apply(values[0], data);
      scopedLogic = values[1];
      // All of an empty set is false. Note, some and none have correct fallback after the for loop
      if( ! scopedData.length) {
        return false;
      }
      for(i=0; i < scopedData.length; i+=1) {
        if( ! jsonLogic.truthy( jsonLogic.apply(scopedLogic, scopedData[i]) )) {
          return false; // First falsy, short circuit
        }
      }
      return true; // All were truthy
    }else if(op === "none") {
      filtered = jsonLogic.apply({'filter' : values}, data);
      return filtered.length === 0;

    }else if(op === "some") {
      filtered = jsonLogic.apply({'filter' : values}, data);
      return filtered.length > 0;
    }

    // Everyone else gets immediate depth-first recursion
    values = values.map(function(val) {
      return jsonLogic.apply(val, data);
    });


    // The operation is called with "data" bound to its "this" and "values" passed as arguments.
    // Structured commands like % or > can name formal arguments while flexible commands (like missing or merge) can operate on the pseudo-array arguments
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments
    if(typeof operations[op] === "function") {
      return operations[op].apply(data, values);
    }else if(op.indexOf(".") > 0) { // Contains a dot, and not in the 0th position
      var sub_ops = String(op).split(".");
      var operation = operations;
      for(i = 0; i < sub_ops.length; i++) {
        // Descending into operations
        operation = operation[sub_ops[i]];
        if(operation === undefined) {
          throw new Error("Unrecognized operation " + op +
          " (failed at " + sub_ops.slice(0, i+1).join(".") + ")");
        }
      }

      return operation.apply(data, values);
    }

    throw new Error("Unrecognized operation " + op );
  };

  jsonLogic.uses_data = function(logic) {
    var collection = [];

    if( jsonLogic.is_logic(logic) ) {
      var op = jsonLogic.get_operator(logic);
      var values = logic[op];

      if( ! Array.isArray(values)) {
        values = [values];
      }

      if(op === "var") {
        // This doesn't cover the case where the arg to var is itself a rule.
        collection.push(values[0]);
      }else{
        // Recursion!
        values.map(function(val) {
          collection.push.apply(collection, jsonLogic.uses_data(val) );
        });
      }
    }

    return arrayUnique(collection);
  };

  jsonLogic.add_operation = function(name, code) {
    operations[name] = code;
  };

  jsonLogic.rm_operation = function(name) {
    delete operations[name];
  };

  jsonLogic.rule_like = function(rule, pattern) {
    // console.log("Is ". JSON.stringify(rule) . " like " . JSON.stringify(pattern) . "?");
    if(pattern === rule) {
      return true;
    } // TODO : Deep object equivalency?
    if(pattern === "@") {
      return true;
    } // Wildcard!
    if(pattern === "number") {
      return (typeof rule === "number");
    }
    if(pattern === "string") {
      return (typeof rule === "string");
    }
    if(pattern === "array") {
      // !logic test might be superfluous in JavaScript
      return Array.isArray(rule) && ! jsonLogic.is_logic(rule);
    }

    if(jsonLogic.is_logic(pattern)) {
      if(jsonLogic.is_logic(rule)) {
        var pattern_op = jsonLogic.get_operator(pattern);
        var rule_op = jsonLogic.get_operator(rule);

        if(pattern_op === "@" || pattern_op === rule_op) {
        // echo "\nOperators match, go deeper\n";
          return jsonLogic.rule_like(
            jsonLogic.get_values(rule, false),
            jsonLogic.get_values(pattern, false)
          );
        }
      }
      return false; // pattern is logic, rule isn't, can't be eq
    }

    if(Array.isArray(pattern)) {
      if(Array.isArray(rule)) {
        if(pattern.length !== rule.length) {
          return false;
        }
        /*
          Note, array order MATTERS, because we're using this array test logic to consider arguments, where order can matter. (e.g., + is commutative, but '-' or 'if' or 'var' are NOT)
        */
        for(var i = 0; i < pattern.length; i += 1) {
          // If any fail, we fail
          if( ! jsonLogic.rule_like(rule[i], pattern[i])) {
            return false;
          }
        }
        return true; // If they *all* passed, we pass
      }else{
        return false; // Pattern is array, rule isn't
      }
    }

    // Not logic, not array, not a === match for rule.
    return false;
  };

  return jsonLogic;
});
define('skylark-moment/moment',[
    "skylark-langx/skylark"
],function(skylark) {
    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return skylark.attach("itg.moment",hooks);

});
define('skylark-moment/main',[
	"./moment"
],function(moment){
	return moment;
});
define('skylark-moment', ['skylark-moment/main'], function (main) { return main; });

define('skylark-formio/vendors/moment/timezone',['skylark-moment'], function (moment) {
	"use strict";

	// Resolves es6 module loading issue
	if (moment.version === undefined && moment.default) {
		moment = moment.default;
	}

	// Do not load moment-timezone a second time.
	// if (moment.tz !== undefined) {
	// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
	// 	return moment;
	// }

	var VERSION = "0.5.31",
		zones = {},
		links = {},
		countries = {},
		names = {},
		guesses = {},
		cachedGuess;

	if (!moment || typeof moment.version !== 'string') {
		logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
	}

	var momentVersion = moment.version.split('.'),
		major = +momentVersion[0],
		minor = +momentVersion[1];

	// Moment.js version check
	if (major < 2 || (major === 2 && minor < 6)) {
		logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
	}

	/************************************
		Unpacking
	************************************/

	function charCodeToInt(charCode) {
		if (charCode > 96) {
			return charCode - 87;
		} else if (charCode > 64) {
			return charCode - 29;
		}
		return charCode - 48;
	}

	function unpackBase60(string) {
		var i = 0,
			parts = string.split('.'),
			whole = parts[0],
			fractional = parts[1] || '',
			multiplier = 1,
			num,
			out = 0,
			sign = 1;

		// handle negative numbers
		if (string.charCodeAt(0) === 45) {
			i = 1;
			sign = -1;
		}

		// handle digits before the decimal
		for (i; i < whole.length; i++) {
			num = charCodeToInt(whole.charCodeAt(i));
			out = 60 * out + num;
		}

		// handle digits after the decimal
		for (i = 0; i < fractional.length; i++) {
			multiplier = multiplier / 60;
			num = charCodeToInt(fractional.charCodeAt(i));
			out += num * multiplier;
		}

		return out * sign;
	}

	function arrayToInt (array) {
		for (var i = 0; i < array.length; i++) {
			array[i] = unpackBase60(array[i]);
		}
	}

	function intToUntil (array, length) {
		for (var i = 0; i < length; i++) {
			array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
		}

		array[length - 1] = Infinity;
	}

	function mapIndices (source, indices) {
		var out = [], i;

		for (i = 0; i < indices.length; i++) {
			out[i] = source[indices[i]];
		}

		return out;
	}

	function unpack (string) {
		var data = string.split('|'),
			offsets = data[2].split(' '),
			indices = data[3].split(''),
			untils  = data[4].split(' ');

		arrayToInt(offsets);
		arrayToInt(indices);
		arrayToInt(untils);

		intToUntil(untils, indices.length);

		return {
			name       : data[0],
			abbrs      : mapIndices(data[1].split(' '), indices),
			offsets    : mapIndices(offsets, indices),
			untils     : untils,
			population : data[5] | 0
		};
	}

	/************************************
		Zone object
	************************************/

	function Zone (packedString) {
		if (packedString) {
			this._set(unpack(packedString));
		}
	}

	Zone.prototype = {
		_set : function (unpacked) {
			this.name       = unpacked.name;
			this.abbrs      = unpacked.abbrs;
			this.untils     = unpacked.untils;
			this.offsets    = unpacked.offsets;
			this.population = unpacked.population;
		},

		_index : function (timestamp) {
			var target = +timestamp,
				untils = this.untils,
				i;

			for (i = 0; i < untils.length; i++) {
				if (target < untils[i]) {
					return i;
				}
			}
		},

		countries : function () {
			var zone_name = this.name;
			return Object.keys(countries).filter(function (country_code) {
				return countries[country_code].zones.indexOf(zone_name) !== -1;
			});
		},

		parse : function (timestamp) {
			var target  = +timestamp,
				offsets = this.offsets,
				untils  = this.untils,
				max     = untils.length - 1,
				offset, offsetNext, offsetPrev, i;

			for (i = 0; i < max; i++) {
				offset     = offsets[i];
				offsetNext = offsets[i + 1];
				offsetPrev = offsets[i ? i - 1 : i];

				if (offset < offsetNext && tz.moveAmbiguousForward) {
					offset = offsetNext;
				} else if (offset > offsetPrev && tz.moveInvalidForward) {
					offset = offsetPrev;
				}

				if (target < untils[i] - (offset * 60000)) {
					return offsets[i];
				}
			}

			return offsets[max];
		},

		abbr : function (mom) {
			return this.abbrs[this._index(mom)];
		},

		offset : function (mom) {
			logError("zone.offset has been deprecated in favor of zone.utcOffset");
			return this.offsets[this._index(mom)];
		},

		utcOffset : function (mom) {
			return this.offsets[this._index(mom)];
		}
	};

	/************************************
		Country object
	************************************/

	function Country (country_name, zone_names) {
		this.name = country_name;
		this.zones = zone_names;
	}

	/************************************
		Current Timezone
	************************************/

	function OffsetAt(at) {
		var timeString = at.toTimeString();
		var abbr = timeString.match(/\([a-z ]+\)/i);
		if (abbr && abbr[0]) {
			// 17:56:31 GMT-0600 (CST)
			// 17:56:31 GMT-0600 (Central Standard Time)
			abbr = abbr[0].match(/[A-Z]/g);
			abbr = abbr ? abbr.join('') : undefined;
		} else {
			// 17:56:31 CST
			// 17:56:31 GMT+0800 (台北標準時間)
			abbr = timeString.match(/[A-Z]{3,5}/g);
			abbr = abbr ? abbr[0] : undefined;
		}

		if (abbr === 'GMT') {
			abbr = undefined;
		}

		this.at = +at;
		this.abbr = abbr;
		this.offset = at.getTimezoneOffset();
	}

	function ZoneScore(zone) {
		this.zone = zone;
		this.offsetScore = 0;
		this.abbrScore = 0;
	}

	ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
		this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
		if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
			this.abbrScore++;
		}
	};

	function findChange(low, high) {
		var mid, diff;

		while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
			mid = new OffsetAt(new Date(low.at + diff));
			if (mid.offset === low.offset) {
				low = mid;
			} else {
				high = mid;
			}
		}

		return low;
	}

	function userOffsets() {
		var startYear = new Date().getFullYear() - 2,
			last = new OffsetAt(new Date(startYear, 0, 1)),
			offsets = [last],
			change, next, i;

		for (i = 1; i < 48; i++) {
			next = new OffsetAt(new Date(startYear, i, 1));
			if (next.offset !== last.offset) {
				change = findChange(last, next);
				offsets.push(change);
				offsets.push(new OffsetAt(new Date(change.at + 6e4)));
			}
			last = next;
		}

		for (i = 0; i < 4; i++) {
			offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
			offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
		}

		return offsets;
	}

	function sortZoneScores (a, b) {
		if (a.offsetScore !== b.offsetScore) {
			return a.offsetScore - b.offsetScore;
		}
		if (a.abbrScore !== b.abbrScore) {
			return a.abbrScore - b.abbrScore;
		}
		if (a.zone.population !== b.zone.population) {
			return b.zone.population - a.zone.population;
		}
		return b.zone.name.localeCompare(a.zone.name);
	}

	function addToGuesses (name, offsets) {
		var i, offset;
		arrayToInt(offsets);
		for (i = 0; i < offsets.length; i++) {
			offset = offsets[i];
			guesses[offset] = guesses[offset] || {};
			guesses[offset][name] = true;
		}
	}

	function guessesForUserOffsets (offsets) {
		var offsetsLength = offsets.length,
			filteredGuesses = {},
			out = [],
			i, j, guessesOffset;

		for (i = 0; i < offsetsLength; i++) {
			guessesOffset = guesses[offsets[i].offset] || {};
			for (j in guessesOffset) {
				if (guessesOffset.hasOwnProperty(j)) {
					filteredGuesses[j] = true;
				}
			}
		}

		for (i in filteredGuesses) {
			if (filteredGuesses.hasOwnProperty(i)) {
				out.push(names[i]);
			}
		}

		return out;
	}

	function rebuildGuess () {

		// use Intl API when available and returning valid time zone
		try {
			var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
			if (intlName && intlName.length > 3) {
				var name = names[normalizeName(intlName)];
				if (name) {
					return name;
				}
				logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
			}
		} catch (e) {
			// Intl unavailable, fall back to manual guessing.
		}

		var offsets = userOffsets(),
			offsetsLength = offsets.length,
			guesses = guessesForUserOffsets(offsets),
			zoneScores = [],
			zoneScore, i, j;

		for (i = 0; i < guesses.length; i++) {
			zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
			for (j = 0; j < offsetsLength; j++) {
				zoneScore.scoreOffsetAt(offsets[j]);
			}
			zoneScores.push(zoneScore);
		}

		zoneScores.sort(sortZoneScores);

		return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
	}

	function guess (ignoreCache) {
		if (!cachedGuess || ignoreCache) {
			cachedGuess = rebuildGuess();
		}
		return cachedGuess;
	}

	/************************************
		Global Methods
	************************************/

	function normalizeName (name) {
		return (name || '').toLowerCase().replace(/\//g, '_');
	}

	function addZone (packed) {
		var i, name, split, normalized;

		if (typeof packed === "string") {
			packed = [packed];
		}

		for (i = 0; i < packed.length; i++) {
			split = packed[i].split('|');
			name = split[0];
			normalized = normalizeName(name);
			zones[normalized] = packed[i];
			names[normalized] = name;
			addToGuesses(normalized, split[2].split(' '));
		}
	}

	function getZone (name, caller) {

		name = normalizeName(name);

		var zone = zones[name];
		var link;

		if (zone instanceof Zone) {
			return zone;
		}

		if (typeof zone === 'string') {
			zone = new Zone(zone);
			zones[name] = zone;
			return zone;
		}

		// Pass getZone to prevent recursion more than 1 level deep
		if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
			zone = zones[name] = new Zone();
			zone._set(link);
			zone.name = names[name];
			return zone;
		}

		return null;
	}

	function getNames () {
		var i, out = [];

		for (i in names) {
			if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
				out.push(names[i]);
			}
		}

		return out.sort();
	}

	function getCountryNames () {
		return Object.keys(countries);
	}

	function addLink (aliases) {
		var i, alias, normal0, normal1;

		if (typeof aliases === "string") {
			aliases = [aliases];
		}

		for (i = 0; i < aliases.length; i++) {
			alias = aliases[i].split('|');

			normal0 = normalizeName(alias[0]);
			normal1 = normalizeName(alias[1]);

			links[normal0] = normal1;
			names[normal0] = alias[0];

			links[normal1] = normal0;
			names[normal1] = alias[1];
		}
	}

	function addCountries (data) {
		var i, country_code, country_zones, split;
		if (!data || !data.length) return;
		for (i = 0; i < data.length; i++) {
			split = data[i].split('|');
			country_code = split[0].toUpperCase();
			country_zones = split[1].split(' ');
			countries[country_code] = new Country(
				country_code,
				country_zones
			);
		}
	}

	function getCountry (name) {
		name = name.toUpperCase();
		return countries[name] || null;
	}

	function zonesForCountry(country, with_offset) {
		country = getCountry(country);

		if (!country) return null;

		var zones = country.zones.sort();

		if (with_offset) {
			return zones.map(function (zone_name) {
				var zone = getZone(zone_name);
				return {
					name: zone_name,
					offset: zone.utcOffset(new Date())
				};
			});
		}

		return zones;
	}

	function loadData (data) {
		addZone(data.zones);
		addLink(data.links);
		addCountries(data.countries);
		tz.dataVersion = data.version;
	}

	function zoneExists (name) {
		if (!zoneExists.didShowError) {
			zoneExists.didShowError = true;
				logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
		}
		return !!getZone(name);
	}

	function needsOffset (m) {
		var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
		return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
	}

	function logError (message) {
		if (typeof console !== 'undefined' && typeof console.error === 'function') {
			console.error(message);
		}
	}

	/************************************
		moment.tz namespace
	************************************/

	function tz (input) {
		var args = Array.prototype.slice.call(arguments, 0, -1),
			name = arguments[arguments.length - 1],
			zone = getZone(name),
			out  = moment.utc.apply(null, args);

		if (zone && !moment.isMoment(input) && needsOffset(out)) {
			out.add(zone.parse(out), 'minutes');
		}

		out.tz(name);

		return out;
	}

	tz.version      = VERSION;
	tz.dataVersion  = '';
	tz._zones       = zones;
	tz._links       = links;
	tz._names       = names;
	tz._countries	= countries;
	tz.add          = addZone;
	tz.link         = addLink;
	tz.load         = loadData;
	tz.zone         = getZone;
	tz.zoneExists   = zoneExists; // deprecated in 0.1.0
	tz.guess        = guess;
	tz.names        = getNames;
	tz.Zone         = Zone;
	tz.unpack       = unpack;
	tz.unpackBase60 = unpackBase60;
	tz.needsOffset  = needsOffset;
	tz.moveInvalidForward   = true;
	tz.moveAmbiguousForward = false;
	tz.countries    = getCountryNames;
	tz.zonesForCountry = zonesForCountry;

	/************************************
		Interface with Moment.js
	************************************/

	var fn = moment.fn;

	moment.tz = tz;

	moment.defaultZone = null;

	moment.updateOffset = function (mom, keepTime) {
		var zone = moment.defaultZone,
			offset;

		if (mom._z === undefined) {
			if (zone && needsOffset(mom) && !mom._isUTC) {
				mom._d = moment.utc(mom._a)._d;
				mom.utc().add(zone.parse(mom), 'minutes');
			}
			mom._z = zone;
		}
		if (mom._z) {
			offset = mom._z.utcOffset(mom);
			if (Math.abs(offset) < 16) {
				offset = offset / 60;
			}
			if (mom.utcOffset !== undefined) {
				var z = mom._z;
				mom.utcOffset(-offset, keepTime);
				mom._z = z;
			} else {
				mom.zone(offset, keepTime);
			}
		}
	};

	fn.tz = function (name, keepTime) {
		if (name) {
			if (typeof name !== 'string') {
				throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
			}
			this._z = getZone(name);
			if (this._z) {
				moment.updateOffset(this, keepTime);
			} else {
				logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
			}
			return this;
		}
		if (this._z) { return this._z.name; }
	};

	function abbrWrap (old) {
		return function () {
			if (this._z) { return this._z.abbr(this); }
			return old.call(this);
		};
	}

	function resetZoneWrap (old) {
		return function () {
			this._z = null;
			return old.apply(this, arguments);
		};
	}

	function resetZoneWrap2 (old) {
		return function () {
			if (arguments.length > 0) this._z = null;
			return old.apply(this, arguments);
		};
	}

	fn.zoneName  = abbrWrap(fn.zoneName);
	fn.zoneAbbr  = abbrWrap(fn.zoneAbbr);
	fn.utc       = resetZoneWrap(fn.utc);
	fn.local     = resetZoneWrap(fn.local);
	fn.utcOffset = resetZoneWrap2(fn.utcOffset);

	moment.tz.setDefault = function(name) {
		if (major < 2 || (major === 2 && minor < 9)) {
			logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
		}
		moment.defaultZone = name ? getZone(name) : null;
		return moment;
	};

	// Cloning a moment should include the _z property.
	var momentProperties = moment.momentProperties;
	if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
		// moment 2.8.1+
		momentProperties.push('_z');
		momentProperties.push('_a');
	} else if (momentProperties) {
		// moment 2.7.0
		momentProperties._z = null;
	}

	// INJECT DATA

	return moment;
});
define('skylark-formio/vendors/jstimezonedetect/jstz',[], function() {


/*global exports, Intl*/
/**
 * This script gives you the zone info key representing your device's time zone setting.
 *
 * @name jsTimezoneDetect
 * @version 1.0.6
 * @author Jon Nylander
 * @license MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt
 *
 * For usage and examples, visit:
 * http://pellepim.bitbucket.org/jstz/
 *
 * Copyright (c) Jon Nylander
 */


/**
 * Namespace to hold all the code for timezone detection.
 */
    var jstz = (function () {
        'use strict';
        var HEMISPHERE_SOUTH = 's',

            consts = {
                DAY: 86400000,
                HOUR: 3600000,
                MINUTE: 60000,
                SECOND: 1000,
                BASELINE_YEAR: 2014,
                MAX_SCORE: 864000000, // 10 days
                AMBIGUITIES: {
                    'America/Denver':       ['America/Mazatlan'],
                    'America/Chicago':      ['America/Mexico_City'],
                    'America/Asuncion':     ['America/Campo_Grande', 'America/Santiago'],
                    'America/Montevideo':   ['America/Sao_Paulo', 'America/Santiago'],
                    'Asia/Beirut':          ['Asia/Amman', 'Asia/Jerusalem', 'Europe/Helsinki', 'Asia/Damascus', 'Africa/Cairo', 'Asia/Gaza', 'Europe/Minsk', 'Africa/Windhoek'],
                    'Pacific/Auckland':     ['Pacific/Fiji'],
                    'America/Los_Angeles':  ['America/Santa_Isabel'],
                    'America/New_York':     ['America/Havana'],
                    'America/Halifax':      ['America/Goose_Bay'],
                    'America/Godthab':      ['America/Miquelon'],
                    'Asia/Dubai':           ['Asia/Yerevan'],
                    'Asia/Jakarta':         ['Asia/Krasnoyarsk'],
                    'Asia/Shanghai':        ['Asia/Irkutsk', 'Australia/Perth'],
                    'Australia/Sydney':     ['Australia/Lord_Howe'],
                    'Asia/Tokyo':           ['Asia/Yakutsk'],
                    'Asia/Dhaka':           ['Asia/Omsk'],
                    'Asia/Baku':            ['Asia/Yerevan'],
                    'Australia/Brisbane':   ['Asia/Vladivostok'],
                    'Pacific/Noumea':       ['Asia/Vladivostok'],
                    'Pacific/Majuro':       ['Asia/Kamchatka', 'Pacific/Fiji'],
                    'Pacific/Tongatapu':    ['Pacific/Apia'],
                    'Asia/Baghdad':         ['Europe/Minsk', 'Europe/Moscow'],
                    'Asia/Karachi':         ['Asia/Yekaterinburg'],
                    'Africa/Johannesburg':  ['Asia/Gaza', 'Africa/Cairo']
                }
            },

            /**
             * Gets the offset in minutes from UTC for a certain date.
             * @param {Date} date
             * @returns {Number}
             */
            get_date_offset = function get_date_offset(date) {
                var offset = -date.getTimezoneOffset();
                return (offset !== null ? offset : 0);
            },


            get_offsets = function get_offsets() {
                var offsets = [];

                for (var month = 0; month <= 11; month++) {
                    for (var date = 1; date <= 28; date++) {
                        var currentOffset = get_date_offset(new Date(consts.BASELINE_YEAR, month, date));
                        if (!offsets) {
                            offsets.push();
                        } else if (offsets && offsets[offsets.length-1] !== currentOffset) {
                            offsets.push(currentOffset);
                        }
                    }
                }

                return offsets;
            },

            /**
             * This function does some basic calculations to create information about
             * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
             * the script has been tested rather than depend on the year set by the
             * client device.
             *
             * Returns a key that can be used to do lookups in jstz.olson.timezones.
             * eg: "720,1,2".
             *
             * @returns {String}
             */
            lookup_key = function lookup_key() {
                var diff = 0;
                var offsets = get_offsets();

                if (offsets.length > 1) {
                    diff = offsets[0] - offsets[1];
                }

                if (offsets.length > 3) {
                    return offsets[0] + ",1,weird";
                } else if (diff < 0) {
                    return offsets[0] + ",1";
                } else if (diff > 0) {
                    return offsets[1] + ",1," + HEMISPHERE_SOUTH;
                }

                return offsets[0] + ",0";
            },


            /**
             * Tries to get the time zone key directly from the operating system for those
             * environments that support the ECMAScript Internationalization API.
             */
            get_from_internationalization_api = function get_from_internationalization_api() {
                var format, timezone;
                if (!Intl || typeof Intl === "undefined" || typeof Intl.DateTimeFormat === "undefined") {
                    return;
                }

                format = Intl.DateTimeFormat();

                if (typeof format === "undefined" || typeof format.resolvedOptions === "undefined") {
                    return;
                }

                timezone = format.resolvedOptions().timeZone;

                if (timezone && (timezone.indexOf("/") > -1 || timezone === 'UTC')) {
                    return timezone;
                }

            },

            /**
             * Starting point for getting all the DST rules for a specific year
             * for the current timezone (as described by the client system).
             *
             * Returns an object with start and end attributes, or false if no
             * DST rules were found for the year.
             *
             * @param year
             * @returns {Object} || {Boolean}
             */
            dst_dates = function dst_dates(year) {
                var yearstart = new Date(year, 0, 1, 0, 0, 1, 0).getTime();
                var yearend = new Date(year, 12, 31, 23, 59, 59).getTime();
                var current = yearstart;
                var offset = (new Date(current)).getTimezoneOffset();
                var dst_start = null;
                var dst_end = null;

                while (current < yearend - 86400000) {
                    var dateToCheck = new Date(current);
                    var dateToCheckOffset = dateToCheck.getTimezoneOffset();

                    if (dateToCheckOffset !== offset) {
                        if (dateToCheckOffset < offset) {
                            dst_start = dateToCheck;
                        }
                        if (dateToCheckOffset > offset) {
                            dst_end = dateToCheck;
                        }
                        offset = dateToCheckOffset;
                    }

                    current += 86400000;
                }

                if (dst_start && dst_end) {
                    return {
                        s: find_dst_fold(dst_start).getTime(),
                        e: find_dst_fold(dst_end).getTime()
                    };
                }

                return false;
            },

            /**
             * Probably completely unnecessary function that recursively finds the
             * exact (to the second) time when a DST rule was changed.
             *
             * @param a_date - The candidate Date.
             * @param padding - integer specifying the padding to allow around the candidate
             *                  date for finding the fold.
             * @param iterator - integer specifying how many milliseconds to iterate while
             *                   searching for the fold.
             *
             * @returns {Date}
             */
            find_dst_fold = function find_dst_fold(a_date, padding, iterator) {
                if (typeof padding === 'undefined') {
                    padding = consts.DAY;
                    iterator = consts.HOUR;
                }

                var date_start = new Date(a_date.getTime() - padding).getTime();
                var date_end = a_date.getTime() + padding;
                var offset = new Date(date_start).getTimezoneOffset();

                var current = date_start;

                var dst_change = null;
                while (current < date_end - iterator) {
                    var dateToCheck = new Date(current);
                    var dateToCheckOffset = dateToCheck.getTimezoneOffset();

                    if (dateToCheckOffset !== offset) {
                        dst_change = dateToCheck;
                        break;
                    }
                    current += iterator;
                }

                if (padding === consts.DAY) {
                    return find_dst_fold(dst_change, consts.HOUR, consts.MINUTE);
                }

                if (padding === consts.HOUR) {
                    return find_dst_fold(dst_change, consts.MINUTE, consts.SECOND);
                }

                return dst_change;
            },

            windows7_adaptations = function windows7_adaptions(rule_list, preliminary_timezone, score, sample) {
                if (score !== 'N/A') {
                    return score;
                }
                if (preliminary_timezone === 'Asia/Beirut') {
                    if (sample.name === 'Africa/Cairo') {
                        if (rule_list[6].s === 1398376800000 && rule_list[6].e === 1411678800000) {
                            return 0;
                        }
                    }
                    if (sample.name === 'Asia/Jerusalem') {
                        if (rule_list[6].s === 1395964800000 && rule_list[6].e === 1411858800000) {
                            return 0;
                    }
                }
                } else if (preliminary_timezone === 'America/Santiago') {
                    if (sample.name === 'America/Asuncion') {
                        if (rule_list[6].s === 1412481600000 && rule_list[6].e === 1397358000000) {
                            return 0;
                        }
                    }
                    if (sample.name === 'America/Campo_Grande') {
                        if (rule_list[6].s === 1413691200000 && rule_list[6].e === 1392519600000) {
                            return 0;
                        }
                    }
                } else if (preliminary_timezone === 'America/Montevideo') {
                    if (sample.name === 'America/Sao_Paulo') {
                        if (rule_list[6].s === 1413687600000 && rule_list[6].e === 1392516000000) {
                            return 0;
                        }
                    }
                } else if (preliminary_timezone === 'Pacific/Auckland') {
                    if (sample.name === 'Pacific/Fiji') {
                        if (rule_list[6].s === 1414245600000 && rule_list[6].e === 1396101600000) {
                            return 0;
                        }
                    }
                }

                return score;
            },

            /**
             * Takes the DST rules for the current timezone, and proceeds to find matches
             * in the jstz.olson.dst_rules.zones array.
             *
             * Compares samples to the current timezone on a scoring basis.
             *
             * Candidates are ruled immediately if either the candidate or the current zone
             * has a DST rule where the other does not.
             *
             * Candidates are ruled out immediately if the current zone has a rule that is
             * outside the DST scope of the candidate.
             *
             * Candidates are included for scoring if the current zones rules fall within the
             * span of the samples rules.
             *
             * Low score is best, the score is calculated by summing up the differences in DST
             * rules and if the consts.MAX_SCORE is overreached the candidate is ruled out.
             *
             * Yah follow? :)
             *
             * @param rule_list
             * @param preliminary_timezone
             * @returns {*}
             */
            best_dst_match = function best_dst_match(rule_list, preliminary_timezone) {
                var score_sample = function score_sample(sample) {
                    var score = 0;

                    for (var j = 0; j < rule_list.length; j++) {

                        // Both sample and current time zone report DST during the year.
                        if (!!sample.rules[j] && !!rule_list[j]) {

                            // The current time zone's DST rules are inside the sample's. Include.
                            if (rule_list[j].s >= sample.rules[j].s && rule_list[j].e <= sample.rules[j].e) {
                                score = 0;
                                score += Math.abs(rule_list[j].s - sample.rules[j].s);
                                score += Math.abs(sample.rules[j].e - rule_list[j].e);

                            // The current time zone's DST rules are outside the sample's. Discard.
                            } else {
                                score = 'N/A';
                                break;
                            }

                            // The max score has been reached. Discard.
                            if (score > consts.MAX_SCORE) {
                                score = 'N/A';
                                break;
                            }
                        }
                    }

                    score = windows7_adaptations(rule_list, preliminary_timezone, score, sample);

                    return score;
                };
                var scoreboard = {};
                var dst_zones = jstz.olson.dst_rules.zones;
                var dst_zones_length = dst_zones.length;
                var ambiguities = consts.AMBIGUITIES[preliminary_timezone];

                for (var i = 0; i < dst_zones_length; i++) {
                    var sample = dst_zones[i];
                    var score = score_sample(dst_zones[i]);

                    if (score !== 'N/A') {
                        scoreboard[sample.name] = score;
                    }
                }

                for (var tz in scoreboard) {
                    if (scoreboard.hasOwnProperty(tz)) {
                        for (var j = 0; j < ambiguities.length; j++) {
                            if (ambiguities[j] === tz) {
                                return tz;
                            }
                        }
                    }
                }

                return preliminary_timezone;
            },

            /**
             * Takes the preliminary_timezone as detected by lookup_key().
             *
             * Builds up the current timezones DST rules for the years defined
             * in the jstz.olson.dst_rules.years array.
             *
             * If there are no DST occurences for those years, immediately returns
             * the preliminary timezone. Otherwise proceeds and tries to solve
             * ambiguities.
             *
             * @param preliminary_timezone
             * @returns {String} timezone_name
             */
            get_by_dst = function get_by_dst(preliminary_timezone) {
                var get_rules = function get_rules() {
                    var rule_list = [];
                    for (var i = 0; i < jstz.olson.dst_rules.years.length; i++) {
                        var year_rules = dst_dates(jstz.olson.dst_rules.years[i]);
                        rule_list.push(year_rules);
                    }
                    return rule_list;
                };
                var check_has_dst = function check_has_dst(rules) {
                    for (var i = 0; i < rules.length; i++) {
                        if (rules[i] !== false) {
                            return true;
                        }
                    }
                    return false;
                };
                var rules = get_rules();
                var has_dst = check_has_dst(rules);

                if (has_dst) {
                    return best_dst_match(rules, preliminary_timezone);
                }

                return preliminary_timezone;
            },

            /**
             * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
             *
             * Returns an object with one function ".name()"
             *
             * @returns Object
             */
            determine = function determine(using_intl) {
                var preliminary_tz = false;
                var needle = lookup_key();
                if (using_intl || typeof using_intl === 'undefined') {
                    preliminary_tz = get_from_internationalization_api();
                }

                if (!preliminary_tz) {
                    preliminary_tz = jstz.olson.timezones[needle];

                    if (typeof consts.AMBIGUITIES[preliminary_tz] !== 'undefined') {
                        preliminary_tz = get_by_dst(preliminary_tz);
                    }
                }

                return {
                    name: function () {
                        return preliminary_tz;
                    },
                    using_intl: using_intl || typeof using_intl === 'undefined',
                    needle: needle,
                    offsets: get_offsets()
                };
            };

        return {
            determine: determine
        };
    }());


    jstz.olson = jstz.olson || {};

    /**
     * The keys in this dictionary are comma separated as such:
     *
     * First the offset compared to UTC time in minutes.
     *
     * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it
     * does.
     *
     * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,
     * only interesting for timezones with DST.
     *
     * The mapped arrays is used for constructing the jstz.TimeZone object from within
     * jstz.determine();
     */
    jstz.olson.timezones = {
        '-720,0': 'Etc/GMT+12',
        '-660,0': 'Pacific/Pago_Pago',
        '-660,1,s': 'Pacific/Apia', // Why? Because windows... cry!
        '-600,1': 'America/Adak',
        '-600,0': 'Pacific/Honolulu',
        '-570,0': 'Pacific/Marquesas',
        '-540,0': 'Pacific/Gambier',
        '-540,1': 'America/Anchorage',
        '-480,1': 'America/Los_Angeles',
        '-480,0': 'Pacific/Pitcairn',
        '-420,0': 'America/Phoenix',
        '-420,1': 'America/Denver',
        '-360,0': 'America/Guatemala',
        '-360,1': 'America/Chicago',
        '-360,1,s': 'Pacific/Easter',
        '-300,0': 'America/Bogota',
        '-300,1': 'America/New_York',
        '-270,0': 'America/Caracas',
        '-240,1': 'America/Halifax',
        '-240,0': 'America/Santo_Domingo',
        '-240,1,s': 'America/Asuncion',
        '-210,1': 'America/St_Johns',
        '-180,1': 'America/Godthab',
        '-180,0': 'America/Buenos_Aires',
        '-180,1,s': 'America/Montevideo',
        '-120,0': 'America/Noronha',
        '-120,1': 'America/Noronha',
        '-60,1': 'Atlantic/Azores',
        '-60,0': 'Atlantic/Cape_Verde',
        '0,0': 'UTC',
        '0,1': 'Europe/London',
        '0,1,weird': 'Africa/Casablanca',
        '60,1': 'Europe/Berlin',
        '60,0': 'Africa/Lagos',
        '60,1,weird': 'Africa/Casablanca',
        '120,1': 'Asia/Beirut',
        '120,1,weird': 'Africa/Cairo',
        '120,0': 'Africa/Johannesburg',
        '180,0': 'Asia/Baghdad',
        '180,1': 'Europe/Moscow',
        '210,1': 'Asia/Tehran',
        '240,0': 'Asia/Dubai',
        '240,1': 'Asia/Baku',
        '270,0': 'Asia/Kabul',
        '300,1': 'Asia/Yekaterinburg',
        '300,0': 'Asia/Karachi',
        '330,0': 'Asia/Calcutta',
        '345,0': 'Asia/Katmandu',
        '360,0': 'Asia/Dhaka',
        '360,1': 'Asia/Omsk',
        '390,0': 'Asia/Rangoon',
        '420,1': 'Asia/Krasnoyarsk',
        '420,0': 'Asia/Jakarta',
        '480,0': 'Asia/Shanghai',
        '480,1': 'Asia/Irkutsk',
        '525,0': 'Australia/Eucla',
        '525,1,s': 'Australia/Eucla',
        '540,1': 'Asia/Yakutsk',
        '540,0': 'Asia/Tokyo',
        '570,0': 'Australia/Darwin',
        '570,1,s': 'Australia/Adelaide',
        '600,0': 'Australia/Brisbane',
        '600,1': 'Asia/Vladivostok',
        '600,1,s': 'Australia/Sydney',
        '630,1,s': 'Australia/Lord_Howe',
        '660,1': 'Asia/Kamchatka',
        '660,0': 'Pacific/Noumea',
        '690,0': 'Pacific/Norfolk',
        '720,1,s': 'Pacific/Auckland',
        '720,0': 'Pacific/Majuro',
        '765,1,s': 'Pacific/Chatham',
        '780,0': 'Pacific/Tongatapu',
        '780,1,s': 'Pacific/Apia',
        '840,0': 'Pacific/Kiritimati'
    };

    /* Build time: 2019-09-09 11:29:41Z Build by invoking python utilities/dst.py generate */
    jstz.olson.dst_rules = {
        "years": [
            2008,
            2009,
            2010,
            2011,
            2012,
            2013,
            2014
        ],
        "zones": [
            {
                "name": "Africa/Cairo",
                "rules": [
                    {
                        "e": 1219957200000,
                        "s": 1209074400000
                    },
                    {
                        "e": 1250802000000,
                        "s": 1240524000000
                    },
                    {
                        "e": 1285880400000,
                        "s": 1284069600000
                    },
                    false,
                    false,
                    false,
                    {
                        "e": 1411678800000,
                        "s": 1406844000000
                    }
                ]
            },
            {
                "name": "America/Asuncion",
                "rules": [
                    {
                        "e": 1205031600000,
                        "s": 1224388800000
                    },
                    {
                        "e": 1236481200000,
                        "s": 1255838400000
                    },
                    {
                        "e": 1270954800000,
                        "s": 1286078400000
                    },
                    {
                        "e": 1302404400000,
                        "s": 1317528000000
                    },
                    {
                        "e": 1333854000000,
                        "s": 1349582400000
                    },
                    {
                        "e": 1364094000000,
                        "s": 1381032000000
                    },
                    {
                        "e": 1395543600000,
                        "s": 1412481600000
                    }
                ]
            },
            {
                "name": "America/Campo_Grande",
                "rules": [
                    {
                        "e": 1203217200000,
                        "s": 1224388800000
                    },
                    {
                        "e": 1234666800000,
                        "s": 1255838400000
                    },
                    {
                        "e": 1266721200000,
                        "s": 1287288000000
                    },
                    {
                        "e": 1298170800000,
                        "s": 1318737600000
                    },
                    {
                        "e": 1330225200000,
                        "s": 1350792000000
                    },
                    {
                        "e": 1361070000000,
                        "s": 1382241600000
                    },
                    {
                        "e": 1392519600000,
                        "s": 1413691200000
                    }
                ]
            },
            {
                "name": "America/Goose_Bay",
                "rules": [
                    {
                        "e": 1225594860000,
                        "s": 1205035260000
                    },
                    {
                        "e": 1257044460000,
                        "s": 1236484860000
                    },
                    {
                        "e": 1289098860000,
                        "s": 1268539260000
                    },
                    {
                        "e": 1320555600000,
                        "s": 1299988860000
                    },
                    {
                        "e": 1352005200000,
                        "s": 1331445600000
                    },
                    {
                        "e": 1383454800000,
                        "s": 1362895200000
                    },
                    {
                        "e": 1414904400000,
                        "s": 1394344800000
                    }
                ]
            },
            {
                "name": "America/Havana",
                "rules": [
                    {
                        "e": 1224997200000,
                        "s": 1205643600000
                    },
                    {
                        "e": 1256446800000,
                        "s": 1236488400000
                    },
                    {
                        "e": 1288501200000,
                        "s": 1268542800000
                    },
                    {
                        "e": 1321160400000,
                        "s": 1300597200000
                    },
                    {
                        "e": 1352005200000,
                        "s": 1333256400000
                    },
                    {
                        "e": 1383454800000,
                        "s": 1362891600000
                    },
                    {
                        "e": 1414904400000,
                        "s": 1394341200000
                    }
                ]
            },
            {
                "name": "America/Mazatlan",
                "rules": [
                    {
                        "e": 1225008000000,
                        "s": 1207472400000
                    },
                    {
                        "e": 1256457600000,
                        "s": 1238922000000
                    },
                    {
                        "e": 1288512000000,
                        "s": 1270371600000
                    },
                    {
                        "e": 1319961600000,
                        "s": 1301821200000
                    },
                    {
                        "e": 1351411200000,
                        "s": 1333270800000
                    },
                    {
                        "e": 1382860800000,
                        "s": 1365325200000
                    },
                    {
                        "e": 1414310400000,
                        "s": 1396774800000
                    }
                ]
            },
            {
                "name": "America/Mexico_City",
                "rules": [
                    {
                        "e": 1225004400000,
                        "s": 1207468800000
                    },
                    {
                        "e": 1256454000000,
                        "s": 1238918400000
                    },
                    {
                        "e": 1288508400000,
                        "s": 1270368000000
                    },
                    {
                        "e": 1319958000000,
                        "s": 1301817600000
                    },
                    {
                        "e": 1351407600000,
                        "s": 1333267200000
                    },
                    {
                        "e": 1382857200000,
                        "s": 1365321600000
                    },
                    {
                        "e": 1414306800000,
                        "s": 1396771200000
                    }
                ]
            },
            {
                "name": "America/Miquelon",
                "rules": [
                    {
                        "e": 1225598400000,
                        "s": 1205038800000
                    },
                    {
                        "e": 1257048000000,
                        "s": 1236488400000
                    },
                    {
                        "e": 1289102400000,
                        "s": 1268542800000
                    },
                    {
                        "e": 1320552000000,
                        "s": 1299992400000
                    },
                    {
                        "e": 1352001600000,
                        "s": 1331442000000
                    },
                    {
                        "e": 1383451200000,
                        "s": 1362891600000
                    },
                    {
                        "e": 1414900800000,
                        "s": 1394341200000
                    }
                ]
            },
            {
                "name": "America/Santa_Isabel",
                "rules": [
                    {
                        "e": 1225011600000,
                        "s": 1207476000000
                    },
                    {
                        "e": 1256461200000,
                        "s": 1238925600000
                    },
                    {
                        "e": 1289120400000,
                        "s": 1268560800000
                    },
                    {
                        "e": 1320570000000,
                        "s": 1300010400000
                    },
                    {
                        "e": 1352019600000,
                        "s": 1331460000000
                    },
                    {
                        "e": 1383469200000,
                        "s": 1362909600000
                    },
                    {
                        "e": 1414918800000,
                        "s": 1394359200000
                    }
                ]
            },
            {
                "name": "America/Santiago",
                "rules": [
                    {
                        "e": 1206846000000,
                        "s": 1223784000000
                    },
                    {
                        "e": 1237086000000,
                        "s": 1255233600000
                    },
                    {
                        "e": 1270350000000,
                        "s": 1286683200000
                    },
                    {
                        "e": 1304823600000,
                        "s": 1313899200000
                    },
                    {
                        "e": 1335668400000,
                        "s": 1346558400000
                    },
                    {
                        "e": 1367118000000,
                        "s": 1378612800000
                    },
                    {
                        "e": 1398567600000,
                        "s": 1410062400000
                    }
                ]
            },
            {
                "name": "America/Sao_Paulo",
                "rules": [
                    {
                        "e": 1203213600000,
                        "s": 1224385200000
                    },
                    {
                        "e": 1234663200000,
                        "s": 1255834800000
                    },
                    {
                        "e": 1266717600000,
                        "s": 1287284400000
                    },
                    {
                        "e": 1298167200000,
                        "s": 1318734000000
                    },
                    {
                        "e": 1330221600000,
                        "s": 1350788400000
                    },
                    {
                        "e": 1361066400000,
                        "s": 1382238000000
                    },
                    {
                        "e": 1392516000000,
                        "s": 1413687600000
                    }
                ]
            },
            {
                "name": "Asia/Amman",
                "rules": [
                    {
                        "e": 1225404000000,
                        "s": 1206655200000
                    },
                    {
                        "e": 1256853600000,
                        "s": 1238104800000
                    },
                    {
                        "e": 1288303200000,
                        "s": 1269554400000
                    },
                    {
                        "e": 1319752800000,
                        "s": 1301608800000
                    },
                    false,
                    false,
                    {
                        "e": 1414706400000,
                        "s": 1395957600000
                    }
                ]
            },
            {
                "name": "Asia/Damascus",
                "rules": [
                    {
                        "e": 1225486800000,
                        "s": 1207260000000
                    },
                    {
                        "e": 1256850000000,
                        "s": 1238104800000
                    },
                    {
                        "e": 1288299600000,
                        "s": 1270159200000
                    },
                    {
                        "e": 1319749200000,
                        "s": 1301608800000
                    },
                    {
                        "e": 1351198800000,
                        "s": 1333058400000
                    },
                    {
                        "e": 1382648400000,
                        "s": 1364508000000
                    },
                    {
                        "e": 1414702800000,
                        "s": 1395957600000
                    }
                ]
            },
            {
                "name": "Asia/Dubai",
                "rules": [
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Gaza",
                "rules": [
                    {
                        "e": 1219957200000,
                        "s": 1206655200000
                    },
                    {
                        "e": 1252015200000,
                        "s": 1238104800000
                    },
                    {
                        "e": 1281474000000,
                        "s": 1269640860000
                    },
                    {
                        "e": 1312146000000,
                        "s": 1301608860000
                    },
                    {
                        "e": 1348178400000,
                        "s": 1333058400000
                    },
                    {
                        "e": 1380229200000,
                        "s": 1364508000000
                    },
                    {
                        "e": 1414098000000,
                        "s": 1395957600000
                    }
                ]
            },
            {
                "name": "Asia/Irkutsk",
                "rules": [
                    {
                        "e": 1224957600000,
                        "s": 1206813600000
                    },
                    {
                        "e": 1256407200000,
                        "s": 1238263200000
                    },
                    {
                        "e": 1288461600000,
                        "s": 1269712800000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Jerusalem",
                "rules": [
                    {
                        "e": 1223161200000,
                        "s": 1206662400000
                    },
                    {
                        "e": 1254006000000,
                        "s": 1238112000000
                    },
                    {
                        "e": 1284246000000,
                        "s": 1269561600000
                    },
                    {
                        "e": 1317510000000,
                        "s": 1301616000000
                    },
                    {
                        "e": 1348354800000,
                        "s": 1333065600000
                    },
                    {
                        "e": 1382828400000,
                        "s": 1364515200000
                    },
                    {
                        "e": 1414278000000,
                        "s": 1395964800000
                    }
                ]
            },
            {
                "name": "Asia/Kamchatka",
                "rules": [
                    {
                        "e": 1224943200000,
                        "s": 1206799200000
                    },
                    {
                        "e": 1256392800000,
                        "s": 1238248800000
                    },
                    {
                        "e": 1288450800000,
                        "s": 1269698400000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Krasnoyarsk",
                "rules": [
                    {
                        "e": 1224961200000,
                        "s": 1206817200000
                    },
                    {
                        "e": 1256410800000,
                        "s": 1238266800000
                    },
                    {
                        "e": 1288465200000,
                        "s": 1269716400000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Omsk",
                "rules": [
                    {
                        "e": 1224964800000,
                        "s": 1206820800000
                    },
                    {
                        "e": 1256414400000,
                        "s": 1238270400000
                    },
                    {
                        "e": 1288468800000,
                        "s": 1269720000000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Vladivostok",
                "rules": [
                    {
                        "e": 1224950400000,
                        "s": 1206806400000
                    },
                    {
                        "e": 1256400000000,
                        "s": 1238256000000
                    },
                    {
                        "e": 1288454400000,
                        "s": 1269705600000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Yakutsk",
                "rules": [
                    {
                        "e": 1224954000000,
                        "s": 1206810000000
                    },
                    {
                        "e": 1256403600000,
                        "s": 1238259600000
                    },
                    {
                        "e": 1288458000000,
                        "s": 1269709200000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Yekaterinburg",
                "rules": [
                    {
                        "e": 1224968400000,
                        "s": 1206824400000
                    },
                    {
                        "e": 1256418000000,
                        "s": 1238274000000
                    },
                    {
                        "e": 1288472400000,
                        "s": 1269723600000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Asia/Yerevan",
                "rules": [
                    {
                        "e": 1224972000000,
                        "s": 1206828000000
                    },
                    {
                        "e": 1256421600000,
                        "s": 1238277600000
                    },
                    {
                        "e": 1288476000000,
                        "s": 1269727200000
                    },
                    {
                        "e": 1319925600000,
                        "s": 1301176800000
                    },
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Australia/Lord_Howe",
                "rules": [
                    {
                        "e": 1207407600000,
                        "s": 1223134200000
                    },
                    {
                        "e": 1238857200000,
                        "s": 1254583800000
                    },
                    {
                        "e": 1270306800000,
                        "s": 1286033400000
                    },
                    {
                        "e": 1301756400000,
                        "s": 1317483000000
                    },
                    {
                        "e": 1333206000000,
                        "s": 1349537400000
                    },
                    {
                        "e": 1365260400000,
                        "s": 1380987000000
                    },
                    {
                        "e": 1396710000000,
                        "s": 1412436600000
                    }
                ]
            },
            {
                "name": "Australia/Perth",
                "rules": [
                    {
                        "e": 1206813600000,
                        "s": 1224957600000
                    },
                    false,
                    false,
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Europe/Helsinki",
                "rules": [
                    {
                        "e": 1224982800000,
                        "s": 1206838800000
                    },
                    {
                        "e": 1256432400000,
                        "s": 1238288400000
                    },
                    {
                        "e": 1288486800000,
                        "s": 1269738000000
                    },
                    {
                        "e": 1319936400000,
                        "s": 1301187600000
                    },
                    {
                        "e": 1351386000000,
                        "s": 1332637200000
                    },
                    {
                        "e": 1382835600000,
                        "s": 1364691600000
                    },
                    {
                        "e": 1414285200000,
                        "s": 1396141200000
                    }
                ]
            },
            {
                "name": "Europe/Minsk",
                "rules": [
                    {
                        "e": 1224979200000,
                        "s": 1206835200000
                    },
                    {
                        "e": 1256428800000,
                        "s": 1238284800000
                    },
                    {
                        "e": 1288483200000,
                        "s": 1269734400000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Europe/Moscow",
                "rules": [
                    {
                        "e": 1224975600000,
                        "s": 1206831600000
                    },
                    {
                        "e": 1256425200000,
                        "s": 1238281200000
                    },
                    {
                        "e": 1288479600000,
                        "s": 1269730800000
                    },
                    false,
                    false,
                    false,
                    false
                ]
            },
            {
                "name": "Pacific/Apia",
                "rules": [
                    false,
                    false,
                    false,
                    {
                        "e": 1301752800000,
                        "s": 1316872800000
                    },
                    {
                        "e": 1333202400000,
                        "s": 1348927200000
                    },
                    {
                        "e": 1365256800000,
                        "s": 1380376800000
                    },
                    {
                        "e": 1396706400000,
                        "s": 1411826400000
                    }
                ]
            },
            {
                "name": "Pacific/Fiji",
                "rules": [
                    false,
                    false,
                    {
                        "e": 1269698400000,
                        "s": 1287842400000
                    },
                    {
                        "e": 1327154400000,
                        "s": 1319292000000
                    },
                    {
                        "e": 1358604000000,
                        "s": 1350741600000
                    },
                    {
                        "e": 1390050000000,
                        "s": 1382796000000
                    },
                    {
                        "e": 1421503200000,
                        "s": 1414850400000
                    }
                ]
            },
            {
                "name": "Europe/London",
                "rules": [
                    {
                        "e": 1224982800000,
                        "s": 1206838800000
                    },
                    {
                        "e": 1256432400000,
                        "s": 1238288400000
                    },
                    {
                        "e": 1288486800000,
                        "s": 1269738000000
                    },
                    {
                        "e": 1319936400000,
                        "s": 1301187600000
                    },
                    {
                        "e": 1351386000000,
                        "s": 1332637200000
                    },
                    {
                        "e": 1382835600000,
                        "s": 1364691600000
                    },
                    {
                        "e": 1414285200000,
                        "s": 1396141200000
                    }
                ]
            },
            {
                "name": "Africa/Windhoek",
                "rules": [
                    {
                        "e": 1220749200000,
                        "s": 1207440000000
                    },
                    {
                        "e": 1252198800000,
                        "s": 1238889600000
                    },
                    {
                        "e": 1283648400000,
                        "s": 1270339200000
                    },
                    {
                        "e": 1315098000000,
                        "s": 1301788800000
                    },
                    {
                        "e": 1346547600000,
                        "s": 1333238400000
                    },
                    {
                        "e": 1377997200000,
                        "s": 1365292800000
                    },
                    {
                        "e": 1410051600000,
                        "s": 1396742400000
                    }
                ]
            }
        ]
    };

    return jstz;
});

define('skylark-formio/utils/jsonlogic/operators',[],function () {
    'use strict';
    const lodashOperators = [
        'chunk',
        'compact',
        'concat',
        'difference',
        'differenceBy',
        'differenceWith',
        'drop',
        'dropRight',
        'dropRightWhile',
        'dropWhile',
        'findIndex',
        'findLastIndex',
        'first',
        'flatten',
        'flattenDeep',
        'flattenDepth',
        'fromPairs',
        'head',
        'indexOf',
        'initial',
        'intersection',
        'intersectionBy',
        'intersectionWith',
        'join',
        'last',
        'lastIndexOf',
        'nth',
        'slice',
        'sortedIndex',
        'sortedIndexBy',
        'sortedIndexOf',
        'sortedLastIndex',
        'sortedLastIndexBy',
        'sortedLastIndexOf',
        'sortedUniq',
        'sortedUniqBy',
        'tail',
        'take',
        'takeRight',
        'takeRightWhile',
        'takeWhile',
        'union',
        'unionBy',
        'unionWith',
        'uniq',
        'uniqBy',
        'uniqWith',
        'unzip',
        'unzipWith',
        'without',
        'xor',
        'xorBy',
        'xorWith',
        'zip',
        'zipObject',
        'zipObjectDeep',
        'zipWith',
        'countBy',
        'every',
        'filter',
        'find',
        'findLast',
        'flatMap',
        'flatMapDeep',
        'flatMapDepth',
        'groupBy',
        'includes',
        'invokeMap',
        'keyBy',
        'map',
        'orderBy',
        'partition',
        'reduce',
        'reduceRight',
        'reject',
        'sample',
        'sampleSize',
        'shuffle',
        'size',
        'some',
        'sortBy',
        'now',
        'flip',
        'negate',
        'overArgs',
        'partial',
        'partialRight',
        'rearg',
        'rest',
        'spread',
        'castArray',
        'clone',
        'cloneDeep',
        'cloneDeepWith',
        'cloneDeep',
        'conformsTo',
        'eq',
        'gt',
        'gte',
        'isArguments',
        'isArray',
        'isArrayBuffer',
        'isArrayLike',
        'isArrayLikeObject',
        'isBoolean',
        'isBuffer',
        'isDate',
        'isElement',
        'isEmpty',
        'isEqual',
        'isEqualWith',
        'isError',
        'isFinite',
        'isFunction',
        'isInteger',
        'isLength',
        'isMap',
        'isMatch',
        'isMatchWith',
        'isNaN',
        'isNative',
        'isNil',
        'isNull',
        'isNumber',
        'isObject',
        'isObjectLike',
        'isPlainObject',
        'isRegExp',
        'isSafeInteger',
        'isSet',
        'isString',
        'isSymbol',
        'isTypedArray',
        'isUndefined',
        'isWeakMap',
        'isWeakSet',
        'lt',
        'lte',
        'toArray',
        'toFinite',
        'toInteger',
        'toLength',
        'toNumber',
        'toPlainObject',
        'toSafeInteger',
        'toString',
        'add',
        'ceil',
        'divide',
        'floor',
        'max',
        'maxBy',
        'mean',
        'meanBy',
        'min',
        'minBy',
        'multiply',
        'round',
        'subtract',
        'sum',
        'sumBy',
        'clamp',
        'inRange',
        'random',
        'at',
        'entries',
        'entriesIn',
        'findKey',
        'findLastKey',
        'functions',
        'functionsIn',
        'get',
        'has',
        'hasIn',
        'invert',
        'invertBy',
        'invoke',
        'keys',
        'keysIn',
        'mapKeys',
        'mapValues',
        'omit',
        'omitBy',
        'pick',
        'pickBy',
        'result',
        'toPairs',
        'toPairsIn',
        'transform',
        'values',
        'valuesIn',
        'camelCase',
        'capitalize',
        'deburr',
        'endsWith',
        'escape',
        'escapeRegExp',
        'kebabCase',
        'lowerCase',
        'lowerFirst',
        'pad',
        'padEnd',
        'padStart',
        'parseInt',
        'repeat',
        'replace',
        'snakeCase',
        'split',
        'startCase',
        'startsWith',
        'toLower',
        'toUpper',
        'trim',
        'trimEnd',
        'trimStart',
        'truncate',
        'unescape',
        'upperCase',
        'upperFirst',
        'words',
        'cond',
        'conforms',
        'constant',
        'defaultTo',
        'flow',
        'flowRight',
        'identity',
        'iteratee',
        'matches',
        'matchesProperty',
        'method',
        'methodOf',
        'nthArg',
        'over',
        'overEvery',
        'overSome',
        'property',
        'propertyOf',
        'range',
        'rangeRight',
        'stubArray',
        'stubFalse',
        'stubObject',
        'stubString',
        'stubTrue',
        'times',
        'toPath',
        'uniqueId'
    ];
    return { lodashOperators: lodashOperators };
});
define('skylark-formio/vendors/dompurify/purify',[],function(){
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var hasOwnProperty = Object.hasOwnProperty,
      setPrototypeOf = Object.setPrototypeOf,
      isFrozen = Object.isFrozen,
      objectKeys = Object.keys;
  var freeze = Object.freeze,
      seal = Object.seal,
      create = Object.create; // eslint-disable-line import/no-mutable-exports

  var _ref = typeof Reflect !== 'undefined' && Reflect,
      apply = _ref.apply,
      construct = _ref.construct;

  if (!apply) {
    apply = function apply(fun, thisValue, args) {
      return fun.apply(thisValue, args);
    };
  }

  if (!freeze) {
    freeze = function freeze(x) {
      return x;
    };
  }

  if (!seal) {
    seal = function seal(x) {
      return x;
    };
  }

  if (!construct) {
    construct = function construct(Func, args) {
      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray(args))))();
    };
  }

  var arrayForEach = unapply(Array.prototype.forEach);
  var arrayIndexOf = unapply(Array.prototype.indexOf);
  var arrayJoin = unapply(Array.prototype.join);
  var arrayPop = unapply(Array.prototype.pop);
  var arrayPush = unapply(Array.prototype.push);
  var arraySlice = unapply(Array.prototype.slice);

  var stringToLowerCase = unapply(String.prototype.toLowerCase);
  var stringMatch = unapply(String.prototype.match);
  var stringReplace = unapply(String.prototype.replace);
  var stringIndexOf = unapply(String.prototype.indexOf);
  var stringTrim = unapply(String.prototype.trim);

  var regExpTest = unapply(RegExp.prototype.test);
  var regExpCreate = unconstruct(RegExp);

  var typeErrorCreate = unconstruct(TypeError);

  function unapply(func) {
    return function (thisArg) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return apply(func, thisArg, args);
    };
  }

  function unconstruct(func) {
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return construct(func, args);
    };
  }

  /* Add properties to a lookup table */
  function addToSet(set, array) {
    if (setPrototypeOf) {
      // Make 'in' and truthy checks like Boolean(set.constructor)
      // independent of any properties defined on Object.prototype.
      // Prevent prototype setters from intercepting set as a this value.
      setPrototypeOf(set, null);
    }

    var l = array.length;
    while (l--) {
      var element = array[l];
      if (typeof element === 'string') {
        var lcElement = stringToLowerCase(element);
        if (lcElement !== element) {
          // Config presets (e.g. tags.js, attrs.js) are immutable.
          if (!isFrozen(array)) {
            array[l] = lcElement;
          }

          element = lcElement;
        }
      }

      set[element] = true;
    }

    return set;
  }

  /* Shallow clone an object */
  function clone(object) {
    var newObject = create(null);

    var property = void 0;
    for (property in object) {
      if (apply(hasOwnProperty, object, [property])) {
        newObject[property] = object[property];
      }
    }

    return newObject;
  }

  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);

  // SVG
  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern']);

  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);

  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);

  var text = freeze(['#text']);

  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);

  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);

  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);

  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

  // eslint-disable-next-line unicorn/better-regex
  var MUSTACHE_EXPR = seal(/\{\{[\s\S]*|[\s\S]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
  var ERB_EXPR = seal(/<%[\s\S]*|[\s\S]*%>/gm);
  var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/); // eslint-disable-line no-useless-escape
  var ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
  );
  var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
  var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
  );

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  var getGlobal = function getGlobal() {
    return typeof window === 'undefined' ? null : window;
  };

  /**
   * Creates a no-op policy for internal use only.
   * Don't export this function outside this module!
   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.
   * @param {Document} document The document object (to determine policy name suffix)
   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types
   * are not supported).
   */
  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {
    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
      return null;
    }

    // Allow the callers to control the unique policy name
    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
    // Policy creation with duplicate names throws in Trusted Types.
    var suffix = null;
    var ATTR_NAME = 'data-tt-policy-suffix';
    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {
      suffix = document.currentScript.getAttribute(ATTR_NAME);
    }

    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');

    try {
      return trustedTypes.createPolicy(policyName, {
        createHTML: function createHTML(html$$1) {
          return html$$1;
        }
      });
    } catch (_) {
      // Policy creation failed (most likely another DOMPurify script has
      // already run). Skip creating the policy, as this will only cause errors
      // if TT are enforced.
      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
      return null;
    }
  };

  function createDOMPurify() {
    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();

    var DOMPurify = function DOMPurify(root) {
      return createDOMPurify(root);
    };

    /**
     * Version label, exposed for easier checks
     * if DOMPurify is up to date or not
     */
    DOMPurify.version = '2.0.16';

    /**
     * Array of elements that DOMPurify removed during sanitation.
     * Empty if nothing was removed.
     */
    DOMPurify.removed = [];

    if (!window || !window.document || window.document.nodeType !== 9) {
      // Not running in a browser, provide a factory function
      // so that you can pass your own Window
      DOMPurify.isSupported = false;

      return DOMPurify;
    }

    var originalDocument = window.document;
    var removeTitle = false;

    var document = window.document;
    var DocumentFragment = window.DocumentFragment,
        HTMLTemplateElement = window.HTMLTemplateElement,
        Node = window.Node,
        NodeFilter = window.NodeFilter,
        _window$NamedNodeMap = window.NamedNodeMap,
        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,
        Text = window.Text,
        Comment = window.Comment,
        DOMParser = window.DOMParser,
        trustedTypes = window.trustedTypes;

    // As per issue #47, the web-components registry is inherited by a
    // new document created via createHTMLDocument. As per the spec
    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
    // a new empty registry is used when creating a template contents owner
    // document, so we use that as our parent document to ensure nothing
    // is inherited.

    if (typeof HTMLTemplateElement === 'function') {
      var template = document.createElement('template');
      if (template.content && template.content.ownerDocument) {
        document = template.content.ownerDocument;
      }
    }

    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
    var emptyHTML = trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML('') : '';

    var _document = document,
        implementation = _document.implementation,
        createNodeIterator = _document.createNodeIterator,
        getElementsByTagName = _document.getElementsByTagName,
        createDocumentFragment = _document.createDocumentFragment;
    var importNode = originalDocument.importNode;


    var documentMode = {};
    try {
      documentMode = clone(document).documentMode ? document.documentMode : {};
    } catch (_) {}

    var hooks = {};

    /**
     * Expose whether this browser supports running the full DOMPurify.
     */
    DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && documentMode !== 9;

    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,
        ERB_EXPR$$1 = ERB_EXPR,
        DATA_ATTR$$1 = DATA_ATTR,
        ARIA_ATTR$$1 = ARIA_ATTR,
        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,
        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;
    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;

    /**
     * We consider the elements and attributes below to be safe. Ideally
     * don't add any new ones but feel free to remove unwanted ones.
     */

    /* allowed element names */

    var ALLOWED_TAGS = null;
    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(html), _toConsumableArray$1(svg), _toConsumableArray$1(svgFilters), _toConsumableArray$1(mathMl), _toConsumableArray$1(text)));

    /* Allowed attribute names */
    var ALLOWED_ATTR = null;
    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray$1(html$1), _toConsumableArray$1(svg$1), _toConsumableArray$1(mathMl$1), _toConsumableArray$1(xml)));

    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
    var FORBID_TAGS = null;

    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
    var FORBID_ATTR = null;

    /* Decide if ARIA attributes are okay */
    var ALLOW_ARIA_ATTR = true;

    /* Decide if custom data attributes are okay */
    var ALLOW_DATA_ATTR = true;

    /* Decide if unknown protocols are okay */
    var ALLOW_UNKNOWN_PROTOCOLS = false;

    /* Output should be safe for jQuery's $() factory? */
    var SAFE_FOR_JQUERY = false;

    /* Output should be safe for common template engines.
     * This means, DOMPurify removes data attributes, mustaches and ERB
     */
    var SAFE_FOR_TEMPLATES = false;

    /* Decide if document with <html>... should be returned */
    var WHOLE_DOCUMENT = false;

    /* Track whether config is already set on this instance of DOMPurify. */
    var SET_CONFIG = false;

    /* Decide if all elements (e.g. style, script) must be children of
     * document.body. By default, browsers might move them to document.head */
    var FORCE_BODY = false;

    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
     * string (or a TrustedHTML object if Trusted Types are supported).
     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
     */
    var RETURN_DOM = false;

    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
     * string  (or a TrustedHTML object if Trusted Types are supported) */
    var RETURN_DOM_FRAGMENT = false;

    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM
     * `Node` is imported into the current `Document`. If this flag is not enabled the
     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by
     * DOMPurify. */
    var RETURN_DOM_IMPORT = false;

    /* Try to return a Trusted Type object instead of a string, return a string in
     * case Trusted Types are not supported  */
    var RETURN_TRUSTED_TYPE = false;

    /* Output should be free from DOM clobbering attacks? */
    var SANITIZE_DOM = true;

    /* Keep element content when removing element? */
    var KEEP_CONTENT = true;

    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
     * of importing it into a new Document and returning a sanitized copy */
    var IN_PLACE = false;

    /* Allow usage of profiles like html, svg and mathMl */
    var USE_PROFILES = {};

    /* Tags to ignore content of when KEEP_CONTENT is true */
    var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);

    /* Tags that are safe for data: URIs */
    var DATA_URI_TAGS = null;
    var DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);

    /* Attributes safe for values like "javascript:" */
    var URI_SAFE_ATTRIBUTES = null;
    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);

    /* Keep a reference to config to pass to hooks */
    var CONFIG = null;

    /* Ideally, do not touch anything below this line */
    /* ______________________________________________ */

    var formElement = document.createElement('form');

    /**
     * _parseConfig
     *
     * @param  {Object} cfg optional config literal
     */
    // eslint-disable-next-line complexity
    var _parseConfig = function _parseConfig(cfg) {
      if (CONFIG && CONFIG === cfg) {
        return;
      }

      /* Shield configuration object from tampering */
      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {
        cfg = {};
      }

      /* Shield configuration object from prototype pollution */
      cfg = clone(cfg);

      /* Set configuration parameters */
      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;
      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
      SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false
      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
      RETURN_DOM = cfg.RETURN_DOM || false; // Default false
      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false
      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
      FORCE_BODY = cfg.FORCE_BODY || false; // Default false
      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
      IN_PLACE = cfg.IN_PLACE || false; // Default false
      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;
      if (SAFE_FOR_TEMPLATES) {
        ALLOW_DATA_ATTR = false;
      }

      if (RETURN_DOM_FRAGMENT) {
        RETURN_DOM = true;
      }

      /* Parse profile info */
      if (USE_PROFILES) {
        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray$1(text)));
        ALLOWED_ATTR = [];
        if (USE_PROFILES.html === true) {
          addToSet(ALLOWED_TAGS, html);
          addToSet(ALLOWED_ATTR, html$1);
        }

        if (USE_PROFILES.svg === true) {
          addToSet(ALLOWED_TAGS, svg);
          addToSet(ALLOWED_ATTR, svg$1);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.svgFilters === true) {
          addToSet(ALLOWED_TAGS, svgFilters);
          addToSet(ALLOWED_ATTR, svg$1);
          addToSet(ALLOWED_ATTR, xml);
        }

        if (USE_PROFILES.mathMl === true) {
          addToSet(ALLOWED_TAGS, mathMl);
          addToSet(ALLOWED_ATTR, mathMl$1);
          addToSet(ALLOWED_ATTR, xml);
        }
      }

      /* Merge configuration parameters */
      if (cfg.ADD_TAGS) {
        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
          ALLOWED_TAGS = clone(ALLOWED_TAGS);
        }

        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
      }

      if (cfg.ADD_ATTR) {
        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
          ALLOWED_ATTR = clone(ALLOWED_ATTR);
        }

        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
      }

      if (cfg.ADD_URI_SAFE_ATTR) {
        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
      }

      /* Add #text in case KEEP_CONTENT is set to true */
      if (KEEP_CONTENT) {
        ALLOWED_TAGS['#text'] = true;
      }

      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
      if (WHOLE_DOCUMENT) {
        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
      }

      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
      if (ALLOWED_TAGS.table) {
        addToSet(ALLOWED_TAGS, ['tbody']);
        delete FORBID_TAGS.tbody;
      }

      // Prevent further manipulation of configuration.
      // Not available in IE8, Safari 5, etc.
      if (freeze) {
        freeze(cfg);
      }

      CONFIG = cfg;
    };

    /**
     * _forceRemove
     *
     * @param  {Node} node a DOM node
     */
    var _forceRemove = function _forceRemove(node) {
      arrayPush(DOMPurify.removed, { element: node });
      try {
        node.parentNode.removeChild(node);
      } catch (_) {
        node.outerHTML = emptyHTML;
      }
    };

    /**
     * _removeAttribute
     *
     * @param  {String} name an Attribute name
     * @param  {Node} node a DOM node
     */
    var _removeAttribute = function _removeAttribute(name, node) {
      try {
        arrayPush(DOMPurify.removed, {
          attribute: node.getAttributeNode(name),
          from: node
        });
      } catch (_) {
        arrayPush(DOMPurify.removed, {
          attribute: null,
          from: node
        });
      }

      node.removeAttribute(name);
    };

    /**
     * _initDocument
     *
     * @param  {String} dirty a string of dirty markup
     * @return {Document} a DOM, filled with the dirty markup
     */
    var _initDocument = function _initDocument(dirty) {
      /* Create a HTML document */
      var doc = void 0;
      var leadingWhitespace = void 0;

      if (FORCE_BODY) {
        dirty = '<remove></remove>' + dirty;
      } else {
        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
        var matches = stringMatch(dirty, /^[\r\n\t ]+/);
        leadingWhitespace = matches && matches[0];
      }

      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
      /* Use the DOMParser API by default, fallback later if needs be */
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');
      } catch (_) {}

      /* Remove title to fix a mXSS bug in older MS Edge */
      if (removeTitle) {
        addToSet(FORBID_TAGS, ['title']);
      }

      /* Use createHTMLDocument in case DOMParser is not available */
      if (!doc || !doc.documentElement) {
        doc = implementation.createHTMLDocument('');
        var _doc = doc,
            body = _doc.body;

        body.parentNode.removeChild(body.parentNode.firstElementChild);
        body.outerHTML = dirtyPayload;
      }

      if (dirty && leadingWhitespace) {
        doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);
      }

      /* Work on whole document or just its body */
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    };

    /* Here we test for a broken feature in Edge that might cause mXSS */
    if (DOMPurify.isSupported) {
      (function () {
        try {
          var doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');
          if (regExpTest(/<\/title/, doc.querySelector('title').innerHTML)) {
            removeTitle = true;
          }
        } catch (_) {}
      })();
    }

    /**
     * _createIterator
     *
     * @param  {Document} root document/fragment to create iterator for
     * @return {Iterator} iterator instance
     */
    var _createIterator = function _createIterator(root) {
      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {
        return NodeFilter.FILTER_ACCEPT;
      }, false);
    };

    /**
     * _isClobbered
     *
     * @param  {Node} elm element to check for clobbering attacks
     * @return {Boolean} true if clobbered, false if safe
     */
    var _isClobbered = function _isClobbered(elm) {
      if (elm instanceof Text || elm instanceof Comment) {
        return false;
      }

      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string') {
        return true;
      }

      return false;
    };

    /**
     * _isNode
     *
     * @param  {Node} obj object to check whether it's a DOM node
     * @return {Boolean} true is object is a DOM node
     */
    var _isNode = function _isNode(object) {
      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? object instanceof Node : object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';
    };

    /**
     * _executeHook
     * Execute user configurable hooks
     *
     * @param  {String} entryPoint  Name of the hook's entry point
     * @param  {Node} currentNode node to work on with the hook
     * @param  {Object} data additional hook parameters
     */
    var _executeHook = function _executeHook(entryPoint, currentNode, data) {
      if (!hooks[entryPoint]) {
        return;
      }

      arrayForEach(hooks[entryPoint], function (hook) {
        hook.call(DOMPurify, currentNode, data, CONFIG);
      });
    };

    /**
     * _sanitizeElements
     *
     * @protect nodeName
     * @protect textContent
     * @protect removeChild
     *
     * @param   {Node} currentNode to check for permission to exist
     * @return  {Boolean} true if node was killed, false if left alive
     */
    // eslint-disable-next-line complexity
    var _sanitizeElements = function _sanitizeElements(currentNode) {
      var content = void 0;

      /* Execute a hook if present */
      _executeHook('beforeSanitizeElements', currentNode, null);

      /* Check if element is clobbered or can clobber */
      if (_isClobbered(currentNode)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Check if tagname contains Unicode */
      if (stringMatch(currentNode.nodeName, /[\u0080-\uFFFF]/)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Now let's check the element's type and name */
      var tagName = stringToLowerCase(currentNode.nodeName);

      /* Execute a hook if present */
      _executeHook('uponSanitizeElement', currentNode, {
        tagName: tagName,
        allowedTags: ALLOWED_TAGS
      });

      /* Take care of an mXSS pattern using p, br inside svg, math */
      if ((tagName === 'svg' || tagName === 'math') && currentNode.querySelectorAll('p, br, form').length !== 0) {
        _forceRemove(currentNode);
        return true;
      }

      /* Remove element if anything forbids its presence */
      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
        /* Keep content except for bad-listed elements */
        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {
          try {
            var htmlToInsert = currentNode.innerHTML;
            currentNode.insertAdjacentHTML('AfterEnd', trustedTypesPolicy ? trustedTypesPolicy.createHTML(htmlToInsert) : htmlToInsert);
          } catch (_) {}
        }

        _forceRemove(currentNode);
        return true;
      }

      /* Remove in case a noscript/noembed XSS is suspected */
      if (tagName === 'noscript' && regExpTest(/<\/noscript/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);
        return true;
      }

      if (tagName === 'noembed' && regExpTest(/<\/noembed/i, currentNode.innerHTML)) {
        _forceRemove(currentNode);
        return true;
      }

      /* Convert markup to cover jQuery behavior */
      if (SAFE_FOR_JQUERY && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/</g, currentNode.textContent)) {
        arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });
        if (currentNode.innerHTML) {
          currentNode.innerHTML = stringReplace(currentNode.innerHTML, /</g, '&lt;');
        } else {
          currentNode.innerHTML = stringReplace(currentNode.textContent, /</g, '&lt;');
        }
      }

      /* Sanitize element content to be template-safe */
      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
        /* Get the element's text content */
        content = currentNode.textContent;
        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');
        content = stringReplace(content, ERB_EXPR$$1, ' ');
        if (currentNode.textContent !== content) {
          arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });
          currentNode.textContent = content;
        }
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeElements', currentNode, null);

      return false;
    };

    /**
     * _isValidAttribute
     *
     * @param  {string} lcTag Lowercase tag name of containing element.
     * @param  {string} lcName Lowercase attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid, otherwise false.
     */
    // eslint-disable-next-line complexity
    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
      /* Make sure attribute cannot clobber */
      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
        return false;
      }

      /* Allow valid data-* attributes: At least one character after "-"
          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
          We don't need to check the value; it's always URI safe. */
      if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR$$1, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
        return false;

        /* Check value is safe. First, is attr inert? If so, is safe */
      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) ; else if (!value) ; else {
        return false;
      }

      return true;
    };

    /**
     * _sanitizeAttributes
     *
     * @protect attributes
     * @protect nodeName
     * @protect removeAttribute
     * @protect setAttribute
     *
     * @param  {Node} currentNode to sanitize
     */
    // eslint-disable-next-line complexity
    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
      var attr = void 0;
      var value = void 0;
      var lcName = void 0;
      var idAttr = void 0;
      var l = void 0;
      /* Execute a hook if present */
      _executeHook('beforeSanitizeAttributes', currentNode, null);

      var attributes = currentNode.attributes;

      /* Check if we have attributes; if not we might have a text node */

      if (!attributes) {
        return;
      }

      var hookEvent = {
        attrName: '',
        attrValue: '',
        keepAttr: true,
        allowedAttributes: ALLOWED_ATTR
      };
      l = attributes.length;

      /* Go backwards over all attributes; safely remove bad ones */
      while (l--) {
        attr = attributes[l];
        var _attr = attr,
            name = _attr.name,
            namespaceURI = _attr.namespaceURI;

        value = stringTrim(attr.value);
        lcName = stringToLowerCase(name);

        /* Execute a hook if present */
        hookEvent.attrName = lcName;
        hookEvent.attrValue = value;
        hookEvent.keepAttr = true;
        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);
        value = hookEvent.attrValue;
        /* Did the hooks approve of the attribute? */
        if (hookEvent.forceKeepAttr) {
          continue;
        }

        /* Remove attribute */
        // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to
        // remove a "name" attribute from an <img> tag that has an "id"
        // attribute at the time.
        if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {
          idAttr = attributes.id;
          attributes = arraySlice(attributes, []);
          _removeAttribute('id', currentNode);
          _removeAttribute(name, currentNode);
          if (arrayIndexOf(attributes, idAttr) > l) {
            currentNode.setAttribute('id', idAttr.value);
          }
        } else if (
        // This works around a bug in Safari, where input[type=file]
        // cannot be dynamically set after type has been removed
        currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && hookEvent.keepAttr && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {
          continue;
        } else {
          // This avoids a crash in Safari v9.0 with double-ids.
          // The trick is to first set the id to be empty and then to
          // remove the attribute
          if (name === 'id') {
            currentNode.setAttribute(name, '');
          }

          _removeAttribute(name, currentNode);
        }

        /* Did the hooks approve of the attribute? */
        if (!hookEvent.keepAttr) {
          continue;
        }

        /* Work around a security issue in jQuery 3.0 */
        if (SAFE_FOR_JQUERY && regExpTest(/\/>/i, value)) {
          _removeAttribute(name, currentNode);
          continue;
        }

        /* Take care of an mXSS pattern using namespace switches */
        if (regExpTest(/svg|math/i, currentNode.namespaceURI) && regExpTest(regExpCreate('</(' + arrayJoin(objectKeys(FORBID_CONTENTS), '|') + ')', 'i'), value)) {
          _removeAttribute(name, currentNode);
          continue;
        }

        /* Sanitize attribute content to be template-safe */
        if (SAFE_FOR_TEMPLATES) {
          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');
          value = stringReplace(value, ERB_EXPR$$1, ' ');
        }

        /* Is `value` valid for this attribute? */
        var lcTag = currentNode.nodeName.toLowerCase();
        if (!_isValidAttribute(lcTag, lcName, value)) {
          continue;
        }

        /* Handle invalid data-* attribute set by try-catching it */
        try {
          if (namespaceURI) {
            currentNode.setAttributeNS(namespaceURI, name, value);
          } else {
            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
            currentNode.setAttribute(name, value);
          }

          arrayPop(DOMPurify.removed);
        } catch (_) {}
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeAttributes', currentNode, null);
    };

    /**
     * _sanitizeShadowDOM
     *
     * @param  {DocumentFragment} fragment to iterate over recursively
     */
    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
      var shadowNode = void 0;
      var shadowIterator = _createIterator(fragment);

      /* Execute a hook if present */
      _executeHook('beforeSanitizeShadowDOM', fragment, null);

      while (shadowNode = shadowIterator.nextNode()) {
        /* Execute a hook if present */
        _executeHook('uponSanitizeShadowNode', shadowNode, null);

        /* Sanitize tags and elements */
        if (_sanitizeElements(shadowNode)) {
          continue;
        }

        /* Deep shadow DOM detected */
        if (shadowNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(shadowNode.content);
        }

        /* Check attributes, sanitize if necessary */
        _sanitizeAttributes(shadowNode);
      }

      /* Execute a hook if present */
      _executeHook('afterSanitizeShadowDOM', fragment, null);
    };

    /**
     * Sanitize
     * Public method providing core sanitation functionality
     *
     * @param {String|Node} dirty string or DOM node
     * @param {Object} configuration object
     */
    // eslint-disable-next-line complexity
    DOMPurify.sanitize = function (dirty, cfg) {
      var body = void 0;
      var importedNode = void 0;
      var currentNode = void 0;
      var oldNode = void 0;
      var returnNode = void 0;
      /* Make sure we have a string to sanitize.
        DO NOT return early, as this will return the wrong type if
        the user has requested a DOM object rather than a string */
      if (!dirty) {
        dirty = '<!-->';
      }

      /* Stringify, in case dirty is an object */
      if (typeof dirty !== 'string' && !_isNode(dirty)) {
        // eslint-disable-next-line no-negated-condition
        if (typeof dirty.toString !== 'function') {
          throw typeErrorCreate('toString is not a function');
        } else {
          dirty = dirty.toString();
          if (typeof dirty !== 'string') {
            throw typeErrorCreate('dirty is not a string, aborting');
          }
        }
      }

      /* Check we can run. Otherwise fall back or ignore */
      if (!DOMPurify.isSupported) {
        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {
          if (typeof dirty === 'string') {
            return window.toStaticHTML(dirty);
          }

          if (_isNode(dirty)) {
            return window.toStaticHTML(dirty.outerHTML);
          }
        }

        return dirty;
      }

      /* Assign config vars */
      if (!SET_CONFIG) {
        _parseConfig(cfg);
      }

      /* Clean up removed elements */
      DOMPurify.removed = [];

      /* Check if dirty is correctly typed for IN_PLACE */
      if (typeof dirty === 'string') {
        IN_PLACE = false;
      }

      if (IN_PLACE) ; else if (dirty instanceof Node) {
        /* If dirty is a DOM element, append to an empty document to avoid
           elements being stripped by the parser */
        body = _initDocument('<!-->');
        importedNode = body.ownerDocument.importNode(dirty, true);
        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {
          /* Node is already a body, use as is */
          body = importedNode;
        } else if (importedNode.nodeName === 'HTML') {
          body = importedNode;
        } else {
          // eslint-disable-next-line unicorn/prefer-node-append
          body.appendChild(importedNode);
        }
      } else {
        /* Exit directly if we have nothing to do */
        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
        // eslint-disable-next-line unicorn/prefer-includes
        dirty.indexOf('<') === -1) {
          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
        }

        /* Initialize the document to work on */
        body = _initDocument(dirty);

        /* Check we have a DOM node from the data */
        if (!body) {
          return RETURN_DOM ? null : emptyHTML;
        }
      }

      /* Remove first element node (ours) if FORCE_BODY is set */
      if (body && FORCE_BODY) {
        _forceRemove(body.firstChild);
      }

      /* Get node iterator */
      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);

      /* Now start iterating over the created document */
      while (currentNode = nodeIterator.nextNode()) {
        /* Fix IE's strange behavior with manipulated textNodes #89 */
        if (currentNode.nodeType === 3 && currentNode === oldNode) {
          continue;
        }

        /* Sanitize tags and elements */
        if (_sanitizeElements(currentNode)) {
          continue;
        }

        /* Shadow DOM detected, sanitize it */
        if (currentNode.content instanceof DocumentFragment) {
          _sanitizeShadowDOM(currentNode.content);
        }

        /* Check attributes, sanitize if necessary */
        _sanitizeAttributes(currentNode);

        oldNode = currentNode;
      }

      oldNode = null;

      /* If we sanitized `dirty` in-place, return it. */
      if (IN_PLACE) {
        return dirty;
      }

      /* Return sanitized string or DOM */
      if (RETURN_DOM) {
        if (RETURN_DOM_FRAGMENT) {
          returnNode = createDocumentFragment.call(body.ownerDocument);

          while (body.firstChild) {
            // eslint-disable-next-line unicorn/prefer-node-append
            returnNode.appendChild(body.firstChild);
          }
        } else {
          returnNode = body;
        }

        if (RETURN_DOM_IMPORT) {
          /*
            AdoptNode() is not used because internal state is not reset
            (e.g. the past names map of a HTMLFormElement), this is safe
            in theory but we would rather not risk another attack vector.
            The state that is cloned by importNode() is explicitly defined
            by the specs.
          */
          returnNode = importNode.call(originalDocument, returnNode, true);
        }

        return returnNode;
      }

      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;

      /* Sanitize final string template-safe */
      if (SAFE_FOR_TEMPLATES) {
        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');
        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');
      }

      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
    };

    /**
     * Public method to set the configuration once
     * setConfig
     *
     * @param {Object} cfg configuration object
     */
    DOMPurify.setConfig = function (cfg) {
      _parseConfig(cfg);
      SET_CONFIG = true;
    };

    /**
     * Public method to remove the configuration
     * clearConfig
     *
     */
    DOMPurify.clearConfig = function () {
      CONFIG = null;
      SET_CONFIG = false;
    };

    /**
     * Public method to check if an attribute value is valid.
     * Uses last set config, if any. Otherwise, uses config defaults.
     * isValidAttribute
     *
     * @param  {string} tag Tag name of containing element.
     * @param  {string} attr Attribute name.
     * @param  {string} value Attribute value.
     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.
     */
    DOMPurify.isValidAttribute = function (tag, attr, value) {
      /* Initialize shared config vars if necessary. */
      if (!CONFIG) {
        _parseConfig({});
      }

      var lcTag = stringToLowerCase(tag);
      var lcName = stringToLowerCase(attr);
      return _isValidAttribute(lcTag, lcName, value);
    };

    /**
     * AddHook
     * Public method to add DOMPurify hooks
     *
     * @param {String} entryPoint entry point for the hook to add
     * @param {Function} hookFunction function to execute
     */
    DOMPurify.addHook = function (entryPoint, hookFunction) {
      if (typeof hookFunction !== 'function') {
        return;
      }

      hooks[entryPoint] = hooks[entryPoint] || [];
      arrayPush(hooks[entryPoint], hookFunction);
    };

    /**
     * RemoveHook
     * Public method to remove a DOMPurify hook at a given entryPoint
     * (pops it from the stack of hooks if more are present)
     *
     * @param {String} entryPoint entry point for the hook to remove
     */
    DOMPurify.removeHook = function (entryPoint) {
      if (hooks[entryPoint]) {
        arrayPop(hooks[entryPoint]);
      }
    };

    /**
     * RemoveHooks
     * Public method to remove all DOMPurify hooks at a given entryPoint
     *
     * @param  {String} entryPoint entry point for the hooks to remove
     */
    DOMPurify.removeHooks = function (entryPoint) {
      if (hooks[entryPoint]) {
        hooks[entryPoint] = [];
      }
    };

    /**
     * RemoveAllHooks
     * Public method to remove all DOMPurify hooks
     *
     */
    DOMPurify.removeAllHooks = function () {
      hooks = {};
    };

    return DOMPurify;
  }

  var purify = createDOMPurify();

  return purify;

});

define('skylark-formio/vendors/fast-json-patch/helpers',[],function(){
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    /*!
     * https://github.com/Starcounter-Jack/JSON-Patch
     * (c) 2017 Joachim Wester
     * MIT license
     */
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function hasOwnProperty(obj, key) {
        return _hasOwnProperty.call(obj, key);
    }
    function _objectKeys(obj) {
        if (Array.isArray(obj)) {
            var keys = new Array(obj.length);
            for (var k = 0; k < keys.length; k++) {
                keys[k] = "" + k;
            }
            return keys;
        }
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var i in obj) {
            if (hasOwnProperty(obj, i)) {
                keys.push(i);
            }
        }
        return keys;
    }
    ;
    /**
    * Deeply clone the object.
    * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)
    * @param  {any} obj value to clone
    * @return {any} cloned obj
    */
    function _deepClone(obj) {
        switch (typeof obj) {
            case "object":
                return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
            case "undefined":
                return null; //this is how JSON.stringify behaves for array items
            default:
                return obj; //no need to clone primitives
        }
    }
    //3x faster than cached /^\d+$/.test(str)
    function isInteger(str) {
        var i = 0;
        var len = str.length;
        var charCode;
        while (i < len) {
            charCode = str.charCodeAt(i);
            if (charCode >= 48 && charCode <= 57) {
                i++;
                continue;
            }
            return false;
        }
        return true;
    }
    /**
    * Escapes a json pointer path
    * @param path The raw pointer
    * @return the Escaped path
    */
    function escapePathComponent(path) {
        if (path.indexOf('/') === -1 && path.indexOf('~') === -1)
            return path;
        return path.replace(/~/g, '~0').replace(/\//g, '~1');
    }
    /**
     * Unescapes a json pointer path
     * @param path The escaped pointer
     * @return The unescaped path
     */
    function unescapePathComponent(path) {
        return path.replace(/~1/g, '/').replace(/~0/g, '~');
    }
    function _getPathRecursive(root, obj) {
        var found;
        for (var key in root) {
            if (hasOwnProperty(root, key)) {
                if (root[key] === obj) {
                    return escapePathComponent(key) + '/';
                }
                else if (typeof root[key] === 'object') {
                    found = _getPathRecursive(root[key], obj);
                    if (found != '') {
                        return escapePathComponent(key) + '/' + found;
                    }
                }
            }
        }
        return '';
    }
    function getPath(root, obj) {
        if (root === obj) {
            return '/';
        }
        var path = _getPathRecursive(root, obj);
        if (path === '') {
            throw new Error("Object not found in root");
        }
        return '/' + path;
    }
    /**
    * Recursively checks whether an object has any undefined values inside.
    */
    function hasUndefined(obj) {
        if (obj === undefined) {
            return true;
        }
        if (obj) {
            if (Array.isArray(obj)) {
                for (var i = 0, len = obj.length; i < len; i++) {
                    if (hasUndefined(obj[i])) {
                        return true;
                    }
                }
            }
            else if (typeof obj === "object") {
                var objKeys = _objectKeys(obj);
                var objKeysLength = objKeys.length;
                for (var i = 0; i < objKeysLength; i++) {
                    if (hasUndefined(obj[objKeys[i]])) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    var PatchError = (function (_super) {
        __extends(PatchError, _super);
        function PatchError(message, name, index, operation, tree) {
            _super.call(this, message);
            this.message = message;
            this.name = name;
            this.index = index;
            this.operation = operation;
            this.tree = tree;
        }
        return PatchError;
    }(Error));

    return {
        hasOwnProperty,
        PatchError,
        hasUndefined,
        getPath,
        unescapePathComponent,
        escapePathComponent,
        isInteger,
        _objectKeys,
        _deepClone,
        _getPathRecursive
    };

});
define('skylark-formio/vendors/fast-json-patch/core',[
    "skylark-lodash",
    "./helpers"
],function(
    _,
    helpers_1
){
    var areEquals = function (a, b) {
        return _.isEqual(a, b);
    };

    /* We use a Javascript hash to store each
     function. Each hash entry (property) uses
     the operation identifiers specified in rfc6902.
     In this way, we can map each patch operation
     to its dedicated function in efficient way.
     */
    /* The operations applicable to an object */
    var objOps = {
        add: function (obj, key, document) {
            obj[key] = this.value;
            return { newDocument: document };
        },
        remove: function (obj, key, document) {
            var removed = obj[key];
            delete obj[key];
            return { newDocument: document, removed: removed };
        },
        replace: function (obj, key, document) {
            var removed = obj[key];
            obj[key] = this.value;
            return { newDocument: document, removed: removed };
        },
        move: function (obj, key, document) {
            /* in case move target overwrites an existing value,
            return the removed value, this can be taxing performance-wise,
            and is potentially unneeded */
            var removed = getValueByPointer(document, this.path);
            if (removed) {
                removed = helpers_1._deepClone(removed);
            }
            var originalValue = applyOperation(document, { op: "remove", path: this.from }).removed;
            applyOperation(document, { op: "add", path: this.path, value: originalValue });
            return { newDocument: document, removed: removed };
        },
        copy: function (obj, key, document) {
            var valueToCopy = getValueByPointer(document, this.from);
            // enforce copy by value so further operations don't affect source (see issue #177)
            applyOperation(document, { op: "add", path: this.path, value: helpers_1._deepClone(valueToCopy) });
            return { newDocument: document };
        },
        test: function (obj, key, document) {
            return { newDocument: document, test: areEquals(obj[key], this.value) };
        },
        _get: function (obj, key, document) {
            this.value = obj[key];
            return { newDocument: document };
        }
    };
    /* The operations applicable to an array. Many are the same as for the object */
    var arrOps = {
        add: function (arr, i, document) {
            if (helpers_1.isInteger(i)) {
                arr.splice(i, 0, this.value);
            }
            else {
                arr[i] = this.value;
            }
            // this may be needed when using '-' in an array
            return { newDocument: document, index: i };
        },
        remove: function (arr, i, document) {
            var removedList = arr.splice(i, 1);
            return { newDocument: document, removed: removedList[0] };
        },
        replace: function (arr, i, document) {
            var removed = arr[i];
            arr[i] = this.value;
            return { newDocument: document, removed: removed };
        },
        move: objOps.move,
        copy: objOps.copy,
        test: objOps.test,
        _get: objOps._get
    };
    /**
     * Retrieves a value from a JSON document by a JSON pointer.
     * Returns the value.
     *
     * @param document The document to get the value from
     * @param pointer an escaped JSON pointer
     * @return The retrieved value
     */
    function getValueByPointer(document, pointer) {
        if (pointer == '') {
            return document;
        }
        var getOriginalDestination = { op: "_get", path: pointer };
        applyOperation(document, getOriginalDestination);
        return getOriginalDestination.value;
    }
    /**
     * Apply a single JSON Patch Operation on a JSON document.
     * Returns the {newDocument, result} of the operation.
     * It modifies the `document` and `operation` objects - it gets the values by reference.
     * If you would like to avoid touching your values, clone them:
     * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.
     *
     * @param document The document to patch
     * @param operation The operation to apply
     * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
     * @param mutateDocument Whether to mutate the original document or clone it before applying
     * @return `{newDocument, result}` after the operation
     */
    function applyOperation(document, operation, validateOperation, mutateDocument) {
        if (validateOperation === void 0) { validateOperation = false; }
        if (mutateDocument === void 0) { mutateDocument = true; }
        if (validateOperation) {
            if (typeof validateOperation == 'function') {
                validateOperation(operation, 0, document, operation.path);
            }
            else {
                validator(operation, 0);
            }
        }
        /* ROOT OPERATIONS */
        if (operation.path === "") {
            var returnValue = { newDocument: document };
            if (operation.op === 'add') {
                returnValue.newDocument = operation.value;
                return returnValue;
            }
            else if (operation.op === 'replace') {
                returnValue.newDocument = operation.value;
                returnValue.removed = document; //document we removed
                return returnValue;
            }
            else if (operation.op === 'move' || operation.op === 'copy') {
                returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field
                if (operation.op === 'move') {
                    returnValue.removed = document;
                }
                return returnValue;
            }
            else if (operation.op === 'test') {
                returnValue.test = areEquals(document, operation.value);
                if (returnValue.test === false) {
                    throw new helpers_1.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', 0, operation, document);
                }
                returnValue.newDocument = document;
                return returnValue;
            }
            else if (operation.op === 'remove') {
                returnValue.removed = document;
                returnValue.newDocument = null;
                return returnValue;
            }
            else if (operation.op === '_get') {
                operation.value = document;
                return returnValue;
            }
            else {
                if (validateOperation) {
                    throw new helpers_1.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', 0, operation, document);
                }
                else {
                    return returnValue;
                }
            }
        } /* END ROOT OPERATIONS */
        else {
            if (!mutateDocument) {
                document = helpers_1._deepClone(document);
            }
            var path = operation.path || "";
            var keys = path.split('/');
            var obj = document;
            var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift
            var len = keys.length;
            var existingPathFragment = undefined;
            var key = void 0;
            var validateFunction = void 0;
            if (typeof validateOperation == 'function') {
                validateFunction = validateOperation;
            }
            else {
                validateFunction = validator;
            }
            while (true) {
                key = keys[t];
                if (validateOperation) {
                    if (existingPathFragment === undefined) {
                        if (obj[key] === undefined) {
                            existingPathFragment = keys.slice(0, t).join('/');
                        }
                        else if (t == len - 1) {
                            existingPathFragment = operation.path;
                        }
                        if (existingPathFragment !== undefined) {
                            validateFunction(operation, 0, document, existingPathFragment);
                        }
                    }
                }
                t++;
                if (Array.isArray(obj)) {
                    if (key === '-') {
                        key = obj.length;
                    }
                    else {
                        if (validateOperation && !helpers_1.isInteger(key)) {
                            throw new helpers_1.JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", 0, operation.path, operation);
                        } // only parse key when it's an integer for `arr.prop` to work
                        else if (helpers_1.isInteger(key)) {
                            key = ~~key;
                        }
                    }
                    if (t >= len) {
                        if (validateOperation && operation.op === "add" && key > obj.length) {
                            throw new helpers_1.JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", 0, operation.path, operation);
                        }
                        var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch
                        if (returnValue.test === false) {
                            throw new helpers_1.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', 0, operation, document);
                        }
                        return returnValue;
                    }
                }
                else {
                    if (key && key.indexOf('~') != -1) {
                        key = helpers_1.unescapePathComponent(key);
                    }
                    if (t >= len) {
                        var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch
                        if (returnValue.test === false) {
                            throw new helpers_1.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', 0, operation, document);
                        }
                        return returnValue;
                    }
                }
                obj = obj[key];
            }
        }
    }
    /**
     * Apply a full JSON Patch array on a JSON document.
     * Returns the {newDocument, result} of the patch.
     * It modifies the `document` object and `patch` - it gets the values by reference.
     * If you would like to avoid touching your values, clone them:
     * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.
     *
     * @param document The document to patch
     * @param patch The patch to apply
     * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
     * @param mutateDocument Whether to mutate the original document or clone it before applying
     * @return An array of `{newDocument, result}` after the patch
     */
    function applyPatch(document, patch, validateOperation, mutateDocument) {
        if (mutateDocument === void 0) { mutateDocument = true; }
        if (validateOperation) {
            if (!Array.isArray(patch)) {
                throw new helpers_1.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
            }
        }
        if (!mutateDocument) {
            document = helpers_1._deepClone(document);
        }
        var results = new Array(patch.length);
        for (var i = 0, length_1 = patch.length; i < length_1; i++) {
            results[i] = applyOperation(document, patch[i], validateOperation);
            document = results[i].newDocument; // in case root was replaced
        }
        results.newDocument = document;
        return results;
    }
    /**
     * Apply a single JSON Patch Operation on a JSON document.
     * Returns the updated document.
     * Suitable as a reducer.
     *
     * @param document The document to patch
     * @param operation The operation to apply
     * @return The updated document
     */
    function applyReducer(document, operation) {
        var operationResult = applyOperation(document, operation);
        if (operationResult.test === false) {
            throw new helpers_1.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', 0, operation, document);
        }
        return operationResult.newDocument;
    }
    /**
     * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
     * @param {object} operation - operation object (patch)
     * @param {number} index - index of operation in the sequence
     * @param {object} [document] - object where the operation is supposed to be applied
     * @param {string} [existingPathFragment] - comes along with `document`
     */
    function validator(operation, index, document, existingPathFragment) {
        if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {
            throw new helpers_1.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);
        }
        else if (!objOps[operation.op]) {
            throw new helpers_1.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
        }
        else if (typeof operation.path !== 'string') {
            throw new helpers_1.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);
        }
        else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {
            // paths that aren't empty string should start with "/"
            throw new helpers_1.JsonPatchError('Operation `path` property must start with "/"', 'OPERATION_PATH_INVALID', index, operation, document);
        }
        else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
            throw new helpers_1.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);
        }
        else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
            throw new helpers_1.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);
        }
        else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {
            throw new helpers_1.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);
        }
        else if (document) {
            if (operation.op == "add") {
                var pathLen = operation.path.split("/").length;
                var existingPathLen = existingPathFragment.split("/").length;
                if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
                    throw new helpers_1.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);
                }
            }
            else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
                if (operation.path !== existingPathFragment) {
                    throw new helpers_1.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);
                }
            }
            else if (operation.op === 'move' || operation.op === 'copy') {
                var existingValue = { op: "_get", path: operation.from, value: undefined };
                var error = validate([existingValue], document);
                if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
                    throw new helpers_1.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);
                }
            }
        }
    }
    /**
     * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.
     * If error is encountered, returns a JsonPatchError object
     * @param sequence
     * @param document
     * @returns {JsonPatchError|undefined}
     */
    function validate(sequence, document, externalValidator) {
        try {
            if (!Array.isArray(sequence)) {
                throw new helpers_1.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
            }
            if (document) {
                //clone document and sequence so that we can safely try applying operations
                applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);
            }
            else {
                externalValidator = externalValidator || validator;
                for (var i = 0; i < sequence.length; i++) {
                    externalValidator(sequence[i], i, document, undefined);
                }
            }
        }
        catch (e) {
            if (e instanceof helpers_1.JsonPatchError) {
                return e;
            }
            else {
                throw e;
            }
        }
    }

    return {
        JsonPatchError : helpers_1.PatchError,
        deepClone : helpers_1._deepClone,
        getValueByPointer,
        applyOperation,
        applyPatch,
        applyReducer,
        validator,
        validate
    };
});
define('skylark-formio/vendors/fast-json-patch/duplex',[
    "./helpers",
    "./core"
],function(
    helpers_1,
    core_1
){


    var beforeDict = new WeakMap();
    var Mirror = (function () {
        function Mirror(obj) {
            this.observers = new Map();
            this.obj = obj;
        }
        return Mirror;
    }());
    var ObserverInfo = (function () {
        function ObserverInfo(callback, observer) {
            this.callback = callback;
            this.observer = observer;
        }
        return ObserverInfo;
    }());
    function getMirror(obj) {
        return beforeDict.get(obj);
    }
    function getObserverFromMirror(mirror, callback) {
        return mirror.observers.get(callback);
    }
    function removeObserverFromMirror(mirror, observer) {
        mirror.observers.delete(observer.callback);
    }
    /**
     * Detach an observer from an object
     */
    function unobserve(root, observer) {
        observer.unobserve();
    }
    /**
     * Observes changes made to an object, which can then be retrieved using generate
     */
    function observe(obj, callback) {
        var patches = [];
        var observer;
        var mirror = getMirror(obj);
        if (!mirror) {
            mirror = new Mirror(obj);
            beforeDict.set(obj, mirror);
        }
        else {
            var observerInfo = getObserverFromMirror(mirror, callback);
            observer = observerInfo && observerInfo.observer;
        }
        if (observer) {
            return observer;
        }
        observer = {};
        mirror.value = helpers_1._deepClone(obj);
        if (callback) {
            observer.callback = callback;
            observer.next = null;
            var dirtyCheck = function () {
                generate(observer);
            };
            var fastCheck = function () {
                clearTimeout(observer.next);
                observer.next = setTimeout(dirtyCheck);
            };
            if (typeof window !== 'undefined') {
                if (window.addEventListener) {
                    window.addEventListener('mouseup', fastCheck);
                    window.addEventListener('keyup', fastCheck);
                    window.addEventListener('mousedown', fastCheck);
                    window.addEventListener('keydown', fastCheck);
                    window.addEventListener('change', fastCheck);
                }
                else {
                    document.documentElement.attachEvent('onmouseup', fastCheck);
                    document.documentElement.attachEvent('onkeyup', fastCheck);
                    document.documentElement.attachEvent('onmousedown', fastCheck);
                    document.documentElement.attachEvent('onkeydown', fastCheck);
                    document.documentElement.attachEvent('onchange', fastCheck);
                }
            }
        }
        observer.patches = patches;
        observer.object = obj;
        observer.unobserve = function () {
            generate(observer);
            clearTimeout(observer.next);
            removeObserverFromMirror(mirror, observer);
            if (typeof window !== 'undefined') {
                if (window.removeEventListener) {
                    window.removeEventListener('mouseup', fastCheck);
                    window.removeEventListener('keyup', fastCheck);
                    window.removeEventListener('mousedown', fastCheck);
                    window.removeEventListener('keydown', fastCheck);
                }
                else {
                    document.documentElement.detachEvent('onmouseup', fastCheck);
                    document.documentElement.detachEvent('onkeyup', fastCheck);
                    document.documentElement.detachEvent('onmousedown', fastCheck);
                    document.documentElement.detachEvent('onkeydown', fastCheck);
                }
            }
        };
        mirror.observers.set(callback, new ObserverInfo(callback, observer));
        return observer;
    }
    /**
     * Generate an array of patches from an observer
     */
    function generate(observer) {
        var mirror = beforeDict.get(observer.object);
        _generate(mirror.value, observer.object, observer.patches, "");
        if (observer.patches.length) {
            core_1.applyPatch(mirror.value, observer.patches);
        }
        var temp = observer.patches;
        if (temp.length > 0) {
            observer.patches = [];
            if (observer.callback) {
                observer.callback(temp);
            }
        }
        return temp;
    }
    // Dirty check if obj is different from mirror, generate patches and update mirror
    function _generate(mirror, obj, patches, path) {
        if (obj === mirror) {
            return;
        }
        if (typeof obj.toJSON === "function") {
            obj = obj.toJSON();
        }
        var newKeys = helpers_1._objectKeys(obj);
        var oldKeys = helpers_1._objectKeys(mirror);
        var changed = false;
        var deleted = false;
        //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"
        for (var t = oldKeys.length - 1; t >= 0; t--) {
            var key = oldKeys[t];
            var oldVal = mirror[key];
            if (helpers_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
                var newVal = obj[key];
                if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null) {
                    _generate(oldVal, newVal, patches, path + "/" + helpers_1.escapePathComponent(key));
                }
                else {
                    if (oldVal !== newVal) {
                        changed = true;
                        patches.push({ op: "replace", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(newVal) });
                    }
                }
            }
            else {
                patches.push({ op: "remove", path: path + "/" + helpers_1.escapePathComponent(key) });
                deleted = true; // property has been deleted
            }
        }
        if (!deleted && newKeys.length == oldKeys.length) {
            return;
        }
        for (var t = 0; t < newKeys.length; t++) {
            var key = newKeys[t];
            if (!helpers_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {
                patches.push({ op: "add", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(obj[key]) });
            }
        }
    }
    /**
     * Create an array of patches from the differences in two objects
     */
    function compare(tree1, tree2) {
        var patches = [];
        _generate(tree1, tree2, patches, '');
        return patches;
    }


    return {
     applyPatch : core_1.applyPatch,
     unobserve,
     observe,
     generate,
     compare
    };

});
define('skylark-formio/utils/formUtils',[
    "skylark-lodash",
    '../vendors/fast-json-patch/duplex'
], function (_, a) {
    'use strict';
    const {
        get, set, has, clone, forOwn, isString, isNaN, isNil, isPlainObject, round, chunk, pad
    } = _;


    function isLayoutComponent(component) {
        return Boolean(component.columns && Array.isArray(component.columns) || component.rows && Array.isArray(component.rows) || component.components && Array.isArray(component.components));
    }
    function eachComponent(components, fn, includeAll, path, parent) {
        if (!components)
            return;
        path = path || '';
        components.forEach(component => {
            if (!component) {
                return;
            }
            const hasColumns = component.columns && Array.isArray(component.columns);
            const hasRows = component.rows && Array.isArray(component.rows);
            const hasComps = component.components && Array.isArray(component.components);
            let noRecurse = false;
            const newPath = component.key ? path ? `${ path }.${ component.key }` : component.key : '';
            if (parent) {
                component.parent = clone(parent);
                delete component.parent.components;
                delete component.parent.componentMap;
                delete component.parent.columns;
                delete component.parent.rows;
            }
            if (includeAll || component.tree || !hasColumns && !hasRows && !hasComps) {
                noRecurse = fn(component, newPath);
            }
            const subPath = () => {
                if (component.key && ![
                        'panel',
                        'table',
                        'well',
                        'columns',
                        'fieldset',
                        'tabs',
                        'form'
                    ].includes(component.type) && ([
                        'datagrid',
                        'container',
                        'editgrid'
                    ].includes(component.type) || component.tree)) {
                    return newPath;
                } else if (component.key && component.type === 'form') {
                    return `${ newPath }.data`;
                }
                return path;
            };
            if (!noRecurse) {
                if (hasColumns) {
                    component.columns.forEach(column => eachComponent(column.components, fn, includeAll, subPath(), parent ? component : null));
                } else if (hasRows) {
                    component.rows.forEach(row => {
                        if (Array.isArray(row)) {
                            row.forEach(column => eachComponent(column.components, fn, includeAll, subPath(), parent ? component : null));
                        }
                    });
                } else if (hasComps) {
                    eachComponent(component.components, fn, includeAll, subPath(), parent ? component : null);
                }
            }
        });
    }
    function matchComponent(component, query) {
        if (isString(query)) {
            return component.key === query || component.path === query;
        } else {
            let matches = false;
            forOwn(query, (value, key) => {
                matches = get(component, key) === value;
                if (!matches) {
                    return false;
                }
            });
            return matches;
        }
    }
    function getComponent(components, key, includeAll) {
        let result;
        eachComponent(components, (component, path) => {
            if (path === key || component.path === key) {
                result = component;
                return true;
            }
        }, includeAll);
        return result;
    }
    function searchComponents(components, query) {
        const results = [];
        eachComponent(components, component => {
            if (matchComponent(component, query)) {
                results.push(component);
            }
        }, true);
        return results;
    }
    function findComponents(components, query) {
        console.warn('formio.js/utils findComponents is deprecated. Use searchComponents instead.');
        return searchComponents(components, query);
    }
    function findComponent(components, key, path, fn) {
        if (!components)
            return;
        path = path || [];
        if (!key) {
            return fn(components);
        }
        components.forEach(function (component, index) {
            var newPath = path.slice();
            newPath.push(index);
            if (!component)
                return;
            if (component.hasOwnProperty('columns') && Array.isArray(component.columns)) {
                newPath.push('columns');
                component.columns.forEach(function (column, index) {
                    var colPath = newPath.slice();
                    colPath.push(index);
                    colPath.push('components');
                    findComponent(column.components, key, colPath, fn);
                });
            }
            if (component.hasOwnProperty('rows') && Array.isArray(component.rows)) {
                newPath.push('rows');
                component.rows.forEach(function (row, index) {
                    var rowPath = newPath.slice();
                    rowPath.push(index);
                    row.forEach(function (column, index) {
                        var colPath = rowPath.slice();
                        colPath.push(index);
                        colPath.push('components');
                        findComponent(column.components, key, colPath, fn);
                    });
                });
            }
            if (component.hasOwnProperty('components') && Array.isArray(component.components)) {
                newPath.push('components');
                findComponent(component.components, key, newPath, fn);
            }
            if (component.key === key) {
                fn(component, newPath);
            }
        });
    }
    function removeComponent(components, path) {
        var index = path.pop();
        if (path.length !== 0) {
            components = get(components, path);
        }
        components.splice(index, 1);
    }
    function generateFormChange(type, data) {
        let change;
        switch (type) {
        case 'add':
            change = {
                op: 'add',
                key: data.component.key,
                container: data.parent.key,
                path: data.path,
                index: data.index,
                component: data.component
            };
            break;
        case 'edit':
            change = {
                op: 'edit',
                key: data.originalComponent.key,
                patches: duplex.compare(data.originalComponent, data.component)
            };
            if (!change.patches.length) {
                change = null;
            }
            break;
        case 'remove':
            change = {
                op: 'remove',
                key: data.component.key
            };
            break;
        }
        return change;
    }
    function applyFormChanges(form, changes) {
        const failed = [];
        changes.forEach(function (change) {
            var found = false;
            switch (change.op) {
            case 'add':
                var newComponent = change.component;
                findComponent(form.components, change.container, null, function (parent) {
                    if (!change.container) {
                        parent = form;
                    }
                    findComponent(form.components, change.key, null, function (component, path) {
                        newComponent = component;
                        removeComponent(form.components, path);
                    });
                    found = true;
                    var container = get(parent, change.path);
                    container.splice(change.index, 0, newComponent);
                });
                break;
            case 'remove':
                findComponent(form.components, change.key, null, function (component, path) {
                    found = true;
                    const oldComponent = get(form.components, path);
                    if (oldComponent.key !== component.key) {
                        path.pop();
                    }
                    removeComponent(form.components, path);
                });
                break;
            case 'edit':
                findComponent(form.components, change.key, null, function (component, path) {
                    found = true;
                    try {
                        const oldComponent = get(form.components, path);
                        const newComponent = duplex.applyPatch(component, change.patches).newDocument;
                        if (oldComponent.key !== newComponent.key) {
                            path.pop();
                        }
                        set(form.components, path, newComponent);
                    } catch (err) {
                        failed.push(change);
                    }
                });
                break;
            case 'move':
                break;
            }
            if (!found) {
                failed.push(change);
            }
        });
        return {
            form,
            failed
        };
    }
    function flattenComponents(components, includeAll) {
        const flattened = {};
        eachComponent(components, (component, path) => {
            flattened[path] = component;
        }, includeAll);
        return flattened;
    }
    function hasCondition(component) {
        return Boolean(component.customConditional || component.conditional && component.conditional.when || component.conditional && component.conditional.json);
    }
    function parseFloatExt(value) {
        return parseFloat(isString(value) ? value.replace(/[^\de.+-]/gi, '') : value);
    }
    function formatAsCurrency(value) {
        const parsedValue = parseFloatExt(value);
        if (isNaN(parsedValue)) {
            return '';
        }
        const parts = round(parsedValue, 2).toString().split('.');
        parts[0] = chunk(Array.from(parts[0]).reverse(), 3).reverse().map(part => part.reverse().join('')).join(',');
        parts[1] = pad(parts[1], 2, '0');
        return parts.join('.');
    }
    function escapeRegExCharacters(value) {
        return value.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
    }
    function getValue(submission, key) {
        const search = data => {
            if (isPlainObject(data)) {
                if (has(data, key)) {
                    return data[key];
                }
                let value = null;
                forOwn(data, prop => {
                    const result = search(prop);
                    if (!isNil(result)) {
                        value = result;
                        return false;
                    }
                });
                return value;
            } else {
                return null;
            }
        };
        return search(submission.data);
    }
    function getStrings(form) {
        const properties = [
            'label',
            'title',
            'legend',
            'tooltip',
            'description',
            'placeholder',
            'prefix',
            'suffix',
            'errorLabel',
            'content',
            'html'
        ];
        const strings = [];
        eachComponent(form.components, component => {
            properties.forEach(property => {
                if (component.hasOwnProperty(property) && component[property]) {
                    strings.push({
                        key: component.key,
                        type: component.type,
                        property,
                        string: component[property]
                    });
                }
            });
            if ((!component.dataSrc || component.dataSrc === 'values') && component.hasOwnProperty('values') && Array.isArray(component.values) && component.values.length) {
                component.values.forEach((value, index) => {
                    strings.push({
                        key: component.key,
                        property: `value[${ index }].label`,
                        string: component.values[index].label
                    });
                });
            }
            if (component.type === 'day') {
                [
                    'day',
                    'month',
                    'year',
                    'Day',
                    'Month',
                    'Year',
                    'january',
                    'february',
                    'march',
                    'april',
                    'may',
                    'june',
                    'july',
                    'august',
                    'september',
                    'october',
                    'november',
                    'december'
                ].forEach(string => {
                    strings.push({
                        key: component.key,
                        property: 'day',
                        string
                    });
                });
                if (component.fields.day.placeholder) {
                    strings.push({
                        key: component.key,
                        property: 'fields.day.placeholder',
                        string: component.fields.day.placeholder
                    });
                }
                if (component.fields.month.placeholder) {
                    strings.push({
                        key: component.key,
                        property: 'fields.month.placeholder',
                        string: component.fields.month.placeholder
                    });
                }
                if (component.fields.year.placeholder) {
                    strings.push({
                        key: component.key,
                        property: 'fields.year.placeholder',
                        string: component.fields.year.placeholder
                    });
                }
            }
            if (component.type === 'editgrid') {
                const string = component.addAnother || 'Add Another';
                if (component.addAnother) {
                    strings.push({
                        key: component.key,
                        property: 'addAnother',
                        string
                    });
                }
            }
            if (component.type === 'select') {
                [
                    'loading...',
                    'Type to search'
                ].forEach(string => {
                    strings.push({
                        key: component.key,
                        property: 'select',
                        string
                    });
                });
            }
        }, true);
        return strings;
    }
    return {
        isLayoutComponent: isLayoutComponent,
        eachComponent: eachComponent,
        matchComponent: matchComponent,
        getComponent: getComponent,
        searchComponents: searchComponents,
        findComponents: findComponents,
        findComponent: findComponent,
        removeComponent: removeComponent,
        generateFormChange: generateFormChange,
        applyFormChanges: applyFormChanges,
        flattenComponents: flattenComponents,
        hasCondition: hasCondition,
        parseFloatExt: parseFloatExt,
        formatAsCurrency: formatAsCurrency,
        escapeRegExCharacters: escapeRegExCharacters,
        getValue: getValue,
        getStrings: getStrings
    };
});
define('skylark-formio/utils/Evaluator',[
    'skylark-lodash'
], function (_) {
    'use strict';

    function stringHash(str) {
      var hash = 5381,
          i    = str.length;

      while(i) {
        hash = (hash * 33) ^ str.charCodeAt(--i);
      }

      /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
       * integers. Since we want the results to be always positive, convert the
       * signed int to an unsigned by doing an unsigned bitshift. */
      return hash >>> 0;
    }

    const Evaluator = {
        noeval: false,
        cache: {},
        templateSettings: {
            evaluate: /\{%([\s\S]+?)%\}/g,
            interpolate: /\{\{([\s\S]+?)\}\}/g,
            escape: /\{\{\{([\s\S]+?)\}\}\}/g
        },
        evaluator(func, ...params) {
            if (Evaluator.noeval) {
                console.warn('No evaluations allowed for this renderer.');
                return _.noop;
            }
            if (typeof params[0] === 'object') {
                params = _.keys(params[0]);
            }
            return new Function(...params, func);
        },
        template(template, hash) {
            hash = hash || stringHash(template);
            try {
                template = template.replace(/ctx\./g, '');
                return Evaluator.cache[hash] = _.template(template, Evaluator.templateSettings);
            } catch (err) {
                console.warn('Error while processing template', err, template);
            }
        },
        interpolate(rawTemplate, data) {
            if (typeof rawTemplate === 'function') {
                try {
                    return rawTemplate(data);
                } catch (err) {
                    console.warn('Error interpolating template', err, data);
                    return err.message;
                }
            }
            rawTemplate = String(rawTemplate);
            const hash = stringHash(rawTemplate);
            let template;
            if (Evaluator.cache[hash]) {
                template = Evaluator.cache[hash];
            } else if (Evaluator.noeval) {
                return rawTemplate.replace(/({{\s*(.*?)\s*}})/g, (match, $1, $2) => _.get(data, $2));
            } else {
                template = Evaluator.template(rawTemplate, hash);
            }
            if (typeof template === 'function') {
                try {
                    return template(data);
                } catch (err) {
                    console.warn('Error interpolating template', err, rawTemplate, data);
                    return err.message;
                }
            }
            return template;
        },
        evaluate(func, args) {
            return Array.isArray(args) ? func(...args) : func(args);
        }
    };
    return Evaluator;
});
define('skylark-formio/utils/utils',[
    'skylark-lodash',
    '../vendors/fetch-ponyfill/fetch',
    '../vendors/json-logic-js/logic',
    '../vendors/moment/timezone',
    '../vendors/jstimezonedetect/jstz',
    './jsonlogic/operators',
    '../vendors/getify/npo',
    '../vendors/dompurify/purify',
    './formUtils',
    './Evaluator'
], function (_, fetchPonyfill, jsonLogic, moment, jtz, a, NativePromise, dompurify, formUtils, Evaluator) {
    'use strict';
    const interpolate = Evaluator.interpolate;
    const {fetch} = fetchPonyfill({ Promise: NativePromise });
   // export * from './formUtils';
    a.lodashOperators.forEach(name => jsonLogic.add_operation(`_${ name }`, _[name]));
    jsonLogic.add_operation('getDate', date => {
        return moment(date).toISOString();
    });
    jsonLogic.add_operation('relativeMinDate', relativeMinDate => {
        return moment().subtract(relativeMinDate, 'days').toISOString();
    });
    jsonLogic.add_operation('relativeMaxDate', relativeMaxDate => {
        return moment().add(relativeMaxDate, 'days').toISOString();
    });
    function evaluate(func, args, ret, tokenize) {
        let returnVal = null;
        const component = args.component ? args.component : { key: 'unknown' };
        if (!args.form && args.instance) {
            args.form = _.get(args.instance, 'root._form', {});
        }
        const componentKey = component.key;
        if (typeof func === 'string') {
            if (ret) {
                func += `;return ${ ret }`;
            }
            if (tokenize) {
                func = func.replace(/({{\s+(.*)\s+}})/, (match, $1, $2) => {
                    if ($2.indexOf('data.') === 0) {
                        return _.get(args.data, $2.replace('data.', ''));
                    } else if ($2.indexOf('row.') === 0) {
                        return _.get(args.row, $2.replace('row.', ''));
                    }
                    return _.get(args.data, $2);
                });
            }
            try {
                func = Evaluator.evaluator(func, args);
                args = _.values(args);
            } catch (err) {
                console.warn(`An error occured within the custom function for ${ componentKey }`, err);
                returnVal = null;
                func = false;
            }
        }
        if (typeof func === 'function') {
            try {
                returnVal = Evaluator.evaluate(func, args);
            } catch (err) {
                returnVal = null;
                console.warn(`An error occured within custom function for ${ componentKey }`, err);
            }
        } else if (typeof func === 'object') {
            try {
                returnVal = jsonLogic.apply(func, args);
            } catch (err) {
                returnVal = null;
                console.warn(`An error occured within custom function for ${ componentKey }`, err);
            }
        } else if (func) {
            console.warn(`Unknown function type for ${ componentKey }`);
        }
        return returnVal;
    }
    function getRandomComponentId() {
        return `e${ Math.random().toString(36).substring(7) }`;
    }
    function getPropertyValue(style, prop) {
        let value = style.getPropertyValue(prop);
        value = value ? value.replace(/[^0-9.]/g, '') : '0';
        return parseFloat(value);
    }
    function getElementRect(element) {
        const style = window.getComputedStyle(element, null);
        return {
            x: getPropertyValue(style, 'left'),
            y: getPropertyValue(style, 'top'),
            width: getPropertyValue(style, 'width'),
            height: getPropertyValue(style, 'height')
        };
    }
    function boolValue(value) {
        if (_.isBoolean(value)) {
            return value;
        } else if (_.isString(value)) {
            return value.toLowerCase() === 'true';
        } else {
            return !!value;
        }
    }
    function isMongoId(text) {
        return text.toString().match(/^[0-9a-fA-F]{24}$/);
    }
    function checkCalculated(component, submission, rowData) {
        if (component.calculateValue) {
            _.set(rowData, component.key, evaluate(component.calculateValue, {
                value: undefined,
                data: submission ? submission.data : rowData,
                row: rowData,
                util: this,
                component
            }, 'value'));
        }
    }
    function checkSimpleConditional(component, condition, row, data) {
        let value = null;
        if (row) {
            value = formUtils.getValue({ data: row }, condition.when);
        }
        if (data && _.isNil(value)) {
            value = formUtils.getValue({ data }, condition.when);
        }
        if (_.isNil(value)) {
            value = '';
        }
        const eq = String(condition.eq);
        const show = String(condition.show);
        if (_.isObject(value) && _.has(value, condition.eq)) {
            return String(value[condition.eq]) === show;
        }
        if (Array.isArray(value) && value.map(String).includes(eq)) {
            return show === 'true';
        }
        return String(value) === eq === (show === 'true');
    }
    function checkCustomConditional(component, custom, row, data, form, variable, onError, instance) {
        if (typeof custom === 'string') {
            custom = `var ${ variable } = true; ${ custom }; return ${ variable };`;
        }
        const value = instance && instance.evaluate ? instance.evaluate(custom) : evaluate(custom, {
            row,
            data,
            form
        });
        if (value === null) {
            return onError;
        }
        return value;
    }
    function checkJsonConditional(component, json, row, data, form, onError) {
        try {
            return jsonLogic.apply(json, {
                data,
                row,
                form,
                _
            });
        } catch (err) {
            console.warn(`An error occurred in jsonLogic advanced condition for ${ component.key }`, err);
            return onError;
        }
    }
    function checkCondition(component, row, data, form, instance) {
        if (component.customConditional) {
            return checkCustomConditional(component, component.customConditional, row, data, form, 'show', true, instance);
        } else if (component.conditional && component.conditional.when) {
            return checkSimpleConditional(component, component.conditional, row, data);
        } else if (component.conditional && component.conditional.json) {
            return checkJsonConditional(component, component.conditional.json, row, data, form, true);
        }
        return true;
    }
    function checkTrigger(component, trigger, row, data, form, instance) {
        if (!trigger[trigger.type]) {
            return false;
        }
        switch (trigger.type) {
        case 'simple':
            return checkSimpleConditional(component, trigger.simple, row, data);
        case 'javascript':
            return checkCustomConditional(component, trigger.javascript, row, data, form, 'result', false, instance);
        case 'json':
            return checkJsonConditional(component, trigger.json, row, data, form, false);
        }
        return false;
    }
    function setActionProperty(component, action, result, row, data, instance) {
        const property = action.property.value;
        switch (action.property.type) {
        case 'boolean': {
                const currentValue = _.get(component, property, false).toString();
                const newValue = action.state.toString();
                if (currentValue !== newValue) {
                    _.set(component, property, newValue === 'true');
                }
                break;
            }
        case 'string': {
                const evalData = {
                    data,
                    row,
                    component,
                    result
                };
                const textValue = action.property.component ? action[action.property.component] : action.text;
                const currentValue = _.get(component, property, '');
                const newValue = instance && instance.interpolate ? instance.interpolate(textValue, evalData) : Evaluator.interpolate(textValue, evalData);
                if (newValue !== currentValue) {
                    _.set(component, property, newValue);
                }
                break;
            }
        }
        return component;
    }
    function uniqueName(name, template, evalContext) {
        template = template || '{{fileName}}-{{guid}}';
        if (!template.includes('{{guid}}')) {
            template = `${ template }-{{guid}}`;
        }
        const parts = name.split('.');
        let fileName = parts.slice(0, parts.length - 1).join('.');
        const extension = parts.length > 1 ? `.${ _.last(parts) }` : '';
        fileName = fileName.substr(0, 100);
        evalContext = Object.assign(evalContext || {}, {
            fileName,
            guid: guid()
        });
        const uniqueName = `${ Evaluator.interpolate(template, evalContext) }${ extension }`.replace(/[^0-9a-zA-Z.\-_ ]/g, '-');
        return uniqueName;
    }
    function guid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : r & 3 | 8;
            return v.toString(16);
        });
    }
    function getDateSetting(date) {
        if (_.isNil(date) || _.isNaN(date) || date === '') {
            return null;
        }
        if (date instanceof Date) {
            return date;
        } else if (typeof date.toDate === 'function') {
            return date.isValid() ? date.toDate() : null;
        }
        let dateSetting = typeof date !== 'string' || date.indexOf('moment(') === -1 ? moment(date) : null;
        if (dateSetting && dateSetting.isValid()) {
            return dateSetting.toDate();
        }
        dateSetting = null;
        try {
            const value = Evaluator.evaluator(`return ${ date };`, 'moment')(moment);
            if (typeof value === 'string') {
                dateSetting = moment(value);
            } else if (typeof value.toDate === 'function') {
                dateSetting = moment(value.toDate().toUTCString());
            } else if (value instanceof Date) {
                dateSetting = moment(value);
            }
        } catch (e) {
            return null;
        }
        if (!dateSetting) {
            return null;
        }
        if (!dateSetting.isValid()) {
            return null;
        }
        return dateSetting.toDate();
    }
    function isValidDate(date) {
        return _.isDate(date) && !_.isNaN(date.getDate());
    }
    function currentTimezone() {
        if (moment.currentTimezone) {
            return moment.currentTimezone;
        }
        moment.currentTimezone = jtz.determine().name();
        return moment.currentTimezone;
    }
    function offsetDate(date, timezone) {
        if (timezone === 'UTC') {
            return {
                date: new Date(date.getTime() + date.getTimezoneOffset() * 60000),
                abbr: 'UTC'
            };
        }
        const dateMoment = moment(date).tz(timezone);
        return {
            date: new Date(date.getTime() + (dateMoment.utcOffset() + date.getTimezoneOffset()) * 60000),
            abbr: dateMoment.format('z')
        };
    }
    function zonesLoaded() {
        return moment.zonesLoaded;
    }
    function shouldLoadZones(timezone) {
        if (timezone === currentTimezone() || timezone === 'UTC') {
            return false;
        }
        return true;
    }
    function loadZones(timezone) {
        if (timezone && !shouldLoadZones(timezone)) {
            return new NativePromise(_.noop);
        }
        if (moment.zonesPromise) {
            return moment.zonesPromise;
        }
        return moment.zonesPromise = fetch('https://cdn.form.io/moment-timezone/data/packed/latest.json').then(resp => resp.json().then(zones => {
            moment.tz.load(zones);
            moment.zonesLoaded = true;
            if (document && document.createEvent && document.body && document.body.dispatchEvent) {
                var event = document.createEvent('Event');
                event.initEvent('zonesLoaded', true, true);
                document.body.dispatchEvent(event);
            }
        }));
    }
    function momentDate(value, format, timezone) {
        const momentDate = moment(value);
        if (timezone === 'UTC') {
            timezone = 'Etc/UTC';
        }
        if ((timezone !== currentTimezone() || format && format.match(/\s(z$|z\s)/)) && moment.zonesLoaded) {
            return momentDate.tz(timezone);
        }
        return momentDate;
    }
    function formatDate(value, format, timezone) {
        const momentDate = moment(value);
        if (timezone === currentTimezone()) {
            if (format.match(/\s(z$|z\s)/)) {
                loadZones();
                if (moment.zonesLoaded) {
                    return momentDate.tz(timezone).format(convertFormatToMoment(format));
                } else {
                    return momentDate.format(convertFormatToMoment(format.replace(/\s(z$|z\s)/, '')));
                }
            }
            return momentDate.format(convertFormatToMoment(format));
        }
        if (timezone === 'UTC') {
            const offset = offsetDate(momentDate.toDate(), 'UTC');
            return `${ moment(offset.date).format(convertFormatToMoment(format)) } UTC`;
        }
        loadZones();
        if (moment.zonesLoaded) {
            return momentDate.tz(timezone).format(`${ convertFormatToMoment(format) } z`);
        } else {
            return momentDate.format(convertFormatToMoment(format));
        }
    }
    function formatOffset(formatFn, date, format, timezone) {
        if (timezone === currentTimezone()) {
            return formatFn(date, format);
        }
        if (timezone === 'UTC') {
            return `${ formatFn(offsetDate(date, 'UTC').date, format) } UTC`;
        }
        loadZones();
        if (moment.zonesLoaded) {
            const offset = offsetDate(date, timezone);
            return `${ formatFn(offset.date, format) } ${ offset.abbr }`;
        } else {
            return formatFn(date, format);
        }
    }
    function getLocaleDateFormatInfo(locale) {
        const formatInfo = {};
        const day = 21;
        const exampleDate = new Date(2017, 11, day);
        const localDateString = exampleDate.toLocaleDateString(locale);
        formatInfo.dayFirst = localDateString.slice(0, 2) === day.toString();
        return formatInfo;
    }
    function convertFormatToFlatpickr(format) {
        return format.replace(/Z/g, '').replace(/y/g, 'Y').replace('YYYY', 'Y').replace('YY', 'y').replace('MMMM', 'F').replace(/M/g, 'n').replace('nnn', 'M').replace('nn', 'm').replace(/d/g, 'j').replace(/jj/g, 'd').replace('EEEE', 'l').replace('EEE', 'D').replace('HH', 'H').replace('hh', 'G').replace('mm', 'i').replace('ss', 'S').replace(/a/g, 'K');
    }
    function convertFormatToMoment(format) {
        return format.replace(/y/g, 'Y').replace(/d/g, 'D').replace(/E/g, 'd').replace(/a/g, 'A').replace(/U/g, 'X');
    }
    function convertFormatToMask(format) {
        return format.replace(/M{4}/g, 'MM').replace(/M{3}/g, '***').replace(/e/g, 'Q').replace(/[ydhmsHMG]/g, '9').replace(/a/g, 'AA');
    }
    function getInputMask(mask) {
        if (mask instanceof Array) {
            return mask;
        }
        const maskArray = [];
        maskArray.numeric = true;
        for (let i = 0; i < mask.length; i++) {
            switch (mask[i]) {
            case '9':
                maskArray.push(/\d/);
                break;
            case 'A':
                maskArray.numeric = false;
                maskArray.push(/[a-zA-Z]/);
                break;
            case 'a':
                maskArray.numeric = false;
                maskArray.push(/[a-z]/);
                break;
            case '*':
                maskArray.numeric = false;
                maskArray.push(/[a-zA-Z0-9]/);
                break;
            default:
                maskArray.numeric = false;
                maskArray.push(mask[i]);
                break;
            }
        }
        return maskArray;
    }
    function matchInputMask(value, inputMask) {
        if (!inputMask) {
            return true;
        }
        if (value.length > inputMask.length) {
            return false;
        }
        for (let i = 0; i < inputMask.length; i++) {
            const char = value[i];
            const charPart = inputMask[i];
            if (!(_.isRegExp(charPart) && charPart.test(char) || charPart === char)) {
                return false;
            }
        }
        return true;
    }
    function getNumberSeparators(lang = 'en') {
        const formattedNumberString = 12345.6789.toLocaleString(lang);
        const delimeters = formattedNumberString.match(/..(.)...(.)../);
        if (!delimeters) {
            return {
                delimiter: ',',
                decimalSeparator: '.'
            };
        }
        return {
            delimiter: delimeters.length > 1 ? delimeters[1] : ',',
            decimalSeparator: delimeters.length > 2 ? delimeters[2] : '.'
        };
    }
    function getNumberDecimalLimit(component, defaultLimit) {
        if (_.has(component, 'decimalLimit')) {
            return _.get(component, 'decimalLimit');
        }
        let decimalLimit = defaultLimit || 20;
        const step = _.get(component, 'validate.step', 'any');
        if (step !== 'any') {
            const parts = step.toString().split('.');
            if (parts.length > 1) {
                decimalLimit = parts[1].length;
            }
        }
        return decimalLimit;
    }
    function getCurrencyAffixes({currency = 'USD', decimalLimit, decimalSeparator, lang}) {
        let regex = '(.*)?100';
        if (decimalLimit) {
            regex += `${ decimalSeparator === '.' ? '\\.' : decimalSeparator }0{${ decimalLimit }}`;
        }
        regex += '(.*)?';
        const parts = 100 .toLocaleString(lang, {
            style: 'currency',
            currency,
            useGrouping: true,
            maximumFractionDigits: decimalLimit,
            minimumFractionDigits: decimalLimit
        }).replace('.', decimalSeparator).match(new RegExp(regex));
        return {
            prefix: parts[1] || '',
            suffix: parts[2] || ''
        };
    }
    function fieldData(data, component) {
        if (!data) {
            return '';
        }
        if (!component || !component.key) {
            return data;
        }
        if (component.key.includes('.')) {
            let value = data;
            const parts = component.key.split('.');
            let key = '';
            for (let i = 0; i < parts.length; i++) {
                key = parts[i];
                if (value.hasOwnProperty('_id')) {
                    value = value.data;
                }
                if (!value.hasOwnProperty(key)) {
                    return;
                }
                if (key === parts[parts.length - 1] && component.multiple && !Array.isArray(value[key])) {
                    value[key] = [value[key]];
                }
                value = value[key];
            }
            return value;
        } else {
            if (component.multiple && !Array.isArray(data[component.key])) {
                data[component.key] = [data[component.key]];
            }
            return data[component.key];
        }
    }
    function delay(fn, delay = 0, ...args) {
        const timer = setTimeout(fn, delay, ...args);
        function cancel() {
            clearTimeout(timer);
        }
        function earlyCall() {
            cancel();
            return fn(...args);
        }
        earlyCall.timer = timer;
        earlyCall.cancel = cancel;
        return earlyCall;
    }
    function iterateKey(key) {
        if (!key.match(/(\d+)$/)) {
            return `${ key }1`;
        }
        return key.replace(/(\d+)$/, function (suffix) {
            return Number(suffix) + 1;
        });
    }
    function uniqueKey(map, base) {
        let newKey = base;
        while (map.hasOwnProperty(newKey)) {
            newKey = iterateKey(newKey);
        }
        return newKey;
    }
    function bootstrapVersion(options) {
        if (options.bootstrap) {
            return options.bootstrap;
        }
        if (typeof $ === 'function' && typeof $().collapse === 'function') {
            return parseInt($.fn.collapse.Constructor.VERSION.split('.')[0], 10);
        }
        return 0;
    }
    function unfold(e) {
        if (typeof e === 'function') {
            return e();
        }
        return e;
    }
    const firstNonNil = _.flow([
        _.partialRight(_.map, unfold),
        _.partialRight(_.find, v => !_.isUndefined(v))
    ]);
    function withSwitch(a, b) {
        let state = a;
        let next = b;
        function get() {
            return state;
        }
        function toggle() {
            const prev = state;
            state = next;
            next = prev;
        }
        return [
            get,
            toggle
        ];
    }
    function observeOverload(callback, options = {}) {
        const {limit = 50, delay = 500} = options;
        let callCount = 0;
        let timeoutID = 0;
        const reset = () => callCount = 0;
        return () => {
            if (timeoutID !== 0) {
                clearTimeout(timeoutID);
                timeoutID = 0;
            }
            timeoutID = setTimeout(reset, delay);
            callCount += 1;
            if (callCount >= limit) {
                clearTimeout(timeoutID);
                reset();
                return callback();
            }
        };
    }
    function getContextComponents(context) {
        const values = [];
        context.utils.eachComponent(context.instance.options.editForm.components, (component, path) => {
            if (component.key !== context.data.key) {
                values.push({
                    label: `${ component.label || component.key } (${ path })`,
                    value: component.key
                });
            }
        });
        return values;
    }
    function sanitize(string, options) {
        const sanitizeOptions = {
            ADD_ATTR: [
                'ref',
                'target'
            ],
            USE_PROFILES: { html: true }
        };
        if (options.sanitizeConfig && Array.isArray(options.sanitizeConfig.addAttr) && options.sanitizeConfig.addAttr.length > 0) {
            options.sanitizeConfig.addAttr.forEach(attr => {
                sanitizeOptions.ADD_ATTR.push(attr);
            });
        }
        if (options.sanitizeConfig && Array.isArray(options.sanitizeConfig.addTags) && options.sanitizeConfig.addTags.length > 0) {
            sanitizeOptions.ADD_TAGS = options.sanitizeConfig.addTags;
        }
        if (options.sanitizeConfig && Array.isArray(options.sanitizeConfig.allowedTags) && options.sanitizeConfig.allowedTags.length > 0) {
            sanitizeOptions.ALLOWED_TAGS = options.sanitizeConfig.allowedTags;
        }
        if (options.sanitizeConfig && Array.isArray(options.sanitizeConfig.allowedAttrs) && options.sanitizeConfig.allowedAttrs.length > 0) {
            sanitizeOptions.ALLOWED_ATTR = options.sanitizeConfig.allowedAttrs;
        }
        if (options.sanitizeConfig && options.sanitizeConfig.allowedUriRegex) {
            sanitizeOptions.ALLOWED_URI_REGEXP = options.sanitizeConfig.allowedUriRegex;
        }
        return dompurify.sanitize(string, sanitizeOptions);
    }
    function fastCloneDeep(obj) {
        return obj ? JSON.parse(JSON.stringify(obj)) : obj;
    }
    function isInputComponent(componentJson) {
        if (componentJson.input === false || componentJson.input === true) {
            return componentJson.input;
        }
        switch (componentJson.type) {
        case 'htmlelement':
        case 'content':
        case 'columns':
        case 'fieldset':
        case 'panel':
        case 'table':
        case 'tabs':
        case 'well':
        case 'button':
            return false;
        default:
            return true;
        }
    }
    return {
        jsonLogic,
        moment,
        evaluate: evaluate,
        getRandomComponentId: getRandomComponentId,
        getPropertyValue: getPropertyValue,
        getElementRect: getElementRect,
        boolValue: boolValue,
        isMongoId: isMongoId,
        checkCalculated: checkCalculated,
        checkSimpleConditional: checkSimpleConditional,
        checkCustomConditional: checkCustomConditional,
        checkJsonConditional: checkJsonConditional,
        checkCondition: checkCondition,
        checkTrigger: checkTrigger,
        setActionProperty: setActionProperty,
        uniqueName: uniqueName,
        guid: guid,
        getDateSetting: getDateSetting,
        isValidDate: isValidDate,
        currentTimezone: currentTimezone,
        offsetDate: offsetDate,
        zonesLoaded: zonesLoaded,
        shouldLoadZones: shouldLoadZones,
        loadZones: loadZones,
        momentDate: momentDate,
        formatDate: formatDate,
        formatOffset: formatOffset,
        getLocaleDateFormatInfo: getLocaleDateFormatInfo,
        convertFormatToFlatpickr: convertFormatToFlatpickr,
        convertFormatToMoment: convertFormatToMoment,
        convertFormatToMask: convertFormatToMask,
        getInputMask: getInputMask,
        matchInputMask: matchInputMask,
        getNumberSeparators: getNumberSeparators,
        getNumberDecimalLimit: getNumberDecimalLimit,
        getCurrencyAffixes: getCurrencyAffixes,
        fieldData: fieldData,
        delay: delay,
        iterateKey: iterateKey,
        uniqueKey: uniqueKey,
        bootstrapVersion: bootstrapVersion,
        unfold: unfold,
        firstNonNil: firstNonNil,
        withSwitch: withSwitch,
        observeOverload: observeOverload,
        getContextComponents: getContextComponents,
        sanitize: sanitize,
        fastCloneDeep: fastCloneDeep,
        Evaluator,
        interpolate,
        isInputComponent: isInputComponent,


        isLayoutComponent: formUtils.isLayoutComponent,
        eachComponent: formUtils.eachComponent,
        matchComponent: formUtils.matchComponent,
        getComponent: formUtils.getComponent,
        searchComponents: formUtils.searchComponents,
        findComponents: formUtils.findComponents,
        findComponent: formUtils.findComponent,
        removeComponent: formUtils.removeComponent,
        generateFormChange: formUtils.generateFormChange,
        applyFormChanges: formUtils.applyFormChanges,
        flattenComponents: formUtils.flattenComponents,
        hasCondition: formUtils.hasCondition,
        parseFloatExt: formUtils.parseFloatExt,
        formatAsCurrency: formUtils.formatAsCurrency,
        escapeRegExCharacters: formUtils.escapeRegExCharacters,
        getValue: formUtils.getValue,
        getStrings: formUtils.getStrings
    };
});
define('skylark-formio/EventEmitter',[
    './vendors/eventemitter2/EventEmitter2',
    './utils/utils'
], function (EventEmitter2, utils) {
    'use strict';
    return class EventEmitter extends EventEmitter2 {
        constructor(conf = {}) {
            const {
                loadLimit = 50,
                eventsSafeInterval = 300,
                pause = 500,
                ...ee2conf
            } = conf;
            super(ee2conf);
            const [isPaused, togglePause] = utils.withSwitch(false, true);
            const overloadHandler = () => {
                console.warn('Infinite loop detected', this.id, pause);
                togglePause();
                setTimeout(togglePause, pause);
            };
            const dispatch = utils.observeOverload(overloadHandler, {
                limit: loadLimit,
                delay: eventsSafeInterval
            });
            this.emit = (...args) => {
                if (isPaused()) {
                    return;
                }
                super.emit(...args);
                dispatch();
            };
        }
    };
});
define('skylark-formio/vendors/browser-cookies/cookies',[],function(){
  var exports = {

  };

  exports.set = function(name, value, options) {
    // Retrieve options and defaults
    var opts = options || {};
    var defaults = exports.defaults;

    // Apply default value for unspecified options
    var expires  = opts.expires  || defaults.expires;
    var domain   = opts.domain   || defaults.domain;
    var path     = opts.path     !== undefined ? opts.path     : (defaults.path !== undefined ? defaults.path : '/');
    var secure   = opts.secure   !== undefined ? opts.secure   : defaults.secure;
    var httponly = opts.httponly !== undefined ? opts.httponly : defaults.httponly;
    var samesite = opts.samesite !== undefined ? opts.samesite : defaults.samesite;

    // Determine cookie expiration date
    // If succesful the result will be a valid Date, otherwise it will be an invalid Date or false(ish)
    var expDate = expires ? new Date(
        // in case expires is an integer, it should specify the number of days till the cookie expires
        typeof expires === 'number' ? new Date().getTime() + (expires * 864e5) :
        // else expires should be either a Date object or in a format recognized by Date.parse()
        expires
    ) : 0;

    // Set cookie
    document.cookie = name.replace(/[^+#$&^`|]/g, encodeURIComponent)                // Encode cookie name
    .replace('(', '%28')
    .replace(')', '%29') +
    '=' + value.replace(/[^+#$&/:<-\[\]-}]/g, encodeURIComponent) +                  // Encode cookie value (RFC6265)
    (expDate && expDate.getTime() >= 0 ? ';expires=' + expDate.toUTCString() : '') + // Add expiration date
    (domain   ? ';domain=' + domain     : '') +                                      // Add domain
    (path     ? ';path='   + path       : '') +                                      // Add path
    (secure   ? ';secure'               : '') +                                      // Add secure option
    (httponly ? ';httponly'             : '') +                                      // Add httponly option
    (samesite ? ';samesite=' + samesite : '');                                       // Add samesite option
  };

  exports.get = function(name) {
    var cookies = document.cookie.split(';');
    
    // Iterate all cookies
    while(cookies.length) {
      var cookie = cookies.pop();

      // Determine separator index ("name=value")
      var separatorIndex = cookie.indexOf('=');

      // IE<11 emits the equal sign when the cookie value is empty
      separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;

      var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\s+/, ''));

      // Return cookie value if the name matches
      if (cookie_name === name) {
        return decodeURIComponent(cookie.slice(separatorIndex + 1));
      }
    }

    // Return `null` as the cookie was not found
    return null;
  };

  exports.erase = function(name, options) {
    exports.set(name, '', {
      expires:  -1,
      domain:   options && options.domain,
      path:     options && options.path,
      secure:   0,
      httponly: 0}
    );
  };

  exports.all = function() {
    var all = {};
    var cookies = document.cookie.split(';');

    // Iterate all cookies
    while(cookies.length) {
      var cookie = cookies.pop();

      // Determine separator index ("name=value")
      var separatorIndex = cookie.indexOf('=');

      // IE<11 emits the equal sign when the cookie value is empty
      separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;

      // add the cookie name and value to the `all` object
      var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\s+/, ''));
      all[cookie_name] = decodeURIComponent(cookie.slice(separatorIndex + 1));
    }

    return all;
  };

  return exports;
});



define('skylark-formio/providers/address/AddressProvider',[
    'skylark-lodash',
    '../../Formio'
], function (_, Formio) {
    'use strict';
    class AddressProvider {
        static get name() {
            return 'address';
        }
        static get displayName() {
            return 'Address';
        }
        constructor(options = {}) {
            this.options = _.merge({}, this.defaultOptions, options);
        }
        get defaultOptions() {
            return {};
        }
        get queryProperty() {
            return 'query';
        }
        get responseProperty() {
            return null;
        }
        get displayValueProperty() {
            return null;
        }
        serialize(params) {
            return _.toPairs(params).map(([key, value]) => `${ encodeURIComponent(key) }=${ encodeURIComponent(value) }`).join('&');
        }
        getRequestOptions(options = {}) {
            return _.merge({}, this.options, options);
        }
        getRequestUrl(options = {}) {
            throw new Error('Method AddressProvider#getRequestUrl(options) is abstract.');
        }
        makeRequest(options = {}) {
            return Formio.makeStaticRequest(this.getRequestUrl(options), 'GET', null, { noToken: true });
        }
        search(query, options = {}) {
            const requestOptions = this.getRequestOptions(options);
            const params = requestOptions.params = requestOptions.params || {};
            params[this.queryProperty] = query;
            return this.makeRequest(requestOptions).then(result => this.responseProperty ? _.get(result, this.responseProperty, []) : result);
        }
        getDisplayValue(address) {
            return this.displayValueProperty ? _.get(address, this.displayValueProperty, '') : String(address);
        }
    }
    return { AddressProvider: AddressProvider };
});
define('skylark-formio/providers/address/AzureAddressProvider',['./AddressProvider'], function (a) {
    'use strict';
    class AzureAddressProvider extends a.AddressProvider {
        static get name() {
            return 'azure';
        }
        static get displayName() {
            return 'Azure Maps';
        }
        get defaultOptions() {
            return {
                params: {
                    'api-version': '1.0',
                    typeahead: 'true'
                }
            };
        }
        get responseProperty() {
            return 'results';
        }
        get displayValueProperty() {
            return 'address.freeformAddress';
        }
        getRequestUrl(options = {}) {
            const {params} = options;
            return `https://atlas.microsoft.com/search/address/json?${ this.serialize(params) }`;
        }
    }
    return { AzureAddressProvider: AzureAddressProvider };
});
define('skylark-formio/providers/address/CustomAddressProvider',['./AddressProvider'], function (a) {
    'use strict';
    class CustomAddressProvider extends a.AddressProvider {
        static get name() {
            return 'custom';
        }
        static get displayName() {
            return 'Custom';
        }
        get queryProperty() {
            return this.options.queryProperty || super.queryProperty;
        }
        get responseProperty() {
            return this.options.responseProperty || super.responseProperty;
        }
        get displayValueProperty() {
            return this.options.displayValueProperty || super.displayValueProperty;
        }
        getRequestUrl(options = {}) {
            const {params, url} = options;
            return `${ url }?${ this.serialize(params) }`;
        }
    }
    return { CustomAddressProvider: CustomAddressProvider };
});
define('skylark-formio/providers/address/GoogleAddressProvider',['./AddressProvider'], function (a) {
    'use strict';
    class GoogleAddressProvider extends a.AddressProvider {
        static get name() {
            return 'google';
        }
        static get displayName() {
            return 'Google Maps';
        }
        get defaultOptions() {
            return { params: { sensor: 'false' } };
        }
        get queryProperty() {
            return 'address';
        }
        get responseProperty() {
            return 'results';
        }
        get displayValueProperty() {
            return 'formatted_address';
        }
        makeRequest(options = {}) {
            return new Promise((resolve, reject) => {
                var xhr = new XMLHttpRequest();
                xhr.responseType = 'json';
                xhr.open('GET', this.getRequestUrl(options), true);
                xhr.onload = () => resolve(xhr.response);
                xhr.onerror = reject;
                xhr.send();
            });
        }
        getRequestUrl(options = {}) {
            const {params} = options;
            return `https://maps.googleapis.com/maps/api/geocode/json?${ this.serialize(params) }`;
        }
    }
    return { GoogleAddressProvider: GoogleAddressProvider };
});
define('skylark-formio/providers/address/NominatimAddressProvider',['./AddressProvider'], function (a) {
    'use strict';
    class NominatimAddressProvider extends a.AddressProvider {
        static get name() {
            return 'nominatim';
        }
        static get displayName() {
            return 'OpenStreetMap Nominatim';
        }
        get defaultOptions() {
            return {
                params: {
                    addressdetails: '1',
                    format: 'json'
                }
            };
        }
        get queryProperty() {
            return 'q';
        }
        get displayValueProperty() {
            return 'display_name';
        }
        getRequestUrl(options = {}) {
            const {params} = options;
            return `https://nominatim.openstreetmap.org/search?${ this.serialize(params) }`;
        }
    }
    return { NominatimAddressProvider: NominatimAddressProvider };
});
define('skylark-formio/providers/address/index',[
    './AzureAddressProvider',
    './CustomAddressProvider',
    './GoogleAddressProvider',
    './NominatimAddressProvider'
], function (a, b, c, d) {
    'use strict';
    return {
        [a.AzureAddressProvider.name]: a.AzureAddressProvider,
        [b.CustomAddressProvider.name]: b.CustomAddressProvider,
        [c.GoogleAddressProvider.name]: c.GoogleAddressProvider,
        [d.NominatimAddressProvider.name]: d.NominatimAddressProvider
    };
});
define('skylark-formio/providers/auth/index',[],function () {
    'use strict';
    return {};
});
define('skylark-formio/providers/storage/base64',['../../vendors/getify/npo'], function (NativePromise) {
    'use strict';
    const base64 = () => ({
        title: 'Base64',
        name: 'base64',
        uploadFile(file, fileName) {
            const reader = new FileReader();
            return new NativePromise((resolve, reject) => {
                reader.onload = event => {
                    const url = event.target.result;
                    resolve({
                        storage: 'base64',
                        name: fileName,
                        url: url,
                        size: file.size,
                        type: file.type
                    });
                };
                reader.onerror = () => {
                    return reject(this);
                };
                reader.readAsDataURL(file);
            });
        },
        downloadFile(file) {
            return NativePromise.resolve(file);
        }
    });
    base64.title = 'Base64';
    return base64;
});
define('skylark-formio/providers/storage/dropbox',['../../vendors/getify/npo'], function (NativePromise) {
    'use strict';
    const dropbox = formio => ({
        uploadFile(file, fileName, dir, progressCallback) {
            return new NativePromise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                if (typeof progressCallback === 'function') {
                    xhr.upload.onprogress = progressCallback;
                }
                const fd = new FormData();
                fd.append('name', fileName);
                fd.append('dir', dir);
                fd.append('file', file);
                xhr.onerror = err => {
                    err.networkError = true;
                    reject(err);
                };
                xhr.onload = () => {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        const response = JSON.parse(xhr.response);
                        response.storage = 'dropbox';
                        response.size = file.size;
                        response.type = file.type;
                        response.url = response.path_lower;
                        resolve(response);
                    } else {
                        reject(xhr.response || 'Unable to upload file');
                    }
                };
                xhr.onabort = reject;
                xhr.open('POST', `${ formio.formUrl }/storage/dropbox`);
                const token = formio.getToken();
                if (token) {
                    xhr.setRequestHeader('x-jwt-token', token);
                }
                xhr.send(fd);
            });
        },
        downloadFile(file) {
            const token = formio.getToken();
            file.url = `${ formio.formUrl }/storage/dropbox?path_lower=${ file.path_lower }${ token ? `&x-jwt-token=${ token }` : '' }`;
            return NativePromise.resolve(file);
        }
    });
    dropbox.title = 'Dropbox';
    return dropbox;
});
define('skylark-formio/providers/storage/xhr',[
    '../../vendors/getify/npo',
    'skylark-lodash'
], function (NativePromise, _) {
    'use strict';

    const _trime = _.trim;
    const XHR = {
        trim(text) {
            return _trim(text, '/');
        },
        path(items) {
            return items.filter(item => !!item).map(XHR.trim).join('/');
        },
        upload(formio, type, xhrCb, file, fileName, dir, progressCallback) {
            return new NativePromise((resolve, reject) => {
                const pre = new XMLHttpRequest();
                pre.onerror = err => {
                    err.networkError = true;
                    reject(err);
                };
                pre.onabort = reject;
                pre.onload = () => {
                    if (pre.status >= 200 && pre.status < 300) {
                        const response = JSON.parse(pre.response);
                        const xhr = new XMLHttpRequest();
                        if (typeof progressCallback === 'function') {
                            xhr.upload.onprogress = progressCallback;
                        }
                        xhr.onerror = err => {
                            err.networkError = true;
                            reject(err);
                        };
                        xhr.onabort = err => {
                            err.networkError = true;
                            reject(err);
                        };
                        xhr.onload = () => {
                            if (xhr.status >= 200 && xhr.status < 300) {
                                resolve(response);
                            } else {
                                reject(xhr.response || 'Unable to upload file');
                            }
                        };
                        xhr.onabort = reject;
                        xhr.send(xhrCb(xhr, response));
                    } else {
                        reject(pre.response || 'Unable to sign file');
                    }
                };
                pre.open('POST', `${ formio.formUrl }/storage/${ type }`);
                pre.setRequestHeader('Accept', 'application/json');
                pre.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
                const token = formio.getToken();
                if (token) {
                    pre.setRequestHeader('x-jwt-token', token);
                }
                pre.send(JSON.stringify({
                    name: XHR.path([
                        dir,
                        fileName
                    ]),
                    size: file.size,
                    type: file.type
                }));
            });
        }
    };
    return XHR;
});
define('skylark-formio/providers/storage/s3',[
    '../../vendors/getify/npo',
    './xhr'
], function (NativePromise, XHR) {
    'use strict';
    const s3 = formio => ({
        uploadFile(file, fileName, dir, progressCallback) {
            return XHR.upload(formio, 's3', (xhr, response) => {
                response.data.fileName = fileName;
                response.data.key = XHR.path([
                    response.data.key,
                    dir,
                    fileName
                ]);
                if (response.signed) {
                    xhr.open('PUT', response.signed);
                    xhr.setRequestHeader('Content-Type', file.type);
                    return file;
                } else {
                    const fd = new FormData();
                    for (const key in response.data) {
                        fd.append(key, response.data[key]);
                    }
                    fd.append('file', file);
                    xhr.open('POST', response.url);
                    return fd;
                }
            }, file, fileName, dir, progressCallback).then(response => {
                return {
                    storage: 's3',
                    name: fileName,
                    bucket: response.bucket,
                    key: response.data.key,
                    url: XHR.path([
                        response.url,
                        response.data.key
                    ]),
                    acl: response.data.acl,
                    size: file.size,
                    type: file.type
                };
            });
        },
        downloadFile(file) {
            if (file.acl !== 'public-read') {
                return formio.makeRequest('file', `${ formio.formUrl }/storage/s3?bucket=${ XHR.trim(file.bucket) }&key=${ XHR.trim(file.key) }`, 'GET');
            } else {
                return NativePromise.resolve(file);
            }
        }
    });
    s3.title = 'S3';
    return s3;
});
define('skylark-formio/providers/storage/azure',['./xhr'], function (XHR) {
    'use strict';
    const azure = formio => ({
        uploadFile(file, fileName, dir, progressCallback) {
            return XHR.upload(formio, 'azure', (xhr, response) => {
                xhr.open('PUT', response.url);
                xhr.setRequestHeader('Content-Type', file.type);
                xhr.setRequestHeader('x-ms-blob-type', 'BlockBlob');
                return file;
            }, file, fileName, dir, progressCallback).then(() => {
                return {
                    storage: 'azure',
                    name: XHR.path([
                        dir,
                        fileName
                    ]),
                    size: file.size,
                    type: file.type
                };
            });
        },
        downloadFile(file) {
            return formio.makeRequest('file', `${ formio.formUrl }/storage/azure?name=${ XHR.trim(file.name) }`, 'GET');
        }
    });
    azure.title = 'Azure File Services';
    return azure;
});
define('skylark-formio/providers/storage/url',['../../vendors/getify/npo'], function (NativePromise) {
    'use strict';
    const url = formio => {
        const xhrRequest = (url, name, query, data, options, onprogress) => {
            return new NativePromise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                const json = typeof data === 'string';
                const fd = new FormData();
                if (typeof onprogress === 'function') {
                    xhr.upload.onprogress = onprogress;
                }
                if (!json) {
                    for (const key in data) {
                        fd.append(key, data[key]);
                    }
                }
                xhr.onload = () => {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        let respData = {};
                        try {
                            respData = typeof xhr.response === 'string' ? JSON.parse(xhr.response) : {};
                            respData = respData && respData.data ? respData.data : respData;
                        } catch (err) {
                            respData = {};
                        }
                        let respUrl = respData.hasOwnProperty('url') ? respData.url : `${ xhr.responseURL }/${ name }`;
                        if (respUrl && respUrl[0] === '/') {
                            respUrl = `${ url }${ respUrl }`;
                        }
                        resolve({
                            url: respUrl,
                            data: respData
                        });
                    } else {
                        reject(xhr.response || 'Unable to upload file');
                    }
                };
                xhr.onerror = () => reject(xhr);
                xhr.onabort = () => reject(xhr);
                let requestUrl = url + (url.indexOf('?') > -1 ? '&' : '?');
                for (const key in query) {
                    requestUrl += `${ key }=${ query[key] }&`;
                }
                if (requestUrl[requestUrl.length - 1] === '&') {
                    requestUrl = requestUrl.substr(0, requestUrl.length - 1);
                }
                xhr.open('POST', requestUrl);
                if (json) {
                    xhr.setRequestHeader('Content-Type', 'application/json');
                }
                const token = formio.getToken();
                if (token) {
                    xhr.setRequestHeader('x-jwt-token', token);
                }
                if (options) {
                    const parsedOptions = typeof options === 'string' ? JSON.parse(options) : options;
                    for (const prop in parsedOptions) {
                        xhr[prop] = parsedOptions[prop];
                    }
                }
                xhr.send(json ? data : fd);
            });
        };
        return {
            title: 'Url',
            name: 'url',
            uploadFile(file, name, dir, progressCallback, url, options, fileKey) {
                const uploadRequest = function (form) {
                    return xhrRequest(url, name, {
                        baseUrl: encodeURIComponent(formio.projectUrl),
                        project: form ? form.project : '',
                        form: form ? form._id : ''
                    }, {
                        [fileKey]: file,
                        name,
                        dir
                    }, options, progressCallback).then(response => {
                        response.data = response.data || {};
                        response.data.baseUrl = formio.projectUrl;
                        response.data.project = form ? form.project : '';
                        response.data.form = form ? form._id : '';
                        return {
                            storage: 'url',
                            name,
                            url: response.url,
                            size: file.size,
                            type: file.type,
                            data: response.data
                        };
                    });
                };
                if (file.private && formio.formId) {
                    return formio.loadForm().then(form => uploadRequest(form));
                } else {
                    return uploadRequest();
                }
            },
            deleteFile(fileInfo) {
                return new NativePromise((resolve, reject) => {
                    const xhr = new XMLHttpRequest();
                    xhr.open('DELETE', fileInfo.url, true);
                    xhr.onload = () => {
                        if (xhr.status >= 200 && xhr.status < 300) {
                            resolve('File deleted');
                        } else {
                            reject(xhr.response || 'Unable to delete file');
                        }
                    };
                    xhr.send(null);
                });
            },
            downloadFile(file) {
                if (file.private) {
                    if (formio.submissionId && file.data) {
                        file.data.submission = formio.submissionId;
                    }
                    return xhrRequest(file.url, file.name, {}, JSON.stringify(file)).then(response => response.data);
                }
                return NativePromise.resolve(file);
            }
        };
    };
    url.title = 'Url';
    return url;
});
define('skylark-formio/vendors/uuid/rng',[],function() {
  // Unique ID creation requires a high quality random # generator.  In the
  // browser this is a little complicated due to unknown quality of Math.random()
  // and inconsistent support for the `crypto` API.  We do the best we can via
  // feature-detection

  // getRandomValues needs to be invoked in a context where "this" is a Crypto
  // implementation. Also, find the complete implementation of crypto on IE11.
  var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                        (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

  var rng;
  if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

    rng = function whatwgRNG() {
      getRandomValues(rnds8);
      return rnds8;
    };
  } else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);

    rng = function mathRNG() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return rnds;
    };
  }

  return rng;

});


define('skylark-formio/vendors/uuid/bytesToUuid',[],function() {
	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];
	for (var i = 0; i < 256; ++i) {
	  byteToHex[i] = (i + 0x100).toString(16).substr(1);
	}

	function bytesToUuid(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex;
	  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
	  return ([bth[buf[i++]], bth[buf[i++]], 
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]], '-',
		bth[buf[i++]], bth[buf[i++]],
		bth[buf[i++]], bth[buf[i++]],
		bth[buf[i++]], bth[buf[i++]]]).join('');
	}

	return bytesToUuid;

});

define('skylark-formio/vendors/uuid/v4',[
  "./rng",
  "./bytesToUuid"
],function(rng,bytesToUuid){
  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid(rnds);
  }

  return v4;

});

define('skylark-formio/providers/storage/indexeddb',[
    '../../vendors/uuid/v4',
    '../../vendors/getify/npo'
], function (uuidv4, NativePromise) {
    'use strict';
    const indexeddb = () => ({
        title: 'indexedDB',
        name: 'indexeddb',
        uploadFile(file, fileName, dir, progressCallback, url, options) {
            if (!('indexedDB' in window)) {
                console.log("This browser doesn't support IndexedDB");
                return;
            }
            return new NativePromise(resolve => {
                const request = indexedDB.open(options.indexeddb, 3);
                request.onsuccess = function (event) {
                    const db = event.target.result;
                    resolve(db);
                };
                request.onupgradeneeded = function (e) {
                    const db = e.target.result;
                    db.createObjectStore(options.indexeddbTable);
                };
            }).then(db => {
                const reader = new FileReader();
                return new NativePromise((resolve, reject) => {
                    reader.onload = () => {
                        const blobObject = new Blob([file], { type: file.type });
                        const id = uuidv4(blobObject);
                        const data = {
                            id,
                            data: blobObject,
                            name: file.name,
                            size: file.size,
                            type: file.type,
                            url
                        };
                        const trans = db.transaction([options.indexeddbTable], 'readwrite');
                        const addReq = trans.objectStore(options.indexeddbTable).put(data, id);
                        addReq.onerror = function (e) {
                            console.log('error storing data');
                            console.error(e);
                        };
                        trans.oncomplete = function () {
                            resolve({
                                storage: 'indexeddb',
                                name: file.name,
                                size: file.size,
                                type: file.type,
                                url: url,
                                id
                            });
                        };
                    };
                    reader.onerror = () => {
                        return reject(this);
                    };
                    reader.readAsDataURL(file);
                });
            });
        },
        downloadFile(file, options) {
            return new NativePromise(resolve => {
                const request = indexedDB.open(options.indexeddb, 3);
                request.onsuccess = function (event) {
                    const db = event.target.result;
                    resolve(db);
                };
            }).then(db => {
                return new NativePromise((resolve, reject) => {
                    const trans = db.transaction([options.indexeddbTable], 'readonly');
                    const store = trans.objectStore(options.indexeddbTable).get(file.id);
                    store.onsuccess = () => {
                        trans.oncomplete = () => {
                            const result = store.result;
                            const dbFile = new File([store.result.data], file.name, { type: store.result.type });
                            const reader = new FileReader();
                            reader.onload = event => {
                                result.url = event.target.result;
                                resolve(result);
                            };
                            reader.onerror = () => {
                                return reject(this);
                            };
                            reader.readAsDataURL(dbFile);
                        };
                    };
                    store.onerror = () => {
                        return reject(this);
                    };
                });
            });
        }
    });
    indexeddb.title = 'IndexedDB';
    return indexeddb;
});
define('skylark-formio/providers/storage/index',[
    './base64',
    './dropbox',
    './s3',
    './azure',
    './url',
    './indexeddb'
], function (base64, dropbox, s3, azure, url, indexeddb) {
    'use strict';
    return {
        base64,
        dropbox,
        s3,
        url,
        azure,
        indexeddb
    };
});
define('skylark-formio/providers/Providers',[
    'skylark-lodash',
    './address/index',
    './auth/index',
    './storage/index'
], function (_, address, auth, storage) {
    'use strict';
    return class {
        static addProvider(type, name, provider) {
            Providers.providers[type] = Providers.providers[type] || {};
            Providers.providers[type][name] = provider;
        }
        static addProviders(type, providers) {
            Providers.providers[type] = _.merge(Providers.providers[type], providers);
        }
        static getProvider(type, name) {
            if (Providers.providers[type] && Providers.providers[type][name]) {
                return Providers.providers[type][name];
            }
        }
        static getProviders(type) {
            if (Providers.providers[type]) {
                return Providers.providers[type];
            }
        }
    };
    Providers.providers = {
        address,
        auth,
        storage
    };
});
define('skylark-formio/providers/index',['./Providers'], function (Providers) {
    'use strict';
    return Providers;
});
define('skylark-formio/vendors/jwt-decode/atob',[],function(){
	return window.atob;
});
define('skylark-formio/vendors/jwt-decode/base64_url_decode',[
  './atob'
],function(atob) {
  function b64DecodeUnicode(str) {
    return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {
      var code = p.charCodeAt(0).toString(16).toUpperCase();
      if (code.length < 2) {
        code = '0' + code;
      }
      return '%' + code;
    }));
  }

  return function(str) {
    var output = str.replace(/-/g, "+").replace(/_/g, "/");
    switch (output.length % 4) {
      case 0:
        break;
      case 2:
        output += "==";
        break;
      case 3:
        output += "=";
        break;
      default:
        throw "Illegal base64url string!";
    }

    try{
      return b64DecodeUnicode(output);
    } catch (err) {
      return atob(output);
    }
  };
});




 define('skylark-formio/vendors/jwt-decode/decode',[
  './base64_url_decode'
],function(base64_url_decode) {
  'use strict';

  function InvalidTokenError(message) {
    this.message = message;
  }

  InvalidTokenError.prototype = new Error();
  InvalidTokenError.prototype.name = 'InvalidTokenError';

  return function (token,options) {
    if (typeof token !== 'string') {
      throw new InvalidTokenError('Invalid token specified');
    }

    options = options || {};
    var pos = options.header === true ? 0 : 1;
    try {
      return JSON.parse(base64_url_decode(token.split('.')[pos]));
    } catch (e) {
      throw new InvalidTokenError('Invalid token specified: ' + e.message);
    }
  };


});
define('skylark-formio/polyfills/custom-event-polyfill',[],function() {
// Polyfill for creating CustomEvents on IE9/10/11

// code pulled from:
// https://github.com/d4tocchini/customevent-polyfill
// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent#Polyfill

try {
    var ce = new window.CustomEvent('test');
    ce.preventDefault();
    if (ce.defaultPrevented !== true) {
        // IE has problems with .preventDefault() on custom events
        // http://stackoverflow.com/questions/23349191
        throw new Error('Could not prevent default');
    }
} catch(e) {
  var CustomEvent = function(event, params) {
    var evt, origPrevent;
    params = params || {
      bubbles: false,
      cancelable: false,
      detail: undefined
    };

    evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    origPrevent = evt.preventDefault;
    evt.preventDefault = function () {
      origPrevent.call(this);
      try {
        Object.defineProperty(this, 'defaultPrevented', {
          get: function () {
            return true;
          }
        });
      } catch(e) {
        this.defaultPrevented = true;
      }
    };
    return evt;
  };

  CustomEvent.prototype = window.Event.prototype;
  window.CustomEvent = CustomEvent; // expose definition to window
}
	
});
define('skylark-formio/polyfills/ElementPolyfill',[],function() {

// Using polyfill from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
/* eslint-disable */
if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector ||
      Element.prototype.webkitMatchesSelector;
  }

  if (!Element.prototype.closest) {
    Element.prototype.closest = function(s) {
      var el = this;
      do {
        if (el.matches(s)) return el;
        el = el.parentElement || el.parentNode;
      } while (el !== null && el.nodeType === 1);
      return null;
    };
  }
}

// Generated by https://polyfill.io/v3/
/* Polyfill service v3.52.1
 * For detailed credits and licence information see https://github.com/financial-times/polyfill-service.
 *
 * Features requested: DOMTokenList
 *
 * - Object.defineProperty, License: CC0 (required by "_DOMTokenList", "DOMTokenList")
 * - _DOMTokenList, License: ISC (required by "DOMTokenList")
 * - DOMTokenList, License: CC0 */

(function(self, undefined) {
  if (!("defineProperty"in Object&&function(){try{var e={}
  return Object.defineProperty(e,"test",{value:42}),!0}catch(t){return!1}}()
  )) {

  // Object.defineProperty
  (function (nativeDefineProperty) {

    var supportsAccessors = Object.prototype.hasOwnProperty.call(Object.prototype, '__defineGetter__');
    var ERR_ACCESSORS_NOT_SUPPORTED = 'Getters & setters cannot be defined on this javascript engine';
    var ERR_VALUE_ACCESSORS = 'A property cannot both have accessors and be writable or have a value';

    // Polyfill.io - This does not use CreateMethodProperty because our CreateMethodProperty function uses Object.defineProperty.
    Object.defineProperty = function defineProperty(object, property, descriptor) {

      // Where native support exists, assume it
      if (nativeDefineProperty && (object === window || object === document || object === Element.prototype || object instanceof Element)) {
        return nativeDefineProperty(object, property, descriptor);
      }

      if (object === null || !(object instanceof Object || typeof object === 'object')) {
        throw new TypeError('Object.defineProperty called on non-object');
      }

      if (!(descriptor instanceof Object)) {
        throw new TypeError('Property description must be an object');
      }

      var propertyString = String(property);
      var hasValueOrWritable = 'value' in descriptor || 'writable' in descriptor;
      var getterType = 'get' in descriptor && typeof descriptor.get;
      var setterType = 'set' in descriptor && typeof descriptor.set;

      // handle descriptor.get
      if (getterType) {
        if (getterType !== 'function') {
          throw new TypeError('Getter must be a function');
        }
        if (!supportsAccessors) {
          throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
        }
        if (hasValueOrWritable) {
          throw new TypeError(ERR_VALUE_ACCESSORS);
        }
        Object.__defineGetter__.call(object, propertyString, descriptor.get);
      } else {
        object[propertyString] = descriptor.value;
      }

      // handle descriptor.set
      if (setterType) {
        if (setterType !== 'function') {
          throw new TypeError('Setter must be a function');
        }
        if (!supportsAccessors) {
          throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
        }
        if (hasValueOrWritable) {
          throw new TypeError(ERR_VALUE_ACCESSORS);
        }
        Object.__defineSetter__.call(object, propertyString, descriptor.set);
      }

      // OK to define value unconditionally - if a getter has been specified as well, an error would be thrown above
      if ('value' in descriptor) {
        object[propertyString] = descriptor.value;
      }

      return object;
    };
  }(Object.defineProperty));

  }


  // _DOMTokenList
  /*
  Copyright (c) 2016, John Gardner

  Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
  var _DOMTokenList = (function() { // eslint-disable-line no-unused-vars
    var dpSupport = true;
    var defineGetter = function (object, name, fn, configurable) {
      if (Object.defineProperty)
        Object.defineProperty(object, name, {
          configurable: false === dpSupport ? true : !!configurable,
          get: fn
        });

      else object.__defineGetter__(name, fn);
    };

    /** Ensure the browser allows Object.defineProperty to be used on native JavaScript objects. */
    try {
      defineGetter({}, "support");
    }
    catch (e) {
      dpSupport = false;
    }


    var _DOMTokenList = function (el, prop) {
      var that = this;
      var tokens = [];
      var tokenMap = {};
      var length = 0;
      var maxLength = 0;
      var addIndexGetter = function (i) {
        defineGetter(that, i, function () {
          preop();
          return tokens[i];
        }, false);

      };
      var reindex = function () {

        /** Define getter functions for array-like access to the tokenList's contents. */
        if (length >= maxLength)
          for (; maxLength < length; ++maxLength) {
            addIndexGetter(maxLength);
          }
      };

      /** Helper function called at the start of each class method. Internal use only. */
      var preop = function () {
        var error;
        var i;
        var args = arguments;
        var rSpace = /\s+/;

        /** Validate the token/s passed to an instance method, if any. */
        if (args.length)
          for (i = 0; i < args.length; ++i)
            if (rSpace.test(args[i])) {
              error = new SyntaxError('String "' + args[i] + '" ' + "contains" + ' an invalid character');
              error.code = 5;
              error.name = "InvalidCharacterError";
              throw error;
            }


        /** Split the new value apart by whitespace*/
        if (typeof el[prop] === "object") {
          tokens = ("" + el[prop].baseVal).replace(/^\s+|\s+$/g, "").split(rSpace);
        } else {
          tokens = ("" + el[prop]).replace(/^\s+|\s+$/g, "").split(rSpace);
        }

        /** Avoid treating blank strings as single-item token lists */
        if ("" === tokens[0]) tokens = [];

        /** Repopulate the internal token lists */
        tokenMap = {};
        for (i = 0; i < tokens.length; ++i)
          tokenMap[tokens[i]] = true;
        length = tokens.length;
        reindex();
      };

      /** Populate our internal token list if the targeted attribute of the subject element isn't empty. */
      preop();

      /** Return the number of tokens in the underlying string. Read-only. */
      defineGetter(that, "length", function () {
        preop();
        return length;
      });

      /** Override the default toString/toLocaleString methods to return a space-delimited list of tokens when typecast. */
      that.toLocaleString =
        that.toString = function () {
          preop();
          return tokens.join(" ");
        };

      that.item = function (idx) {
        preop();
        return tokens[idx];
      };

      that.contains = function (token) {
        preop();
        return !!tokenMap[token];
      };

      that.add = function () {
        preop.apply(that, args = arguments);

        for (var args, token, i = 0, l = args.length; i < l; ++i) {
          token = args[i];
          if (!tokenMap[token]) {
            tokens.push(token);
            tokenMap[token] = true;
          }
        }

        /** Update the targeted attribute of the attached element if the token list's changed. */
        if (length !== tokens.length) {
          length = tokens.length >>> 0;
          if (typeof el[prop] === "object") {
            el[prop].baseVal = tokens.join(" ");
          } else {
            el[prop] = tokens.join(" ");
          }
          reindex();
        }
      };

      that.remove = function () {
        preop.apply(that, args = arguments);

        /** Build a hash of token names to compare against when recollecting our token list. */
        for (var args, ignore = {}, i = 0, t = []; i < args.length; ++i) {
          ignore[args[i]] = true;
          delete tokenMap[args[i]];
        }

        /** Run through our tokens list and reassign only those that aren't defined in the hash declared above. */
        for (i = 0; i < tokens.length; ++i)
          if (!ignore[tokens[i]]) t.push(tokens[i]);

        tokens = t;
        length = t.length >>> 0;

        /** Update the targeted attribute of the attached element. */
        if (typeof el[prop] === "object") {
          el[prop].baseVal = tokens.join(" ");
        } else {
          el[prop] = tokens.join(" ");
        }
        reindex();
      };

      that.toggle = function (token, force) {
        preop.apply(that, [token]);

        /** Token state's being forced. */
        if (undefined !== force) {
          if (force) {
            that.add(token);
            return true;
          } else {
            that.remove(token);
            return false;
          }
        }

        /** Token already exists in tokenList. Remove it, and return FALSE. */
        if (tokenMap[token]) {
          that.remove(token);
          return false;
        }

        /** Otherwise, add the token and return TRUE. */
        that.add(token);
        return true;
      };

      return that;
    };

    return _DOMTokenList;
  }());
  if (!("DOMTokenList"in self&&function(e){return!("classList"in e)||!e.classList.toggle("x",!1)&&!e.className}(document.createElement("x"))
  )) {

  // DOMTokenList
  /* global _DOMTokenList */
  (function (global) {
    var nativeImpl = "DOMTokenList" in global && global.DOMTokenList;

    if (
        !nativeImpl ||
        (
          !!document.createElementNS &&
          !!document.createElementNS('http://www.w3.org/2000/svg', 'svg') &&
          !(document.createElementNS("http://www.w3.org/2000/svg", "svg").classList instanceof DOMTokenList)
        )
      ) {
      global.DOMTokenList = _DOMTokenList;
    }

    // Add second argument to native DOMTokenList.toggle() if necessary
    (function () {
      var e = document.createElement('span');
      if (!('classList' in e)) return;
      e.classList.toggle('x', false);
      if (!e.classList.contains('x')) return;
      e.classList.constructor.prototype.toggle = function toggle(token /*, force*/) {
        var force = arguments[1];
        if (force === undefined) {
          var add = !this.contains(token);
          this[add ? 'add' : 'remove'](token);
          return add;
        }
        force = !!force;
        this[force ? 'add' : 'remove'](token);
        return force;
      };
    }());

    // Add multiple arguments to native DOMTokenList.add() if necessary
    (function () {
      var e = document.createElement('span');
      if (!('classList' in e)) return;
      e.classList.add('a', 'b');
      if (e.classList.contains('b')) return;
      var native = e.classList.constructor.prototype.add;
      e.classList.constructor.prototype.add = function () {
        var args = arguments;
        var l = arguments.length;
        for (var i = 0; i < l; i++) {
          native.call(this, args[i]);
        }
      };
    }());

    // Add multiple arguments to native DOMTokenList.remove() if necessary
    (function () {
      var e = document.createElement('span');
      if (!('classList' in e)) return;
      e.classList.add('a');
      e.classList.add('b');
      e.classList.remove('a', 'b');
      if (!e.classList.contains('b')) return;
      var native = e.classList.constructor.prototype.remove;
      e.classList.constructor.prototype.remove = function () {
        var args = arguments;
        var l = arguments.length;
        for (var i = 0; i < l; i++) {
          native.call(this, args[i]);
        }
      };
    }());

  }(self));

  }

  })
  ('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});


});
define('skylark-formio/polyfills/index',[
    './custom-event-polyfill',
    './ElementPolyfill'
], function () {
    'use strict';
});
define('skylark-formio/Formio',[
    './vendors/getify/npo',
    './vendors/fetch-ponyfill/fetch',
    './EventEmitter',
    './vendors/browser-cookies/cookies',
    './providers/index',
    "skylark-lodash",
    './utils/utils',
    './vendors/jwt-decode/decode',
    './polyfills/index'
], function (NativePromise, fetchPonyfill, EventEmitter, cookies, Providers, _ , utils, jwtDecode) {
    'use strict';

    const  _intersection = _.intersection, 
           _get = _.get, 
           _cloneDeep = _.cloneDeep, 
           _defaults = _.defaults;


    const {fetch, Headers} = fetchPonyfill({ Promise: NativePromise });
    const isBoolean = val => typeof val === typeof true;
    const isNil = val => val === null || val === undefined;
    const isObject = val => val && typeof val === 'object';
    function cloneResponse(response) {
        const copy = _cloneDeep(response);
        if (Array.isArray(response)) {
            copy.skip = response.skip;
            copy.limit = response.limit;
            copy.serverCount = response.serverCount;
        }
        return copy;
    }
    class Formio {
        constructor(path, options = {}) {
            if (!(this instanceof Formio)) {
                return new Formio(path);
            }
            this.base = '';
            this.projectsUrl = '';
            this.projectUrl = '';
            this.projectId = '';
            this.roleUrl = '';
            this.rolesUrl = '';
            this.roleId = '';
            this.formUrl = '';
            this.formsUrl = '';
            this.formId = '';
            this.submissionsUrl = '';
            this.submissionUrl = '';
            this.submissionId = '';
            this.actionsUrl = '';
            this.actionId = '';
            this.actionUrl = '';
            this.vsUrl = '';
            this.vId = '';
            this.vUrl = '';
            this.query = '';
            this.path = path;
            this.options = options;
            if (options.hasOwnProperty('base')) {
                this.base = options.base;
            } else if (Formio.baseUrl) {
                this.base = Formio.baseUrl;
            } else {
                this.base = window.location.href.match(/http[s]?:\/\/api./)[0];
            }
            if (!path) {
                this.projectUrl = Formio.projectUrl || `${ this.base }/project`;
                this.projectsUrl = `${ this.base }/project`;
                this.projectId = false;
                this.query = '';
                return;
            }
            if (options.hasOwnProperty('project')) {
                this.projectUrl = options.project;
            }
            const project = this.projectUrl || Formio.projectUrl;
            const projectRegEx = /(^|\/)(project)($|\/[^/]+)/;
            const isProjectUrl = path.search(projectRegEx) !== -1;
            if (project && this.base === project && !isProjectUrl) {
                this.noProject = true;
                this.projectUrl = this.base;
            }
            if (path.indexOf('http') !== 0 && path.indexOf('//') !== 0) {
                path = this.base + path;
            }
            const hostparts = this.getUrlParts(path);
            let parts = [];
            const hostName = hostparts[1] + hostparts[2];
            path = hostparts.length > 3 ? hostparts[3] : '';
            const queryparts = path.split('?');
            if (queryparts.length > 1) {
                path = queryparts[0];
                this.query = `?${ queryparts[1] }`;
            }
            const registerPath = (name, base) => {
                this[`${ name }sUrl`] = `${ base }/${ name }`;
                const regex = new RegExp(`/${ name }/([^/]+)`);
                if (path.search(regex) !== -1) {
                    parts = path.match(regex);
                    this[`${ name }Url`] = parts ? base + parts[0] : '';
                    this[`${ name }Id`] = parts.length > 1 ? parts[1] : '';
                    base += parts[0];
                }
                return base;
            };
            const registerItems = (items, base, staticBase) => {
                for (const i in items) {
                    if (items.hasOwnProperty(i)) {
                        const item = items[i];
                        if (Array.isArray(item)) {
                            registerItems(item, base, true);
                        } else {
                            const newBase = registerPath(item, base);
                            base = staticBase ? base : newBase;
                        }
                    }
                }
            };
            if (!this.projectUrl || this.projectUrl === this.base) {
                this.projectUrl = hostName;
            }
            if (!this.noProject) {
                if (isProjectUrl) {
                    registerItems(['project'], hostName);
                    path = path.replace(projectRegEx, '');
                } else if (hostName === this.base) {
                    if (hostparts.length > 3 && path.split('/').length > 1) {
                        const pathParts = path.split('/');
                        pathParts.shift();
                        this.projectId = pathParts.shift();
                        path = `/${ pathParts.join('/') }`;
                        this.projectUrl = `${ hostName }/${ this.projectId }`;
                    }
                } else {
                    if (hostparts.length > 2 && (hostparts[2].split('.').length > 2 || hostName.includes('localhost'))) {
                        this.projectUrl = hostName;
                        this.projectId = hostparts[2].split('.')[0];
                    }
                }
                this.projectsUrl = this.projectsUrl || `${ this.base }/project`;
            }
            registerItems(['role'], this.projectUrl);
            if (/(^|\/)(form)($|\/)/.test(path)) {
                registerItems([
                    'form',
                    [
                        'submission',
                        'action',
                        'v'
                    ]
                ], this.projectUrl);
            } else {
                const subRegEx = new RegExp('/(submission|action|v)($|/.*)');
                const subs = path.match(subRegEx);
                this.pathType = subs && subs.length > 1 ? subs[1] : '';
                path = path.replace(subRegEx, '');
                path = path.replace(/\/$/, '');
                this.formsUrl = `${ this.projectUrl }/form`;
                this.formUrl = path ? this.projectUrl + path : '';
                this.formId = path.replace(/^\/+|\/+$/g, '');
                const items = [
                    'submission',
                    'action',
                    'v'
                ];
                for (const i in items) {
                    if (items.hasOwnProperty(i)) {
                        const item = items[i];
                        this[`${ item }sUrl`] = `${ this.projectUrl + path }/${ item }`;
                        if (this.pathType === item && subs.length > 2 && subs[2]) {
                            this[`${ item }Id`] = subs[2].replace(/^\/+|\/+$/g, '');
                            this[`${ item }Url`] = this.projectUrl + path + subs[0];
                        }
                    }
                }
            }
            if (!Formio.projectUrlSet) {
                Formio.projectUrl = this.projectUrl;
            }
        }
        delete(type, opts) {
            const _id = `${ type }Id`;
            const _url = `${ type }Url`;
            if (!this[_id]) {
                NativePromise.reject('Nothing to delete');
            }
            Formio.cache = {};
            return this.makeRequest(type, this[_url], 'delete', null, opts);
        }
        index(type, query, opts) {
            const _url = `${ type }Url`;
            query = query || '';
            if (query && isObject(query)) {
                query = `?${ Formio.serialize(query.params) }`;
            }
            return this.makeRequest(type, this[_url] + query, 'get', null, opts);
        }
        save(type, data, opts) {
            const _id = `${ type }Id`;
            const _url = `${ type }Url`;
            const method = this[_id] || data._id ? 'put' : 'post';
            let reqUrl = this[_id] ? this[_url] : this[`${ type }sUrl`];
            if (!this[_id] && data._id && method === 'put' && !reqUrl.includes(data._id)) {
                reqUrl += `/${ data._id }`;
            }
            Formio.cache = {};
            return this.makeRequest(type, reqUrl + this.query, method, data, opts);
        }
        load(type, query, opts) {
            const _id = `${ type }Id`;
            const _url = `${ type }Url`;
            if (query && isObject(query)) {
                query = Formio.serialize(query.params);
            }
            if (query) {
                query = this.query ? `${ this.query }&${ query }` : `?${ query }`;
            } else {
                query = this.query;
            }
            if (!this[_id]) {
                return NativePromise.reject(`Missing ${ _id }`);
            }
            return this.makeRequest(type, this[_url] + query, 'get', null, opts);
        }
        makeRequest(...args) {
            return Formio.makeRequest(this, ...args);
        }
        loadProject(query, opts) {
            return this.load('project', query, opts);
        }
        saveProject(data, opts) {
            return this.save('project', data, opts);
        }
        deleteProject(opts) {
            return this.delete('project', opts);
        }
        static loadProjects(query, opts) {
            query = query || '';
            if (isObject(query)) {
                query = `?${ Formio.serialize(query.params) }`;
            }
            return Formio.makeStaticRequest(`${ Formio.baseUrl }/project${ query }`, 'GET', null, opts);
        }
        loadRole(opts) {
            return this.load('role', null, opts);
        }
        saveRole(data, opts) {
            return this.save('role', data, opts);
        }
        deleteRole(opts) {
            return this.delete('role', opts);
        }
        loadRoles(opts) {
            return this.index('roles', null, opts);
        }
        loadForm(query, opts) {
            return this.load('form', query, opts).then(currentForm => {
                if (!currentForm.revisions || isNaN(parseInt(this.vId))) {
                    return currentForm;
                }
                if (currentForm.revisions === 'current' && this.submissionId) {
                    return currentForm;
                }
                if (query && isObject(query)) {
                    query = Formio.serialize(query.params);
                }
                if (query) {
                    query = this.query ? `${ this.query }&${ query }` : `?${ query }`;
                } else {
                    query = this.query;
                }
                return this.makeRequest('form', this.vUrl + query, 'get', null, opts).then(revisionForm => {
                    currentForm.components = revisionForm.components;
                    currentForm.settings = revisionForm.settings;
                    return Object.assign({}, currentForm);
                }).catch(() => Object.assign({}, currentForm));
            });
        }
        saveForm(data, opts) {
            return this.save('form', data, opts);
        }
        deleteForm(opts) {
            return this.delete('form', opts);
        }
        loadForms(query, opts) {
            return this.index('forms', query, opts);
        }
        loadSubmission(query, opts) {
            return this.load('submission', query, opts).then(submission => {
                this.vId = submission._fvid;
                this.vUrl = `${ this.formUrl }/v/${ this.vId }`;
                return submission;
            });
        }
        saveSubmission(data, opts) {
            if (!isNaN(parseInt(this.vId))) {
                data._fvid = this.vId;
            }
            return this.save('submission', data, opts);
        }
        deleteSubmission(opts) {
            return this.delete('submission', opts);
        }
        loadSubmissions(query, opts) {
            return this.index('submissions', query, opts);
        }
        loadAction(query, opts) {
            return this.load('action', query, opts);
        }
        saveAction(data, opts) {
            return this.save('action', data, opts);
        }
        deleteAction(opts) {
            return this.delete('action', opts);
        }
        loadActions(query, opts) {
            return this.index('actions', query, opts);
        }
        availableActions() {
            return this.makeRequest('availableActions', `${ this.formUrl }/actions`);
        }
        actionInfo(name) {
            return this.makeRequest('actionInfo', `${ this.formUrl }/actions/${ name }`);
        }
        isObjectId(id) {
            const checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');
            return checkForHexRegExp.test(id);
        }
        getProjectId() {
            if (!this.projectId) {
                return NativePromise.resolve('');
            }
            if (this.isObjectId(this.projectId)) {
                return NativePromise.resolve(this.projectId);
            } else {
                return this.loadProject().then(project => {
                    return project._id;
                });
            }
        }
        getFormId() {
            if (!this.formId) {
                return NativePromise.resolve('');
            }
            if (this.isObjectId(this.formId)) {
                return NativePromise.resolve(this.formId);
            } else {
                return this.loadForm().then(form => {
                    return form._id;
                });
            }
        }
        currentUser(options) {
            return Formio.currentUser(this, options);
        }
        accessInfo() {
            return Formio.accessInfo(this);
        }
        getToken(options) {
            return Formio.getToken(Object.assign({ formio: this }, this.options, options));
        }
        setToken(token, options) {
            return Formio.setToken(token, Object.assign({ formio: this }, this.options, options));
        }
        getTempToken(expire, allowed, options) {
            const token = Formio.getToken(options);
            if (!token) {
                return NativePromise.reject('You must be authenticated to generate a temporary auth token.');
            }
            const authUrl = Formio.authUrl || this.projectUrl;
            return this.makeRequest('tempToken', `${ authUrl }/token`, 'GET', null, {
                ignoreCache: true,
                header: new Headers({
                    'x-expire': expire,
                    'x-allow': allowed
                })
            });
        }
        getDownloadUrl(form) {
            if (!this.submissionId) {
                return NativePromise.resolve('');
            }
            if (!form) {
                return this.loadForm().then(_form => {
                    if (!_form) {
                        return '';
                    }
                    return this.getDownloadUrl(_form);
                });
            }
            let apiUrl = `/project/${ form.project }`;
            apiUrl += `/form/${ form._id }`;
            apiUrl += `/submission/${ this.submissionId }`;
            apiUrl += '/download';
            let download = this.base + apiUrl;
            return new NativePromise((resolve, reject) => {
                this.getTempToken(3600, `GET:${ apiUrl }`).then(tempToken => {
                    download += `?token=${ tempToken.key }`;
                    resolve(download);
                }, () => {
                    resolve(download);
                }).catch(reject);
            });
        }
        uploadFile(storage, file, fileName, dir, progressCallback, url, options, fileKey) {
            const requestArgs = {
                provider: storage,
                method: 'upload',
                file: file,
                fileName: fileName,
                dir: dir
            };
            fileKey = fileKey || 'file';
            const request = Formio.pluginWait('preRequest', requestArgs).then(() => {
                return Formio.pluginGet('fileRequest', requestArgs).then(result => {
                    if (storage && isNil(result)) {
                        const Provider = Providers.getProvider('storage', storage);
                        if (Provider) {
                            const provider = new Provider(this);
                            return provider.uploadFile(file, fileName, dir, progressCallback, url, options, fileKey);
                        } else {
                            throw 'Storage provider not found';
                        }
                    }
                    return result || { url: '' };
                });
            });
            return Formio.pluginAlter('wrapFileRequestPromise', request, requestArgs);
        }
        downloadFile(file, options) {
            const requestArgs = {
                method: 'download',
                file: file
            };
            const request = Formio.pluginWait('preRequest', requestArgs).then(() => {
                return Formio.pluginGet('fileRequest', requestArgs).then(result => {
                    if (file.storage && isNil(result)) {
                        const Provider = Providers.getProvider('storage', file.storage);
                        if (Provider) {
                            const provider = new Provider(this);
                            return provider.downloadFile(file, options);
                        } else {
                            throw 'Storage provider not found';
                        }
                    }
                    return result || { url: '' };
                });
            });
            return Formio.pluginAlter('wrapFileRequestPromise', request, requestArgs);
        }
        userPermissions(user, form, submission) {
            return NativePromise.all([
                form !== undefined ? NativePromise.resolve(form) : this.loadForm(),
                user !== undefined ? NativePromise.resolve(user) : this.currentUser(),
                submission !== undefined || !this.submissionId ? NativePromise.resolve(submission) : this.loadSubmission(),
                this.accessInfo()
            ]).then(results => {
                const form = results.shift();
                const user = results.shift() || {
                    _id: false,
                    roles: []
                };
                const submission = results.shift();
                const access = results.shift();
                const permMap = {
                    create: 'create',
                    read: 'read',
                    update: 'edit',
                    delete: 'delete'
                };
                const perms = {
                    user: user,
                    form: form,
                    access: access,
                    create: false,
                    read: false,
                    edit: false,
                    delete: false
                };
                for (const roleName in access.roles) {
                    if (access.roles.hasOwnProperty(roleName)) {
                        const role = access.roles[roleName];
                        if (role.default && user._id === false) {
                            user.roles.push(role._id);
                        } else if (role.admin && user.roles.indexOf(role._id) !== -1) {
                            perms.create = true;
                            perms.read = true;
                            perms.delete = true;
                            perms.edit = true;
                            return perms;
                        }
                    }
                }
                if (form && form.submissionAccess) {
                    for (let i = 0; i < form.submissionAccess.length; i++) {
                        const permission = form.submissionAccess[i];
                        const [perm, scope] = permission.type.split('_');
                        if ([
                                'create',
                                'read',
                                'update',
                                'delete'
                            ].includes(perm)) {
                            if (_intersection(permission.roles, user.roles).length) {
                                perms[permMap[perm]] = scope === 'all' || (!submission || user._id === submission.owner);
                            }
                        }
                    }
                }
                if (submission) {
                    utils.eachComponent(form.components, (component, path) => {
                        if (component && component.defaultPermission) {
                            const value = _get(submission.data, path);
                            const groups = Array.isArray(value) ? value : [value];
                            groups.forEach(group => {
                                if (group && group._id && user.roles.indexOf(group._id) > -1) {
                                    if (component.defaultPermission === 'read') {
                                        perms[permMap.read] = true;
                                    }
                                    if (component.defaultPermission === 'create') {
                                        perms[permMap.create] = true;
                                        perms[permMap.read] = true;
                                    }
                                    if (component.defaultPermission === 'write') {
                                        perms[permMap.create] = true;
                                        perms[permMap.read] = true;
                                        perms[permMap.update] = true;
                                    }
                                    if (component.defaultPermission === 'admin') {
                                        perms[permMap.create] = true;
                                        perms[permMap.read] = true;
                                        perms[permMap.update] = true;
                                        perms[permMap.delete] = true;
                                    }
                                }
                            });
                        }
                    });
                }
                return perms;
            });
        }
        canSubmit() {
            return this.userPermissions().then(perms => {
                if (!perms.create && Formio.getUser()) {
                    return this.userPermissions(null).then(anonPerms => {
                        if (anonPerms.create) {
                            Formio.setUser(null);
                            return true;
                        }
                        return false;
                    });
                }
                return perms.create;
            });
        }
        getUrlParts(url) {
            return Formio.getUrlParts(url, this);
        }
        static getUrlParts(url, formio) {
            const base = formio && formio.base ? formio.base : Formio.baseUrl;
            let regex = '^(http[s]?:\\/\\/)';
            if (base && url.indexOf(base) === 0) {
                regex += `(${ base.replace(/^http[s]?:\/\//, '') })`;
            } else {
                regex += '([^/]+)';
            }
            regex += '($|\\/.*)';
            return url.match(new RegExp(regex));
        }
        static serialize(obj, _interpolate) {
            const str = [];
            const interpolate = item => {
                return _interpolate ? _interpolate(item) : item;
            };
            for (const p in obj) {
                if (obj.hasOwnProperty(p)) {
                    str.push(`${ encodeURIComponent(p) }=${ encodeURIComponent(interpolate(obj[p])) }`);
                }
            }
            return str.join('&');
        }
        static getRequestArgs(formio, type, url, method, data, opts) {
            method = (method || 'GET').toUpperCase();
            if (!opts || !isObject(opts)) {
                opts = {};
            }
            const requestArgs = {
                url,
                method,
                data: data || null,
                opts
            };
            if (type) {
                requestArgs.type = type;
            }
            if (formio) {
                requestArgs.formio = formio;
            }
            return requestArgs;
        }
        static makeStaticRequest(url, method, data, opts) {
            const requestArgs = Formio.getRequestArgs(null, '', url, method, data, opts);
            const request = Formio.pluginWait('preRequest', requestArgs).then(() => Formio.pluginGet('staticRequest', requestArgs).then(result => {
                if (isNil(result)) {
                    return Formio.request(url, method, requestArgs.data, requestArgs.opts.header, requestArgs.opts);
                }
                return result;
            }));
            return Formio.pluginAlter('wrapStaticRequestPromise', request, requestArgs);
        }
        static makeRequest(formio, type, url, method, data, opts) {
            if (!formio) {
                return Formio.makeStaticRequest(url, method, data, opts);
            }
            const requestArgs = Formio.getRequestArgs(formio, type, url, method, data, opts);
            requestArgs.opts = requestArgs.opts || {};
            requestArgs.opts.formio = formio;
            if (!requestArgs.opts.headers) {
                requestArgs.opts.headers = {};
            }
            requestArgs.opts.headers = _defaults(requestArgs.opts.headers, {
                'Accept': 'application/json',
                'Content-type': 'application/json'
            });
            const request = Formio.pluginWait('preRequest', requestArgs).then(() => Formio.pluginGet('request', requestArgs).then(result => {
                if (isNil(result)) {
                    return Formio.request(url, method, requestArgs.data, requestArgs.opts.header, requestArgs.opts);
                }
                return result;
            }));
            return Formio.pluginAlter('wrapRequestPromise', request, requestArgs);
        }
        static request(url, method, data, header, opts) {
            if (!url) {
                return NativePromise.reject('No url provided');
            }
            method = (method || 'GET').toUpperCase();
            if (isBoolean(opts)) {
                opts = { ignoreCache: opts };
            }
            if (!opts || !isObject(opts)) {
                opts = {};
            }
            const cacheKey = btoa(url);
            if (!opts.ignoreCache && method === 'GET' && Formio.cache.hasOwnProperty(cacheKey)) {
                return NativePromise.resolve(cloneResponse(Formio.cache[cacheKey]));
            }
            const headers = header || new Headers(opts.headers || {
                'Accept': 'application/json',
                'Content-type': 'application/json'
            });
            const token = Formio.getToken(opts);
            if (token && !opts.noToken) {
                headers.append('x-jwt-token', token);
            }
            const headerObj = {};
            headers.forEach(function (value, name) {
                headerObj[name] = value;
            });
            let options = {
                method: method,
                headers: headerObj,
                mode: 'cors'
            };
            if (data) {
                options.body = JSON.stringify(data);
            }
            options = Formio.pluginAlter('requestOptions', options, url);
            if (options.namespace || Formio.namespace) {
                opts.namespace = options.namespace || Formio.namespace;
            }
            const requestToken = options.headers['x-jwt-token'];
            const result = Formio.pluginAlter('wrapFetchRequestPromise', Formio.fetch(url, options), {
                url,
                method,
                data,
                opts
            }).then(response => {
                response = Formio.pluginAlter('requestResponse', response, Formio, data);
                if (!response.ok) {
                    if (response.status === 440) {
                        Formio.setToken(null, opts);
                        Formio.events.emit('formio.sessionExpired', response.body);
                    } else if (response.status === 401) {
                        Formio.events.emit('formio.unauthorized', response.body);
                    }
                    return (response.headers.get('content-type').includes('application/json') ? response.json() : response.text()).then(error => {
                        return NativePromise.reject(error);
                    });
                }
                const token = response.headers.get('x-jwt-token');
                let tokenIntroduced = false;
                if (method === 'GET' && !requestToken && token && !opts.external && !url.includes('token=') && !url.includes('x-jwt-token=')) {
                    console.warn('Token was introduced in request.');
                    tokenIntroduced = true;
                }
                if (response.status >= 200 && response.status < 300 && token && token !== '' && !tokenIntroduced) {
                    Formio.setToken(token, opts);
                }
                if (response.status === 204) {
                    return {};
                }
                const getResult = response.headers.get('content-type').includes('application/json') ? response.json() : response.text();
                return getResult.then(result => {
                    let range = response.headers.get('content-range');
                    if (range && isObject(result)) {
                        range = range.split('/');
                        if (range[0] !== '*') {
                            const skipLimit = range[0].split('-');
                            result.skip = Number(skipLimit[0]);
                            result.limit = skipLimit[1] - skipLimit[0] + 1;
                        }
                        result.serverCount = range[1] === '*' ? range[1] : Number(range[1]);
                    }
                    if (!opts.getHeaders) {
                        return result;
                    }
                    const headers = {};
                    response.headers.forEach((item, key) => {
                        headers[key] = item;
                    });
                    return {
                        result,
                        headers
                    };
                });
            }).then(result => {
                if (opts.getHeaders) {
                    return result;
                }
                if (method === 'GET') {
                    Formio.cache[cacheKey] = result;
                }
                return cloneResponse(result);
            }).catch(err => {
                if (err === 'Bad Token') {
                    Formio.setToken(null, opts);
                    Formio.events.emit('formio.badToken', err);
                }
                if (err.message) {
                    err.message = `Could not connect to API server (${ err.message })`;
                    err.networkError = true;
                }
                if (method === 'GET') {
                    delete Formio.cache[cacheKey];
                }
                return NativePromise.reject(err);
            });
            return result;
        }
        static get token() {
            if (!Formio.tokens) {
                Formio.tokens = {};
            }
            return Formio.tokens.formioToken ? Formio.tokens.formioToken : '';
        }
        static set token(token) {
            if (!Formio.tokens) {
                Formio.tokens = {};
            }
            return Formio.tokens.formioToken = token || '';
        }
        static setToken(token = '', opts) {
            token = token || '';
            opts = typeof opts === 'string' ? { namespace: opts } : opts || {};
            var tokenName = `${ opts.namespace || Formio.namespace || 'formio' }Token`;
            if (!Formio.tokens) {
                Formio.tokens = {};
            }
            if (Formio.tokens[tokenName] && Formio.tokens[tokenName] === token) {
                return;
            }
            Formio.tokens[tokenName] = token;
            if (!token) {
                if (!opts.fromUser) {
                    opts.fromToken = true;
                    Formio.setUser(null, opts);
                }
                try {
                    return localStorage.removeItem(tokenName);
                } catch (err) {
                    return cookies.erase(tokenName, { path: '/' });
                }
            }
            try {
                localStorage.setItem(tokenName, token);
            } catch (err) {
                cookies.set(tokenName, token, { path: '/' });
            }
            return Formio.currentUser(opts.formio, opts);
        }
        static getToken(options) {
            options = typeof options === 'string' ? { namespace: options } : options || {};
            const tokenName = `${ options.namespace || Formio.namespace || 'formio' }Token`;
            const decodedTokenName = options.decode ? `${ tokenName }Decoded` : tokenName;
            if (!Formio.tokens) {
                Formio.tokens = {};
            }
            if (Formio.tokens[decodedTokenName]) {
                return Formio.tokens[decodedTokenName];
            }
            try {
                Formio.tokens[tokenName] = localStorage.getItem(tokenName) || '';
                if (options.decode) {
                    Formio.tokens[decodedTokenName] = Formio.tokens[tokenName] ? jwtDecode(Formio.tokens[tokenName]) : {};
                    return Formio.tokens[decodedTokenName];
                }
                return Formio.tokens[tokenName];
            } catch (e) {
                Formio.tokens[tokenName] = cookies.get(tokenName);
                return Formio.tokens[tokenName];
            }
        }
        static setUser(user, opts = {}) {
            var userName = `${ opts.namespace || Formio.namespace || 'formio' }User`;
            if (!user) {
                if (!opts.fromToken) {
                    opts.fromUser = true;
                    Formio.setToken(null, opts);
                }
                Formio.events.emit('formio.user', null);
                try {
                    return localStorage.removeItem(userName);
                } catch (err) {
                    return cookies.erase(userName, { path: '/' });
                }
            }
            try {
                localStorage.setItem(userName, JSON.stringify(user));
            } catch (err) {
                cookies.set(userName, JSON.stringify(user), { path: '/' });
            }
            Formio.events.emit('formio.user', user);
        }
        static getUser(options) {
            options = options || {};
            var userName = `${ options.namespace || Formio.namespace || 'formio' }User`;
            try {
                return JSON.parse(localStorage.getItem(userName) || null);
            } catch (e) {
                return JSON.parse(cookies.get(userName));
            }
        }
        static setBaseUrl(url) {
            Formio.baseUrl = url;
            if (!Formio.projectUrlSet) {
                Formio.projectUrl = url;
            }
        }
        static getBaseUrl() {
            return Formio.baseUrl;
        }
        static setApiUrl(url) {
            return Formio.setBaseUrl(url);
        }
        static getApiUrl() {
            return Formio.getBaseUrl();
        }
        static setAppUrl(url) {
            console.warn('Formio.setAppUrl() is deprecated. Use Formio.setProjectUrl instead.');
            Formio.projectUrl = url;
            Formio.projectUrlSet = true;
        }
        static setProjectUrl(url) {
            Formio.projectUrl = url;
            Formio.projectUrlSet = true;
        }
        static setAuthUrl(url) {
            Formio.authUrl = url;
        }
        static getAppUrl() {
            console.warn('Formio.getAppUrl() is deprecated. Use Formio.getProjectUrl instead.');
            return Formio.projectUrl;
        }
        static getProjectUrl() {
            return Formio.projectUrl;
        }
        static clearCache() {
            Formio.cache = {};
        }
        static noop() {
        }
        static identity(value) {
            return value;
        }
        static deregisterPlugin(plugin) {
            const beforeLength = Formio.plugins.length;
            Formio.plugins = Formio.plugins.filter(p => {
                if (p !== plugin && p.__name !== plugin) {
                    return true;
                }
                (p.deregister || Formio.noop).call(plugin, Formio);
                return false;
            });
            return beforeLength !== Formio.plugins.length;
        }
        static registerPlugin(plugin, name) {
            Formio.plugins.push(plugin);
            Formio.plugins.sort((a, b) => (b.priority || 0) - (a.priority || 0));
            plugin.__name = name;
            (plugin.init || Formio.noop).call(plugin, Formio);
        }
        static getPlugin(name) {
            for (const plugin of Formio.plugins) {
                if (plugin.__name === name) {
                    return plugin;
                }
            }
            return null;
        }
        static pluginWait(pluginFn, ...args) {
            return NativePromise.all(Formio.plugins.map(plugin => (plugin[pluginFn] || Formio.noop).call(plugin, ...args)));
        }
        static pluginGet(pluginFn, ...args) {
            const callPlugin = index => {
                const plugin = Formio.plugins[index];
                if (!plugin) {
                    return NativePromise.resolve(null);
                }
                return NativePromise.resolve((plugin[pluginFn] || Formio.noop).call(plugin, ...args)).then(result => {
                    if (!isNil(result)) {
                        return result;
                    }
                    return callPlugin(index + 1);
                });
            };
            return callPlugin(0);
        }
        static pluginAlter(pluginFn, value, ...args) {
            return Formio.plugins.reduce((value, plugin) => (plugin[pluginFn] || Formio.identity)(value, ...args), value);
        }
        static accessInfo(formio) {
            const projectUrl = formio ? formio.projectUrl : Formio.projectUrl;
            return Formio.makeRequest(formio, 'accessInfo', `${ projectUrl }/access`);
        }
        static projectRoles(formio) {
            const projectUrl = formio ? formio.projectUrl : Formio.projectUrl;
            return Formio.makeRequest(formio, 'projectRoles', `${ projectUrl }/role`);
        }
        static currentUser(formio, options) {
            let authUrl = Formio.authUrl;
            if (!authUrl) {
                authUrl = formio ? formio.projectUrl : Formio.projectUrl || Formio.baseUrl;
            }
            authUrl += '/current';
            const user = Formio.getUser(options);
            if (user) {
                return Formio.pluginAlter('wrapStaticRequestPromise', NativePromise.resolve(user), {
                    url: authUrl,
                    method: 'GET',
                    options
                });
            }
            const token = Formio.getToken(options);
            if ((!options || !options.external) && !token) {
                return Formio.pluginAlter('wrapStaticRequestPromise', NativePromise.resolve(null), {
                    url: authUrl,
                    method: 'GET',
                    options
                });
            }
            return Formio.makeRequest(formio, 'currentUser', authUrl, 'GET', null, options).then(response => {
                Formio.setUser(response, options);
                return response;
            });
        }
        static logout(formio, options) {
            options = options || {};
            options.formio = formio;
            Formio.setToken(null, options);
            Formio.setUser(null, options);
            Formio.clearCache();
            const projectUrl = Formio.authUrl ? Formio.authUrl : formio ? formio.projectUrl : Formio.baseUrl;
            return Formio.makeRequest(formio, 'logout', `${ projectUrl }/logout`);
        }
        static pageQuery() {
            if (Formio._pageQuery) {
                return Formio._pageQuery;
            }
            Formio._pageQuery = {};
            Formio._pageQuery.paths = [];
            const hashes = location.hash.substr(1).replace(/\?/g, '&').split('&');
            let parts = [];
            location.search.substr(1).split('&').forEach(function (item) {
                parts = item.split('=');
                if (parts.length > 1) {
                    Formio._pageQuery[parts[0]] = parts[1] && decodeURIComponent(parts[1]);
                }
            });
            hashes.forEach(function (item) {
                parts = item.split('=');
                if (parts.length > 1) {
                    Formio._pageQuery[parts[0]] = parts[1] && decodeURIComponent(parts[1]);
                } else if (item.indexOf('/') === 0) {
                    Formio._pageQuery.paths = item.substr(1).split('/');
                }
            });
            return Formio._pageQuery;
        }
        static oAuthCurrentUser(formio, token) {
            return Formio.currentUser(formio, {
                external: true,
                headers: { Authorization: `Bearer ${ token }` }
            });
        }
        static samlInit(options) {
            options = options || {};
            const query = Formio.pageQuery();
            if (query.saml) {
                Formio.setUser(null);
                const retVal = Formio.setToken(query.saml);
                let uri = window.location.toString();
                uri = uri.substring(0, uri.indexOf('?'));
                if (window.location.hash) {
                    uri += window.location.hash;
                }
                window.history.replaceState({}, document.title, uri);
                return retVal;
            }
            if (!options.relay) {
                options.relay = window.location.href;
            }
            const authUrl = Formio.authUrl || Formio.projectUrl;
            window.location.href = `${ authUrl }/saml/sso?relay=${ encodeURI(options.relay) }`;
            return false;
        }
        static oktaInit(options) {
            options = options || {};
            if (typeof OktaAuth !== undefined) {
                options.OktaAuth = OktaAuth;
            }
            if (typeof options.OktaAuth === undefined) {
                const errorMessage = 'Cannot find OktaAuth. Please include the Okta JavaScript SDK within your application. See https://developer.okta.com/code/javascript/okta_auth_sdk for an example.';
                console.warn(errorMessage);
                return NativePromise.reject(errorMessage);
            }
            return new NativePromise((resolve, reject) => {
                const Okta = options.OktaAuth;
                delete options.OktaAuth;
                var authClient = new Okta(options);
                authClient.tokenManager.get('accessToken').then(accessToken => {
                    if (accessToken) {
                        resolve(Formio.oAuthCurrentUser(options.formio, accessToken.accessToken));
                    } else if (location.hash) {
                        authClient.token.parseFromUrl().then(token => {
                            authClient.tokenManager.add('accessToken', token);
                            resolve(Formio.oAuthCurrentUser(options.formio, token.accessToken));
                        }).catch(err => {
                            console.warn(err);
                            reject(err);
                        });
                    } else {
                        authClient.token.getWithRedirect({
                            responseType: 'token',
                            scopes: options.scopes
                        });
                        resolve(false);
                    }
                }).catch(error => {
                    reject(error);
                });
            });
        }
        static ssoInit(type, options) {
            switch (type) {
            case 'saml':
                return Formio.samlInit(options);
            case 'okta':
                return Formio.oktaInit(options);
            default:
                console.warn('Unknown SSO type');
                return NativePromise.reject('Unknown SSO type');
            }
        }
        static requireLibrary(name, property, src, polling) {
            if (!Formio.libraries.hasOwnProperty(name)) {
                Formio.libraries[name] = {};
                Formio.libraries[name].ready = new NativePromise((resolve, reject) => {
                    Formio.libraries[name].resolve = resolve;
                    Formio.libraries[name].reject = reject;
                });
                const callbackName = `${ name }Callback`;
                if (!polling && !window[callbackName]) {
                    window[callbackName] = () => Formio.libraries[name].resolve();
                }
                const plugin = _get(window, property);
                if (plugin) {
                    Formio.libraries[name].resolve(plugin);
                } else {
                    src = Array.isArray(src) ? src : [src];
                    src.forEach(lib => {
                        let attrs = {};
                        let elementType = '';
                        if (typeof lib === 'string') {
                            lib = {
                                type: 'script',
                                src: lib
                            };
                        }
                        switch (lib.type) {
                        case 'script':
                            elementType = 'script';
                            attrs = {
                                src: lib.src,
                                type: 'text/javascript',
                                defer: true,
                                async: true,
                                referrerpolicy: 'origin'
                            };
                            break;
                        case 'styles':
                            elementType = 'link';
                            attrs = {
                                href: lib.src,
                                rel: 'stylesheet'
                            };
                            break;
                        }
                        const element = document.createElement(elementType);
                        if (element.setAttribute) {
                            for (const attr in attrs) {
                                element.setAttribute(attr, attrs[attr]);
                            }
                        }
                        const {head} = document;
                        if (head) {
                            head.appendChild(element);
                        }
                    });
                    if (polling) {
                        const interval = setInterval(() => {
                            const plugin = _get(window, property);
                            if (plugin) {
                                clearInterval(interval);
                                Formio.libraries[name].resolve(plugin);
                            }
                        }, 200);
                    }
                }
            }
            return Formio.libraries[name].ready;
        }
        static libraryReady(name) {
            if (Formio.libraries.hasOwnProperty(name) && Formio.libraries[name].ready) {
                return Formio.libraries[name].ready;
            }
            return NativePromise.reject(`${ name } library was not required.`);
        }
    };
    Formio.libraries = {};
    Formio.Promise = NativePromise;
    Formio.fetch = fetch;
    Formio.Headers = Headers;
    Formio.baseUrl = 'https://api.form.io';
    Formio.projectUrl = Formio.baseUrl;
    Formio.authUrl = '';
    Formio.projectUrlSet = false;
    Formio.plugins = [];
    Formio.cache = {};
    Formio.Providers = Providers;
    Formio.version = '---VERSION---';
    Formio.events = new EventEmitter({
        wildcard: false,
        maxListeners: 0
    });
    if (typeof global === 'object' && !global.Formio) {
        global.Formio = Formio;
    }
    if (typeof window === 'object' && !window.Formio) {
        window.Formio = Formio;
    }


    return Formio;
});
define('skylark-formio/vendors/vanilla-text-mask/constants',[],function() {	
	const placeholderChar = '_';
	const strFunction = 'function';

	return {
		placeholderChar,
		strFunction
	}
});
define('skylark-formio/vendors/vanilla-text-mask/utilities',[
  './constants'
],function(constants) {

  const defaultPlaceholderChar  = constants.placeholderChar; 

  const emptyArray = []

  function convertMaskToPlaceholder(mask = emptyArray, placeholderChar = defaultPlaceholderChar) {
    if (!isArray(mask)) {
      throw new Error(
        'Text-mask:convertMaskToPlaceholder; The mask property must be an array.'
      )
    }

    if (mask.indexOf(placeholderChar) !== -1) {
      throw new Error(
        'Placeholder character must not be used as part of the mask. Please specify a character ' +
        'that is not present in your mask as your placeholder character.\n\n' +
        `The placeholder character that was received is: ${JSON.stringify(placeholderChar)}\n\n` +
        `The mask that was received is: ${JSON.stringify(mask)}`
      )
    }

    return mask.map((char) => {
      return (char instanceof RegExp) ? placeholderChar : char
    }).join('')
  }

  function isArray(value) {
    return (Array.isArray && Array.isArray(value)) || value instanceof Array
  }

  function isString(value) {
    return typeof value === 'string' || value instanceof String
  }

  function isNumber(value) {
    return typeof value === 'number' && value.length === undefined && !isNaN(value)
  }

  function isNil(value) {
    return typeof value === 'undefined' || value === null
  }

  const strCaretTrap = '[]'
  function processCaretTraps(mask) {
    const indexes = []

    let indexOfCaretTrap
    while(indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) { // eslint-disable-line
      indexes.push(indexOfCaretTrap)

      mask.splice(indexOfCaretTrap, 1)
    }

    return {maskWithoutCaretTraps: mask, indexes}
  }


  return {
    convertMaskToPlaceholder,
    isArray,
    isString,
    isNumber,
    isNil,
    processCaretTraps
  }
});


define('skylark-formio/vendors/vanilla-text-mask/conformToMask',[
  "./utilities",
  "./constants"
],function(utilities,constants){


  const {convertMaskToPlaceholder, isArray, processCaretTraps} = utilities;
  const {strFunction} = constants;

  const defaultPlaceholderChar = constants.placeholderChar;

  const emptyArray = []
  const emptyString = ''

  function conformToMask(rawValue = emptyString, mask = emptyArray, config = {}) {
    if (!isArray(mask)) {
      // If someone passes a function as the mask property, we should call the
      // function to get the mask array - Normally this is handled by the
      // `createTextMaskInputElement:update` function - this allows mask functions
      // to be used directly with `conformToMask`
      if (typeof mask === strFunction) {
        // call the mask function to get the mask array
        mask = mask(rawValue, config)

        // mask functions can setup caret traps to have some control over how the caret moves. We need to process
        // the mask for any caret traps. `processCaretTraps` will remove the caret traps from the mask
        mask = processCaretTraps(mask).maskWithoutCaretTraps
      } else {
        throw new Error(
          'Text-mask:conformToMask; The mask property must be an array.'
        )
      }
    }

    // These configurations tell us how to conform the mask
    const {
      guide = true,
      previousConformedValue = emptyString,
      placeholderChar = defaultPlaceholderChar,
      placeholder = convertMaskToPlaceholder(mask, placeholderChar),
      currentCaretPosition,
      keepCharPositions
    } = config

    // The configs below indicate that the user wants the algorithm to work in *no guide* mode
    const suppressGuide = guide === false && previousConformedValue !== undefined

    // Calculate lengths once for performance
    const rawValueLength = rawValue.length
    const previousConformedValueLength = previousConformedValue.length
    const placeholderLength = placeholder.length
    const maskLength = mask.length

    // This tells us the number of edited characters and the direction in which they were edited (+/-)
    const editDistance = rawValueLength - previousConformedValueLength

    // In *no guide* mode, we need to know if the user is trying to add a character or not
    const isAddition = editDistance > 0

    // Tells us the index of the first change. For (438) 394-4938 to (38) 394-4938, that would be 1
    const indexOfFirstChange = currentCaretPosition + (isAddition ? -editDistance : 0)

    // We're also gonna need the index of last change, which we can derive as follows...
    const indexOfLastChange = indexOfFirstChange + Math.abs(editDistance)

    // If `conformToMask` is configured to keep character positions, that is, for mask 111, previous value
    // _2_ and raw value 3_2_, the new conformed value should be 32_, not 3_2 (default behavior). That's in the case of
    // addition. And in the case of deletion, previous value _23, raw value _3, the new conformed string should be
    // __3, not _3_ (default behavior)
    //
    // The next block of logic handles keeping character positions for the case of deletion. (Keeping
    // character positions for the case of addition is further down since it is handled differently.)
    // To do this, we want to compensate for all characters that were deleted
    if (keepCharPositions === true && !isAddition) {
      // We will be storing the new placeholder characters in this variable.
      let compensatingPlaceholderChars = emptyString

      // For every character that was deleted from a placeholder position, we add a placeholder char
      for (let i = indexOfFirstChange; i < indexOfLastChange; i++) {
        if (placeholder[i] === placeholderChar) {
          compensatingPlaceholderChars += placeholderChar
        }
      }

      // Now we trick our algorithm by modifying the raw value to make it contain additional placeholder characters
      // That way when the we start laying the characters again on the mask, it will keep the non-deleted characters
      // in their positions.
      rawValue = (
        rawValue.slice(0, indexOfFirstChange) +
        compensatingPlaceholderChars +
        rawValue.slice(indexOfFirstChange, rawValueLength)
      )
    }

    // Convert `rawValue` string to an array, and mark characters based on whether they are newly added or have
    // existed in the previous conformed value. Identifying new and old characters is needed for `conformToMask`
    // to work if it is configured to keep character positions.
    const rawValueArr = rawValue
      .split(emptyString)
      .map((char, i) => ({char, isNew: i >= indexOfFirstChange && i < indexOfLastChange}))

    // The loop below removes masking characters from user input. For example, for mask
    // `00 (111)`, the placeholder would be `00 (___)`. If user input is `00 (234)`, the loop below
    // would remove all characters but `234` from the `rawValueArr`. The rest of the algorithm
    // then would lay `234` on top of the available placeholder positions in the mask.
    for (let i = rawValueLength - 1; i >= 0; i--) {
      const {char} = rawValueArr[i]

      if (char !== placeholderChar) {
        const shouldOffset = i >= indexOfFirstChange && previousConformedValueLength === maskLength

        if (char === placeholder[(shouldOffset) ? i - editDistance : i]) {
          rawValueArr.splice(i, 1)
        }
      }
    }

    // This is the variable that we will be filling with characters as we figure them out
    // in the algorithm below
    let conformedValue = emptyString
    let someCharsRejected = false

    // Ok, so first we loop through the placeholder looking for placeholder characters to fill up.
    placeholderLoop: for (let i = 0; i < placeholderLength; i++) {
      const charInPlaceholder = placeholder[i]

      // We see one. Let's find out what we can put in it.
      if (charInPlaceholder === placeholderChar) {
        // But before that, do we actually have any user characters that need a place?
        if (rawValueArr.length > 0) {
          // We will keep chipping away at user input until either we run out of characters
          // or we find at least one character that we can map.
          while (rawValueArr.length > 0) {
            // Let's retrieve the first user character in the queue of characters we have left
            const {char: rawValueChar, isNew} = rawValueArr.shift()

            // If the character we got from the user input is a placeholder character (which happens
            // regularly because user input could be something like (540) 90_-____, which includes
            // a bunch of `_` which are placeholder characters) and we are not in *no guide* mode,
            // then we map this placeholder character to the current spot in the placeholder
            if (rawValueChar === placeholderChar && suppressGuide !== true) {
              conformedValue += placeholderChar

              // And we go to find the next placeholder character that needs filling
              continue placeholderLoop

            // Else if, the character we got from the user input is not a placeholder, let's see
            // if the current position in the mask can accept it.
            } else if (mask[i].test(rawValueChar)) {
              // we map the character differently based on whether we are keeping character positions or not.
              // If any of the conditions below are met, we simply map the raw value character to the
              // placeholder position.
              if (
                keepCharPositions !== true ||
                isNew === false ||
                previousConformedValue === emptyString ||
                guide === false ||
                !isAddition
              ) {
                conformedValue += rawValueChar
              } else {
                // We enter this block of code if we are trying to keep character positions and none of the conditions
                // above is met. In this case, we need to see if there's an available spot for the raw value character
                // to be mapped to. If we couldn't find a spot, we will discard the character.
                //
                // For example, for mask `1111`, previous conformed value `_2__`, raw value `942_2__`. We can map the
                // `9`, to the first available placeholder position, but then, there are no more spots available for the
                // `4` and `2`. So, we discard them and end up with a conformed value of `92__`.
                const rawValueArrLength = rawValueArr.length
                let indexOfNextAvailablePlaceholderChar = null

                // Let's loop through the remaining raw value characters. We are looking for either a suitable spot, ie,
                // a placeholder character or a non-suitable spot, ie, a non-placeholder character that is not new.
                // If we see a suitable spot first, we store its position and exit the loop. If we see a non-suitable
                // spot first, we exit the loop and our `indexOfNextAvailablePlaceholderChar` will stay as `null`.
                for (let i = 0; i < rawValueArrLength; i++) {
                  const charData = rawValueArr[i]

                  if (charData.char !== placeholderChar && charData.isNew === false) {
                    break
                  }

                  if (charData.char === placeholderChar) {
                    indexOfNextAvailablePlaceholderChar = i
                    break
                  }
                }

                // If `indexOfNextAvailablePlaceholderChar` is not `null`, that means the character is not blocked.
                // We can map it. And to keep the character positions, we remove the placeholder character
                // from the remaining characters
                if (indexOfNextAvailablePlaceholderChar !== null) {
                  conformedValue += rawValueChar
                  rawValueArr.splice(indexOfNextAvailablePlaceholderChar, 1)

                // If `indexOfNextAvailablePlaceholderChar` is `null`, that means the character is blocked. We have to
                // discard it.
                } else {
                  i--
                }
              }

              // Since we've mapped this placeholder position. We move on to the next one.
              continue placeholderLoop
            } else {
              someCharsRejected = true
            }
          }
        }

        // We reach this point when we've mapped all the user input characters to placeholder
        // positions in the mask. In *guide* mode, we append the left over characters in the
        // placeholder to the `conformedString`, but in *no guide* mode, we don't wanna do that.
        //
        // That is, for mask `(111)` and user input `2`, we want to return `(2`, not `(2__)`.
        if (suppressGuide === false) {
          conformedValue += placeholder.substr(i, placeholderLength)
        }

        // And we break
        break

      // Else, the charInPlaceholder is not a placeholderChar. That is, we cannot fill it
      // with user input. So we just map it to the final output
      } else {
        conformedValue += charInPlaceholder
      }
    }

    // The following logic is needed to deal with the case of deletion in *no guide* mode.
    //
    // Consider the silly mask `(111) /// 1`. What if user tries to delete the last placeholder
    // position? Something like `(589) /// `. We want to conform that to `(589`. Not `(589) /// `.
    // That's why the logic below finds the last filled placeholder character, and removes everything
    // from that point on.
    if (suppressGuide && isAddition === false) {
      let indexOfLastFilledPlaceholderChar = null

      // Find the last filled placeholder position and substring from there
      for (let i = 0; i < conformedValue.length; i++) {
        if (placeholder[i] === placeholderChar) {
          indexOfLastFilledPlaceholderChar = i
        }
      }

      if (indexOfLastFilledPlaceholderChar !== null) {
        // We substring from the beginning until the position after the last filled placeholder char.
        conformedValue = conformedValue.substr(0, indexOfLastFilledPlaceholderChar + 1)
      } else {
        // If we couldn't find `indexOfLastFilledPlaceholderChar` that means the user deleted
        // the first character in the mask. So we return an empty string.
        conformedValue = emptyString
      }
    }

    return {conformedValue, meta: {someCharsRejected}}
  }

  return conformToMask;

});
define('skylark-popper/Popper',[
  "skylark-langx/skylark"
], function(skylark) {
  'use strict';

  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  var timeoutDuration = 0;
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      timeoutDuration = 1;
      break;
    }
  }

  function microtaskDebounce(fn) {
    var called = false;
    return function () {
      if (called) {
        return;
      }
      called = true;
      window.Promise.resolve().then(function () {
        called = false;
        fn();
      });
    };
  }

  function taskDebounce(fn) {
    var scheduled = false;
    return function () {
      if (!scheduled) {
        scheduled = true;
        setTimeout(function () {
          scheduled = false;
          fn();
        }, timeoutDuration);
      }
    };
  }

  var supportsMicroTasks = isBrowser && window.Promise;

  /**
  * Create a debounced version of a method, that's asynchronously deferred
  * but called in the minimum time possible.
  *
  * @method
  * @memberof Popper.Utils
  * @argument {Function} fn
  * @returns {Function}
  */
  var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

  /**
   * Check if the given variable is a function
   * @method
   * @memberof Popper.Utils
   * @argument {Any} functionToCheck - variable to check
   * @returns {Boolean} answer to: is a function?
   */
  function isFunction(functionToCheck) {
    var getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  }

  /**
   * Get CSS computed property of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Eement} element
   * @argument {String} property
   */
  function getStyleComputedProperty(element, property) {
    if (element.nodeType !== 1) {
      return [];
    }
    // NOTE: 1 DOM access here
    var window = element.ownerDocument.defaultView;
    var css = window.getComputedStyle(element, null);
    return property ? css[property] : css;
  }

  /**
   * Returns the parentNode or the host of the element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} parent
   */
  function getParentNode(element) {
    if (element.nodeName === 'HTML') {
      return element;
    }
    return element.parentNode || element.host;
  }

  /**
   * Returns the scrolling parent of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} scroll parent
   */
  function getScrollParent(element) {
    // Return body, `getScroll` will take care to get the correct `scrollTop` from it
    if (!element) {
      return document.body;
    }

    switch (element.nodeName) {
      case 'HTML':
      case 'BODY':
        return element.ownerDocument.body;
      case '#document':
        return element.body;
    }

    // Firefox want us to check `-x` and `-y` variations as well

    var _getStyleComputedProp = getStyleComputedProperty(element),
        overflow = _getStyleComputedProp.overflow,
        overflowX = _getStyleComputedProp.overflowX,
        overflowY = _getStyleComputedProp.overflowY;

    if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
      return element;
    }

    return getScrollParent(getParentNode(element));
  }

  var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
  var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

  /**
   * Determines if the browser is Internet Explorer
   * @method
   * @memberof Popper.Utils
   * @param {Number} version to check
   * @returns {Boolean} isIE
   */
  function isIE(version) {
    if (version === 11) {
      return isIE11;
    }
    if (version === 10) {
      return isIE10;
    }
    return isIE11 || isIE10;
  }

  /**
   * Returns the offset parent of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} offset parent
   */
  function getOffsetParent(element) {
    if (!element) {
      return document.documentElement;
    }

    var noOffsetParent = isIE(10) ? document.body : null;

    // NOTE: 1 DOM access here
    var offsetParent = element.offsetParent || null;
    // Skip hidden elements which don't have an offsetParent
    while (offsetParent === noOffsetParent && element.nextElementSibling) {
      offsetParent = (element = element.nextElementSibling).offsetParent;
    }

    var nodeName = offsetParent && offsetParent.nodeName;

    if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
      return element ? element.ownerDocument.documentElement : document.documentElement;
    }

    // .offsetParent will return the closest TH, TD or TABLE in case
    // no offsetParent is present, I hate this job...
    if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
      return getOffsetParent(offsetParent);
    }

    return offsetParent;
  }

  function isOffsetContainer(element) {
    var nodeName = element.nodeName;

    if (nodeName === 'BODY') {
      return false;
    }
    return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
  }

  /**
   * Finds the root node (document, shadowDOM root) of the given element
   * @method
   * @memberof Popper.Utils
   * @argument {Element} node
   * @returns {Element} root node
   */
  function getRoot(node) {
    if (node.parentNode !== null) {
      return getRoot(node.parentNode);
    }

    return node;
  }

  /**
   * Finds the offset parent common to the two provided nodes
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element1
   * @argument {Element} element2
   * @returns {Element} common offset parent
   */
  function findCommonOffsetParent(element1, element2) {
    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
    if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
      return document.documentElement;
    }

    // Here we make sure to give as "start" the element that comes first in the DOM
    var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
    var start = order ? element1 : element2;
    var end = order ? element2 : element1;

    // Get common ancestor container
    var range = document.createRange();
    range.setStart(start, 0);
    range.setEnd(end, 0);
    var commonAncestorContainer = range.commonAncestorContainer;

    // Both nodes are inside #document

    if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
      if (isOffsetContainer(commonAncestorContainer)) {
        return commonAncestorContainer;
      }

      return getOffsetParent(commonAncestorContainer);
    }

    // one of the nodes is inside shadowDOM, find which one
    var element1root = getRoot(element1);
    if (element1root.host) {
      return findCommonOffsetParent(element1root.host, element2);
    } else {
      return findCommonOffsetParent(element1, getRoot(element2).host);
    }
  }

  /**
   * Gets the scroll value of the given element in the given side (top and left)
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @argument {String} side `top` or `left`
   * @returns {number} amount of scrolled pixels
   */
  function getScroll(element) {
    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

    var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
    var nodeName = element.nodeName;

    if (nodeName === 'BODY' || nodeName === 'HTML') {
      var html = element.ownerDocument.documentElement;
      var scrollingElement = element.ownerDocument.scrollingElement || html;
      return scrollingElement[upperSide];
    }

    return element[upperSide];
  }

  /*
   * Sum or subtract the element scroll values (left and top) from a given rect object
   * @method
   * @memberof Popper.Utils
   * @param {Object} rect - Rect object you want to change
   * @param {HTMLElement} element - The element from the function reads the scroll values
   * @param {Boolean} subtract - set to true if you want to subtract the scroll values
   * @return {Object} rect - The modifier rect object
   */
  function includeScroll(rect, element) {
    var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var scrollTop = getScroll(element, 'top');
    var scrollLeft = getScroll(element, 'left');
    var modifier = subtract ? -1 : 1;
    rect.top += scrollTop * modifier;
    rect.bottom += scrollTop * modifier;
    rect.left += scrollLeft * modifier;
    rect.right += scrollLeft * modifier;
    return rect;
  }

  /*
   * Helper to detect borders of a given element
   * @method
   * @memberof Popper.Utils
   * @param {CSSStyleDeclaration} styles
   * Result of `getStyleComputedProperty` on the given element
   * @param {String} axis - `x` or `y`
   * @return {number} borders - The borders size of the given axis
   */

  function getBordersSize(styles, axis) {
    var sideA = axis === 'x' ? 'Left' : 'Top';
    var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

    return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
  }

  function getSize(axis, body, html, computedStyle) {
    return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
  }

  function getWindowSizes(document) {
    var body = document.body;
    var html = document.documentElement;
    var computedStyle = isIE(10) && getComputedStyle(html);

    return {
      height: getSize('Height', body, html, computedStyle),
      width: getSize('Width', body, html, computedStyle)
    };
  }

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();





  var defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  /**
   * Given element offsets, generate an output similar to getBoundingClientRect
   * @method
   * @memberof Popper.Utils
   * @argument {Object} offsets
   * @returns {Object} ClientRect like output
   */
  function getClientRect(offsets) {
    return _extends({}, offsets, {
      right: offsets.left + offsets.width,
      bottom: offsets.top + offsets.height
    });
  }

  /**
   * Get bounding client rect of given element
   * @method
   * @memberof Popper.Utils
   * @param {HTMLElement} element
   * @return {Object} client rect
   */
  function getBoundingClientRect(element) {
    var rect = {};

    // IE10 10 FIX: Please, don't ask, the element isn't
    // considered in DOM in some circumstances...
    // This isn't reproducible in IE10 compatibility mode of IE11
    try {
      if (isIE(10)) {
        rect = element.getBoundingClientRect();
        var scrollTop = getScroll(element, 'top');
        var scrollLeft = getScroll(element, 'left');
        rect.top += scrollTop;
        rect.left += scrollLeft;
        rect.bottom += scrollTop;
        rect.right += scrollLeft;
      } else {
        rect = element.getBoundingClientRect();
      }
    } catch (e) {}

    var result = {
      left: rect.left,
      top: rect.top,
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    };

    // subtract scrollbar size from sizes
    var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
    var width = sizes.width || element.clientWidth || result.right - result.left;
    var height = sizes.height || element.clientHeight || result.bottom - result.top;

    var horizScrollbar = element.offsetWidth - width;
    var vertScrollbar = element.offsetHeight - height;

    // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
    // we make this check conditional for performance reasons
    if (horizScrollbar || vertScrollbar) {
      var styles = getStyleComputedProperty(element);
      horizScrollbar -= getBordersSize(styles, 'x');
      vertScrollbar -= getBordersSize(styles, 'y');

      result.width -= horizScrollbar;
      result.height -= vertScrollbar;
    }

    return getClientRect(result);
  }

  function getOffsetRectRelativeToArbitraryNode(children, parent) {
    var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var isIE10 = isIE(10);
    var isHTML = parent.nodeName === 'HTML';
    var childrenRect = getBoundingClientRect(children);
    var parentRect = getBoundingClientRect(parent);
    var scrollParent = getScrollParent(children);

    var styles = getStyleComputedProperty(parent);
    var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
    var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

    // In cases where the parent is fixed, we must ignore negative scroll in offset calc
    if (fixedPosition && isHTML) {
      parentRect.top = Math.max(parentRect.top, 0);
      parentRect.left = Math.max(parentRect.left, 0);
    }
    var offsets = getClientRect({
      top: childrenRect.top - parentRect.top - borderTopWidth,
      left: childrenRect.left - parentRect.left - borderLeftWidth,
      width: childrenRect.width,
      height: childrenRect.height
    });
    offsets.marginTop = 0;
    offsets.marginLeft = 0;

    // Subtract margins of documentElement in case it's being used as parent
    // we do this only on HTML because it's the only element that behaves
    // differently when margins are applied to it. The margins are included in
    // the box of the documentElement, in the other cases not.
    if (!isIE10 && isHTML) {
      var marginTop = parseFloat(styles.marginTop, 10);
      var marginLeft = parseFloat(styles.marginLeft, 10);

      offsets.top -= borderTopWidth - marginTop;
      offsets.bottom -= borderTopWidth - marginTop;
      offsets.left -= borderLeftWidth - marginLeft;
      offsets.right -= borderLeftWidth - marginLeft;

      // Attach marginTop and marginLeft because in some circumstances we may need them
      offsets.marginTop = marginTop;
      offsets.marginLeft = marginLeft;
    }

    if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
      offsets = includeScroll(offsets, parent);
    }

    return offsets;
  }

  function getViewportOffsetRectRelativeToArtbitraryNode(element) {
    var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var html = element.ownerDocument.documentElement;
    var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
    var width = Math.max(html.clientWidth, window.innerWidth || 0);
    var height = Math.max(html.clientHeight, window.innerHeight || 0);

    var scrollTop = !excludeScroll ? getScroll(html) : 0;
    var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

    var offset = {
      top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
      left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
      width: width,
      height: height
    };

    return getClientRect(offset);
  }

  /**
   * Check if the given element is fixed or is inside a fixed parent
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @argument {Element} customContainer
   * @returns {Boolean} answer to "isFixed?"
   */
  function isFixed(element) {
    var nodeName = element.nodeName;
    if (nodeName === 'BODY' || nodeName === 'HTML') {
      return false;
    }
    if (getStyleComputedProperty(element, 'position') === 'fixed') {
      return true;
    }
    return isFixed(getParentNode(element));
  }

  /**
   * Finds the first parent of an element that has a transformed property defined
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Element} first transformed parent or documentElement
   */

  function getFixedPositionOffsetParent(element) {
    // This check is needed to avoid errors in case one of the elements isn't defined for any reason
    if (!element || !element.parentElement || isIE()) {
      return document.documentElement;
    }
    var el = element.parentElement;
    while (el && getStyleComputedProperty(el, 'transform') === 'none') {
      el = el.parentElement;
    }
    return el || document.documentElement;
  }

  /**
   * Computed the boundaries limits and return them
   * @method
   * @memberof Popper.Utils
   * @param {HTMLElement} popper
   * @param {HTMLElement} reference
   * @param {number} padding
   * @param {HTMLElement} boundariesElement - Element used to define the boundaries
   * @param {Boolean} fixedPosition - Is in fixed position mode
   * @returns {Object} Coordinates of the boundaries
   */
  function getBoundaries(popper, reference, padding, boundariesElement) {
    var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    // NOTE: 1 DOM access here

    var boundaries = { top: 0, left: 0 };
    var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);

    // Handle viewport case
    if (boundariesElement === 'viewport') {
      boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
    } else {
      // Handle other cases based on DOM element used as boundaries
      var boundariesNode = void 0;
      if (boundariesElement === 'scrollParent') {
        boundariesNode = getScrollParent(getParentNode(reference));
        if (boundariesNode.nodeName === 'BODY') {
          boundariesNode = popper.ownerDocument.documentElement;
        }
      } else if (boundariesElement === 'window') {
        boundariesNode = popper.ownerDocument.documentElement;
      } else {
        boundariesNode = boundariesElement;
      }

      var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

      // In case of HTML, we need a different computation
      if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
        var _getWindowSizes = getWindowSizes(popper.ownerDocument),
            height = _getWindowSizes.height,
            width = _getWindowSizes.width;

        boundaries.top += offsets.top - offsets.marginTop;
        boundaries.bottom = height + offsets.top;
        boundaries.left += offsets.left - offsets.marginLeft;
        boundaries.right = width + offsets.left;
      } else {
        // for all the other DOM elements, this one is good
        boundaries = offsets;
      }
    }

    // Add paddings
    padding = padding || 0;
    var isPaddingNumber = typeof padding === 'number';
    boundaries.left += isPaddingNumber ? padding : padding.left || 0;
    boundaries.top += isPaddingNumber ? padding : padding.top || 0;
    boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
    boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

    return boundaries;
  }

  function getArea(_ref) {
    var width = _ref.width,
        height = _ref.height;

    return width * height;
  }

  /**
   * Utility used to transform the `auto` placement to the placement with more
   * available space.
   * @method
   * @memberof Popper.Utils
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
    var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    if (placement.indexOf('auto') === -1) {
      return placement;
    }

    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

    var rects = {
      top: {
        width: boundaries.width,
        height: refRect.top - boundaries.top
      },
      right: {
        width: boundaries.right - refRect.right,
        height: boundaries.height
      },
      bottom: {
        width: boundaries.width,
        height: boundaries.bottom - refRect.bottom
      },
      left: {
        width: refRect.left - boundaries.left,
        height: boundaries.height
      }
    };

    var sortedAreas = Object.keys(rects).map(function (key) {
      return _extends({
        key: key
      }, rects[key], {
        area: getArea(rects[key])
      });
    }).sort(function (a, b) {
      return b.area - a.area;
    });

    var filteredAreas = sortedAreas.filter(function (_ref2) {
      var width = _ref2.width,
          height = _ref2.height;
      return width >= popper.clientWidth && height >= popper.clientHeight;
    });

    var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

    var variation = placement.split('-')[1];

    return computedPlacement + (variation ? '-' + variation : '');
  }

  /**
   * Get offsets to the reference element
   * @method
   * @memberof Popper.Utils
   * @param {Object} state
   * @param {Element} popper - the popper element
   * @param {Element} reference - the reference element (the popper will be relative to this)
   * @param {Element} fixedPosition - is in fixed position mode
   * @returns {Object} An object containing the offsets which will be applied to the popper
   */
  function getReferenceOffsets(state, popper, reference) {
    var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
    return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
  }

  /**
   * Get the outer sizes of the given element (offset size + margins)
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element
   * @returns {Object} object containing width and height properties
   */
  function getOuterSizes(element) {
    var window = element.ownerDocument.defaultView;
    var styles = window.getComputedStyle(element);
    var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
    var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
    var result = {
      width: element.offsetWidth + y,
      height: element.offsetHeight + x
    };
    return result;
  }

  /**
   * Get the opposite placement of the given one
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement
   * @returns {String} flipped placement
   */
  function getOppositePlacement(placement) {
    var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash[matched];
    });
  }

  /**
   * Get offsets to the popper
   * @method
   * @memberof Popper.Utils
   * @param {Object} position - CSS position the Popper will get applied
   * @param {HTMLElement} popper - the popper element
   * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
   * @param {String} placement - one of the valid placement options
   * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
   */
  function getPopperOffsets(popper, referenceOffsets, placement) {
    placement = placement.split('-')[0];

    // Get popper node sizes
    var popperRect = getOuterSizes(popper);

    // Add position, width and height to our offsets object
    var popperOffsets = {
      width: popperRect.width,
      height: popperRect.height
    };

    // depending by the popper placement we have to compute its offsets slightly differently
    var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
    var mainSide = isHoriz ? 'top' : 'left';
    var secondarySide = isHoriz ? 'left' : 'top';
    var measurement = isHoriz ? 'height' : 'width';
    var secondaryMeasurement = !isHoriz ? 'height' : 'width';

    popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
    if (placement === secondarySide) {
      popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
    } else {
      popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
    }

    return popperOffsets;
  }

  /**
   * Mimics the `find` method of Array
   * @method
   * @memberof Popper.Utils
   * @argument {Array} arr
   * @argument prop
   * @argument value
   * @returns index or -1
   */
  function find(arr, check) {
    // use native find if supported
    if (Array.prototype.find) {
      return arr.find(check);
    }

    // use `filter` to obtain the same behavior of `find`
    return arr.filter(check)[0];
  }

  /**
   * Return the index of the matching object
   * @method
   * @memberof Popper.Utils
   * @argument {Array} arr
   * @argument prop
   * @argument value
   * @returns index or -1
   */
  function findIndex(arr, prop, value) {
    // use native findIndex if supported
    if (Array.prototype.findIndex) {
      return arr.findIndex(function (cur) {
        return cur[prop] === value;
      });
    }

    // use `find` + `indexOf` if `findIndex` isn't supported
    var match = find(arr, function (obj) {
      return obj[prop] === value;
    });
    return arr.indexOf(match);
  }

  /**
   * Loop trough the list of modifiers and run them in order,
   * each of them will then edit the data object.
   * @method
   * @memberof Popper.Utils
   * @param {dataObject} data
   * @param {Array} modifiers
   * @param {String} ends - Optional modifier name used as stopper
   * @returns {dataObject}
   */
  function runModifiers(modifiers, data, ends) {
    var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

    modifiersToRun.forEach(function (modifier) {
      if (modifier['function']) {
        // eslint-disable-line dot-notation
        console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
      }
      var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
      if (modifier.enabled && isFunction(fn)) {
        // Add properties to offsets to make them a complete clientRect object
        // we do this before each modifier to make sure the previous one doesn't
        // mess with these values
        data.offsets.popper = getClientRect(data.offsets.popper);
        data.offsets.reference = getClientRect(data.offsets.reference);

        data = fn(data, modifier);
      }
    });

    return data;
  }

  /**
   * Updates the position of the popper, computing the new offsets and applying
   * the new style.<br />
   * Prefer `scheduleUpdate` over `update` because of performance reasons.
   * @method
   * @memberof Popper
   */
  function update() {
    // if popper is destroyed, don't perform any further update
    if (this.state.isDestroyed) {
      return;
    }

    var data = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: false,
      offsets: {}
    };

    // compute reference element offsets
    data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

    // compute auto placement, store placement inside the data object,
    // modifiers will be able to edit `placement` if needed
    // and refer to originalPlacement to know the original value
    data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

    // store the computed placement inside `originalPlacement`
    data.originalPlacement = data.placement;

    data.positionFixed = this.options.positionFixed;

    // compute the popper offsets
    data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

    data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

    // run the modifiers
    data = runModifiers(this.modifiers, data);

    // the first `update` will call `onCreate` callback
    // the other ones will call `onUpdate` callback
    if (!this.state.isCreated) {
      this.state.isCreated = true;
      this.options.onCreate(data);
    } else {
      this.options.onUpdate(data);
    }
  }

  /**
   * Helper used to know if the given modifier is enabled.
   * @method
   * @memberof Popper.Utils
   * @returns {Boolean}
   */
  function isModifierEnabled(modifiers, modifierName) {
    return modifiers.some(function (_ref) {
      var name = _ref.name,
          enabled = _ref.enabled;
      return enabled && name === modifierName;
    });
  }

  /**
   * Get the prefixed supported property name
   * @method
   * @memberof Popper.Utils
   * @argument {String} property (camelCase)
   * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
   */
  function getSupportedPropertyName(property) {
    var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
    var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

    for (var i = 0; i < prefixes.length; i++) {
      var prefix = prefixes[i];
      var toCheck = prefix ? '' + prefix + upperProp : property;
      if (typeof document.body.style[toCheck] !== 'undefined') {
        return toCheck;
      }
    }
    return null;
  }

  /**
   * Destroys the popper.
   * @method
   * @memberof Popper
   */
  function destroy() {
    this.state.isDestroyed = true;

    // touch DOM only if `applyStyle` modifier is enabled
    if (isModifierEnabled(this.modifiers, 'applyStyle')) {
      this.popper.removeAttribute('x-placement');
      this.popper.style.position = '';
      this.popper.style.top = '';
      this.popper.style.left = '';
      this.popper.style.right = '';
      this.popper.style.bottom = '';
      this.popper.style.willChange = '';
      this.popper.style[getSupportedPropertyName('transform')] = '';
    }

    this.disableEventListeners();

    // remove the popper if user explicity asked for the deletion on destroy
    // do not use `remove` because IE11 doesn't support it
    if (this.options.removeOnDestroy) {
      this.popper.parentNode.removeChild(this.popper);
    }
    return this;
  }

  /**
   * Get the window associated with the element
   * @argument {Element} element
   * @returns {Window}
   */
  function getWindow(element) {
    var ownerDocument = element.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }

  function attachToScrollParents(scrollParent, event, callback, scrollParents) {
    var isBody = scrollParent.nodeName === 'BODY';
    var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
    target.addEventListener(event, callback, { passive: true });

    if (!isBody) {
      attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
    }
    scrollParents.push(target);
  }

  /**
   * Setup needed event listeners used to update the popper position
   * @method
   * @memberof Popper.Utils
   * @private
   */
  function setupEventListeners(reference, options, state, updateBound) {
    // Resize event listener on window
    state.updateBound = updateBound;
    getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

    // Scroll event listener on scroll parents
    var scrollElement = getScrollParent(reference);
    attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
    state.scrollElement = scrollElement;
    state.eventsEnabled = true;

    return state;
  }

  /**
   * It will add resize/scroll events and start recalculating
   * position of the popper element when they are triggered.
   * @method
   * @memberof Popper
   */
  function enableEventListeners() {
    if (!this.state.eventsEnabled) {
      this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
    }
  }

  /**
   * Remove event listeners used to update the popper position
   * @method
   * @memberof Popper.Utils
   * @private
   */
  function removeEventListeners(reference, state) {
    // Remove resize event listener on window
    getWindow(reference).removeEventListener('resize', state.updateBound);

    // Remove scroll event listener on scroll parents
    state.scrollParents.forEach(function (target) {
      target.removeEventListener('scroll', state.updateBound);
    });

    // Reset state
    state.updateBound = null;
    state.scrollParents = [];
    state.scrollElement = null;
    state.eventsEnabled = false;
    return state;
  }

  /**
   * It will remove resize/scroll events and won't recalculate popper position
   * when they are triggered. It also won't trigger `onUpdate` callback anymore,
   * unless you call `update` method manually.
   * @method
   * @memberof Popper
   */
  function disableEventListeners() {
    if (this.state.eventsEnabled) {
      cancelAnimationFrame(this.scheduleUpdate);
      this.state = removeEventListeners(this.reference, this.state);
    }
  }

  /**
   * Tells if a given input is a number
   * @method
   * @memberof Popper.Utils
   * @param {*} input to check
   * @return {Boolean}
   */
  function isNumeric(n) {
    return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
  }

  /**
   * Set the style to the given popper
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element - Element to apply the style to
   * @argument {Object} styles
   * Object with a list of properties and values which will be applied to the element
   */
  function setStyles(element, styles) {
    Object.keys(styles).forEach(function (prop) {
      var unit = '';
      // add unit if the value is numeric and is one of the following
      if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
        unit = 'px';
      }
      element.style[prop] = styles[prop] + unit;
    });
  }

  /**
   * Set the attributes to the given popper
   * @method
   * @memberof Popper.Utils
   * @argument {Element} element - Element to apply the attributes to
   * @argument {Object} styles
   * Object with a list of properties and values which will be applied to the element
   */
  function setAttributes(element, attributes) {
    Object.keys(attributes).forEach(function (prop) {
      var value = attributes[prop];
      if (value !== false) {
        element.setAttribute(prop, attributes[prop]);
      } else {
        element.removeAttribute(prop);
      }
    });
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} data.styles - List of style properties - values to apply to popper element
   * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The same data object
   */
  function applyStyle(data) {
    // any property present in `data.styles` will be applied to the popper,
    // in this way we can make the 3rd party modifiers add custom styles to it
    // Be aware, modifiers could override the properties defined in the previous
    // lines of this modifier!
    setStyles(data.instance.popper, data.styles);

    // any property present in `data.attributes` will be applied to the popper,
    // they will be set as HTML attributes of the element
    setAttributes(data.instance.popper, data.attributes);

    // if arrowElement is defined and arrowStyles has some properties
    if (data.arrowElement && Object.keys(data.arrowStyles).length) {
      setStyles(data.arrowElement, data.arrowStyles);
    }

    return data;
  }

  /**
   * Set the x-placement attribute before everything else because it could be used
   * to add margins to the popper margins needs to be calculated to get the
   * correct popper offsets.
   * @method
   * @memberof Popper.modifiers
   * @param {HTMLElement} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper
   * @param {Object} options - Popper.js options
   */
  function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
    // compute reference element offsets
    var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

    // compute auto placement, store placement inside the data object,
    // modifiers will be able to edit `placement` if needed
    // and refer to originalPlacement to know the original value
    var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

    popper.setAttribute('x-placement', placement);

    // Apply `position` to popper before anything else because
    // without the position applied we can't guarantee correct computations
    setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

    return options;
  }

  /**
   * @function
   * @memberof Popper.Utils
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Boolean} shouldRound - If the offsets should be rounded at all
   * @returns {Object} The popper's position offsets rounded
   *
   * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
   * good as it can be within reason.
   * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
   *
   * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
   * as well on High DPI screens).
   *
   * Firefox prefers no rounding for positioning and does not have blurriness on
   * high DPI screens.
   *
   * Only horizontal placement and left/right values need to be considered.
   */
  function getRoundedOffsets(data, shouldRound) {
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;


    var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
    var isVariation = data.placement.indexOf('-') !== -1;
    var sameWidthOddness = reference.width % 2 === popper.width % 2;
    var bothOddWidth = reference.width % 2 === 1 && popper.width % 2 === 1;
    var noRound = function noRound(v) {
      return v;
    };

    var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthOddness ? Math.round : Math.floor;
    var verticalToInteger = !shouldRound ? noRound : Math.round;

    return {
      left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
      top: verticalToInteger(popper.top),
      bottom: verticalToInteger(popper.bottom),
      right: horizontalToInteger(popper.right)
    };
  }

  var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function computeStyle(data, options) {
    var x = options.x,
        y = options.y;
    var popper = data.offsets.popper;

    // Remove this legacy support in Popper.js v2

    var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
      return modifier.name === 'applyStyle';
    }).gpuAcceleration;
    if (legacyGpuAccelerationOption !== undefined) {
      console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
    }
    var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

    var offsetParent = getOffsetParent(data.instance.popper);
    var offsetParentRect = getBoundingClientRect(offsetParent);

    // Styles
    var styles = {
      position: popper.position
    };

    var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

    var sideA = x === 'bottom' ? 'top' : 'bottom';
    var sideB = y === 'right' ? 'left' : 'right';

    // if gpuAcceleration is set to `true` and transform is supported,
    //  we use `translate3d` to apply the position to the popper we
    // automatically use the supported prefixed version if needed
    var prefixedProperty = getSupportedPropertyName('transform');

    // now, let's make a step back and look at this code closely (wtf?)
    // If the content of the popper grows once it's been positioned, it
    // may happen that the popper gets misplaced because of the new content
    // overflowing its reference element
    // To avoid this problem, we provide two options (x and y), which allow
    // the consumer to define the offset origin.
    // If we position a popper on top of a reference element, we can set
    // `x` to `top` to make the popper grow towards its top instead of
    // its bottom.
    var left = void 0,
        top = void 0;
    if (sideA === 'bottom') {
      // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
      // and not the bottom of the html element
      if (offsetParent.nodeName === 'HTML') {
        top = -offsetParent.clientHeight + offsets.bottom;
      } else {
        top = -offsetParentRect.height + offsets.bottom;
      }
    } else {
      top = offsets.top;
    }
    if (sideB === 'right') {
      if (offsetParent.nodeName === 'HTML') {
        left = -offsetParent.clientWidth + offsets.right;
      } else {
        left = -offsetParentRect.width + offsets.right;
      }
    } else {
      left = offsets.left;
    }
    if (gpuAcceleration && prefixedProperty) {
      styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
      styles[sideA] = 0;
      styles[sideB] = 0;
      styles.willChange = 'transform';
    } else {
      // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
      var invertTop = sideA === 'bottom' ? -1 : 1;
      var invertLeft = sideB === 'right' ? -1 : 1;
      styles[sideA] = top * invertTop;
      styles[sideB] = left * invertLeft;
      styles.willChange = sideA + ', ' + sideB;
    }

    // Attributes
    var attributes = {
      'x-placement': data.placement
    };

    // Update `data` attributes, styles and arrowStyles
    data.attributes = _extends({}, attributes, data.attributes);
    data.styles = _extends({}, styles, data.styles);
    data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

    return data;
  }

  /**
   * Helper used to know if the given modifier depends from another one.<br />
   * It checks if the needed modifier is listed and enabled.
   * @method
   * @memberof Popper.Utils
   * @param {Array} modifiers - list of modifiers
   * @param {String} requestingName - name of requesting modifier
   * @param {String} requestedName - name of requested modifier
   * @returns {Boolean}
   */
  function isModifierRequired(modifiers, requestingName, requestedName) {
    var requesting = find(modifiers, function (_ref) {
      var name = _ref.name;
      return name === requestingName;
    });

    var isRequired = !!requesting && modifiers.some(function (modifier) {
      return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
    });

    if (!isRequired) {
      var _requesting = '`' + requestingName + '`';
      var requested = '`' + requestedName + '`';
      console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
    }
    return isRequired;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function arrow(data, options) {
    var _data$offsets$arrow;

    // arrow depends on keepTogether in order to work
    if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
      return data;
    }

    var arrowElement = options.element;

    // if arrowElement is a string, suppose it's a CSS selector
    if (typeof arrowElement === 'string') {
      arrowElement = data.instance.popper.querySelector(arrowElement);

      // if arrowElement is not found, don't run the modifier
      if (!arrowElement) {
        return data;
      }
    } else {
      // if the arrowElement isn't a query selector we must check that the
      // provided DOM node is child of its popper node
      if (!data.instance.popper.contains(arrowElement)) {
        console.warn('WARNING: `arrow.element` must be child of its popper element!');
        return data;
      }
    }

    var placement = data.placement.split('-')[0];
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var isVertical = ['left', 'right'].indexOf(placement) !== -1;

    var len = isVertical ? 'height' : 'width';
    var sideCapitalized = isVertical ? 'Top' : 'Left';
    var side = sideCapitalized.toLowerCase();
    var altSide = isVertical ? 'left' : 'top';
    var opSide = isVertical ? 'bottom' : 'right';
    var arrowElementSize = getOuterSizes(arrowElement)[len];

    //
    // extends keepTogether behavior making sure the popper and its
    // reference have enough pixels in conjunction
    //

    // top/left side
    if (reference[opSide] - arrowElementSize < popper[side]) {
      data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
    }
    // bottom/right side
    if (reference[side] + arrowElementSize > popper[opSide]) {
      data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
    }
    data.offsets.popper = getClientRect(data.offsets.popper);

    // compute center of the popper
    var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

    // Compute the sideValue using the updated popper offsets
    // take popper margin in account because we don't have this info available
    var css = getStyleComputedProperty(data.instance.popper);
    var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
    var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
    var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

    // prevent arrowElement from being placed not contiguously to its popper
    sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

    data.arrowElement = arrowElement;
    data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

    return data;
  }

  /**
   * Get the opposite placement variation of the given one
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement variation
   * @returns {String} flipped placement variation
   */
  function getOppositeVariation(variation) {
    if (variation === 'end') {
      return 'start';
    } else if (variation === 'start') {
      return 'end';
    }
    return variation;
  }

  /**
   * List of accepted placements to use as values of the `placement` option.<br />
   * Valid placements are:
   * - `auto`
   * - `top`
   * - `right`
   * - `bottom`
   * - `left`
   *
   * Each placement can have a variation from this list:
   * - `-start`
   * - `-end`
   *
   * Variations are interpreted easily if you think of them as the left to right
   * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
   * is right.<br />
   * Vertically (`left` and `right`), `start` is top and `end` is bottom.
   *
   * Some valid examples are:
   * - `top-end` (on top of reference, right aligned)
   * - `right-start` (on right of reference, top aligned)
   * - `bottom` (on bottom, centered)
   * - `auto-end` (on the side with more space available, alignment depends by placement)
   *
   * @static
   * @type {Array}
   * @enum {String}
   * @readonly
   * @method placements
   * @memberof Popper
   */
  var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

  // Get rid of `auto` `auto-start` and `auto-end`
  var validPlacements = placements.slice(3);

  /**
   * Given an initial placement, returns all the subsequent placements
   * clockwise (or counter-clockwise).
   *
   * @method
   * @memberof Popper.Utils
   * @argument {String} placement - A valid placement (it accepts variations)
   * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
   * @returns {Array} placements including their variations
   */
  function clockwise(placement) {
    var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var index = validPlacements.indexOf(placement);
    var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
    return counter ? arr.reverse() : arr;
  }

  var BEHAVIORS = {
    FLIP: 'flip',
    CLOCKWISE: 'clockwise',
    COUNTERCLOCKWISE: 'counterclockwise'
  };

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function flip(data, options) {
    // if `inner` modifier is enabled, we can't use the `flip` modifier
    if (isModifierEnabled(data.instance.modifiers, 'inner')) {
      return data;
    }

    if (data.flipped && data.placement === data.originalPlacement) {
      // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
      return data;
    }

    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

    var placement = data.placement.split('-')[0];
    var placementOpposite = getOppositePlacement(placement);
    var variation = data.placement.split('-')[1] || '';

    var flipOrder = [];

    switch (options.behavior) {
      case BEHAVIORS.FLIP:
        flipOrder = [placement, placementOpposite];
        break;
      case BEHAVIORS.CLOCKWISE:
        flipOrder = clockwise(placement);
        break;
      case BEHAVIORS.COUNTERCLOCKWISE:
        flipOrder = clockwise(placement, true);
        break;
      default:
        flipOrder = options.behavior;
    }

    flipOrder.forEach(function (step, index) {
      if (placement !== step || flipOrder.length === index + 1) {
        return data;
      }

      placement = data.placement.split('-')[0];
      placementOpposite = getOppositePlacement(placement);

      var popperOffsets = data.offsets.popper;
      var refOffsets = data.offsets.reference;

      // using floor because the reference offsets may contain decimals we are not going to consider here
      var floor = Math.floor;
      var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

      var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
      var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
      var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
      var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

      var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

      // flip the variation if required
      var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
      var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

      if (overlapsRef || overflowsBoundaries || flippedVariation) {
        // this boolean to detect any flip loop
        data.flipped = true;

        if (overlapsRef || overflowsBoundaries) {
          placement = flipOrder[index + 1];
        }

        if (flippedVariation) {
          variation = getOppositeVariation(variation);
        }

        data.placement = placement + (variation ? '-' + variation : '');

        // this object contains `position`, we want to preserve it along with
        // any additional property we may add in the future
        data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

        data = runModifiers(data.instance.modifiers, data, 'flip');
      }
    });
    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function keepTogether(data) {
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var placement = data.placement.split('-')[0];
    var floor = Math.floor;
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var side = isVertical ? 'right' : 'bottom';
    var opSide = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    if (popper[side] < floor(reference[opSide])) {
      data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
    }
    if (popper[opSide] > floor(reference[side])) {
      data.offsets.popper[opSide] = floor(reference[side]);
    }

    return data;
  }

  /**
   * Converts a string containing value + unit into a px value number
   * @function
   * @memberof {modifiers~offset}
   * @private
   * @argument {String} str - Value + unit string
   * @argument {String} measurement - `height` or `width`
   * @argument {Object} popperOffsets
   * @argument {Object} referenceOffsets
   * @returns {Number|String}
   * Value in pixels, or original string if no values were extracted
   */
  function toValue(str, measurement, popperOffsets, referenceOffsets) {
    // separate value from unit
    var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
    var value = +split[1];
    var unit = split[2];

    // If it's not a number it's an operator, I guess
    if (!value) {
      return str;
    }

    if (unit.indexOf('%') === 0) {
      var element = void 0;
      switch (unit) {
        case '%p':
          element = popperOffsets;
          break;
        case '%':
        case '%r':
        default:
          element = referenceOffsets;
      }

      var rect = getClientRect(element);
      return rect[measurement] / 100 * value;
    } else if (unit === 'vh' || unit === 'vw') {
      // if is a vh or vw, we calculate the size based on the viewport
      var size = void 0;
      if (unit === 'vh') {
        size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
      } else {
        size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
      }
      return size / 100 * value;
    } else {
      // if is an explicit pixel unit, we get rid of the unit and keep the value
      // if is an implicit unit, it's px, and we return just the value
      return value;
    }
  }

  /**
   * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
   * @function
   * @memberof {modifiers~offset}
   * @private
   * @argument {String} offset
   * @argument {Object} popperOffsets
   * @argument {Object} referenceOffsets
   * @argument {String} basePlacement
   * @returns {Array} a two cells array with x and y offsets in numbers
   */
  function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
    var offsets = [0, 0];

    // Use height if placement is left or right and index is 0 otherwise use width
    // in this way the first offset will use an axis and the second one
    // will use the other one
    var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

    // Split the offset string to obtain a list of values and operands
    // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
    var fragments = offset.split(/(\+|\-)/).map(function (frag) {
      return frag.trim();
    });

    // Detect if the offset string contains a pair of values or a single one
    // they could be separated by comma or space
    var divider = fragments.indexOf(find(fragments, function (frag) {
      return frag.search(/,|\s/) !== -1;
    }));

    if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
      console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
    }

    // If divider is found, we divide the list of values and operands to divide
    // them by ofset X and Y.
    var splitRegex = /\s*,\s*|\s+/;
    var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

    // Convert the values with units to absolute pixels to allow our computations
    ops = ops.map(function (op, index) {
      // Most of the units rely on the orientation of the popper
      var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
      var mergeWithPrevious = false;
      return op
      // This aggregates any `+` or `-` sign that aren't considered operators
      // e.g.: 10 + +5 => [10, +, +5]
      .reduce(function (a, b) {
        if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
          a[a.length - 1] = b;
          mergeWithPrevious = true;
          return a;
        } else if (mergeWithPrevious) {
          a[a.length - 1] += b;
          mergeWithPrevious = false;
          return a;
        } else {
          return a.concat(b);
        }
      }, [])
      // Here we convert the string values into number values (in px)
      .map(function (str) {
        return toValue(str, measurement, popperOffsets, referenceOffsets);
      });
    });

    // Loop trough the offsets arrays and execute the operations
    ops.forEach(function (op, index) {
      op.forEach(function (frag, index2) {
        if (isNumeric(frag)) {
          offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
        }
      });
    });
    return offsets;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @argument {Number|String} options.offset=0
   * The offset value as described in the modifier description
   * @returns {Object} The data object, properly modified
   */
  function offset(data, _ref) {
    var offset = _ref.offset;
    var placement = data.placement,
        _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var basePlacement = placement.split('-')[0];

    var offsets = void 0;
    if (isNumeric(+offset)) {
      offsets = [+offset, 0];
    } else {
      offsets = parseOffset(offset, popper, reference, basePlacement);
    }

    if (basePlacement === 'left') {
      popper.top += offsets[0];
      popper.left -= offsets[1];
    } else if (basePlacement === 'right') {
      popper.top += offsets[0];
      popper.left += offsets[1];
    } else if (basePlacement === 'top') {
      popper.left += offsets[0];
      popper.top -= offsets[1];
    } else if (basePlacement === 'bottom') {
      popper.left += offsets[0];
      popper.top += offsets[1];
    }

    data.popper = popper;
    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function preventOverflow(data, options) {
    var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

    // If offsetParent is the reference element, we really want to
    // go one step up and use the next offsetParent as reference to
    // avoid to make this modifier completely useless and look like broken
    if (data.instance.reference === boundariesElement) {
      boundariesElement = getOffsetParent(boundariesElement);
    }

    // NOTE: DOM access here
    // resets the popper's position so that the document size can be calculated excluding
    // the size of the popper element itself
    var transformProp = getSupportedPropertyName('transform');
    var popperStyles = data.instance.popper.style; // assignment to help minification
    var top = popperStyles.top,
        left = popperStyles.left,
        transform = popperStyles[transformProp];

    popperStyles.top = '';
    popperStyles.left = '';
    popperStyles[transformProp] = '';

    var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

    // NOTE: DOM access here
    // restores the original style properties after the offsets have been computed
    popperStyles.top = top;
    popperStyles.left = left;
    popperStyles[transformProp] = transform;

    options.boundaries = boundaries;

    var order = options.priority;
    var popper = data.offsets.popper;

    var check = {
      primary: function primary(placement) {
        var value = popper[placement];
        if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
          value = Math.max(popper[placement], boundaries[placement]);
        }
        return defineProperty({}, placement, value);
      },
      secondary: function secondary(placement) {
        var mainSide = placement === 'right' ? 'left' : 'top';
        var value = popper[mainSide];
        if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
          value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
        }
        return defineProperty({}, mainSide, value);
      }
    };

    order.forEach(function (placement) {
      var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
      popper = _extends({}, popper, check[side](placement));
    });

    data.offsets.popper = popper;

    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function shift(data) {
    var placement = data.placement;
    var basePlacement = placement.split('-')[0];
    var shiftvariation = placement.split('-')[1];

    // if shift shiftvariation is specified, run the modifier
    if (shiftvariation) {
      var _data$offsets = data.offsets,
          reference = _data$offsets.reference,
          popper = _data$offsets.popper;

      var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
      var side = isVertical ? 'left' : 'top';
      var measurement = isVertical ? 'width' : 'height';

      var shiftOffsets = {
        start: defineProperty({}, side, reference[side]),
        end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
      };

      data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
    }

    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by update method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function hide(data) {
    if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
      return data;
    }

    var refRect = data.offsets.reference;
    var bound = find(data.instance.modifiers, function (modifier) {
      return modifier.name === 'preventOverflow';
    }).boundaries;

    if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
      // Avoid unnecessary DOM access if visibility hasn't changed
      if (data.hide === true) {
        return data;
      }

      data.hide = true;
      data.attributes['x-out-of-boundaries'] = '';
    } else {
      // Avoid unnecessary DOM access if visibility hasn't changed
      if (data.hide === false) {
        return data;
      }

      data.hide = false;
      data.attributes['x-out-of-boundaries'] = false;
    }

    return data;
  }

  /**
   * @function
   * @memberof Modifiers
   * @argument {Object} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {Object} The data object, properly modified
   */
  function inner(data) {
    var placement = data.placement;
    var basePlacement = placement.split('-')[0];
    var _data$offsets = data.offsets,
        popper = _data$offsets.popper,
        reference = _data$offsets.reference;

    var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

    var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

    popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

    data.placement = getOppositePlacement(placement);
    data.offsets.popper = getClientRect(popper);

    return data;
  }

  /**
   * Modifier function, each modifier can have a function of this type assigned
   * to its `fn` property.<br />
   * These functions will be called on each update, this means that you must
   * make sure they are performant enough to avoid performance bottlenecks.
   *
   * @function ModifierFn
   * @argument {dataObject} data - The data object generated by `update` method
   * @argument {Object} options - Modifiers configuration and options
   * @returns {dataObject} The data object, properly modified
   */

  /**
   * Modifiers are plugins used to alter the behavior of your poppers.<br />
   * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
   * needed by the library.
   *
   * Usually you don't want to override the `order`, `fn` and `onLoad` props.
   * All the other properties are configurations that could be tweaked.
   * @namespace modifiers
   */
  var modifiers = {
    /**
     * Modifier used to shift the popper on the start or end of its reference
     * element.<br />
     * It will read the variation of the `placement` property.<br />
     * It can be one either `-end` or `-start`.
     * @memberof modifiers
     * @inner
     */
    shift: {
      /** @prop {number} order=100 - Index used to define the order of execution */
      order: 100,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: shift
    },

    /**
     * The `offset` modifier can shift your popper on both its axis.
     *
     * It accepts the following units:
     * - `px` or unit-less, interpreted as pixels
     * - `%` or `%r`, percentage relative to the length of the reference element
     * - `%p`, percentage relative to the length of the popper element
     * - `vw`, CSS viewport width unit
     * - `vh`, CSS viewport height unit
     *
     * For length is intended the main axis relative to the placement of the popper.<br />
     * This means that if the placement is `top` or `bottom`, the length will be the
     * `width`. In case of `left` or `right`, it will be the `height`.
     *
     * You can provide a single value (as `Number` or `String`), or a pair of values
     * as `String` divided by a comma or one (or more) white spaces.<br />
     * The latter is a deprecated method because it leads to confusion and will be
     * removed in v2.<br />
     * Additionally, it accepts additions and subtractions between different units.
     * Note that multiplications and divisions aren't supported.
     *
     * Valid examples are:
     * ```
     * 10
     * '10%'
     * '10, 10'
     * '10%, 10'
     * '10 + 10%'
     * '10 - 5vh + 3%'
     * '-10px + 5vh, 5px - 6%'
     * ```
     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
     *
     * @memberof modifiers
     * @inner
     */
    offset: {
      /** @prop {number} order=200 - Index used to define the order of execution */
      order: 200,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: offset,
      /** @prop {Number|String} offset=0
       * The offset value as described in the modifier description
       */
      offset: 0
    },

    /**
     * Modifier used to prevent the popper from being positioned outside the boundary.
     *
     * A scenario exists where the reference itself is not within the boundaries.<br />
     * We can say it has "escaped the boundaries" — or just "escaped".<br />
     * In this case we need to decide whether the popper should either:
     *
     * - detach from the reference and remain "trapped" in the boundaries, or
     * - if it should ignore the boundary and "escape with its reference"
     *
     * When `escapeWithReference` is set to`true` and reference is completely
     * outside its boundaries, the popper will overflow (or completely leave)
     * the boundaries in order to remain attached to the edge of the reference.
     *
     * @memberof modifiers
     * @inner
     */
    preventOverflow: {
      /** @prop {number} order=300 - Index used to define the order of execution */
      order: 300,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: preventOverflow,
      /**
       * @prop {Array} [priority=['left','right','top','bottom']]
       * Popper will try to prevent overflow following these priorities by default,
       * then, it could overflow on the left and on top of the `boundariesElement`
       */
      priority: ['left', 'right', 'top', 'bottom'],
      /**
       * @prop {number} padding=5
       * Amount of pixel used to define a minimum distance between the boundaries
       * and the popper. This makes sure the popper always has a little padding
       * between the edges of its container
       */
      padding: 5,
      /**
       * @prop {String|HTMLElement} boundariesElement='scrollParent'
       * Boundaries used by the modifier. Can be `scrollParent`, `window`,
       * `viewport` or any DOM element.
       */
      boundariesElement: 'scrollParent'
    },

    /**
     * Modifier used to make sure the reference and its popper stay near each other
     * without leaving any gap between the two. Especially useful when the arrow is
     * enabled and you want to ensure that it points to its reference element.
     * It cares only about the first axis. You can still have poppers with margin
     * between the popper and its reference element.
     * @memberof modifiers
     * @inner
     */
    keepTogether: {
      /** @prop {number} order=400 - Index used to define the order of execution */
      order: 400,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: keepTogether
    },

    /**
     * This modifier is used to move the `arrowElement` of the popper to make
     * sure it is positioned between the reference element and its popper element.
     * It will read the outer size of the `arrowElement` node to detect how many
     * pixels of conjunction are needed.
     *
     * It has no effect if no `arrowElement` is provided.
     * @memberof modifiers
     * @inner
     */
    arrow: {
      /** @prop {number} order=500 - Index used to define the order of execution */
      order: 500,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: arrow,
      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
      element: '[x-arrow]'
    },

    /**
     * Modifier used to flip the popper's placement when it starts to overlap its
     * reference element.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     *
     * **NOTE:** this modifier will interrupt the current update cycle and will
     * restart it if it detects the need to flip the placement.
     * @memberof modifiers
     * @inner
     */
    flip: {
      /** @prop {number} order=600 - Index used to define the order of execution */
      order: 600,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: flip,
      /**
       * @prop {String|Array} behavior='flip'
       * The behavior used to change the popper's placement. It can be one of
       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
       * placements (with optional variations)
       */
      behavior: 'flip',
      /**
       * @prop {number} padding=5
       * The popper will flip if it hits the edges of the `boundariesElement`
       */
      padding: 5,
      /**
       * @prop {String|HTMLElement} boundariesElement='viewport'
       * The element which will define the boundaries of the popper position.
       * The popper will never be placed outside of the defined boundaries
       * (except if `keepTogether` is enabled)
       */
      boundariesElement: 'viewport'
    },

    /**
     * Modifier used to make the popper flow toward the inner of the reference element.
     * By default, when this modifier is disabled, the popper will be placed outside
     * the reference element.
     * @memberof modifiers
     * @inner
     */
    inner: {
      /** @prop {number} order=700 - Index used to define the order of execution */
      order: 700,
      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
      enabled: false,
      /** @prop {ModifierFn} */
      fn: inner
    },

    /**
     * Modifier used to hide the popper when its reference element is outside of the
     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
     * be used to hide with a CSS selector the popper when its reference is
     * out of boundaries.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     * @memberof modifiers
     * @inner
     */
    hide: {
      /** @prop {number} order=800 - Index used to define the order of execution */
      order: 800,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: hide
    },

    /**
     * Computes the style that will be applied to the popper element to gets
     * properly positioned.
     *
     * Note that this modifier will not touch the DOM, it just prepares the styles
     * so that `applyStyle` modifier can apply it. This separation is useful
     * in case you need to replace `applyStyle` with a custom implementation.
     *
     * This modifier has `850` as `order` value to maintain backward compatibility
     * with previous versions of Popper.js. Expect the modifiers ordering method
     * to change in future major versions of the library.
     *
     * @memberof modifiers
     * @inner
     */
    computeStyle: {
      /** @prop {number} order=850 - Index used to define the order of execution */
      order: 850,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: computeStyle,
      /**
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: true,
      /**
       * @prop {string} [x='bottom']
       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
       * Change this if your popper should grow in a direction different from `bottom`
       */
      x: 'bottom',
      /**
       * @prop {string} [x='left']
       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
       * Change this if your popper should grow in a direction different from `right`
       */
      y: 'right'
    },

    /**
     * Applies the computed styles to the popper element.
     *
     * All the DOM manipulations are limited to this modifier. This is useful in case
     * you want to integrate Popper.js inside a framework or view library and you
     * want to delegate all the DOM manipulations to it.
     *
     * Note that if you disable this modifier, you must make sure the popper element
     * has its position set to `absolute` before Popper.js can do its work!
     *
     * Just disable this modifier and define your own to achieve the desired effect.
     *
     * @memberof modifiers
     * @inner
     */
    applyStyle: {
      /** @prop {number} order=900 - Index used to define the order of execution */
      order: 900,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: true,
      /** @prop {ModifierFn} */
      fn: applyStyle,
      /** @prop {Function} */
      onLoad: applyStyleOnLoad,
      /**
       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: undefined
    }
  };

  /**
   * The `dataObject` is an object containing all the information used by Popper.js.
   * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
   * @name dataObject
   * @property {Object} data.instance The Popper.js instance
   * @property {String} data.placement Placement applied to popper
   * @property {String} data.originalPlacement Placement originally defined on init
   * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
   * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
   * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
   * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
   * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
   * @property {Object} data.boundaries Offsets of the popper boundaries
   * @property {Object} data.offsets The measurements of popper, reference and arrow elements
   * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
   * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
   * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
   */

  /**
   * Default options provided to Popper.js constructor.<br />
   * These can be overridden using the `options` argument of Popper.js.<br />
   * To override an option, simply pass an object with the same
   * structure of the `options` object, as the 3rd argument. For example:
   * ```
   * new Popper(ref, pop, {
   *   modifiers: {
   *     preventOverflow: { enabled: false }
   *   }
   * })
   * ```
   * @type {Object}
   * @static
   * @memberof Popper
   */
  var Defaults = {
    /**
     * Popper's placement.
     * @prop {Popper.placements} placement='bottom'
     */
    placement: 'bottom',

    /**
     * Set this to true if you want popper to position it self in 'fixed' mode
     * @prop {Boolean} positionFixed=false
     */
    positionFixed: false,

    /**
     * Whether events (resize, scroll) are initially enabled.
     * @prop {Boolean} eventsEnabled=true
     */
    eventsEnabled: true,

    /**
     * Set to true if you want to automatically remove the popper when
     * you call the `destroy` method.
     * @prop {Boolean} removeOnDestroy=false
     */
    removeOnDestroy: false,

    /**
     * Callback called when the popper is created.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onCreate}
     */
    onCreate: function onCreate() {},

    /**
     * Callback called when the popper is updated. This callback is not called
     * on the initialization/creation of the popper, but only on subsequent
     * updates.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onUpdate}
     */
    onUpdate: function onUpdate() {},

    /**
     * List of modifiers used to modify the offsets before they are applied to the popper.
     * They provide most of the functionalities of Popper.js.
     * @prop {modifiers}
     */
    modifiers: modifiers
  };

  /**
   * @callback onCreate
   * @param {dataObject} data
   */

  /**
   * @callback onUpdate
   * @param {dataObject} data
   */

  // Utils
  // Methods
  var Popper = function () {
    /**
     * Creates a new Popper.js instance.
     * @class Popper
     * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
     * @param {HTMLElement} popper - The HTML element used as the popper
     * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
     * @return {Object} instance - The generated Popper.js instance
     */
    function Popper(reference, popper) {
      var _this = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      classCallCheck(this, Popper);

      this.scheduleUpdate = function () {
        return requestAnimationFrame(_this.update);
      };

      // make update() debounced, so that it only runs at most once-per-tick
      this.update = debounce(this.update.bind(this));

      // with {} we create a new object with the options inside it
      this.options = _extends({}, Popper.Defaults, options);

      // init state
      this.state = {
        isDestroyed: false,
        isCreated: false,
        scrollParents: []
      };

      // get reference and popper elements (allow jQuery wrappers)
      this.reference = reference && reference.jquery ? reference[0] : reference;
      this.popper = popper && popper.jquery ? popper[0] : popper;

      // Deep merge modifiers options
      this.options.modifiers = {};
      Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
        _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
      });

      // Refactoring modifiers' list (Object => Array)
      this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
        return _extends({
          name: name
        }, _this.options.modifiers[name]);
      })
      // sort the modifiers by order
      .sort(function (a, b) {
        return a.order - b.order;
      });

      // modifiers have the ability to execute arbitrary code when Popper.js get inited
      // such code is executed in the same order of its modifier
      // they could add new properties to their options configuration
      // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
      this.modifiers.forEach(function (modifierOptions) {
        if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
          modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
        }
      });

      // fire the first update to position the popper in the right place
      this.update();

      var eventsEnabled = this.options.eventsEnabled;
      if (eventsEnabled) {
        // setup event listeners, they will take care of update the position in specific situations
        this.enableEventListeners();
      }

      this.state.eventsEnabled = eventsEnabled;
    }

    // We can't use class properties because they don't get listed in the
    // class prototype and break stuff like Sinon stubs


    createClass(Popper, [{
      key: 'update',
      value: function update$$1() {
        return update.call(this);
      }
    }, {
      key: 'destroy',
      value: function destroy$$1() {
        return destroy.call(this);
      }
    }, {
      key: 'enableEventListeners',
      value: function enableEventListeners$$1() {
        return enableEventListeners.call(this);
      }
    }, {
      key: 'disableEventListeners',
      value: function disableEventListeners$$1() {
        return disableEventListeners.call(this);
      }

      /**
       * Schedules an update. It will run on the next UI update available.
       * @method scheduleUpdate
       * @memberof Popper
       */


      /**
       * Collection of utilities useful when writing custom modifiers.
       * Starting from version 1.7, this method is available only if you
       * include `popper-utils.js` before `popper.js`.
       *
       * **DEPRECATION**: This way to access PopperUtils is deprecated
       * and will be removed in v2! Use the PopperUtils module directly instead.
       * Due to the high instability of the methods contained in Utils, we can't
       * guarantee them to follow semver. Use them at your own risk!
       * @static
       * @private
       * @type {Object}
       * @deprecated since version 1.8
       * @member Utils
       * @memberof Popper
       */

    }]);
    return Popper;
  }();

  /**
   * The `referenceObject` is an object that provides an interface compatible with Popper.js
   * and lets you use it as replacement of a real DOM node.<br />
   * You can use this method to position a popper relatively to a set of coordinates
   * in case you don't have a DOM node to use as reference.
   *
   * ```
   * new Popper(referenceObject, popperNode);
   * ```
   *
   * NB: This feature isn't supported in Internet Explorer 10.
   * @name referenceObject
   * @property {Function} data.getBoundingClientRect
   * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
   * @property {number} data.clientWidth
   * An ES6 getter that will return the width of the virtual reference element.
   * @property {number} data.clientHeight
   * An ES6 getter that will return the height of the virtual reference element.
   */


  Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
  Popper.placements = placements;
  Popper.Defaults = Defaults;


  skylark.ui = skylark.ui || {};

  return skylark.ui.Popper = Popper;

});


define('skylark-popper/main',[
	"./Popper"
],function(Popper){
	return Popper;
});
define('skylark-popper', ['skylark-popper/main'], function (main) { return main; });

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.3.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

define('skylark-formio/vendors/tooltip-js/Tooltip',["skylark-popper"],function(Popper){



  /**
   * Check if the given variable is a function
   * @method
   * @memberof Popper.Utils
   * @argument {Any} functionToCheck - variable to check
   * @returns {Boolean} answer to: is a function?
   */
  function isFunction(functionToCheck) {
    const getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  const DEFAULT_OPTIONS = {
    container: false,
    delay: 0,
    html: false,
    placement: 'top',
    title: '',
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    offset: 0,
    arrowSelector: '.tooltip-arrow, .tooltip__arrow',
    innerSelector: '.tooltip-inner, .tooltip__inner'
  };

  class Tooltip {
    /**
     * Create a new Tooltip.js instance
     * @class Tooltip
     * @param {HTMLElement} reference - The DOM node used as reference of the tooltip (it can be a jQuery element).
     * @param {Object} options
     * @param {String} options.placement='top'
     *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -end),
     *      left(-start, -end)`
     * @param {String} options.arrowSelector='.tooltip-arrow, .tooltip__arrow' - className used to locate the DOM arrow element in the tooltip.
     * @param {String} options.innerSelector='.tooltip-inner, .tooltip__inner' - className used to locate the DOM inner element in the tooltip.
     * @param {HTMLElement|String|false} options.container=false - Append the tooltip to a specific element.
     * @param {Number|Object} options.delay=0
     *      Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type.
     *      If a number is supplied, delay is applied to both hide/show.
     *      Object structure is: `{ show: 500, hide: 100 }`
     * @param {Boolean} options.html=false - Insert HTML into the tooltip. If false, the content will inserted with `textContent`.
     * @param {String} [options.template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>']
     *      Base HTML to used when creating the tooltip.
     *      The tooltip's `title` will be injected into the `.tooltip-inner` or `.tooltip__inner`.
     *      `.tooltip-arrow` or `.tooltip__arrow` will become the tooltip's arrow.
     *      The outermost wrapper element should have the `.tooltip` class.
     * @param {String|HTMLElement|TitleFunction} options.title='' - Default title value if `title` attribute isn't present.
     * @param {String} [options.trigger='hover focus']
     *      How tooltip is triggered - click, hover, focus, manual.
     *      You may pass multiple triggers; separate them with a space. `manual` cannot be combined with any other trigger.
     * @param {Boolean} options.closeOnClickOutside=false - Close a popper on click outside of the popper and reference element. This has effect only when options.trigger is 'click'.
     * @param {String|HTMLElement} options.boundariesElement
     *      The element used as boundaries for the tooltip. For more information refer to Popper.js'
     *      [boundariesElement docs](https://popper.js.org/popper-documentation.html)
     * @param {Number|String} options.offset=0 - Offset of the tooltip relative to its reference. For more information refer to Popper.js'
     *      [offset docs](https://popper.js.org/popper-documentation.html)
     * @param {Object} options.popperOptions={} - Popper options, will be passed directly to popper instance. For more information refer to Popper.js'
     *      [options docs](https://popper.js.org/popper-documentation.html)
     * @return {Object} instance - The generated tooltip instance
     */
    constructor(reference, options) {
      _initialiseProps.call(this);

      // apply user options over default ones
      options = _extends({}, DEFAULT_OPTIONS, options);

      reference.jquery && (reference = reference[0]);

      // cache reference and options
      this.reference = reference;
      this.options = options;

      // get events list
      const events = typeof options.trigger === 'string' ? options.trigger.split(' ').filter(trigger => ['click', 'hover', 'focus'].indexOf(trigger) !== -1) : [];

      // set initial state
      this._isOpen = false;
      this._popperOptions = {};

      // set event listeners
      this._setEventListeners(reference, events, options);
    }

    //
    // Public methods
    //

    /**
     * Reveals an element's tooltip. This is considered a "manual" triggering of the tooltip.
     * Tooltips with zero-length titles are never displayed.
     * @method Tooltip#show
     * @memberof Tooltip
     */


    /**
     * Hides an element’s tooltip. This is considered a “manual” triggering of the tooltip.
     * @method Tooltip#hide
     * @memberof Tooltip
     */


    /**
     * Hides and destroys an element’s tooltip.
     * @method Tooltip#dispose
     * @memberof Tooltip
     */


    /**
     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
     * @method Tooltip#toggle
     * @memberof Tooltip
     */


    /**
     * Updates the tooltip's title content
     * @method Tooltip#updateTitleContent
     * @memberof Tooltip
     * @param {String|HTMLElement} title - The new content to use for the title
     */


    //
    // Private methods
    //

    /**
     * Creates a new tooltip node
     * @memberof Tooltip
     * @private
     * @param {HTMLElement} reference
     * @param {String} template
     * @param {String|HTMLElement|TitleFunction} title
     * @param {Boolean} allowHtml
     * @return {HTMLElement} tooltipNode
     */
    _create(reference, template, title, allowHtml) {
      // create tooltip element
      const tooltipGenerator = window.document.createElement('div');
      tooltipGenerator.innerHTML = template.trim();
      const tooltipNode = tooltipGenerator.childNodes[0];

      // add unique ID to our tooltip (needed for accessibility reasons)
      tooltipNode.id = `tooltip_${Math.random().toString(36).substr(2, 10)}`;

      // set initial `aria-hidden` state to `false` (it's visible!)
      tooltipNode.setAttribute('aria-hidden', 'false');

      // add title to tooltip
      const titleNode = tooltipGenerator.querySelector(this.options.innerSelector);
      this._addTitleContent(reference, title, allowHtml, titleNode);

      // return the generated tooltip node
      return tooltipNode;
    }

    _addTitleContent(reference, title, allowHtml, titleNode) {
      if (title.nodeType === 1 || title.nodeType === 11) {
        // if title is a element node or document fragment, append it only if allowHtml is true
        allowHtml && titleNode.appendChild(title);
      } else if (isFunction(title)) {
        // if title is a function, call it and set textContent or innerHtml depending by `allowHtml` value
        const titleText = title.call(reference);
        allowHtml ? titleNode.innerHTML = titleText : titleNode.textContent = titleText;
      } else {
        // if it's just a simple text, set textContent or innerHtml depending by `allowHtml` value
        allowHtml ? titleNode.innerHTML = title : titleNode.textContent = title;
      }
    }

    _show(reference, options) {
      // don't show if it's already visible
      // or if it's not being showed
      if (this._isOpen && !this._isOpening) {
        return this;
      }
      this._isOpen = true;

      // if the tooltipNode already exists, just show it
      if (this._tooltipNode) {
        this._tooltipNode.style.visibility = 'visible';
        this._tooltipNode.setAttribute('aria-hidden', 'false');
        this.popperInstance.update();
        return this;
      }

      // get title
      const title = reference.getAttribute('title') || options.title;

      // don't show tooltip if no title is defined
      if (!title) {
        return this;
      }

      // create tooltip node
      const tooltipNode = this._create(reference, options.template, title, options.html);

      // Add `aria-describedby` to our reference element for accessibility reasons
      reference.setAttribute('aria-describedby', tooltipNode.id);

      // append tooltip to container
      const container = this._findContainer(options.container, reference);

      this._append(tooltipNode, container);

      this._popperOptions = _extends({}, options.popperOptions, {
        placement: options.placement
      });

      this._popperOptions.modifiers = _extends({}, this._popperOptions.modifiers, {
        arrow: {
          element: this.options.arrowSelector
        },
        offset: {
          offset: options.offset
        }
      });

      if (options.boundariesElement) {
        this._popperOptions.modifiers.preventOverflow = {
          boundariesElement: options.boundariesElement
        };
      }

      this.popperInstance = new Popper(reference, tooltipNode, this._popperOptions);

      this._tooltipNode = tooltipNode;

      return this;
    }

    _hide() /*reference, options*/{
      // don't hide if it's already hidden
      if (!this._isOpen) {
        return this;
      }

      this._isOpen = false;

      // hide tooltipNode
      this._tooltipNode.style.visibility = 'hidden';
      this._tooltipNode.setAttribute('aria-hidden', 'true');

      return this;
    }

    _dispose() {
      // remove event listeners first to prevent any unexpected behaviour
      this._events.forEach(({ func, event }) => {
        this.reference.removeEventListener(event, func);
      });
      this._events = [];

      if (this._tooltipNode) {
        this._hide();

        // destroy instance
        this.popperInstance.destroy();

        // destroy tooltipNode if removeOnDestroy is not set, as popperInstance.destroy() already removes the element
        if (!this.popperInstance.options.removeOnDestroy) {
          this._tooltipNode.parentNode.removeChild(this._tooltipNode);
          this._tooltipNode = null;
        }
      }
      return this;
    }

    _findContainer(container, reference) {
      // if container is a query, get the relative element
      if (typeof container === 'string') {
        container = window.document.querySelector(container);
      } else if (container === false) {
        // if container is `false`, set it to reference parent
        container = reference.parentNode;
      }
      return container;
    }

    /**
     * Append tooltip to container
     * @memberof Tooltip
     * @private
     * @param {HTMLElement} tooltipNode
     * @param {HTMLElement|String|false} container
     */
    _append(tooltipNode, container) {
      container.appendChild(tooltipNode);
    }

    _setEventListeners(reference, events, options) {
      const directEvents = [];
      const oppositeEvents = [];

      events.forEach(event => {
        switch (event) {
          case 'hover':
            directEvents.push('mouseenter');
            oppositeEvents.push('mouseleave');
            break;
          case 'focus':
            directEvents.push('focus');
            oppositeEvents.push('blur');
            break;
          case 'click':
            directEvents.push('click');
            oppositeEvents.push('click');
            break;
        }
      });

      // schedule show tooltip
      directEvents.forEach(event => {
        const func = evt => {
          if (this._isOpening === true) {
            return;
          }
          evt.usedByTooltip = true;
          this._scheduleShow(reference, options.delay, options, evt);
        };
        this._events.push({ event, func });
        reference.addEventListener(event, func);
      });

      // schedule hide tooltip
      oppositeEvents.forEach(event => {
        const func = evt => {
          if (evt.usedByTooltip === true) {
            return;
          }
          this._scheduleHide(reference, options.delay, options, evt);
        };
        this._events.push({ event, func });
        reference.addEventListener(event, func);
        if (event === 'click' && options.closeOnClickOutside) {
          document.addEventListener('mousedown', e => {
            if (!this._isOpening) {
              return;
            }
            const popper = this.popperInstance.popper;
            if (reference.contains(e.target) || popper.contains(e.target)) {
              return;
            }
            func(e);
          }, true);
        }
      });
    }

    _scheduleShow(reference, delay, options /*, evt */) {
      this._isOpening = true;
      // defaults to 0
      const computedDelay = delay && delay.show || delay || 0;
      this._showTimeout = window.setTimeout(() => this._show(reference, options), computedDelay);
    }

    _scheduleHide(reference, delay, options, evt) {
      this._isOpening = false;
      // defaults to 0
      const computedDelay = delay && delay.hide || delay || 0;
      window.setTimeout(() => {
        window.clearTimeout(this._showTimeout);
        if (this._isOpen === false) {
          return;
        }
        if (!document.body.contains(this._tooltipNode)) {
          return;
        }

        // if we are hiding because of a mouseleave, we must check that the new
        // reference isn't the tooltip, because in this case we don't want to hide it
        if (evt.type === 'mouseleave') {
          const isSet = this._setTooltipNodeEvent(evt, reference, delay, options);

          // if we set the new event, don't hide the tooltip yet
          // the new event will take care to hide it if necessary
          if (isSet) {
            return;
          }
        }

        this._hide(reference, options);
      }, computedDelay);
    }

    _updateTitleContent(title) {
      if (typeof this._tooltipNode === 'undefined') {
        if (typeof this.options.title !== 'undefined') {
          this.options.title = title;
        }
        return;
      }
      const titleNode = this._tooltipNode.parentNode.querySelector(this.options.innerSelector);
      this._clearTitleContent(titleNode, this.options.html, this.reference.getAttribute('title') || this.options.title);
      this._addTitleContent(this.reference, title, this.options.html, titleNode);
      this.options.title = title;
      this.popperInstance.update();
    }

    _clearTitleContent(titleNode, allowHtml, lastTitle) {
      if (lastTitle.nodeType === 1 || lastTitle.nodeType === 11) {
        allowHtml && titleNode.removeChild(lastTitle);
      } else {
        allowHtml ? titleNode.innerHTML = '' : titleNode.textContent = '';
      }
    }

  }

  /**
   * Title function, its context is the Tooltip instance.
   * @memberof Tooltip
   * @callback TitleFunction
   * @return {String} placement - The desired title.
   */

  var _initialiseProps = function () {
    this.show = () => this._show(this.reference, this.options);

    this.hide = () => this._hide();

    this.dispose = () => this._dispose();

    this.toggle = () => {
      if (this._isOpen) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    this.updateTitleContent = title => this._updateTitleContent(title);

    this._events = [];

    this._setTooltipNodeEvent = (evt, reference, delay, options) => {
      const relatedreference = evt.relatedreference || evt.toElement || evt.relatedTarget;

      const callback = evt2 => {
        const relatedreference2 = evt2.relatedreference || evt2.toElement || evt2.relatedTarget;

        // Remove event listener after call
        this._tooltipNode.removeEventListener(evt.type, callback);

        // If the new reference is not the reference element
        if (!reference.contains(relatedreference2)) {
          // Schedule to hide tooltip
          this._scheduleHide(reference, options.delay, options, evt2);
        }
      };

      if (this._tooltipNode.contains(relatedreference)) {
        // listen to mouseleave on the tooltip element to be able to hide the tooltip
        this._tooltipNode.addEventListener(evt.type, callback);
        return true;
      }

      return false;
    };
  };

  return Tooltip;

});
define('skylark-formio/vendors/ismobilejs/isMobile',[],function(){ 
    var appleIphone = /iPhone/i;
    var appleIpod = /iPod/i;
    var appleTablet = /iPad/i;
    var appleUniversal = /\biOS-universal(?:.+)Mac\b/i;
    var androidPhone = /\bAndroid(?:.+)Mobile\b/i;
    var androidTablet = /Android/i;
    var amazonPhone = /(?:SD4930UR|\bSilk(?:.+)Mobile\b)/i;
    var amazonTablet = /Silk/i;
    var windowsPhone = /Windows Phone/i;
    var windowsTablet = /\bWindows(?:.+)ARM\b/i;
    var otherBlackBerry = /BlackBerry/i;
    var otherBlackBerry10 = /BB10/i;
    var otherOpera = /Opera Mini/i;
    var otherChrome = /\b(CriOS|Chrome)(?:.+)Mobile/i;
    var otherFirefox = /Mobile(?:.+)Firefox\b/i;
    var isAppleTabletOnIos13 = function (navigator) {
        return (typeof navigator !== 'undefined' &&
            navigator.platform === 'MacIntel' &&
            typeof navigator.maxTouchPoints === 'number' &&
            navigator.maxTouchPoints > 1 &&
            typeof MSStream === 'undefined');
    };
    function createMatch(userAgent) {
        return function (regex) { return regex.test(userAgent); };
    }
    function isMobile(param) {
        var nav = {
            userAgent: '',
            platform: '',
            maxTouchPoints: 0
        };
        if (!param && typeof navigator !== 'undefined') {
            nav = {
                userAgent: navigator.userAgent,
                platform: navigator.platform,
                maxTouchPoints: navigator.maxTouchPoints || 0
            };
        }
        else if (typeof param === 'string') {
            nav.userAgent = param;
        }
        else if (param.userAgent) {
            nav = {
                userAgent: param.userAgent,
                platform: param.platform,
                maxTouchPoints: param.maxTouchPoints || 0
            };
        }
        var userAgent = nav.userAgent;
        var tmp = userAgent.split('[FBAN');
        if (typeof tmp[1] !== 'undefined') {
            userAgent = tmp[0];
        }
        tmp = userAgent.split('Twitter');
        if (typeof tmp[1] !== 'undefined') {
            userAgent = tmp[0];
        }
        var match = createMatch(userAgent);
        var result = {
            apple: {
                phone: match(appleIphone) && !match(windowsPhone),
                ipod: match(appleIpod),
                tablet: !match(appleIphone) &&
                    (match(appleTablet) || isAppleTabletOnIos13(nav)) &&
                    !match(windowsPhone),
                universal: match(appleUniversal),
                device: (match(appleIphone) ||
                    match(appleIpod) ||
                    match(appleTablet) ||
                    match(appleUniversal) ||
                    isAppleTabletOnIos13(nav)) &&
                    !match(windowsPhone)
            },
            amazon: {
                phone: match(amazonPhone),
                tablet: !match(amazonPhone) && match(amazonTablet),
                device: match(amazonPhone) || match(amazonTablet)
            },
            android: {
                phone: (!match(windowsPhone) && match(amazonPhone)) ||
                    (!match(windowsPhone) && match(androidPhone)),
                tablet: !match(windowsPhone) &&
                    !match(amazonPhone) &&
                    !match(androidPhone) &&
                    (match(amazonTablet) || match(androidTablet)),
                device: (!match(windowsPhone) &&
                    (match(amazonPhone) ||
                        match(amazonTablet) ||
                        match(androidPhone) ||
                        match(androidTablet))) ||
                    match(/\bokhttp\b/i)
            },
            windows: {
                phone: match(windowsPhone),
                tablet: match(windowsTablet),
                device: match(windowsPhone) || match(windowsTablet)
            },
            other: {
                blackberry: match(otherBlackBerry),
                blackberry10: match(otherBlackBerry10),
                opera: match(otherOpera),
                firefox: match(otherFirefox),
                chrome: match(otherChrome),
                device: match(otherBlackBerry) ||
                    match(otherBlackBerry10) ||
                    match(otherOpera) ||
                    match(otherFirefox) ||
                    match(otherChrome)
            },
            any: false,
            phone: false,
            tablet: false
        };
        result.any =
            result.apple.device ||
                result.android.device ||
                result.windows.device ||
                result.other.device;
        result.phone =
            result.apple.phone || result.android.phone || result.windows.phone;
        result.tablet =
            result.apple.tablet || result.android.tablet || result.windows.tablet;
        return result;
    }

    return isMobile;
});
define('skylark-formio/utils/calendarUtils',[
    'skylark-moment',
    'skylark-lodash'
], function (moment, _) {
    'use strict';
    const CALENDAR_ERROR_MESSAGES = {
        INVALID: 'You entered the Invalid Date',
        INCOMPLETE: 'You entered an incomplete date.',
        greater(date, format) {
            return `The entered date is greater than ${ date.format(format) }`;
        },
        less(date, format) {
            return `The entered date is less than ${ date.format(format) }`;
        }
    };
    function buildResponse(message, result) {
        return {
            message,
            result
        };
    }
    function lessOrGreater(value, format, maxDate, minDate) {
        let message = '';
        let result = true;
        if (maxDate && value.isValid()) {
            const maxDateMoment = moment(maxDate, format);
            if (value > maxDateMoment) {
                message = CALENDAR_ERROR_MESSAGES.greater(maxDateMoment, format);
                result = false;
            }
        }
        if (minDate && value.isValid()) {
            const minDateMoment = moment(minDate, format);
            if (value < minDateMoment) {
                message = CALENDAR_ERROR_MESSAGES.less(minDateMoment, format);
                result = false;
            }
        }
        return {
            message,
            result
        };
    }
    function checkInvalidDate(value, format, minDate, maxDate) {
        const date = moment(value, format, true);
        const isValidDate = date.isValid();
        if (!isValidDate) {
            const delimeters = value.match(/[^a-z0-9_]/gi);
            const delimetersRegEx = new RegExp(delimeters.join('|'), 'gi');
            const inputParts = value.replace(/_*/gi, '').split(delimetersRegEx);
            const formatParts = format[1] ? format[1].split(delimetersRegEx) : format[0].split(delimetersRegEx);
            const timeIndex = _.findIndex(formatParts, (part, index) => part.length === 1 && index === formatParts.length - 1);
            const yearIndex = _.findIndex(formatParts, part => part.match(/yyyy/gi));
            if (inputParts[yearIndex] / 1000 < 1) {
                return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);
            }
            if (inputParts[0].length === formatParts[0].length) {
                const modifiedParts = inputParts.map((part, index) => {
                    let partValue = part;
                    if (!part && index === timeIndex) {
                        partValue = 'AM';
                    } else if (!part) {
                        partValue = '01';
                    }
                    if (delimeters[index]) {
                        partValue = `${ partValue }${ delimeters[index] }`;
                    }
                    return partValue;
                });
                const problemDate = moment(modifiedParts.join(''), format, true);
                if (problemDate.isValid()) {
                    const checkedLessOrGreater = lessOrGreater(problemDate, format[0], maxDate, minDate);
                    if (!checkedLessOrGreater.result) {
                        const {message, result} = checkedLessOrGreater;
                        return buildResponse(message, result);
                    }
                    return buildResponse(CALENDAR_ERROR_MESSAGES.INCOMPLETE, false);
                } else {
                    return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);
                }
            } else {
                return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);
            }
        } else if (isValidDate && value.indexOf('_') === -1) {
            const checkedLessOrGreater = lessOrGreater(date, format[0], maxDate, minDate);
            if (!checkedLessOrGreater.result) {
                const {message, result} = checkedLessOrGreater;
                return buildResponse(message, result);
            }
        }
        return buildResponse('', true);
    }
    return {
        CALENDAR_ERROR_MESSAGES: CALENDAR_ERROR_MESSAGES,
        lessOrGreater: lessOrGreater,
        checkInvalidDate: checkInvalidDate
    };
});
define('skylark-formio/validator/rules/Rule',[], function () {
    'use strict';

    class Rule {
        constructor(component, settings, config) {
            this.component = component;
            this.settings = settings;
            this.config = config;
        }
        check() {
        }
    };

    return Rule;
});
define('skylark-formio/validator/rules/Custom',['./Rule'], function (Rule) {
    'use strict';

    class Custom extends Rule {
        check(value, data, row, index) {
            const custom = this.settings.custom;
            if (!custom) {
                return true;
            }
            const valid = this.component.evaluate(custom, {
                valid: true,
                data,
                row,
                rowIndex: index,
                input: value
            }, 'valid', true);
            if (valid === null) {
                return true;
            }
            return valid;
        }
    };
    Custom.prototype.defaultMessage = '{{error}}';

    return Custom;

});
define('skylark-formio/validator/rules/Date',['./Rule'], function (Rule) {
    'use strict';

    class DateRule extends Rule {
        check(value) {
            if (!value || value instanceof Date) {
                return true;
            }
            if (value === 'Invalid date' || value === 'Invalid Date') {
                return false;
            }
            if (typeof value === 'string') {
                value = new Date(value);
            }
            return value.toString() !== 'Invalid Date';
        }
    };
    DateRule.prototype.defaultMessage = '{{field}} is not a valid date.';

    return DateRule;
});
define('skylark-formio/validator/rules/Day',['./Rule'], function (Rule) {
    'use strict';

     class Day extends Rule {
        check(value) {
            if (!value) {
                return true;
            }
            if (typeof value !== 'string') {
                return false;
            }
            const [DAY, MONTH, YEAR] = this.component.dayFirst ? [
                0,
                1,
                2
            ] : [
                1,
                0,
                2
            ];
            const values = value.split('/').map(x => parseInt(x, 10)), day = values[DAY], month = values[MONTH], year = values[YEAR], maxDay = getDaysInMonthCount(month, year);
            if (isNaN(day) || day < 0 || day > maxDay) {
                return false;
            }
            if (isNaN(month) || month < 0 || month > 12) {
                return false;
            }
            if (isNaN(year) || year < 0 || year > 9999) {
                return false;
            }
            return true;
            function isLeapYear(year) {
                return !(year % 400) || !!(year % 100) && !(year % 4);
            }
            function getDaysInMonthCount(month, year) {
                switch (month) {
                case 1:
                case 3:
                case 5:
                case 7:
                case 8:
                case 10:
                case 12:
                    return 31;
                case 4:
                case 6:
                case 9:
                case 11:
                    return 30;
                case 2:
                    return isLeapYear(year) ? 29 : 28;
                default:
                    return 31;
                }
            }
        }
    };
    Day.prototype.defaultMessage = '{{field}} is not a valid day.';

    return Day;
});
define('skylark-formio/validator/rules/Email',['./Rule'], function (Rule) {
    'use strict';

    class Email extends Rule {
        check(value) {
            if (!value) {
                return true;
            }
            const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(value);
        }
    };
    Email.prototype.defaultMessage = '{{field}} must be a valid email.';

    return Email;
});
define('skylark-formio/validator/rules/JSON',['./Rule'], function (Rule) {
    'use strict';

    class JSON extends Rule {
        check(value, data, row, index) {
            const {json} = this.settings;
            if (!json) {
                return true;
            }
            const valid = this.component.evaluate(json, {
                data,
                row,
                rowIndex: index,
                input: value
            });
            if (valid === null) {
                return true;
            }
            return valid;
        }
    };
    JSON.prototype.defaultMessage = '{{error}}';

    return JSON;
});
define('skylark-formio/validator/rules/Mask',[
    './Rule',
    '../../utils/utils'
], function (Rule,utils) {
    'use strict';
    class Mask extends Rule {
        check(value) {
            let inputMask;
            if (this.component.isMultipleMasksField) {
                const maskName = value ? value.maskName : undefined;
                const formioInputMask = this.component.getMaskByName(maskName);
                if (formioInputMask) {
                    inputMask = utils.getInputMask(formioInputMask);
                }
                value = value ? value.value : value;
            } else {
                inputMask = utils.getInputMask(this.settings.mask);
            }
            if (value && inputMask) {
                return utils.matchInputMask(value, inputMask);
            }
            return true;
        }
    };

    Mask.prototype.defaultMessage = '{{field}} does not match the mask.';

    return Mask;
});
define('skylark-formio/validator/rules/Max',[
    'skylark-lodash',
    './Rule'
], function (_, Rule) {
    'use strict';
    class Max extends Rule {
        check(value) {
            const max = parseFloat(this.settings.limit);
            if (Number.isNaN(max) || !_.isNumber(value)) {
                return true;
            }
            return parseFloat(value) <= max;
        }
    };
    Max.prototype.defaultMessage = '{{field}} cannot be greater than {{settings.limit}}.';


    return Max;
});
define('skylark-formio/validator/rules/MaxDate',[
    "./Rule",
    '../../utils/utils',
    'skylark-moment',
    'skylark-lodash'
], function (Rule, utils, moment, _) {
    'use strict';
    
    class MaxDate extends Rule {
        check(value) {
            if (!value) {
                return true;
            }
            if (value === this.settings.dateLimit) {
                return true;
            }
            const date = moment(value);
            const maxDate = utils.getDateSetting(this.settings.dateLimit);
            if (_.isNull(maxDate)) {
                return true;
            } else {
                maxDate.setHours(0, 0, 0, 0);
            }
            return date.isBefore(maxDate) || date.isSame(maxDate);
        }
    };

    MaxDate.prototype.defaultMessage = '{{field}} should not contain date after {{settings.dateLimit}}';

    return MaxDate;
});

define('skylark-formio/validator/rules/MaxLength',['./Rule'], function (Rule) {
    'use strict';

    class MaxLength extends Rule {
        check(value) {
            const maxLength = parseInt(this.settings.length, 10);
            if (!value || !maxLength || !value.hasOwnProperty('length')) {
                return true;
            }
            return value.length <= maxLength;
        }
    };
    MaxLength.prototype.defaultMessage = '{{field}} must have no more than {{- settings.length}} characters.';

    return MaxLength;

});
define('skylark-formio/validator/rules/MaxWords',['./Rule'], function (Rule) {
    'use strict';

    class MaxWords extends Rule {
        check(value) {
            const maxWords = parseInt(this.settings.length, 10);
            if (!maxWords || typeof value !== 'string') {
                return true;
            }
            return value.trim().split(/\s+/).length <= maxWords;
        }
    };
    MaxWords.prototype.defaultMessage = '{{field}} must have no more than {{- settings.length}} words.';

    return MaxWords;
});
define('skylark-formio/validator/rules/Min',['skylark-lodash',"./Rule"], function (_,Rule) {
    class Min extends Rule {
        check(value) {
            const min = parseFloat(this.settings.limit);
            if (Number.isNaN(min) || !_.isNumber(value)) {
                return true;
            }
            return parseFloat(value) >= min;
        }
    };
    Min.prototype.defaultMessage = '{{field}} cannot be less than {{settings.limit}}.';

    return Min;
});

define('skylark-formio/validator/rules/MinDate',[
    "./Rule",
    '../../utils/utils',
    'skylark-moment',
    'skylark-lodash'
], function (Rule,utils, moment, _) {
    class MinDate extends Rule {
        check(value) {
            if (!value) {
                return true;
            }
            const date = moment(value);
            const minDate = utils.getDateSetting(this.settings.dateLimit);
            if (_.isNull(minDate)) {
                return true;
            } else {
                minDate.setHours(0, 0, 0, 0);
            }
            return date.isAfter(minDate) || date.isSame(minDate);
        }
    };
    MinDate.prototype.defaultMessage = '{{field}} should not contain date before {{settings.dateLimit}}';

    return MinDate;
});

define('skylark-formio/validator/rules/MinLength',['./Rule'], function (Rule) {
    'use strict';

    class MinLength extends Rule {
        check(value) {
            const minLength = parseInt(this.settings.length, 10);
            if (!minLength || !value || !value.hasOwnProperty('length') || this.component.isEmpty(value)) {
                return true;
            }
            return value.length >= minLength;
        }
    };
    MinLength.prototype.defaultMessage = '{{field}} must have no more than {{- settings.length}} characters.';

    return MinLength;
});
define('skylark-formio/validator/rules/MinWords',['./Rule'], function (Rule) {
    'use strict';

    class MinWords extends Rule {
        check(value) {
            const minWords = parseInt(this.settings.length, 10);
            if (!minWords || !value || typeof value !== 'string') {
                return true;
            }
            return value.trim().split(/\s+/).length >= minWords;
        }
    };
    MinWords.prototype.defaultMessage = '{{field}} must have at least {{- settings.length}} words.';


    return MinWords;
});
define('skylark-formio/validator/rules/Pattern',['./Rule'], function (Rule) {
    'use strict';

    class Pattern extends Rule {
        check(value) {
            const {pattern} = this.settings;
            if (!pattern) {
                return true;
            }
            return new RegExp(`^${ pattern }$`).test(value);
        }
    };

    Pattern.prototype.defaultMessage = '{{field}} does not match the pattern {{settings.pattern}}';

    return Pattern;
});
define('skylark-formio/validator/rules/Required',['./Rule'], function (Rule) {
    'use strict';

    class Required extends Rule {
        check(value) {
            return !this.component.isValueHidden() && !this.component.isEmpty(value);
        }
    };
    
    Required.prototype.defaultMessage = '{{field}} is required';

    return Required;
});
define('skylark-formio/validator/rules/Select',[
    "./Rule",
    '../../utils/utils',
    '../../vendors/getify/npo',
    '../../vendors/fetch-ponyfill/fetch',
    'skylark-lodash'
], function (Rule,a, NativePromise, fetchPonyfill, _) {
    const {fetch, Headers, Request} = fetchPonyfill({ Promise: NativePromise });
    class Select extends Rule {
        check(value, data, row, async) {
            if (!value || _.isEmpty(value)) {
                return true;
            }
            if (!async) {
                return true;
            }
            const schema = this.component.component;
            const requestOptions = {
                url: this.settings.url,
                method: 'GET',
                qs: {},
                json: true,
                headers: {}
            };
            if (_.isBoolean(requestOptions.url)) {
                requestOptions.url = !!requestOptions.url;
                if (!requestOptions.url || schema.dataSrc !== 'url' || !schema.data.url || !schema.searchField) {
                    return true;
                }
                requestOptions.url = schema.data.url;
                requestOptions.qs[schema.searchField] = value;
                if (schema.filter) {
                    requestOptions.url += (!requestOptions.url.includes('?') ? '?' : '&') + schema.filter;
                }
                if (schema.selectFields) {
                    requestOptions.qs.select = schema.selectFields;
                }
            }
            if (!requestOptions.url) {
                return true;
            }
            requestOptions.url = a.interpolate(requestOptions.url, { data: this.component.data });
            requestOptions.url += (requestOptions.url.includes('?') ? '&' : '?') + _.chain(requestOptions.qs).map((val, key) => `${ encodeURIComponent(key) }=${ encodeURIComponent(val) }`).join('&').value();
            if (schema.data && schema.data.headers) {
                _.each(schema.data.headers, header => {
                    if (header.key) {
                        requestOptions.headers[header.key] = header.value;
                    }
                });
            }
            if (schema.authenticate && this.config.token) {
                requestOptions.headers['x-jwt-token'] = this.config.token;
            }
            return fetch(new Request(requestOptions.url, { headers: new Headers(requestOptions.headers) })).then(response => {
                if (!response.ok) {
                    return false;
                }
                return response.json();
            }).then(results => {
                return results && results.length;
            }).catch(() => false);
        }
    };
    Select.prototype.defaultMessage = '{{field}} contains an invalid selection';

    return Select;
});

define('skylark-formio/validator/rules/Unique',[
    "./Rule",
    '../../utils/utils',
    'skylark-lodash',
    '../../vendors/getify/npo'
], function (Rule,utils, _, NativePromise) {
    class Unique extends Rule {
        check(value) {
            if (!value || _.isEmpty(value)) {
                return true;
            }
            if (!this.config.db) {
                return true;
            }
            return new NativePromise(resolve => {
                const form = this.config.form;
                const submission = this.config.submission;
                const path = `data.${ this.component.path }`;
                const query = { form: form._id };
                if (_.isString(value)) {
                    query[path] = {
                        $regex: new RegExp(`^${ utils.escapeRegExCharacters(value) }$`),
                        $options: 'i'
                    };
                } else if (_.isPlainObject(value) && value.address && value.address['address_components'] && value.address['place_id']) {
                    query[`${ path }.address.place_id`] = {
                        $regex: new RegExp(`^${ utils.escapeRegExCharacters(value.address['place_id']) }$`),
                        $options: 'i'
                    };
                } else if (_.isArray(value)) {
                    query[path] = { $all: value };
                } else if (_.isObject(value)) {
                    query[path] = { $eq: value };
                }
                query.deleted = { $eq: null };
                this.config.db.findOne(query, (err, result) => {
                    if (err) {
                        return resolve(false);
                    } else if (result) {
                        return resolve(submission._id && result._id.toString() === submission._id);
                    } else {
                        return resolve(true);
                    }
                });
            }).catch(() => false);
        }
    };
    Unique.prototype.defaultMessage = '{{field}} must be unique';

    return Unique;
});

define('skylark-formio/validator/rules/Url',['./Rule'], function (Rule) {
    'use strict';

    class Url extends Rule {
        check(value) {
            const re = /(https?:\/\/(?:www\.|(?!www)))?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/;
            return !value || re.test(value);
        }
    };
    Url.prototype.defaultMessage = '{{field}} must be a valid url.';

    return Url;
});
define('skylark-formio/validator/rules/MinYear',['./Rule'], function (Rule) {
    'use strict';

    class MinYear extends Rule {
        check(value) {
            const minYear = this.settings;
            let year = /\d{4}$/.exec(value);
            year = year ? year[0] : null;
            if (!+minYear || !+year) {
                return true;
            }
            return +year >= +minYear;
        }
    };
    MinYear.prototype.defaultMessage = '{{field}} should not contain year less than {{minYear}}';


    return MinYear;
});
define('skylark-formio/validator/rules/MaxYear',['./Rule'], function (Rule) {
    'use strict';

    class MaxYear extends Rule {
        check(value) {
            const maxYear = this.settings;
            let year = /\d{4}$/.exec(value);
            year = year ? year[0] : null;
            if (!+maxYear || !+year) {
                return true;
            }
            return +year <= +maxYear;
        }
    };
    
    MaxYear.prototype.defaultMessage = '{{field}} should not contain year greater than {{maxYear}}';

    return MaxYear;

});
define('skylark-formio/validator/rules/index',[
    './Custom',
    './Date',
    './Day',
    './Email',
    './JSON',
    './Mask',
    './Max',
    './MaxDate',
    './MaxLength',
    './MaxWords',
    './Min',
    './MinDate',
    './MinLength',
    './MinWords',
    './Pattern',
    './Required',
    './Select',
    './Unique',
    './Url',
    './MinYear',
    './MaxYear'
], function (
    Custom,
    Date,
    Day,
    Email,
    JSON,
    Mask,
    Max,
    MaxDate,
    MaxLength,
    MaxWords,
    Min,
    MinDate,
    MinLength,
    MinWords,
    Pattern,
    Required,
    Select,
    Unique,
    Url,
    MinYear,
    MaxYear
) {
  
  return {
    Custom,
    Date,
    Day,
    Email,
    JSON,
    Mask,
    Max,
    MaxDate,
    MaxLength,
    MaxWords,
    Min,
    MinDate,
    MinLength,
    MinWords,
    Pattern,
    Required,
    Select,
    Unique,
    Url,
    MinYear,
    MaxYear
  };

});
define('skylark-formio/validator/Rules',[
    './rules/index'
], function (rules) {
    'use strict';
    return class Rules {
        static addRule(name, rule) {
            Rules.rules[name] = rule;
        }
        static addRules(rules) {
            Rules.rules = {
                ...Rules.rules,
                ...rules
            };
        }
        static getRule(name) {
            return Rules.rules[name];
        }
        static getRules() {
            return Rules.rules;
        }
    };
    Rules.rules = rules;
});
define('skylark-formio/validator/Validator',[
    'skylark-lodash',
    '../utils/utils',
    'skylark-moment',
    '../vendors/getify/npo',
    '../vendors/fetch-ponyfill/fetch',
    '../utils/calendarUtils',
    './Rules'
], function (_, a, moment, NativePromise, fetchPonyfill, b, Rules) {
    'use strict';
    const {fetch, Headers, Request} = fetchPonyfill({ Promise: NativePromise });
    class ValidationChecker {
        constructor(config = {}) {
            this.config = _.defaults(config, ValidationChecker.config);
            this.validators = {
                required: {
                    key: 'validate.required',
                    method: 'validateRequired',
                    message(component) {
                        return component.t(component.errorMessage('required'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        if (!a.boolValue(setting) || component.isValueHidden()) {
                            return true;
                        }
                        const isCalendar = component.validators.some(validator => validator === 'calendar');
                        if (!value && isCalendar && component.widget.enteredDate) {
                            return !this.validators.calendar.check.call(this, component, setting, value);
                        }
                        return !component.isEmpty(value);
                    }
                },
                unique: {
                    key: 'validate.unique',
                    message(component) {
                        return component.t(component.errorMessage('unique'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        if (!a.boolValue(setting)) {
                            return true;
                        }
                        if (!value || _.isEmpty(value)) {
                            return true;
                        }
                        if (!this.config.db) {
                            return true;
                        }
                        return new NativePromise(resolve => {
                            const form = this.config.form;
                            const submission = this.config.submission;
                            const path = `data.${ component.path }`;
                            const query = { form: form._id };
                            if (_.isString(value)) {
                                query[path] = {
                                    $regex: new RegExp(`^${ a.escapeRegExCharacters(value) }$`),
                                    $options: 'i'
                                };
                            } else if (_.isPlainObject(value) && value.address && value.address['address_components'] && value.address['place_id']) {
                                query[`${ path }.address.place_id`] = {
                                    $regex: new RegExp(`^${ a.escapeRegExCharacters(value.address['place_id']) }$`),
                                    $options: 'i'
                                };
                            } else if (_.isArray(value)) {
                                query[path] = { $all: value };
                            } else if (_.isObject(value)) {
                                query[path] = { $eq: value };
                            }
                            query.deleted = { $eq: null };
                            this.config.db.findOne(query, (err, result) => {
                                if (err) {
                                    return resolve(false);
                                } else if (result) {
                                    return resolve(submission._id && result._id.toString() === submission._id);
                                } else {
                                    return resolve(true);
                                }
                            });
                        }).catch(() => false);
                    }
                },
                multiple: {
                    key: 'validate.multiple',
                    message(component) {
                        const shouldBeArray = a.boolValue(component.component.multiple) || Array.isArray(component.emptyValue);
                        const isRequired = component.component.validate.required;
                        const messageKey = shouldBeArray ? isRequired ? 'array_nonempty' : 'array' : 'nonarray';
                        return component.t(component.errorMessage(messageKey), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        if (!component.validateMultiple()) {
                            return true;
                        }
                        const shouldBeArray = a.boolValue(setting);
                        const canBeArray = Array.isArray(component.emptyValue);
                        const isArray = Array.isArray(value);
                        const isRequired = component.component.validate.required;
                        if (shouldBeArray) {
                            if (isArray) {
                                return isRequired ? !!value.length : true;
                            } else {
                                return _.isNil(value) ? !isRequired : false;
                            }
                        } else {
                            return canBeArray || !isArray;
                        }
                    }
                },
                select: {
                    key: 'validate.select',
                    message(component) {
                        return component.t(component.errorMessage('select'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value, data, index, row, async) {
                        if (!a.boolValue(setting)) {
                            return true;
                        }
                        if (!value || _.isEmpty(value)) {
                            return true;
                        }
                        if (!async) {
                            return true;
                        }
                        const schema = component.component;
                        const requestOptions = {
                            url: setting,
                            method: 'GET',
                            qs: {},
                            json: true,
                            headers: {}
                        };
                        if (_.isBoolean(requestOptions.url)) {
                            requestOptions.url = !!requestOptions.url;
                            if (!requestOptions.url || schema.dataSrc !== 'url' || !schema.data.url || !schema.searchField) {
                                return true;
                            }
                            requestOptions.url = schema.data.url;
                            requestOptions.qs[schema.searchField] = value;
                            if (schema.filter) {
                                requestOptions.url += (!requestOptions.url.includes('?') ? '?' : '&') + schema.filter;
                            }
                            if (schema.selectFields) {
                                requestOptions.qs.select = schema.selectFields;
                            }
                        }
                        if (!requestOptions.url) {
                            return true;
                        }
                        requestOptions.url = a.interpolate(requestOptions.url, { data: component.data });
                        requestOptions.url += (requestOptions.url.includes('?') ? '&' : '?') + _.chain(requestOptions.qs).map((val, key) => `${ encodeURIComponent(key) }=${ encodeURIComponent(val) }`).join('&').value();
                        if (schema.data && schema.data.headers) {
                            _.each(schema.data.headers, header => {
                                if (header.key) {
                                    requestOptions.headers[header.key] = header.value;
                                }
                            });
                        }
                        if (schema.authenticate && this.config.token) {
                            requestOptions.headers['x-jwt-token'] = this.config.token;
                        }
                        return fetch(new Request(requestOptions.url, { headers: new Headers(requestOptions.headers) })).then(response => {
                            if (!response.ok) {
                                return false;
                            }
                            return response.json();
                        }).then(results => {
                            return results && results.length;
                        }).catch(() => false);
                    }
                },
                min: {
                    key: 'validate.min',
                    message(component, setting) {
                        return component.t(component.errorMessage('min'), {
                            field: component.errorLabel,
                            min: parseFloat(setting),
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const min = parseFloat(setting);
                        if (Number.isNaN(min) || !_.isNumber(value)) {
                            return true;
                        }
                        return parseFloat(value) >= min;
                    }
                },
                max: {
                    key: 'validate.max',
                    message(component, setting) {
                        return component.t(component.errorMessage('max'), {
                            field: component.errorLabel,
                            max: parseFloat(setting),
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const max = parseFloat(setting);
                        if (Number.isNaN(max) || !_.isNumber(value)) {
                            return true;
                        }
                        return parseFloat(value) <= max;
                    }
                },
                minSelectedCount: {
                    key: 'validate.minSelectedCount',
                    message(component, setting) {
                        return component.component.minSelectedCountMessage ? component.component.minSelectedCountMessage : component.t(component.errorMessage('minSelectedCount'), {
                            minCount: parseFloat(setting),
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const min = parseFloat(setting);
                        if (!min) {
                            return true;
                        }
                        const count = Object.keys(value).reduce((total, key) => {
                            if (value[key]) {
                                total++;
                            }
                            return total;
                        }, 0);
                        return count >= min;
                    }
                },
                maxSelectedCount: {
                    key: 'validate.maxSelectedCount',
                    message(component, setting) {
                        return component.component.maxSelectedCountMessage ? component.component.maxSelectedCountMessage : component.t(component.errorMessage('maxSelectedCount'), {
                            minCount: parseFloat(setting),
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const max = parseFloat(setting);
                        if (!max) {
                            return true;
                        }
                        const count = Object.keys(value).reduce((total, key) => {
                            if (value[key]) {
                                total++;
                            }
                            return total;
                        }, 0);
                        return count <= max;
                    }
                },
                minLength: {
                    key: 'validate.minLength',
                    message(component, setting) {
                        return component.t(component.errorMessage('minLength'), {
                            field: component.errorLabel,
                            length: setting,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const minLength = parseInt(setting, 10);
                        if (!minLength || typeof value !== 'string' || component.isEmpty(value)) {
                            return true;
                        }
                        return value.length >= minLength;
                    }
                },
                maxLength: {
                    key: 'validate.maxLength',
                    message(component, setting) {
                        return component.t(component.errorMessage('maxLength'), {
                            field: component.errorLabel,
                            length: setting,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const maxLength = parseInt(setting, 10);
                        if (!maxLength || typeof value !== 'string') {
                            return true;
                        }
                        return value.length <= maxLength;
                    }
                },
                maxWords: {
                    key: 'validate.maxWords',
                    message(component, setting) {
                        return component.t(component.errorMessage('maxWords'), {
                            field: component.errorLabel,
                            length: setting,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const maxWords = parseInt(setting, 10);
                        if (!maxWords || typeof value !== 'string') {
                            return true;
                        }
                        return value.trim().split(/\s+/).length <= maxWords;
                    }
                },
                minWords: {
                    key: 'validate.minWords',
                    message(component, setting) {
                        return component.t(component.errorMessage('minWords'), {
                            field: component.errorLabel,
                            length: setting,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const minWords = parseInt(setting, 10);
                        if (!minWords || typeof value !== 'string') {
                            return true;
                        }
                        return value.trim().split(/\s+/).length >= minWords;
                    }
                },
                email: {
                    message(component) {
                        return component.t(component.errorMessage('invalid_email'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                        return !value || re.test(value);
                    }
                },
                url: {
                    message(component) {
                        return component.t(component.errorMessage('invalid_url'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        const re = /[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/;
                        return !value || re.test(value);
                    }
                },
                date: {
                    message(component) {
                        return component.t(component.errorMessage('invalid_date'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        return value !== 'Invalid date';
                    }
                },
                day: {
                    message(component) {
                        return component.t(component.errorMessage('invalid_day'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        if (!value) {
                            return true;
                        }
                        const [DAY, MONTH, YEAR] = component.dayFirst ? [
                            0,
                            1,
                            2
                        ] : [
                            1,
                            0,
                            2
                        ];
                        const values = value.split('/').map(x => parseInt(x, 10)), day = values[DAY], month = values[MONTH], year = values[YEAR], maxDay = getDaysInMonthCount(month, year);
                        if (day < 0 || day > maxDay) {
                            return false;
                        }
                        if (month < 0 || month > 12) {
                            return false;
                        }
                        if (year < 0 || year > 9999) {
                            return false;
                        }
                        return true;
                        function isLeapYear(year) {
                            return !(year % 400) || !!(year % 100) && !(year % 4);
                        }
                        function getDaysInMonthCount(month, year) {
                            switch (month) {
                            case 1:
                            case 3:
                            case 5:
                            case 7:
                            case 8:
                            case 10:
                            case 12:
                                return 31;
                            case 4:
                            case 6:
                            case 9:
                            case 11:
                                return 30;
                            case 2:
                                return isLeapYear(year) ? 29 : 28;
                            default:
                                return 31;
                            }
                        }
                    }
                },
                pattern: {
                    key: 'validate.pattern',
                    message(component, setting) {
                        return component.t(_.get(component, 'component.validate.patternMessage', component.errorMessage('pattern'), {
                            field: component.errorLabel,
                            pattern: setting,
                            data: component.data
                        }));
                    },
                    check(component, setting, value) {
                        const pattern = setting;
                        if (!pattern) {
                            return true;
                        }
                        const regex = new RegExp(`^${ pattern }$`);
                        return regex.test(value);
                    }
                },
                json: {
                    key: 'validate.json',
                    check(component, setting, value, data, index, row) {
                        if (!setting) {
                            return true;
                        }
                        const valid = component.evaluate(setting, {
                            data,
                            row,
                            rowIndex: index,
                            input: value
                        });
                        if (valid === null) {
                            return true;
                        }
                        return valid;
                    }
                },
                mask: {
                    key: 'inputMask',
                    message(component) {
                        return component.t(component.errorMessage('mask'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value) {
                        let inputMask;
                        if (component.isMultipleMasksField) {
                            const maskName = value ? value.maskName : undefined;
                            const formioInputMask = component.getMaskByName(maskName);
                            if (formioInputMask) {
                                inputMask = formioInputMask;
                            }
                            value = value ? value.value : value;
                        } else {
                            inputMask = setting;
                        }
                        inputMask = inputMask ? a.getInputMask(inputMask) : null;
                        if (value && inputMask) {
                            return a.matchInputMask(value, inputMask);
                        }
                        return true;
                    }
                },
                custom: {
                    key: 'validate.custom',
                    message(component) {
                        return component.t(component.errorMessage('custom'), {
                            field: component.errorLabel,
                            data: component.data
                        });
                    },
                    check(component, setting, value, data, index, row) {
                        if (!setting) {
                            return true;
                        }
                        const valid = component.evaluate(setting, {
                            valid: true,
                            data,
                            rowIndex: index,
                            row,
                            input: value
                        }, 'valid', true);
                        if (valid === null) {
                            return true;
                        }
                        return valid;
                    }
                },
                maxDate: {
                    key: 'maxDate',
                    message(component, setting) {
                        const date = a.getDateSetting(setting);
                        return component.t(component.errorMessage('maxDate'), {
                            field: component.errorLabel,
                            maxDate: moment(date).format(component.format)
                        });
                    },
                    check(component, setting, value) {
                        if (component.isPartialDay && component.isPartialDay(value)) {
                            return true;
                        }
                        const date = moment(value);
                        const maxDate = a.getDateSetting(setting);
                        if (_.isNull(maxDate)) {
                            return true;
                        } else {
                            maxDate.setHours(0, 0, 0, 0);
                        }
                        return date.isBefore(maxDate) || date.isSame(maxDate);
                    }
                },
                minDate: {
                    key: 'minDate',
                    message(component, setting) {
                        const date = a.getDateSetting(setting);
                        return component.t(component.errorMessage('minDate'), {
                            field: component.errorLabel,
                            minDate: moment(date).format(component.format)
                        });
                    },
                    check(component, setting, value) {
                        if (component.isPartialDay && component.isPartialDay(value)) {
                            return true;
                        }
                        const date = moment(value);
                        const minDate = a.getDateSetting(setting);
                        if (_.isNull(minDate)) {
                            return true;
                        } else {
                            minDate.setHours(0, 0, 0, 0);
                        }
                        return date.isAfter(minDate) || date.isSame(minDate);
                    }
                },
                minYear: {
                    key: 'minYear',
                    message(component, setting) {
                        return component.t(component.errorMessage('minYear'), {
                            field: component.errorLabel,
                            minYear: setting
                        });
                    },
                    check(component, setting, value) {
                        const minYear = setting;
                        let year = /\d{4}$/.exec(value);
                        year = year ? year[0] : null;
                        if (!+minYear || !+year) {
                            return true;
                        }
                        return +year >= +minYear;
                    }
                },
                maxYear: {
                    key: 'maxYear',
                    message(component, setting) {
                        return component.t(component.errorMessage('maxYear'), {
                            field: component.errorLabel,
                            maxYear: setting
                        });
                    },
                    check(component, setting, value) {
                        const maxYear = setting;
                        let year = /\d{4}$/.exec(value);
                        year = year ? year[0] : null;
                        if (!+maxYear || !+year) {
                            return true;
                        }
                        return +year <= +maxYear;
                    }
                },
                calendar: {
                    key: 'validate.calendar',
                    messageText: '',
                    message(component) {
                        return component.t(component.errorMessage(this.validators.calendar.messageText), {
                            field: component.errorLabel,
                            maxDate: moment(component.dataValue).format(component.format)
                        });
                    },
                    check(component, setting, value, data, index) {
                        this.validators.calendar.messageText = '';
                        const widget = component.getWidget(index);
                        if (!widget) {
                            return true;
                        }
                        const {settings, enteredDate} = widget;
                        const {minDate, maxDate, format} = settings;
                        const momentFormat = [a.convertFormatToMoment(format)];
                        if (momentFormat[0].match(/M{3,}/g)) {
                            momentFormat.push(momentFormat[0].replace(/M{3,}/g, 'MM'));
                        }
                        if (!value && enteredDate) {
                            const {message, result} = b.checkInvalidDate(enteredDate, momentFormat, minDate, maxDate);
                            if (!result) {
                                this.validators.calendar.messageText = message;
                                return result;
                            }
                        }
                        if (value && enteredDate) {
                            if (moment(value).format() !== moment(enteredDate, momentFormat, true).format() && enteredDate.match(/_/gi)) {
                                this.validators.calendar.messageText = b.CALENDAR_ERROR_MESSAGES.INCOMPLETE;
                                return false;
                            } else {
                                widget.enteredDate = '';
                                return true;
                            }
                        }
                    }
                }
            };
        }
        checkValidator(component, validator, setting, value, data, index, row, async) {
            let resultOrPromise = null;
            if (validator.method && typeof component[validator.method] === 'function') {
                resultOrPromise = component[validator.method](setting, value, data, index, row, async);
            } else {
                resultOrPromise = validator.check.call(this, component, setting, value, data, index, row, async);
            }
            const processResult = result => {
                if (typeof result === 'string') {
                    return result;
                }
                if (!result && validator.message) {
                    return validator.message.call(this, component, setting, index, row);
                }
                return '';
            };
            if (async) {
                return NativePromise.resolve(resultOrPromise).then(processResult);
            } else {
                return processResult(resultOrPromise);
            }
        }
        validate(component, validatorName, value, data, index, row, async) {
            if (!component.conditionallyVisible()) {
                return false;
            }
            const validator = this.validators[validatorName];
            const setting = _.get(component.component, validator.key, null);
            const resultOrPromise = this.checkValidator(component, validator, setting, value, data, index, row, async);
            const processResult = result => {
                return result ? {
                    message: _.get(result, 'message', result),
                    level: _.get(result, 'level') === 'warning' ? 'warning' : 'error',
                    path: (component.path || '').replace(/[[\]]/g, '.').replace(/\.\./g, '.').split('.').map(part => _.defaultTo(_.toNumber(part), part)),
                    context: {
                        validator: validatorName,
                        setting,
                        key: component.key,
                        label: component.label,
                        value
                    }
                } : false;
            };
            if (async) {
                return NativePromise.resolve(resultOrPromise).then(processResult);
            } else {
                return processResult(resultOrPromise);
            }
        }
        checkComponent(component, data, row, includeWarnings = false, async = false) {
            const isServerSidePersistent = typeof process !== 'undefined' && _.get(process, 'release.name') === 'node' && !_.defaultTo(component.component.persistent, true);
            if (isServerSidePersistent || component.component.validate === false) {
                return async ? NativePromise.resolve([]) : [];
            }
            data = data || component.rootValue;
            row = row || component.data;
            const values = component.component.multiple && Array.isArray(component.validationValue) ? component.validationValue : [component.validationValue];
            const validations = _.get(component, 'component.validations');
            if (validations && Array.isArray(validations)) {
                const resultsOrPromises = this.checkValidations(component, validations, data, row, values, async);
                const formatResults = results => {
                    return includeWarnings ? results : results.filter(result => result.level === 'error');
                };
                if (async) {
                    return NativePromise.all(resultsOrPromises).then(formatResults);
                } else {
                    return formatResults(resultsOrPromises);
                }
            }
            const validateCustom = _.get(component, 'component.validate.custom');
            const customErrorMessage = _.get(component, 'component.validate.customMessage');
            const resultsOrPromises = _(component.validators).chain().map(validatorName => {
                if (!this.validators.hasOwnProperty(validatorName)) {
                    return {
                        message: `Validator for "${ validatorName }" is not defined`,
                        level: 'warning',
                        context: {
                            validator: validatorName,
                            key: component.key,
                            label: component.label
                        }
                    };
                }
                if (validatorName === 'required' && !values.length) {
                    return [this.validate(component, validatorName, null, data, 0, row, async)];
                }
                return _.map(values, (value, index) => this.validate(component, validatorName, value, data, index, row, async));
            }).flatten().value();
            component.component.validate = component.component.validate || {};
            component.component.validate.unique = component.component.unique;
            resultsOrPromises.push(this.validate(component, 'unique', component.validationValue, data, 0, data, async));
            component.component.validate.multiple = component.component.multiple;
            resultsOrPromises.push(this.validate(component, 'multiple', component.validationValue, data, 0, data, async));
            const formatResults = results => {
                results = _(results).chain().flatten().compact().value();
                if (customErrorMessage || validateCustom) {
                    _.each(results, result => {
                        result.message = component.t(customErrorMessage || result.message, {
                            field: component.errorLabel,
                            data,
                            row,
                            error: result
                        });
                    });
                }
                return includeWarnings ? results : _.reject(results, result => result.level === 'warning');
            };
            if (async) {
                return NativePromise.all(resultsOrPromises).then(formatResults);
            } else {
                return formatResults(resultsOrPromises);
            }
        }
        checkValidations(component, validations, data, row, values, async) {
            const results = validations.map(validation => {
                return this.checkRule(component, validation, data, row, values, async);
            });
            const messages = results.reduce((prev, result) => {
                if (result) {
                    return [
                        ...prev,
                        ...result
                    ];
                }
                return prev;
            }, []).filter(result => result);
            const rules = messages.reduce((prev, message) => {
                prev[message.context.validator] = message;
                return prev;
            }, {});
            return Object.values(rules);
        }
        checkRule(component, validation, data, row, values, async) {
            const Rule = Rules.getRule(validation.rule);
            const results = [];
            if (Rule) {
                const rule = new Rule(component, validation.settings, this.config);
                values.map((value, index) => {
                    const result = rule.check(value, data, row, async);
                    if (result !== true) {
                        results.push({
                            level: validation.level || 'error',
                            message: component.t(validation.message || rule.defaultMessage, {
                                settings: validation.settings,
                                field: component.errorLabel,
                                data,
                                row,
                                error: result
                            }),
                            context: {
                                key: component.key,
                                index,
                                label: component.label,
                                validator: validation.rule
                            }
                        });
                    }
                });
            }
            return results.length === 0 ? false : results;
        }
        get check() {
            return this.checkComponent;
        }
        get() {
            _.get.call(this, arguments);
        }
        each() {
            _.each.call(this, arguments);
        }
        has() {
            _.has.call(this, arguments);
        }
    }
    ValidationChecker.config = {
        db: null,
        token: null,
        form: null,
        submission: null
    };
    const instance = ValidationChecker.instance = new ValidationChecker();
    return  ValidationChecker.instance;
});
define('skylark-formio/templates/bootstrap/address/form.ejs',[], function() { return "{% if (ctx.mode.autocomplete) { %}\n  <div class=\"address-autocomplete-container\">\n    <input\n      ref=\"{{ ctx.ref.searchInput }}\"\n      {% for (var attr in ctx.inputAttributes) { %}\n        {{attr}}=\"{{ctx.inputAttributes[attr]}}\"\n      {% } %}\n      value=\"{{ ctx.displayValue }}\"\n      autocomplete=\"off\"\n    >\n    {% if (!ctx.component.disableClearIcon) { %}\n      <i\n        class=\"address-autocomplete-remove-value-icon fa fa-times\"\n        tabindex=\"{{ ctx.inputAttributes.tabindex }}\"\n        ref=\"{{ ctx.ref.removeValueIcon }}\"\n      ></i>\n    {% } %}\n  </div>\n{% } %}\n{% if (ctx.self.manualModeEnabled) { %}\n  <div class=\"form-check checkbox\">\n    <label class=\"form-check-label\">\n      <input\n        ref=\"{{ ctx.ref.modeSwitcher }}\"\n        type=\"checkbox\"\n        class=\"form-check-input\"\n        tabindex=\"{{ ctx.inputAttributes.tabindex }}\"\n        {% if (ctx.mode.manual) { %}checked=true{% } %}\n        {% if (ctx.disabled) { %}disabled=true{% } %}\n      >\n      <span>{{ ctx.component.switchToManualModeLabel }}</span>\n    </label>\n  </div>\n{% } %}\n{% if (ctx.self.manualMode) { %}\n  <div ref=\"{{ ctx.nestedKey }}\">\n    {{ ctx.children }}\n  </div>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/address/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builder/form.ejs',[], function() { return "<div class=\"formio builder row formbuilder\">\n  <div class=\"col-xs-4 col-sm-3 col-md-2 formcomponents\">\n    {{ctx.sidebar}}\n  </div>\n  <div class=\"col-xs-8 col-sm-9 col-md-10 formarea\" ref=\"form\">\n    {{ctx.form}}\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builder/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builderComponent/form.ejs',[], function() { return "<div class=\"builder-component\" ref=\"dragComponent\">\n  <div class=\"component-btn-group\" data-noattach=\"true\">\n    <div class=\"btn btn-xxs btn-danger component-settings-button component-settings-button-remove\" ref=\"removeComponent\">\n      <i class=\"{{ctx.iconClass('remove')}}\"></i>\n    </div>\n    <div class=\"btn btn-xxs btn-default component-settings-button component-settings-button-copy\" ref=\"copyComponent\">\n      <i class=\"{{ctx.iconClass('copy')}}\"></i>\n    </div>\n    <div class=\"btn btn-xxs btn-default component-settings-button component-settings-button-paste\" ref=\"pasteComponent\">\n      <i class=\"{{ctx.iconClass('save')}}\"></i>\n    </div>\n    <div class=\"btn btn-xxs btn-default component-settings-button component-settings-button-edit-json\" ref=\"editJson\">\n      <i class=\"{{ctx.iconClass('wrench')}}\"></i>\n    </div>\n    <div class=\"btn btn-xxs btn-default component-settings-button component-settings-button-move\" ref=\"moveComponent\">\n      <i class=\"{{ctx.iconClass('move')}}\"></i>\n    </div>\n    <div class=\"btn btn-xxs btn-secondary component-settings-button component-settings-button-edit\", ref=\"editComponent\">\n      <i class=\"{{ctx.iconClass('cog')}}\"></i>\n    </div>\n  </div>\n  {{ctx.html}}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builderComponent/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builderComponents/form.ejs',[], function() { return "<div class=\"builder-components drag-container formio-builder-{{ctx.type}}\" ref=\"{{ctx.key}}-container\">\n  {{ctx.html}}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builderComponents/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builderEditForm/form.ejs',[], function() { return "<div class=\"row\">\n  <div class=\"col col-sm-6\">\n    <p class=\"lead\">{{ctx.t(ctx.componentInfo.title)}} {{ctx.t('Component')}}</p>\n  </div>\n  <div class=\"col col-sm-6\">\n    <div class=\"float-right\" style=\"margin-right: 20px; margin-top: 10px\">\n      <a href=\"{{ctx.t(ctx.componentInfo.documentation)}}\" target=\"_blank\">\n        <i class=\"{{ctx.iconClass('new-window')}}\"></i> {{ctx.t('Help')}}\n      </a>\n    </div>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col {% if (ctx.preview) { %}col-sm-6{% } else { %}col-sm-12{% } %}\">\n    <div ref=\"editForm\">\n        {{ctx.editForm}}\n    </div>\n    {% if (!ctx.preview) { %}\n    <div style=\"margin-top: 10px;\">\n      <button class=\"btn btn-success\" style=\"margin-right: 10px;\" ref=\"saveButton\">{{ctx.t('Save')}}</button>\n      <button class=\"btn btn-secondary\" style=\"margin-right: 10px;\" ref=\"cancelButton\">{{ctx.t('Cancel')}}</button>\n      <button class=\"btn btn-danger\" ref=\"removeButton\">{{ctx.t('Remove')}}</button>\n    </div>\n    {% } %}\n  </div>\n  {% if (ctx.preview) { %}\n  <div class=\"col col-sm-6\">\n    <div class=\"card panel preview-panel\">\n      <div class=\"card-header\">\n        <h4 class=\"card-title mb-0\">{{ctx.t('Preview')}}</h4>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"component-preview\" ref=\"preview\">\n          {{ctx.preview}}\n        </div>\n      </div>\n    </div>\n    {% if (ctx.componentInfo.help) { %}\n    <div class=\"card card-body bg-light formio-settings-help\">\n      {{ ctx.t(ctx.componentInfo.help) }}\n    </div>\n    {% } %}\n    <div style=\"margin-top: 10px;\">\n      <button class=\"btn btn-success\" style=\"margin-right: 10px;\" ref=\"saveButton\">{{ctx.t('Save')}}</button>\n      <button class=\"btn btn-secondary\" style=\"margin-right: 10px;\" ref=\"cancelButton\">{{ctx.t('Cancel')}}</button>\n      <button class=\"btn btn-danger\" ref=\"removeButton\">{{ctx.t('Remove')}}</button>\n    </div>\n  </div>\n  {% } %}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builderEditForm/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builderPlaceholder/form.ejs',[], function() { return "<div\n  class=\"drag-and-drop-alert alert alert-info no-drag\"\n  style=\"text-align:center;\"\n  role=\"alert\"\n  data-noattach=\"true\"\n  data-position=\"{{ctx.position}}\"\n>\n  {{ctx.t('Drag and Drop a form component')}}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builderPlaceholder/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builderSidebar/form.ejs',[], function() { return "<div id=\"{{ctx.groupId}}\" class=\"accordion builder-sidebar{{ctx.scrollEnabled ? ' builder-sidebar_scroll' : ''}}\" ref=\"sidebar\">\n  {% ctx.groups.forEach(function(group) { %}\n    {{ group }}\n  {% }) %}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builderSidebar/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builderSidebarGroup/form.ejs',[], function() { return "<div class=\"card form-builder-panel\" ref=\"group-panel-{{ctx.groupKey}}\">\n  <div class=\"card-header form-builder-group-header\" id=\"heading-{{ctx.groupKey}}\">\n    <h5 class=\"mb-0 mt-0\">\n      <button\n        class=\"btn btn-block builder-group-button\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#group-{{ctx.groupKey}}\"\n        data-parent=\"#{{ctx.groupId}}\"\n        aria-expanded=\"{{ctx.group.default}}\"\n        aria-controls=\"group-{{ctx.groupKey}}\"\n        ref=\"sidebar-anchor\"\n      >\n        {{ctx.t(ctx.group.title)}}\n      </button>\n    </h5>\n  </div>\n  <div\n    id=\"group-{{ctx.groupKey}}\"\n    class=\"collapse {{ctx.group.default ? ' show' : ''}}\"\n    data-parent=\"#{{ctx.groupId}}\"\n    data-default=\"{{ctx.group.default}}\"\n    aria-labelledby=\"heading-{{ctx.groupKey}}\"\n    ref=\"sidebar-group\"\n  >\n    <div id=\"group-container-{{ctx.groupKey}}\" class=\"card-body no-drop p-2\" ref=\"sidebar-container\">\n      {% !ctx.group.componentOrder || ctx.group.componentOrder.forEach(function(componentKey) { %}\n      <span\n        data-group=\"{{ctx.groupKey}}\"\n        data-key=\"{{ctx.group.components[componentKey].key}}\"\n        data-type=\"{{ctx.group.components[componentKey].schema.type}}\"\n        class=\"btn btn-primary btn-sm btn-block formcomponent drag-copy\"\n      >\n        {% if (ctx.group.components[componentKey].icon) { %}\n          <i class=\"{{ctx.iconClass(ctx.group.components[componentKey].icon)}}\" style=\"margin-right: 5px;\"></i>\n        {% } %}\n        {{ctx.t(ctx.group.components[componentKey].title)}}\n        </span>\n      {% }) %}\n      {{ctx.subgroups.join('')}}\n    </div>\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builderSidebarGroup/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/builderWizard/form.ejs',[], function() { return "<div class=\"formio builder row formbuilder\">\n  <div class=\"col-xs-4 col-sm-3 col-md-2 formcomponents\">\n    {{ctx.sidebar}}\n  </div>\n  <div class=\"col-xs-8 col-sm-9 col-md-10 formarea\">\n    <ol class=\"breadcrumb\">\n      {% ctx.pages.forEach(function(page, pageIndex) { %}\n      <li>\n        <span title=\"{{page.title}}\" class=\"mr-2 badge {% if (pageIndex === ctx.self.page) { %}badge-primary{% } else { %}badge-info{% } %} wizard-page-label\" ref=\"gotoPage\">{{page.title}}</span>\n      </li>\n      {% }) %}\n      <li>\n        <span title=\"{{ctx.t('Create Page')}}\" class=\"mr-2 badge badge-success wizard-page-label\" ref=\"addPage\">\n          <i class=\"{{ctx.iconClass('plus')}}\"></i> {{ctx.t('Page')}}\n        </span>\n      </li>\n    </ol>\n    <div ref=\"form\">\n      {{ctx.form}}\n    </div>\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/builderWizard/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/button/form.ejs',[], function() { return "<{{ctx.input.type}}\n  ref=\"button\"\n  {% for (var attr in ctx.input.attr) { %}\n  {{attr}}=\"{{ctx.input.attr[attr]}}\"\n  {% } %}\n>\n{% if (ctx.component.leftIcon) { %}<span class=\"{{ctx.component.leftIcon}}\"></span>&nbsp;{% } %}\n{{ctx.input.content}}\n{% if (ctx.component.tooltip) { %}\n  <i ref=\"tooltip\" class=\"{{ctx.iconClass('question-sign')}} text-muted\"></i>\n{% } %}\n{% if (ctx.component.rightIcon) { %}&nbsp;<span class=\"{{ctx.component.rightIcon}}\"></span>{% } %}\n</{{ctx.input.type}}>\n<div ref=\"buttonMessageContainer\">\n  <span class=\"help-block\" ref=\"buttonMessage\"></span>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/button/html.ejs',[], function() { return "\n"; });
define('skylark-formio/templates/bootstrap/button/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/checkbox/form.ejs',[], function() { return "<div class=\"form-check checkbox\">\n  <label class=\"{{ctx.input.labelClass}} form-check-label\">\n    <{{ctx.input.type}}\n      ref=\"input\"\n      {% for (var attr in ctx.input.attr) { %}\n      {{attr}}=\"{{ctx.input.attr[attr]}}\"\n      {% } %}\n      {% if (ctx.checked) { %}checked=true{% } %}\n      >\n    {% if (!ctx.self.labelIsHidden()) { %}<span>{{ctx.input.label}}</span>{% } %}\n    {% if (ctx.component.tooltip) { %}\n      <i ref=\"tooltip\" class=\"{{ctx.iconClass('question-sign')}} text-muted\"></i>\n    {% } %}\n    {{ctx.input.content}}\n    </{{ctx.input.type}}>\n  </label>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/checkbox/html.ejs',[], function() { return "<label class=\"{{ctx.input.labelClass}}\">\n    {{ctx.input.content}}\n    {% if (!ctx.self.labelIsHidden()) { %}<span>{{ctx.input.label}}</span>{% } %}\n</label>\n<div ref=\"value\">{% if (ctx.checked) { %}True{% } else { %}False{% } %}</div>\n"; });
define('skylark-formio/templates/bootstrap/checkbox/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/columns/form.ejs',[], function() { return "{% ctx.component.columns.forEach(function(column, index) { %}\n<div class=\"\n    col-{{column.size}}-{{column.width}}\n    col-{{column.size}}-offset-{{column.offset}}\n    col-{{column.size}}-push-{{column.push}}\n    col-{{column.size}}-pull-{{column.pull}}\n  \" ref=\"{{ctx.columnKey}}\">\n  {{ctx.columnComponents[index]}}\n</div>\n{% }) %}\n"; });
define('skylark-formio/templates/bootstrap/columns/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/component/form.ejs',[], function() { return "<div id=\"{{ctx.id}}\" class=\"{{ctx.classes}}\"{% if (ctx.styles) { %} styles=\"{{ctx.styles}}\"{% } %} ref=\"component\">\n  {% if (ctx.visible) { %}\n  {{ctx.children}}\n  <div ref=\"messageContainer\" class=\"formio-errors invalid-feedback\"></div>\n  {% } %}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/component/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/componentModal/form.ejs',[], function() { return "<div class=\"formio-component-modal-wrapper\" ref=\"componentModalWrapper\">\n  <div ref=\"openModalWrapper\"></div>\n\n  <div class=\"formio-dialog formio-dialog-theme-default component-rendering-hidden\" ref=\"modalWrapper\">\n    <div class=\"formio-dialog-overlay\" ref=\"modalOverlay\"></div>\n    <div class=\"formio-dialog-content\" ref=\"modalContents\">\n      <div ref=\"modalContents\">\n        {% if (ctx.visible) { %}\n        {{ctx.children}}\n        {% } %}\n        <div class=\"formio-dialog-buttons\">\n          <button class=\"btn btn-success formio-dialog-button\" ref=\"modalSave\">Save</button>\n        </div>\n      </div>\n      <button class=\"formio-dialog-close float-right btn btn-secondary btn-sm\" aria-label=\"close\" ref=\"modalClose\"></button>\n    </div>\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/componentModal/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/components/form.ejs',[], function() { return "{{ ctx.children.join('') }}\n"; });
define('skylark-formio/templates/bootstrap/components/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/container/form.ejs',[], function() { return "<div ref=\"{{ctx.nestedKey}}\">\n  {{ctx.children}}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/container/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/datagrid/form.ejs',[], function() { return "<table class=\"table datagrid-table table-bordered\n    {{ ctx.component.striped ? 'table-striped' : ''}}\n    {{ ctx.component.hover ? 'table-hover' : ''}}\n    {{ ctx.component.condensed ? 'table-sm' : ''}}\n    \" {% if (ctx.component.layoutFixed) { %}style=\"table-layout: fixed;\"{% } %}>\n  {% if (ctx.hasHeader) { %}\n  <thead>\n    <tr>\n      {% if (ctx.component.reorder) { %}<th></th>{% } %}\n      {% ctx.columns.forEach(function(col) { %}\n        <th class=\"{{col.validate && col.validate.required ? 'field-required' : ''}}\">\n          {{ col.hideLabel ? '' : ctx.t(col.label || col.title) }}\n          {% if (col.tooltip) { %} <i ref=\"tooltip\" data-title=\"{{col.tooltip}}\" class=\"{{ctx.iconClass('question-sign')}} text-muted\"></i>{% } %}\n        </th>\n      {% }) %}\n      {% if (ctx.hasExtraColumn) { %}\n      <th>\n        {% if (!ctx.builder && ctx.hasAddButton && ctx.hasTopSubmit) { %}\n        <button class=\"btn btn-primary formio-button-add-row\" ref=\"{{ctx.datagridKey}}-addRow\">\n          <i class=\"{{ctx.iconClass('plus')}}\"></i>{{ctx.t(ctx.component.addAnother || 'Add Another')}}\n        </button>\n        {% } %}\n      </th>\n      {% } %}\n    </tr>\n  </thead>\n  {% } %}\n  <tbody ref=\"{{ctx.datagridKey}}-tbody\">\n    {% ctx.rows.forEach(function(row, index) { %}\n    {% if (ctx.hasGroups && ctx.groups[index]) { %}\n    <tr ref=\"{{ctx.datagridKey}}-group-header\" class=\"datagrid-group-header{{ctx.hasToggle ? ' clickable' : ''}}\">\n      <td\n        ref=\"{{ctx.datagridKey}}-group-label\"\n        colspan=\"{{ctx.numColumns}}\"\n        class=\"datagrid-group-label\">{{ctx.groups[index].label}}</td>\n    </tr>\n    {% } %}\n    <tr ref=\"{{ctx.datagridKey}}-row\">\n      {% if (ctx.component.reorder) { %}\n        <td>\n          <button type=\"button\" class=\"formio-drag-button btn btn-default fa fa-bars\"></button>\n        </td>\n      {% } %}\n      {% ctx.columns.forEach(function(col) { %}\n        <td ref=\"{{ctx.datagridKey}}\">\n          {{row[col.key]}}\n        </td>\n      {% }) %}\n      {% if (ctx.hasExtraColumn) { %}\n        {% if (!ctx.builder && ctx.hasRemoveButtons) { %}\n        <td>\n          <button type=\"button\" class=\"btn btn-secondary formio-button-remove-row\" ref=\"{{ctx.datagridKey}}-removeRow\">\n            <i class=\"{{ctx.iconClass('remove-circle')}}\"></i>\n          </button>\n        </td>\n        {% } %}\n        {% if (ctx.canAddColumn) { %}\n        <td ref=\"{{ctx.key}}-container\">\n          {{ctx.placeholder}}\n        </td>\n        {% } %}\n      {% } %}\n    </tr>\n    {% }) %}\n  </tbody>\n  {% if (!ctx.builder && ctx.hasAddButton && ctx.hasBottomSubmit) { %}\n  <tfoot>\n    <tr>\n      <td colspan=\"{{ctx.numColumns + 1}}\">\n        <button class=\"btn btn-primary formio-button-add-row\" ref=\"{{ctx.datagridKey}}-addRow\">\n          <i class=\"{{ctx.iconClass('plus')}}\"></i> {{ctx.t(ctx.component.addAnother || 'Add Another')}}\n        </button>\n      </td>\n    </tr>\n  </tfoot>\n  {% } %}\n</table>\n"; });
define('skylark-formio/templates/bootstrap/datagrid/html.ejs',[], function() { return "<table class=\"table datagrid-table table-bordered\n    {{ ctx.component.striped ? 'table-striped' : ''}}\n    {{ ctx.component.hover ? 'table-hover' : ''}}\n    {{ ctx.component.condensed ? 'table-sm' : ''}}\n    \">\n  {% if (ctx.hasHeader) { %}\n  <thead>\n    <tr>\n      {% ctx.columns.forEach(function(col) { %}\n        <th class=\"{{col.validate && col.validate.required ? 'field-required' : ''}}\">\n          {{ col.hideLabel ? '' : ctx.t(col.label || col.title) }}\n          {% if (col.tooltip) { %} <i ref=\"tooltip\" data-title=\"{{col.tooltip}}\" class=\"{{ctx.iconClass('question-sign')}} text-muted\"></i>{% } %}\n        </th>\n      {% }) %}\n    </tr>\n  </thead>\n  {% } %}\n  <tbody>\n    {% ctx.rows.forEach(function(row) { %}\n    <tr>\n      {% ctx.columns.forEach(function(col) { %}\n        <td ref=\"{{ctx.datagridKey}}\">\n          {{row[col.key]}}\n        </td>\n      {% }) %}\n    </tr>\n    {% }) %}\n  </tbody>\n</table>\n"; });
define('skylark-formio/templates/bootstrap/datagrid/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/day/form.ejs',[], function() { return "<div class=\"row\">\n  {% if (ctx.dayFirst && ctx.showDay) { %}\n  <div class=\"col col-xs-3\">\n    {% if (!ctx.component.hideInputLabels) { %}\n    <label for=\"{{ctx.component.key}}-day\" class=\"{% if(ctx.component.fields.day.required) { %}field-required{% } %}\">{{ctx.t('Day')}}</label>\n    {% } %}\n    <div>{{ctx.day}}</div>\n  </div>\n  {% } %}\n  {% if (ctx.showMonth) { %}\n  <div class=\"col col-xs-4\">\n    {% if (!ctx.component.hideInputLabels) { %}\n    <label for=\"{{ctx.component.key}}-month\" class=\"{% if(ctx.component.fields.month.required) { %}field-required{% } %}\">{{ctx.t('Month')}}</label>\n    {% } %}\n    <div>{{ctx.month}}</div>\n  </div>\n  {% } %}\n  {% if (!ctx.dayFirst && ctx.showDay) { %}\n  <div class=\"col col-xs-3\">\n    {% if (!ctx.component.hideInputLabels) { %}\n    <label for=\"{{ctx.component.key}}-day\" class=\"{% if(ctx.component.fields.day.required) { %}field-required{% } %}\">{{ctx.t('Day')}}</label>\n    {% } %}\n    <div>{{ctx.day}}</div>\n  </div>\n  {% } %}\n  {% if (ctx.showYear) { %}\n  <div class=\"col col-xs-5\">\n    {% if (!ctx.component.hideInputLabels) { %}\n    <label for=\"{{ctx.component.key}}-year\" class=\"{% if(ctx.component.fields.year.required) { %}field-required{% } %}\">{{ctx.t('Year')}}</label>\n    {% } %}\n    <div>{{ctx.year}}</div>\n  </div>\n  {% } %}\n</div>\n<input name=\"ctx.data[day]\" type=\"hidden\" class=\"form-control\" lang=\"en\" value=\"\" ref=\"input\">\n"; });
define('skylark-formio/templates/bootstrap/day/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/dialog/form.ejs',[], function() { return "<div class=\"formio-dialog formio-dialog-theme-default component-settings\">\n  <div class=\"formio-dialog-overlay\" ref=\"dialogOverlay\"></div>\n  <div class=\"formio-dialog-content\" ref=\"dialogContents\">\n    <div ref=\"dialogContents\"></div>\n    <button class=\"formio-dialog-close float-right btn btn-secondary btn-sm\" aria-label=\"close\" ref=\"dialogClose\"></button>\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/dialog/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/editgrid/form.ejs',[], function() { return "<ul class=\"editgrid-listgroup list-group\n    {{ ctx.component.striped ? 'table-striped' : ''}}\n    {{ ctx.component.bordered ? 'table-bordered' : ''}}\n    {{ ctx.component.hover ? 'table-hover' : ''}}\n    {{ ctx.component.condensed ? 'table-sm' : ''}}\n    \">\n  {% if (ctx.header) { %}\n  <li class=\"list-group-item list-group-header\">\n    {{ctx.header}}\n  </li>\n  {% } %}\n  {% ctx.rows.forEach(function(row, rowIndex) { %}\n  <li class=\"list-group-item\" ref=\"{{ctx.ref.row}}\">\n    {{row}}\n    {% if (ctx.openRows[rowIndex] && !ctx.readOnly) { %}\n    <div class=\"editgrid-actions\">\n      <button class=\"btn btn-primary\" ref=\"{{ctx.ref.saveRow}}\">{{ctx.t(ctx.component.saveRow || 'Save')}}</button>\n      {% if (ctx.component.removeRow) { %}\n      <button class=\"btn btn-danger\" ref=\"{{ctx.ref.cancelRow}}\">{{ctx.t(ctx.component.removeRow || 'Cancel')}}</button>\n      {% } %}\n    </div>\n    {% } %}\n    <div class=\"has-error\">\n      <div class=\"editgrid-row-error help-block\">\n        {{ctx.errors[rowIndex]}}\n      </div>\n    </div>\n  </li>\n  {% }) %}\n  {% if (ctx.footer) { %}\n  <li class=\"list-group-item list-group-footer\">\n    {{ctx.footer}}\n  </li>\n  {% } %}\n</ul>\n{% if (!ctx.readOnly && ctx.hasAddButton) { %}\n<button class=\"btn btn-primary\" ref=\"{{ctx.ref.addRow}}\">\n  <i class=\"{{ctx.iconClass('plus')}}\"></i> {{ctx.t(ctx.component.addAnother || 'Add Another')}}\n</button>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/editgrid/html.ejs',[], function() { return "<ul class=\"editgrid-listgroup list-group\n    {{ ctx.component.striped ? 'table-striped' : ''}}\n    {{ ctx.component.bordered ? 'table-bordered' : ''}}\n    {{ ctx.component.hover ? 'table-hover' : ''}}\n    {{ ctx.component.condensed ? 'table-sm' : ''}}\n    \">\n  {% if (ctx.header) { %}\n  <li class=\"list-group-item list-group-header\">\n    {{ctx.header}}\n  </li>\n  {% } %}\n  {% ctx.rows.forEach(function(row, rowIndex) { %}\n  <li class=\"list-group-item\" ref=\"{{ctx.ref.row}}\">\n    {{row}}\n    {% if (ctx.openRows[rowIndex] && !ctx.readOnly) { %}\n    <div class=\"editgrid-actions\">\n      <button class=\"btn btn-primary\" ref=\"{{ctx.ref.saveRow}}\">{{ctx.t(ctx.component.saveRow || 'Save')}}</button>\n      {% if (ctx.component.removeRow) { %}\n      <button class=\"btn btn-danger\" ref=\"{{ctx.ref.cancelRow}}\">{{ctx.t(ctx.component.removeRow || 'Cancel')}}</button>\n      {% } %}\n    </div>\n    {% } %}\n    <div class=\"has-error\">\n      <div class=\"editgrid-row-error help-block\">\n        {{ctx.errors[rowIndex]}}\n      </div>\n    </div>\n  </li>\n  {% }) %}\n  {% if (ctx.footer) { %}\n  <li class=\"list-group-item list-group-footer\">\n    {{ctx.footer}}\n  </li>\n  {% } %}\n</ul>\n"; });
define('skylark-formio/templates/bootstrap/editgrid/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/field/form.ejs',[], function() { return "{% if (!ctx.label.hidden && ctx.label.labelPosition !== 'bottom') { %}\n  {{ ctx.labelMarkup }}\n{% } %}\n\n{% if (ctx.label.hidden && ctx.label.className && ctx.component.validate.required) { %}\n  <label class=\"{{ctx.label.className}}\"></label>\n{% } %}\n\n{{ctx.element}}\n\n{% if (!ctx.label.hidden && ctx.label.labelPosition === 'bottom') { %}\n  {{ ctx.labelMarkup }}\n{% } %}\n{% if (ctx.component.description) { %}\n  <div class=\"form-text text-muted\">{{ctx.t(ctx.component.description)}}</div>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/field/align.ejs',[], function() { return "<div class=\"field-wrapper\n  {{ctx.isRightPosition ? 'field-wrapper--reverse' : ''}}\">\n  {% if (!ctx.label.hidden) { %}\n    <div class=\"field-label\n      {{ctx.isRightAlign ? 'field-label--right' : ''}}\"\n      style=\"{{ctx.labelStyles}}\">\n    {{ ctx.labelMarkup }}\n    </div>\n  {% } %}\n\n  {% if (ctx.label.hidden && ctx.label.className && ctx.component.validate.required) { %}\n    <div class=\"field-label\n      {{ctx.isRightAlign ? 'field-label--right' : ''}}\"\n      style=\"{{ctx.labelStyles}}\">\n      <label class=\"{{ctx.label.className}}\"></label>\n    </div>\n  {% } %}\n\n  <div class=\"filed-content\" style=\"{{ctx.contentStyles}}\">\n    {{ctx.element}}\n  </div>\n</div>\n\n{% if (ctx.component.description) { %}\n  <div class=\"form-text text-muted\">{{ctx.t(ctx.component.description)}}</div>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/field/index',[
    './form.ejs',
    './align.ejs'
], function (form, align) {
    'use strict';
    return {
        form,
        align
    };
});
define('skylark-formio/templates/bootstrap/fieldset/form.ejs',[], function() { return "<fieldset>\n  {% if (ctx.component.legend) { %}\n  <legend ref=\"header\" class=\"{{ctx.component.collapsible ? 'formio-clickable' : ''}}\">\n    {{ctx.t(ctx.component.legend)}}\n    {% if (ctx.component.tooltip) { %}\n      <i ref=\"tooltip\" class=\"{{ctx.iconClass('question-sign')}} text-muted\"></i>\n    {% } %}\n  </legend>\n  {% } %}\n  {% if (!ctx.collapsed) { %}\n  <div class=\"fieldset-body\" ref=\"{{ctx.nestedKey}}\">\n    {{ctx.children}}\n  </div>\n  {% } %}\n</fieldset>\n"; });
define('skylark-formio/templates/bootstrap/fieldset/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/file/form.ejs',[], function() { return "{% if (!ctx.self.imageUpload) { %}\n  <ul class=\"list-group list-group-striped\">\n    <li class=\"list-group-item list-group-header hidden-xs hidden-sm\">\n      <div class=\"row\">\n        {% if (!ctx.disabled) { %}\n          <div class=\"col-md-1\"></div>\n        {% } %}\n        <div class=\"col-md-{% if (ctx.self.hasTypes) { %}7{% } else { %}9{% } %}\"><strong>{{ctx.t('File Name')}}</strong></div>\n        <div class=\"col-md-2\"><strong>{{ctx.t('Size')}}</strong></div>\n        {% if (ctx.self.hasTypes) { %}\n          <div class=\"col-md-2\"><strong>{{ctx.t('Type')}}</strong></div>\n        {% } %}\n      </div>\n    </li>\n    {% ctx.files.forEach(function(file) { %}\n      <li class=\"list-group-item\">\n        <div class=\"row\">\n          {% if (!ctx.disabled) { %}\n            <div class=\"col-md-1\"><i class=\"{{ctx.iconClass('remove')}}\" ref=\"removeLink\"></i></div>\n          {% } %}\n          <div class=\"col-md-{% if (ctx.self.hasTypes) { %}7{% } else { %}9{% } %}\">\n            {% if (ctx.component.uploadOnly) { %}\n              {{file.originalName || file.name}}\n            {% } else { %}\n              <a href=\"{{file.url || '#'}}\" target=\"_blank\" ref=\"fileLink\">{{file.originalName || file.name}}</a>\n            {% } %}\n          </div>\n          <div class=\"col-md-2\">{{ctx.fileSize(file.size)}}</div>\n          {% if (ctx.self.hasTypes && !ctx.disabled) { %}\n            <div class=\"col-md-2\">\n              <select class=\"file-type\" ref=\"fileType\">\n                {% ctx.component.fileTypes.map(function(type) { %}\n                  <option class=\"test\" value=\"{{ type.value }}\" {% if (type.label === file.fileType) { %}selected=\"selected\"{% } %}>{{ type.label }}</option>\n                {% }); %}\n              </select>\n            </div>\n          {% } %}\n          {% if (ctx.self.hasTypes && ctx.disabled) { %}\n          <div class=\"col-md-2\">{{file.fileType}}</div>\n          {% } %}\n        </div>\n      </li>\n    {% }) %}\n  </ul>\n{% } else { %}\n  <div>\n    {% ctx.files.forEach(function(file) { %}\n      <div>\n        <span>\n          <img ref=\"fileImage\" src=\"\" alt=\"{{file.originalName || file.name}}\" style=\"width:{{ctx.component.imageSize}}px\">\n          {% if (!ctx.disabled) { %}\n            <i class=\"{{ctx.iconClass('remove')}}\" ref=\"removeLink\"></i>\n          {% } %}\n        </span>\n      </div>\n    {% }) %}\n  </div>\n{% } %}\n{% if (!ctx.disabled && (ctx.component.multiple || !ctx.files.length)) { %}\n  {% if (ctx.self.useWebViewCamera) { %}\n    <div class=\"fileSelector\">\n      <button class=\"btn btn-primary\" ref=\"galleryButton\"><i class=\"fa fa-book\"></i> {{ctx.t('Gallery')}}</button>\n      <button class=\"btn btn-primary\" ref=\"cameraButton\"><i class=\"fa fa-camera\"></i> {{ctx.t('Camera')}}</button>\n    </div>\n  {% } else if (!ctx.self.cameraMode) { %}\n    <div class=\"fileSelector\" ref=\"fileDrop\">\n      <i class=\"{{ctx.iconClass('cloud-upload')}}\"></i> {{ctx.t('Drop files to attach,')}}\n        {% if (ctx.self.imageUpload) { %}\n          <a href=\"#\" ref=\"toggleCameraMode\"><i class=\"fa fa-camera\"></i> {{ctx.t('Use Camera,')}}</a>\n        {% } %}\n        {{ctx.t('or')}} <a href=\"#\" ref=\"fileBrowse\" class=\"browse\">{{ctx.t('browse')}}</a>\n    </div>\n  {% } else { %}\n    <div>\n      <video class=\"video\" autoplay=\"true\" ref=\"videoPlayer\"></video>\n    </div>\n    <button class=\"btn btn-primary\" ref=\"takePictureButton\"><i class=\"fa fa-camera\"></i> {{ctx.t('Take Picture')}}</button>\n    <button class=\"btn btn-primary\" ref=\"toggleCameraMode\">{{ctx.t('Switch to file upload')}}</button>\n  {% } %}\n{% } %}\n{% ctx.statuses.forEach(function(status) { %}\n  <div class=\"file {{ctx.statuses.status === 'error' ? ' has-error' : ''}}\">\n    <div class=\"row\">\n      <div class=\"fileName col-form-label col-sm-10\">{{status.originalName}} <i class=\"{{ctx.iconClass('remove')}}\" ref=\"fileStatusRemove\"></i></div>\n      <div class=\"fileSize col-form-label col-sm-2 text-right\">{{ctx.fileSize(status.size)}}</div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-sm-12\">\n        {% if (status.status === 'progress') { %}\n          <div class=\"progress\">\n            <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"{{status.progress}}\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: {{status.progress}}%\">\n              <span class=\"sr-only\">{{status.progress}}% {{ctx.t('Complete')}}</span>\n            </div>\n          </div>\n        {% } else { %}\n          <div class=\"bg-{{status.status}}\">{{ctx.t(status.message)}}</div>\n        {% } %}\n      </div>\n    </div>\n  </div>\n{% }) %}\n{% if (!ctx.component.storage || ctx.support.hasWarning) { %}\n  <div class=\"alert alert-warning\">\n    {% if (!ctx.component.storage) { %}\n      <p>{{ctx.t('No storage has been set for this field. File uploads are disabled until storage is set up.')}}</p>\n    {% } %}\n    {% if (!ctx.support.filereader) { %}\n      <p>{{ctx.t('File API & FileReader API not supported.')}}</p>\n    {% } %}\n    {% if (!ctx.support.formdata) { %}\n      <p>{{ctx.t(\"XHR2's FormData is not supported.\")}}</p>\n    {% } %}\n    {% if (!ctx.support.progress) { %}\n      <p>{{ctx.t(\"XHR2's upload progress isn't supported.\")}}</p>\n    {% } %}\n  </div>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/file/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/html/form.ejs',[], function() { return "<{{ctx.tag}} class=\"{{ ctx.component.className }}\" ref=\"html\"\n  {% ctx.attrs.forEach(function(attr) { %}\n    {{attr.attr}}=\"{{attr.value}}\"\n  {% }) %}\n>{{ctx.content}}{% if (!ctx.singleTags || ctx.singleTags.indexOf(ctx.tag) === -1) { %}</{{ctx.tag}}>{% } %}\n"; });
define('skylark-formio/templates/bootstrap/html/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/icon/form.ejs',[], function() { return "<i ref=\"{{ctx.ref}}\" class=\"{{ctx.className}}\" style=\"{{ctx.styles}}\">{{ctx.content}}</i>\n"; });
define('skylark-formio/templates/bootstrap/icon/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/iconClass',[],function () {
    'use strict';
    return (iconset, name, spinning) => {
        if (iconset === 'fa') {
            switch (name) {
            case 'save':
                name = 'download';
                break;
            case 'zoom-in':
                name = 'search-plus';
                break;
            case 'zoom-out':
                name = 'search-minus';
                break;
            case 'question-sign':
                name = 'question-circle';
                break;
            case 'remove-circle':
                name = 'times-circle-o';
                break;
            case 'new-window':
                name = 'window-restore';
                break;
            case 'move':
                name = 'arrows';
                break;
            case 'time':
                name = 'clock-o';
                break;
            }
        }
        return spinning ? `${ iconset } ${ iconset }-${ name } ${ iconset }-spin` : `${ iconset } ${ iconset }-${ name }`;
    };
});
define('skylark-formio/templates/bootstrap/input/form.ejs',[], function() { return "{% if (ctx.component.prefix || ctx.component.suffix) { %}\n<div class=\"input-group\">\n{% } %}\n{% if (ctx.component.prefix) { %}\n<div class=\"input-group-prepend\" ref=\"prefix\">\n  <span class=\"input-group-text\">\n    {{ctx.component.prefix}}\n  </span>\n</div>\n{% } %}\n<{{ctx.input.type}}\n  ref=\"{{ctx.input.ref ? ctx.input.ref : 'input'}}\"\n  {% for (var attr in ctx.input.attr) { %}\n  {{attr}}=\"{{ctx.input.attr[attr]}}\"\n  {% } %}\n>{{ctx.input.content}}</{{ctx.input.type}}>\n{% if (ctx.component.showCharCount) { %}\n<span class=\"text-muted pull-right\" ref=\"charcount\"></span>\n{% } %}\n{% if (ctx.component.showWordCount) { %}\n<span class=\"text-muted pull-right\" ref=\"wordcount\"></span>\n{% } %}\n{% if (ctx.component.suffix) { %}\n<div class=\"input-group-append\" ref=\"suffix\">\n  <span class=\"input-group-text\">\n    {{ctx.component.suffix}}\n  </span>\n</div>\n{% } %}\n{% if (ctx.component.prefix || ctx.component.suffix) { %}\n</div>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/input/html.ejs',[], function() { return "<div ref=\"value\">{% if (ctx.value) { %}{{ctx.value}}{% } else { %}-{% } %}</div>\n"; });
define('skylark-formio/templates/bootstrap/input/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/label/form.ejs',[], function() { return "<label class=\"col-form-label {{ctx.label.className}}\">\n  {{ ctx.t(ctx.component.label) }}\n  {% if (ctx.component.tooltip) { %}\n    <i ref=\"tooltip\" class=\"{{ctx.iconClass('question-sign')}} text-muted\"></i>\n  {% } %}\n</label>\n"; });
define('skylark-formio/templates/bootstrap/label/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/loader/form.ejs',[], function() { return "<div class=\"formio-loader\">\n  <div class=\"loader-wrapper\">\n    <div class=\"loader text-center\"></div>\n  </div> \n</div>\n"; });
define('skylark-formio/templates/bootstrap/loader/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/loading/form.ejs',[], function() { return "Loading...\n"; });
define('skylark-formio/templates/bootstrap/loading/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/map/form.ejs',[], function() { return "<div id=\"{{ctx.mapId}}\" style=\"min-height: 300px; height: calc(100vh - 600px);\" ref=\"gmapElement\"></div>\n"; });
define('skylark-formio/templates/bootstrap/map/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/message/form.ejs',[], function() { return "<div class=\"form-text {{ctx.level}}\">{{ctx.message}}</div>\n"; });
define('skylark-formio/templates/bootstrap/message/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/multipleMasksInput/form.ejs',[], function() { return "<div\n  class=\"input-group formio-multiple-mask-container\"\n  ref=\"{{ctx.input.ref ? ctx.input.ref : 'input'}}\"\n>\n  <select\n    class=\"form-control formio-multiple-mask-select\"\n    id=\"{{ctx.key}}-mask\"\n    ref=\"select\">\n    {% ctx.selectOptions.forEach(function(option) { %}\n    <option value=\"{{option.value}}\">{{option.label}}</option>\n    {% }); %}\n  </select>\n  <input\n    ref=\"mask\"\n    {% for (var attr in ctx.input.attr) { %}\n    {{attr}}=\"{{ctx.input.attr[attr]}}\"\n    {% } %}\n  >\n</div>\n"; });
define('skylark-formio/templates/bootstrap/multipleMasksInput/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/multiValueRow/form.ejs',[], function() { return "<tr ref=\"row\">\n  <td>\n    {{ctx.element}}\n  </td>\n  {% if (!ctx.disabled) { %}\n  <td>\n    <button type=\"button\" class=\"btn btn-secondary\" ref=\"removeRow\">\n      <i class=\"{{ctx.iconClass('remove-circle')}}\"></i>\n    </button>\n  </td>\n  {% } %}\n</tr>\n"; });
define('skylark-formio/templates/bootstrap/multiValueRow/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/multiValueTable/form.ejs',[], function() { return "<table class=\"table table-bordered\">\n  <tbody>\n  {{ctx.rows}}\n  {% if (!ctx.disabled) { %}\n  <tr>\n    <td colspan=\"2\">\n      <button class=\"btn btn-primary formio-button-add-another\" ref=\"addButton\"><i class=\"{{ctx.iconClass('plus')}}\"></i> {{ctx.t(ctx.addAnother)}}</button>\n    </td>\n  </tr>\n  {% } %}\n  </tbody>\n</table>\n"; });
define('skylark-formio/templates/bootstrap/multiValueTable/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/panel/form.ejs',[], function() { return "<div class=\"mb-2 card border\">\n  <div class=\"card-header {{ctx.transform('class', 'bg-' + ctx.component.theme)}}\" ref=\"header\">\n    <span class=\"mb-0 card-title\">\n      {% if (ctx.component.collapsible) { %}\n        <i class=\"formio-collapse-icon {{ctx.iconClass(ctx.collapsed ? 'plus-square-o' : 'minus-square-o')}} text-muted\" data-title=\"Collapse Panel\"></i>\n      {% } %}\n      {{ctx.t(ctx.component.title)}}\n      {% if (ctx.component.tooltip) { %}\n        <i ref=\"tooltip\" class=\"{{ctx.iconClass('question-sign')}} text-muted\"></i>\n      {% } %}\n    </span>\n  </div>\n  {% if (!ctx.collapsed || ctx.builder) { %}\n  <div class=\"card-body\" ref=\"{{ctx.nestedKey}}\">\n    {{ctx.children}}\n  </div>\n  {% } %}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/panel/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/pdf/form.ejs',[], function() { return "<div class=\"{{ctx.classes}}\" ref=\"webform\">\n\t<span data-noattach=\"true\" ref=\"zoomIn\" style=\"position:absolute;right:10px;top:10px;cursor:pointer;\" class=\"btn btn-default btn-secondary no-disable\">\n\t\t<i class=\"{{ ctx.iconClass('zoom-in') }}\"></i>\n\t</span>\n\t<span data-noattach=\"true\" ref=\"zoomOut\" style=\"position:absolute;right:10px;top:60px;cursor:pointer;\" class=\"btn btn-default btn-secondary no-disable\">\n\t\t<i class=\"{{ ctx.iconClass('zoom-out') }}\"></i>\n\t</span>\n  <div data-noattach=\"true\" ref=\"iframeContainer\"></div>\n  <button type=\"button\" class=\"btn btn-primary\" ref=\"submitButton\">{{ctx.t('Submit')}}</button>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/pdf/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/pdfBuilder/form.ejs',[], function() { return "<div class=\"formio builder row formbuilder\">\n  <div class=\"col-xs-4 col-sm-3 col-md-2 formcomponents\">\n    {{ctx.sidebar}}\n  </div>\n  <div class=\"col-xs-8 col-sm-9 col-md-10 formarea\" ref=\"form\">\n\t  <div class=\"formio-drop-zone\" ref=\"iframeDropzone\"></div>\n    {{ctx.form}}\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/pdfBuilder/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/pdfBuilderUpload/form.ejs',[], function() { return "<div class=\"pdf-upload formio-component-file\">\n  <h3 class=\"label\">{{ctx.t('Upload a PDF File')}}</h3>\n  <input type=\"file\" style=\"opacity: 0; position: absolute;\" tabindex=\"-1\" accept=\".pdf\" ref=\"hiddenFileInputElement\">\n  <div class=\"fileSelector\" ref=\"fileDrop\">\n    <i class=\"{{ctx.iconClass('cloud-upload')}}\"></i>{{ctx.t('Drop pdf to start, or')}} <a href=\"#\" ref=\"fileBrowse\" class=\"browse\">{{ctx.t('browse')}}</a>\n  </div>\n  <div class=\"alert alert-danger\" ref=\"uploadError\">\n\n  </div>\n</div>\n\n"; });
define('skylark-formio/templates/bootstrap/pdfBuilderUpload/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/radio/form.ejs',[], function() { return "<div class=\"form-radio radio\">\n  {% ctx.values.forEach(function(item) { %}\n  <div class=\"form-check{{ctx.inline ? '-inline' : ''}}\" ref=\"wrapper\">\n    <label class=\"form-check-label label-position-{{ ctx.component.optionsLabelPosition }}\" for=\"{{ctx.id}}{{ctx.row}}-{{item.value}}\">\n      {% if (ctx.component.optionsLabelPosition === 'left' || ctx.component.optionsLabelPosition === 'top') { %}\n      <span>{{ctx.t(item.label)}}</span>\n      {% } %}\n      <{{ctx.input.type}}\n        ref=\"input\"\n        {% for (var attr in ctx.input.attr) { %}\n        {{attr}}=\"{{ctx.input.attr[attr]}}\"\n        {% } %}\n        value=\"{{item.value}}\"\n        {% if (ctx.value && (ctx.value === item.value || (typeof ctx.value === 'object' && ctx.value.hasOwnProperty(item.value) && ctx.value[item.value]))) { %}\n          checked=true\n        {% } %}\n        {% if (item.disabled) { %}\n          disabled=true\n        {% } %}\n        id=\"{{ctx.id}}{{ctx.row}}-{{item.value}}\"\n      >\n      {% if (!ctx.component.optionsLabelPosition || ctx.component.optionsLabelPosition === 'right' || ctx.component.optionsLabelPosition === 'bottom') { %}\n      <span>{{ctx.t(item.label)}}</span>\n      {% } %}\n    </label>\n  </div>\n  {% }) %}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/radio/html.ejs',[], function() { return "<div ref=\"value\">\n  {% var filtered = ctx.values.filter(function(item) {return ctx.value === item.value || (typeof ctx.value === 'object' && ctx.value.hasOwnProperty(item.value) && ctx.value[item.value])}).map(function(item) { return ctx.t(item.label)}).join(', ') %}\n  {{ filtered }}\n  </div>\n"; });
define('skylark-formio/templates/bootstrap/radio/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/resourceAdd/form.ejs',[], function() { return "<table class=\"table table-bordered\">\n  <tbody>\n    <tr>\n      <td>\n        {{ctx.element}}\n      </td>\n    </tr>\n    <tr>\n      <td colspan=\"2\">\n        <button class=\"btn btn-primary formio-button-add-resource\" ref=\"addResource\">\n          <i class=\"{{ctx.iconClass('plus')}}\"></i>\n          {{ctx.t(ctx.component.addResourceLabel || 'Add Resource')}}\n        </button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"; });
define('skylark-formio/templates/bootstrap/resourceAdd/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/select/form.ejs',[], function() { return "<select\n  ref=\"{{ctx.input.ref ? ctx.input.ref : 'selectContainer'}}\"\n  {{ ctx.input.multiple ? 'multiple' : '' }}\n  {% for (var attr in ctx.input.attr) { %}\n  {{attr}}=\"{{ctx.input.attr[attr]}}\"\n  {% } %}\n>{{ctx.selectOptions}}</select>\n<input type=\"text\"\n       class=\"formio-select-autocomplete-input\"\n       ref=\"autocompleteInput\"\n       {% if (ctx.input.attr.autocomplete) { %}\n       autocomplete=\"{{ctx.input.attr.autocomplete}}\"\n       {% } %}\n       tabindex=\"-1\"\n/>\n"; });
define('skylark-formio/templates/bootstrap/select/html.ejs',[], function() { return "<div ref=\"value\">{% if (ctx.value) { %}{{ ctx.self.itemValueForHTMLMode(ctx.value) }}{% } else { %}-{% } %}</div>\n"; });
define('skylark-formio/templates/bootstrap/select/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/selectOption/form.ejs',[], function() { return "<option {{ ctx.selected ? 'selected=\"selected\"' : '' }}\n  value=\"{{ctx.useId ? ctx.id : ctx.option.value}}\"\n  {% for (var attr in ctx.attrs) { %}\n  {{attr}}=\"{{ctx.attrs[attr]}}\"\n  {% } %}\n  >\n  {{ctx.t(ctx.option.label)}}\n</option>\n"; });
define('skylark-formio/templates/bootstrap/selectOption/html.ejs',[], function() { return "{% if (ctx.selected) { %}{{ctx.t(ctx.option.label)}}{% } %}\n"; });
define('skylark-formio/templates/bootstrap/selectOption/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/signature/form.ejs',[], function() { return "{{ctx.element}}\n<div\n  class=\"signature-pad-body\"\n  style=\"width: {{ctx.component.width}};height: {{ctx.component.height}};padding:0;margin:0;\"\n  tabindex=\"{{ctx.component.tabindex || 0}}\"\n  ref=\"padBody\"\n>\n  <a class=\"btn btn-sm btn-light signature-pad-refresh\" ref=\"refresh\">\n    <i class=\"{{ctx.iconClass('refresh')}}\"></i>\n  </a>\n  <canvas class=\"signature-pad-canvas\" height=\"{{ctx.component.height}}\" ref=\"canvas\"></canvas>\n  {% if (ctx.required) { %}\n  <span class=\"form-control-feedback field-required-inline text-danger\">\n    <i class=\"{{ctx.iconClass('asterisk')}}\"></i>\n  </span>\n  {% } %}\n  <img style=\"width: 100%;display: none;\" ref=\"signatureImage\">\n</div>\n{% if (ctx.component.footer) { %}\n  <div class=\"signature-pad-footer\">\n    {{ctx.t(ctx.component.footer)}}\n  </div>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/signature/html.ejs',[], function() { return "<img style=\"width: 100%;\" ref=\"signatureImage\">\n"; });
define('skylark-formio/templates/bootstrap/signature/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/survey/form.ejs',[], function() { return "<table class=\"table table-striped table-bordered\">\n  <thead>\n    <tr>\n      <th></th>\n      {% ctx.component.values.forEach(function(value) { %}\n      <th style=\"text-align: center;\">{{ctx.t(value.label)}}</th>\n      {% }) %}\n    </tr>\n  </thead>\n  <tbody>\n    {% ctx.component.questions.forEach(function(question) { %}\n    <tr>\n      <td>{{ctx.t(question.label)}}</td>\n      {% ctx.component.values.forEach(function(value) { %}\n      <td style=\"text-align: center;\">\n        <input type=\"radio\" name=\"{{ ctx.self.getInputName(question) }}\" value=\"{{value.value}}\" id=\"{{ctx.key}}-{{question.value}}-{{value.value}}\" ref=\"input\">\n      </td>\n      {% }) %}\n    </tr>\n    {% }) %}\n  </tbody>\n</table>\n"; });
define('skylark-formio/templates/bootstrap/survey/html.ejs',[], function() { return "<table class=\"table table-striped table-bordered\">\n  <tbody>\n    {% ctx.component.questions.forEach(function(question) { %}\n    <tr>\n      <th>{{ctx.t(question.label)}}</th>\n      <td>\n      {% ctx.component.values.forEach(function(item) { %}\n        {% if (ctx.value && ctx.value.hasOwnProperty(question.value) && ctx.value[question.value] === item.value) { %}\n          {{ctx.t(item.label)}}\n        {% } %}\n      {% }) %}\n      </td>\n    </tr>\n    {% }) %}\n  </tbody>\n</table>\n"; });
define('skylark-formio/templates/bootstrap/survey/index',[
    './form.ejs',
    './html.ejs'
], function (form, html) {
    'use strict';
    return {
        form,
        html
    };
});
define('skylark-formio/templates/bootstrap/tab/flat.ejs',[], function() { return "{% ctx.component.components.forEach(function(tab, index) { %}\n  <div class=\"mb-2 card border\">\n    <div class=\"card-header bg-default\">\n      <h4 class=\"mb-0 card-title\">{{ ctx.t(tab.label) }}</h4>\n    </div>\n    <div class=\"card-body\">\n      {{ ctx.tabComponents[index] }}\n    </div>\n  </div>\n{% }) %}\n"; });
define('skylark-formio/templates/bootstrap/tab/form.ejs',[], function() { return "<div class=\"card\">\n  <div class=\"card-header\">\n    <ul class=\"nav nav-tabs card-header-tabs\">\n      {% ctx.component.components.forEach(function(tab, index) { %}\n      <li class=\"nav-item{{ ctx.currentTab === index ? ' active' : ''}}\" role=\"presentation\" ref=\"{{ctx.tabLikey}}\">\n        <a class=\"nav-link{{ ctx.currentTab === index ? ' active' : ''}}\" href=\"#{{tab.key}}\" ref=\"{{ctx.tabLinkKey}}\">{{ctx.t(tab.label)}}</a>\n      </li>\n      {% }) %}\n    </ul>\n  </div>\n  {% ctx.component.components.forEach(function(tab, index) { %}\n  <div\n    role=\"tabpanel\"\n    class=\"card-body tab-pane{{ ctx.currentTab === index ? ' active' : ''}}\"\n    style=\"display: {{ctx.currentTab === index ? 'block' : 'none'}}\"\n    ref=\"{{ctx.tabKey}}\"\n  >\n    {{ctx.tabComponents[index]}}\n  </div>\n  {% }) %}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/tab/index',[
    './flat.ejs',
    './form.ejs'
], function (flat, form) {
    'use strict';
    return {
        flat,
        form
    };
});
define('skylark-formio/templates/bootstrap/table/form.ejs',[], function() { return "<table class=\"table\n    {{ ctx.component.striped ? 'table-striped' : ''}}\n    {{ ctx.component.bordered ? 'table-bordered' : ''}}\n    {{ ctx.component.hover ? 'table-hover' : ''}}\n    {{ ctx.component.condensed ? 'table-sm' : ''}}\n  \">\n  {% if (ctx.component.header && ctx.component.header.length > 0) { %}\n  <thead>\n    <tr>\n      {% ctx.component.header.forEach(function(header) { %}\n      <th>{{ctx.t(header)}}</th>\n      {% }) %}\n    </tr>\n  </thead>\n  {% } %}\n  <tbody>\n    {% ctx.tableComponents.forEach(function(row, rowIndex) { %}\n    <tr ref=\"row-{{ctx.id}}\">\n      {% row.forEach(function(column, colIndex) { %}\n      <td ref=\"{{ctx.tableKey}}-{{rowIndex}}\"{% if (ctx.cellClassName) { %} class=\"{{ctx.cellClassName}}\"{% } %}>{{column}}</td>\n      {% }) %}\n    </tr>\n    {% }) %}\n  </tbody>\n</table>\n"; });
define('skylark-formio/templates/bootstrap/table/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/tree/form.ejs',[], function() { return "{% if (ctx.node.isRoot) { %}\n  <div ref=\"root\" class=\"list-group-item\">\n{% } else { %}\n  <li ref=\"node\" class=\"list-group-item col-sm-12 tree__level tree__level_{{ ctx.odd ? 'odd' : 'even' }}\">\n{% } %}\n  {% if (ctx.content) { %}\n    <div ref=\"content\" class=\"tree__node-content\">\n      {{ ctx.content }}\n    </div>\n  {% } %}\n  {% if (ctx.childNodes && ctx.childNodes.length) { %}\n    <ul ref=\"childNodes\" class=\"tree__node-children list-group row\">\n      {{ ctx.childNodes.join('') }}\n    </ul>\n  {% } %}\n{% if (ctx.node.isRoot) { %}\n  </div>\n{% } else { %}\n  </li>\n{% } %}\n"; });
define('skylark-formio/templates/bootstrap/tree/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/tree/partials/edit.ejs',[], function() { return "<div class=\"node-edit\">\n  <div ref=\"nodeEdit\">{{ ctx.children }}</div>\n  {% if (!ctx.readOnly) { %}\n    <div class=\"node-actions\">\n      <button ref=\"saveNode\" class=\"btn btn-primary saveNode\">{{ ctx.t('Save') }}</button>\n      <button ref=\"cancelNode\" class=\"btn btn-danger cancelNode\">{{ ctx.t('Cancel') }}</button>\n    </div>\n  {% } %}\n</div>\n"; });
define('skylark-formio/templates/bootstrap/tree/partials/view.ejs',[], function() { return "<div class=\"row\">\n  {% ctx.values.forEach(function(value) { %}\n    <div class=\"col-sm-2\">\n      {{ value }}\n    </div>\n  {% }) %}\n  <div class=\"col-sm-3\">\n    <div class=\"btn-group pull-right\">\n      {% if (ctx.node.hasChildren) { %}\n        <button ref=\"toggleNode\" class=\"btn btn-default btn-sm toggleNode\">{{ ctx.t(ctx.node.collapsed ? 'Expand' : 'Collapse') }}</button>\n      {% } %}\n      {% if (!ctx.readOnly) { %}\n        <button ref=\"addChild\" class=\"btn btn-default btn-sm addChild\">{{ ctx.t('Add') }}</button>\n        <button ref=\"editNode\" class=\"btn btn-default btn-sm editNode\">{{ ctx.t('Edit') }}</button>\n        <button ref=\"removeNode\" class=\"btn btn-danger btn-sm removeNode\">{{ ctx.t('Delete') }}</button>\n        {% if (ctx.node.revertAvailable) { %}\n          <button ref=\"revertNode\" class=\"btn btn-danger btn-sm revertNode\">{{ ctx.t('Revert') }}</button>\n        {% } %}\n      {% } %}\n    </div>\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/tree/partials/index',[
    './edit.ejs',
    './view.ejs'
], function (edit, view) {
    'use strict';
    return {
        treeView: { form: view },
        treeEdit: { form: edit }
    };
});
define('skylark-formio/templates/bootstrap/webform/form.ejs',[], function() { return "<div class=\"{{ctx.classes}}\" ref=\"webform\" novalidate>{{ctx.children}}</div>\n"; });
define('skylark-formio/templates/bootstrap/webform/builder.ejs',[], function() { return "<div class=\"text-muted text-center p-2\">{{ ctx.t(ctx.component.title) }}</div>\n"; });
define('skylark-formio/templates/bootstrap/webform/index',[
    './form.ejs',
    './builder.ejs'
], function (form, builder) {
    'use strict';
    return {
        form,
        builder
    };
});
define('skylark-formio/templates/bootstrap/well/form.ejs',[], function() { return "<div class=\"card card-body bg-light\">\n  <div ref=\"{{ctx.nestedKey}}\">\n    {{ctx.children}}\n  </div>\n</div>\n"; });
define('skylark-formio/templates/bootstrap/well/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/wizard/form.ejs',[], function() { return "<div class=\"{{ctx.className}}\">\n  <div style=\"position: relative;\">\n    {{ ctx.wizardHeader }}\n    <div class=\"wizard-page\" ref=\"{{ctx.wizardKey}}\">\n      {{ctx.components}}\n    </div>\n    {{ ctx.wizardNav }}\n  </div>\n</div>"; });
define('skylark-formio/templates/bootstrap/wizard/builder.ejs',[], function() { return "<div class=\"text-muted text-center p-2\">{{ ctx.t(ctx.component.title) }}</div>\n"; });
define('skylark-formio/templates/bootstrap/wizard/index',[
    './form.ejs',
    './builder.ejs'
], function (form, builder) {
    'use strict';
    return {
        form,
        builder
    };
});
define('skylark-formio/templates/bootstrap/wizardHeader/form.ejs',[], function() { return "<nav aria-label=\"navigation\" id=\"{{ ctx.wizardKey }}-header\">\n  <ul class=\"pagination\">\n    {% ctx.panels.forEach(function(panel, index) { %}\n    <li class=\"page-item{{ctx.currentPage === index ? ' active' : ''}}\" style=\"\">\n      <span class=\"page-link\" ref=\"{{ctx.wizardKey}}-link\">{{panel.title}}</span>\n    </li>\n    {% }) %}\n  </ul>\n</nav>\n"; });
define('skylark-formio/templates/bootstrap/wizardHeader/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/wizardNav/form.ejs',[], function() { return "<ul class=\"list-inline\" id=\"{{ ctx.wizardKey }}-nav\">\n  {% if (ctx.buttons.cancel) { %}\n  <li class=\"list-inline-item\">\n    <button class=\"btn btn-secondary btn-wizard-nav-cancel\" ref=\"{{ctx.wizardKey}}-cancel\">{{ctx.t('cancel')}}</button>\n  </li>\n  {% } %}\n  {% if (ctx.buttons.previous) { %}\n  <li class=\"list-inline-item\">\n    <button class=\"btn btn-primary btn-wizard-nav-previous\" ref=\"{{ctx.wizardKey}}-previous\">{{ctx.t('previous')}}</button>\n  </li>\n  {% } %}\n  {% if (ctx.buttons.next) { %}\n  <li class=\"list-inline-item\">\n    <button class=\"btn btn-primary btn-wizard-nav-next\" ref=\"{{ctx.wizardKey}}-next\">{{ctx.t('next')}}</button>\n  </li>\n  {% } %}\n  {% if (ctx.buttons.submit) { %}\n  <li class=\"list-inline-item\">\n    <button class=\"btn btn-primary btn-wizard-nav-submit\" ref=\"{{ctx.wizardKey}}-submit\">{{ctx.t('submit')}}</button>\n  </li>\n  {% } %}\n</ul>\n"; });
define('skylark-formio/templates/bootstrap/wizardNav/index',['./form.ejs'], function (form) {
    'use strict';
    return { form };
});
define('skylark-formio/templates/bootstrap/cssClasses',[],function () {
    'use strict';
    return {
        'border-default': '',
        'formio-tab-panel-active': 'active',
        'formio-tab-link-active': 'active',
        'formio-tab-link-container-active': 'active'
    };
});
define('skylark-formio/templates/bootstrap/index',[
    './address/index',
    './builder/index',
    './builderComponent/index',
    './builderComponents/index',
    './builderEditForm/index',
    './builderPlaceholder/index',
    './builderSidebar/index',
    './builderSidebarGroup/index',
    './builderWizard/index',
    './button/index',
    './checkbox/index',
    './columns/index',
    './component/index',
    './componentModal/index',
    './components/index',
    './container/index',
    './datagrid/index',
    './day/index',
    './dialog/index',
    './editgrid/index',
    './field/index',
    './fieldset/index',
    './file/index',
    './html/index',
    './icon/index',
    './iconClass',
    './input/index',
    './label/index',
    './loader/index',
    './loading/index',
    './map/index',
    './message/index',
    './multipleMasksInput/index',
    './multiValueRow/index',
    './multiValueTable/index',
    './panel/index',
    './pdf/index',
    './pdfBuilder/index',
    './pdfBuilderUpload/index',
    './radio/index',
    './resourceAdd/index',
    './select/index',
    './selectOption/index',
    './signature/index',
    './survey/index',
    './tab/index',
    './table/index',
    './tree/index',
    './tree/partials/index',
    './webform/index',
    './well/index',
    './wizard/index',
    './wizardHeader/index',
    './wizardNav/index',
    './cssClasses'
], function (address, builder, builderComponent, builderComponents, builderEditForm, builderPlaceholder, builderSidebar, builderSidebarGroup, builderWizard, button, checkbox, columns, component, componentModal, components, container, datagrid, day, dialog, editgrid, field, fieldset, file, html, icon, iconClass, input, label, loader, loading, map, message, multipleMasksInput, multiValueRow, multiValueTable, panel, pdf, pdfBuilder, pdfBuilderUpload, radio, resourceAdd, select, selectOption, signature, survey, tab, table, tree, treePartials, webform, well, wizard, wizardHeader, wizardNav, cssClasses) {
    'use strict';
    return {
        transform(type, text) {
            if (!text) {
                return text;
            }
            switch (type) {
            case 'class':
                return this.cssClasses.hasOwnProperty(text.toString()) ? this.cssClasses[text.toString()] : text;
            }
            return text;
        },
        defaultIconset: 'fa',
        iconClass,
        cssClasses,
        address,
        builder,
        builderComponent,
        builderComponents,
        builderEditForm,
        builderPlaceholder,
        builderSidebar,
        builderSidebarGroup,
        builderWizard,
        button,
        checkbox,
        columns,
        component,
        componentModal,
        components,
        container,
        datagrid,
        day,
        dialog,
        editgrid,
        field,
        fieldset,
        file,
        html,
        icon,
        input,
        label,
        loader,
        loading,
        map,
        message,
        multipleMasksInput,
        multiValueRow,
        multiValueTable,
        panel,
        pdf,
        pdfBuilder,
        pdfBuilderUpload,
        radio,
        resourceAdd,
        select,
        selectOption,
        signature,
        survey,
        tab,
        table,
        tree,
        ...treePartials,
        webform,
        well,
        wizard,
        wizardHeader,
        wizardNav
    };
});
define('skylark-formio/templates/index',[
    './bootstrap/index',
//    '@formio/bootstrap3',
//    '@formio/semantic'
], function (bootstrap, bootstrap3, semantic) {
    'use strict';
    //TODO : lwf
    return {
        bootstrap,
//        bootstrap3: bootstrap3.templates.bootstrap3,
//        semantic: semantic.templates.semantic
    };
});
define('skylark-formio/templates/Templates',[
    './index',
    'skylark-lodash'
], function (templates, _) {
    'use strict';
    return class Templates {
        static get templates() {
            if (!Templates._templates) {
                Templates._templates = templates;
            }
            return Templates._templates;
        }
        static addTemplate(name, template) {
            Templates.templates[name] = template;
        }
        static extendTemplate(name, template) {
            Templates.templates[name] = _.merge({}, Templates.templates[name], template);
        }
        static setTemplate(name, template) {
            Templates.addTemplate(name, template);
        }
        static set current(templates) {
            const defaultTemplates = Templates.current;
            Templates._current = _.merge({}, defaultTemplates, templates);
        }
        static get current() {
            if (Templates._current) {
                return Templates._current;
            }
            return Templates.defaultTemplates;
        }
        static get defaultTemplates() {
            return Templates.templates.bootstrap;
        }
        static set framework(framework) {
            if (Templates.templates.hasOwnProperty(framework)) {
                Templates._framework = framework;
                Templates._current = Templates.templates[framework];
            }
        }
        static get framework() {
            return Templates._framework;
        }
    };
});
define('skylark-i18next/logger',[],function () {
    'use strict';
    const consoleLogger = {
        type: 'logger',
        log(args) {
            this.output('log', args);
        },
        warn(args) {
            this.output('warn', args);
        },
        error(args) {
            this.output('error', args);
        },
        output(type, args) {
            if (console && console[type])
                console[type].apply(console, args);
        }
    };
    class Logger {
        constructor(concreteLogger, options = {}) {
            this.init(concreteLogger, options);
        }
        init(concreteLogger, options = {}) {
            this.prefix = options.prefix || 'i18next:';
            this.logger = concreteLogger || consoleLogger;
            this.options = options;
            this.debug = options.debug;
        }
        setDebug(bool) {
            this.debug = bool;
        }
        log(...args) {
            return this.forward(args, 'log', '', true);
        }
        warn(...args) {
            return this.forward(args, 'warn', '', true);
        }
        error(...args) {
            return this.forward(args, 'error', '');
        }
        deprecate(...args) {
            return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
        }
        forward(args, lvl, prefix, debugOnly) {
            if (debugOnly && !this.debug)
                return null;
            if (typeof args[0] === 'string')
                args[0] = `${ prefix }${ this.prefix } ${ args[0] }`;
            return this.logger[lvl](args);
        }
        create(moduleName) {
            return new Logger(this.logger, {
                ...{ prefix: `${ this.prefix }:${ moduleName }:` },
                ...this.options
            });
        }
    }
    return new Logger();
});
define('skylark-i18next/EventEmitter',[],function () {
    'use strict';
    class EventEmitter {
        constructor() {
            this.observers = {};
        }
        on(events, listener) {
            events.split(' ').forEach(event => {
                this.observers[event] = this.observers[event] || [];
                this.observers[event].push(listener);
            });
            return this;
        }
        off(event, listener) {
            if (!this.observers[event])
                return;
            if (!listener) {
                delete this.observers[event];
                return;
            }
            this.observers[event] = this.observers[event].filter(l => l !== listener);
        }
        emit(event, ...args) {
            if (this.observers[event]) {
                const cloned = [].concat(this.observers[event]);
                cloned.forEach(observer => {
                    observer(...args);
                });
            }
            if (this.observers['*']) {
                const cloned = [].concat(this.observers['*']);
                cloned.forEach(observer => {
                    observer.apply(observer, [
                        event,
                        ...args
                    ]);
                });
            }
        }
    }
    return EventEmitter;
});
define('skylark-i18next/utils',[],function () {
    'use strict';
    function defer() {
        let res;
        let rej;
        const promise = new Promise((resolve, reject) => {
            res = resolve;
            rej = reject;
        });
        promise.resolve = res;
        promise.reject = rej;
        return promise;
    }
    function makeString(object) {
        if (object == null)
            return '';
        return '' + object;
    }
    function copy(a, s, t) {
        a.forEach(m => {
            if (s[m])
                t[m] = s[m];
        });
    }
    function getLastOfPath(object, path, Empty) {
        function cleanKey(key) {
            return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
        }
        function canNotTraverseDeeper() {
            return !object || typeof object === 'string';
        }
        const stack = typeof path !== 'string' ? [].concat(path) : path.split('.');
        while (stack.length > 1) {
            if (canNotTraverseDeeper())
                return {};
            const key = cleanKey(stack.shift());
            if (!object[key] && Empty)
                object[key] = new Empty();
            object = object[key];
        }
        if (canNotTraverseDeeper())
            return {};
        return {
            obj: object,
            k: cleanKey(stack.shift())
        };
    }
    function setPath(object, path, newValue) {
        const {obj, k} = getLastOfPath(object, path, Object);
        obj[k] = newValue;
    }
    function pushPath(object, path, newValue, concat) {
        const {obj, k} = getLastOfPath(object, path, Object);
        obj[k] = obj[k] || [];
        if (concat)
            obj[k] = obj[k].concat(newValue);
        if (!concat)
            obj[k].push(newValue);
    }
    function getPath(object, path) {
        const {obj, k} = getLastOfPath(object, path);
        if (!obj)
            return undefined;
        return obj[k];
    }
    function getPathWithDefaults(data, defaultData, key) {
        const value = getPath(data, key);
        if (value !== undefined) {
            return value;
        }
        return getPath(defaultData, key);
    }
    function deepExtend(target, source, overwrite) {
        for (const prop in source) {
            if (prop !== '__proto__') {
                if (prop in target) {
                    if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
                        if (overwrite)
                            target[prop] = source[prop];
                    } else {
                        deepExtend(target[prop], source[prop], overwrite);
                    }
                } else {
                    target[prop] = source[prop];
                }
            }
        }
        return target;
    }
    function regexEscape(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    }
    var _entityMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
        '/': '&#x2F;'
    };
    function escape(data) {
        if (typeof data === 'string') {
            return data.replace(/[&<>"'\/]/g, s => _entityMap[s]);
        }
        return data;
    }
    const isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
    return {
        defer: defer,
        makeString: makeString,
        copy: copy,
        setPath: setPath,
        pushPath: pushPath,
        getPath: getPath,
        getPathWithDefaults: getPathWithDefaults,
        deepExtend: deepExtend,
        regexEscape: regexEscape,
        escape: escape,
        isIE10: isIE10
    };
});
define('skylark-i18next/ResourceStore',[
    './EventEmitter',
    './utils'
], function (EventEmitter, utils) {
    'use strict';
    class ResourceStore extends EventEmitter {
        constructor(data, options = {
            ns: ['translation'],
            defaultNS: 'translation'
        }) {
            super();
            if (utils.isIE10) {
                EventEmitter.call(this);
            }
            this.data = data || {};
            this.options = options;
            if (this.options.keySeparator === undefined) {
                this.options.keySeparator = '.';
            }
        }
        addNamespaces(ns) {
            if (this.options.ns.indexOf(ns) < 0) {
                this.options.ns.push(ns);
            }
        }
        removeNamespaces(ns) {
            const index = this.options.ns.indexOf(ns);
            if (index > -1) {
                this.options.ns.splice(index, 1);
            }
        }
        getResource(lng, ns, key, options = {}) {
            const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            let path = [
                lng,
                ns
            ];
            if (key && typeof key !== 'string')
                path = path.concat(key);
            if (key && typeof key === 'string')
                path = path.concat(keySeparator ? key.split(keySeparator) : key);
            if (lng.indexOf('.') > -1) {
                path = lng.split('.');
            }
            return utils.getPath(this.data, path);
        }
        addResource(lng, ns, key, value, options = { silent: false }) {
            let keySeparator = this.options.keySeparator;
            if (keySeparator === undefined)
                keySeparator = '.';
            let path = [
                lng,
                ns
            ];
            if (key)
                path = path.concat(keySeparator ? key.split(keySeparator) : key);
            if (lng.indexOf('.') > -1) {
                path = lng.split('.');
                value = ns;
                ns = path[1];
            }
            this.addNamespaces(ns);
            utils.setPath(this.data, path, value);
            if (!options.silent)
                this.emit('added', lng, ns, key, value);
        }
        addResources(lng, ns, resources, options = { silent: false }) {
            for (const m in resources) {
                if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]')
                    this.addResource(lng, ns, m, resources[m], { silent: true });
            }
            if (!options.silent)
                this.emit('added', lng, ns, resources);
        }
        addResourceBundle(lng, ns, resources, deep, overwrite, options = { silent: false }) {
            let path = [
                lng,
                ns
            ];
            if (lng.indexOf('.') > -1) {
                path = lng.split('.');
                deep = resources;
                resources = ns;
                ns = path[1];
            }
            this.addNamespaces(ns);
            let pack = utils.getPath(this.data, path) || {};
            if (deep) {
                utils.deepExtend(pack, resources, overwrite);
            } else {
                pack = {
                    ...pack,
                    ...resources
                };
            }
            utils.setPath(this.data, path, pack);
            if (!options.silent)
                this.emit('added', lng, ns, resources);
        }
        removeResourceBundle(lng, ns) {
            if (this.hasResourceBundle(lng, ns)) {
                delete this.data[lng][ns];
            }
            this.removeNamespaces(ns);
            this.emit('removed', lng, ns);
        }
        hasResourceBundle(lng, ns) {
            return this.getResource(lng, ns) !== undefined;
        }
        getResourceBundle(lng, ns) {
            if (!ns)
                ns = this.options.defaultNS;
            if (this.options.compatibilityAPI === 'v1')
                return {
                    ...{},
                    ...this.getResource(lng, ns)
                };
            return this.getResource(lng, ns);
        }
        getDataByLanguage(lng) {
            return this.data[lng];
        }
        toJSON() {
            return this.data;
        }
    }
    return ResourceStore;
});
define('skylark-i18next/postProcessor',[],function () {
    'use strict';
    return {
        processors: {},
        addPostProcessor(module) {
            this.processors[module.name] = module;
        },
        handle(processors, value, key, options, translator) {
            processors.forEach(processor => {
                if (this.processors[processor])
                    value = this.processors[processor].process(value, key, options, translator);
            });
            return value;
        }
    };
});
define('skylark-i18next/Translator',[
    './logger',
    './EventEmitter',
    './postProcessor',
    './utils'
], function (baseLogger, EventEmitter, postProcessor, utils) {
    'use strict';
    const checkedLoadedFor = {};
    class Translator extends EventEmitter {
        constructor(services, options = {}) {
            super();
            if (utils.isIE10) {
                EventEmitter.call(this);
            }
            utils.copy([
                'resourceStore',
                'languageUtils',
                'pluralResolver',
                'interpolator',
                'backendConnector',
                'i18nFormat',
                'utils'
            ], services, this);
            this.options = options;
            if (this.options.keySeparator === undefined) {
                this.options.keySeparator = '.';
            }
            this.logger = baseLogger.create('translator');
        }
        changeLanguage(lng) {
            if (lng)
                this.language = lng;
        }
        exists(key, options = { interpolation: {} }) {
            const resolved = this.resolve(key, options);
            return resolved && resolved.res !== undefined;
        }
        extractFromKey(key, options) {
            let nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
            if (nsSeparator === undefined)
                nsSeparator = ':';
            const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            let namespaces = options.ns || this.options.defaultNS;
            if (nsSeparator && key.indexOf(nsSeparator) > -1) {
                const m = key.match(this.interpolator.nestingRegexp);
                if (m && m.length > 0) {
                    return {
                        key,
                        namespaces
                    };
                }
                const parts = key.split(nsSeparator);
                if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
                    namespaces = parts.shift();
                key = parts.join(keySeparator);
            }
            if (typeof namespaces === 'string')
                namespaces = [namespaces];
            return {
                key,
                namespaces
            };
        }
        translate(keys, options, lastKey) {
            if (typeof options !== 'object' && this.options.overloadTranslationOptionHandler) {
                options = this.options.overloadTranslationOptionHandler(arguments);
            }
            if (!options)
                options = {};
            if (keys === undefined || keys === null)
                return '';
            if (!Array.isArray(keys))
                keys = [String(keys)];
            const keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            const {key, namespaces} = this.extractFromKey(keys[keys.length - 1], options);
            const namespace = namespaces[namespaces.length - 1];
            const lng = options.lng || this.language;
            const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
            if (lng && lng.toLowerCase() === 'cimode') {
                if (appendNamespaceToCIMode) {
                    const nsSeparator = options.nsSeparator || this.options.nsSeparator;
                    return namespace + nsSeparator + key;
                }
                return key;
            }
            const resolved = this.resolve(keys, options);
            let res = resolved && resolved.res;
            const resUsedKey = resolved && resolved.usedKey || key;
            const resExactUsedKey = resolved && resolved.exactUsedKey || key;
            const resType = Object.prototype.toString.apply(res);
            const noObject = [
                '[object Number]',
                '[object Function]',
                '[object RegExp]'
            ];
            const joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
            const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
            const handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';
            if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
                if (!options.returnObjects && !this.options.returnObjects) {
                    this.logger.warn('accessing an object - but returnObjects options is not enabled!');
                    return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : `key '${ key } (${ this.language })' returned an object instead of string.`;
                }
                if (keySeparator) {
                    const resTypeIsArray = resType === '[object Array]';
                    const copy = resTypeIsArray ? [] : {};
                    let newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
                    for (const m in res) {
                        if (Object.prototype.hasOwnProperty.call(res, m)) {
                            const deepKey = `${ newKeyToUse }${ keySeparator }${ m }`;
                            copy[m] = this.translate(deepKey, {
                                ...options,
                                ...{
                                    joinArrays: false,
                                    ns: namespaces
                                }
                            });
                            if (copy[m] === deepKey)
                                copy[m] = res[m];
                        }
                    }
                    res = copy;
                }
            } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
                res = res.join(joinArrays);
                if (res)
                    res = this.extendTranslation(res, keys, options, lastKey);
            } else {
                let usedDefault = false;
                let usedKey = false;
                if (!this.isValidLookup(res) && options.defaultValue !== undefined) {
                    usedDefault = true;
                    if (options.count !== undefined) {
                        const suffix = this.pluralResolver.getSuffix(lng, options.count);
                        res = options[`defaultValue${ suffix }`];
                    }
                    if (!res)
                        res = options.defaultValue;
                }
                if (!this.isValidLookup(res)) {
                    usedKey = true;
                    res = key;
                }
                const updateMissing = options.defaultValue && options.defaultValue !== res && this.options.updateMissing;
                if (usedKey || usedDefault || updateMissing) {
                    this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? options.defaultValue : res);
                    if (keySeparator) {
                        const fk = this.resolve(key, {
                            ...options,
                            keySeparator: false
                        });
                        if (fk && fk.res)
                            this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
                    }
                    let lngs = [];
                    const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
                    if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
                        for (let i = 0; i < fallbackLngs.length; i++) {
                            lngs.push(fallbackLngs[i]);
                        }
                    } else if (this.options.saveMissingTo === 'all') {
                        lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                    } else {
                        lngs.push(options.lng || this.language);
                    }
                    const send = (l, k) => {
                        if (this.options.missingKeyHandler) {
                            this.options.missingKeyHandler(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
                        } else if (this.backendConnector && this.backendConnector.saveMissing) {
                            this.backendConnector.saveMissing(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
                        }
                        this.emit('missingKey', l, namespace, k, res);
                    };
                    if (this.options.saveMissing) {
                        const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                        if (this.options.saveMissingPlurals && needsPluralHandling) {
                            lngs.forEach(l => {
                                const plurals = this.pluralResolver.getPluralFormsOfKey(l, key);
                                plurals.forEach(p => send([l], p));
                            });
                        } else {
                            send(lngs, key);
                        }
                    }
                }
                res = this.extendTranslation(res, keys, options, resolved, lastKey);
                if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
                    res = `${ namespace }:${ key }`;
                if (usedKey && this.options.parseMissingKeyHandler)
                    res = this.options.parseMissingKeyHandler(res);
            }
            return res;
        }
        extendTranslation(res, key, options, resolved, lastKey) {
            if (this.i18nFormat && this.i18nFormat.parse) {
                res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, { resolved });
            } else if (!options.skipInterpolation) {
                if (options.interpolation)
                    this.interpolator.init({
                        ...options,
                        ...{
                            interpolation: {
                                ...this.options.interpolation,
                                ...options.interpolation
                            }
                        }
                    });
                const skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
                let nestBef;
                if (skipOnVariables) {
                    const nb = res.match(this.interpolator.nestingRegexp);
                    nestBef = nb && nb.length;
                }
                let data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
                if (this.options.interpolation.defaultVariables)
                    data = {
                        ...this.options.interpolation.defaultVariables,
                        ...data
                    };
                res = this.interpolator.interpolate(res, data, options.lng || this.language, options);
                if (skipOnVariables) {
                    const na = res.match(this.interpolator.nestingRegexp);
                    const nestAft = na && na.length;
                    if (nestBef < nestAft)
                        options.nest = false;
                }
                if (options.nest !== false)
                    res = this.interpolator.nest(res, (...args) => {
                        if (lastKey && lastKey[0] === args[0]) {
                            this.logger.warn(`It seems you are nesting recursively key: ${ args[0] } in key: ${ key[0] }`);
                            return null;
                        }
                        return this.translate(...args, key);
                    }, options);
                if (options.interpolation)
                    this.interpolator.reset();
            }
            const postProcess = options.postProcess || this.options.postProcess;
            const postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;
            if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
                res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
                    i18nResolved: resolved,
                    ...options
                } : options, this);
            }
            return res;
        }
        resolve(keys, options = {}) {
            let found;
            let usedKey;
            let exactUsedKey;
            let usedLng;
            let usedNS;
            if (typeof keys === 'string')
                keys = [keys];
            keys.forEach(k => {
                if (this.isValidLookup(found))
                    return;
                const extracted = this.extractFromKey(k, options);
                const key = extracted.key;
                usedKey = key;
                let namespaces = extracted.namespaces;
                if (this.options.fallbackNS)
                    namespaces = namespaces.concat(this.options.fallbackNS);
                const needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
                const needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';
                const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
                namespaces.forEach(ns => {
                    if (this.isValidLookup(found))
                        return;
                    usedNS = ns;
                    if (!checkedLoadedFor[`${ codes[0] }-${ ns }`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
                        checkedLoadedFor[`${ codes[0] }-${ ns }`] = true;
                        this.logger.warn(`key "${ usedKey }" for languages "${ codes.join(', ') }" won't get resolved as namespace "${ usedNS }" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                    }
                    codes.forEach(code => {
                        if (this.isValidLookup(found))
                            return;
                        usedLng = code;
                        let finalKey = key;
                        const finalKeys = [finalKey];
                        if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
                            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                        } else {
                            let pluralSuffix;
                            if (needsPluralHandling)
                                pluralSuffix = this.pluralResolver.getSuffix(code, options.count);
                            if (needsPluralHandling && needsContextHandling)
                                finalKeys.push(finalKey + pluralSuffix);
                            if (needsContextHandling)
                                finalKeys.push(finalKey += `${ this.options.contextSeparator }${ options.context }`);
                            if (needsPluralHandling)
                                finalKeys.push(finalKey += pluralSuffix);
                        }
                        let possibleKey;
                        while (possibleKey = finalKeys.pop()) {
                            if (!this.isValidLookup(found)) {
                                exactUsedKey = possibleKey;
                                found = this.getResource(code, ns, possibleKey, options);
                            }
                        }
                    });
                });
            });
            return {
                res: found,
                usedKey,
                exactUsedKey,
                usedLng,
                usedNS
            };
        }
        isValidLookup(res) {
            return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
        }
        getResource(code, ns, key, options = {}) {
            if (this.i18nFormat && this.i18nFormat.getResource)
                return this.i18nFormat.getResource(code, ns, key, options);
            return this.resourceStore.getResource(code, ns, key, options);
        }
    }
    return Translator;
});
define('skylark-i18next/LanguageUtils',['./logger'], function (baseLogger) {
    'use strict';
    function capitalize(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }
    class LanguageUtil {
        constructor(options) {
            this.options = options;
            this.whitelist = this.options.supportedLngs || false;
            this.supportedLngs = this.options.supportedLngs || false;
            this.logger = baseLogger.create('languageUtils');
        }
        getScriptPartFromCode(code) {
            if (!code || code.indexOf('-') < 0)
                return null;
            const p = code.split('-');
            if (p.length === 2)
                return null;
            p.pop();
            if (p[p.length - 1].toLowerCase() === 'x')
                return null;
            return this.formatLanguageCode(p.join('-'));
        }
        getLanguagePartFromCode(code) {
            if (!code || code.indexOf('-') < 0)
                return code;
            const p = code.split('-');
            return this.formatLanguageCode(p[0]);
        }
        formatLanguageCode(code) {
            if (typeof code === 'string' && code.indexOf('-') > -1) {
                const specialCases = [
                    'hans',
                    'hant',
                    'latn',
                    'cyrl',
                    'cans',
                    'mong',
                    'arab'
                ];
                let p = code.split('-');
                if (this.options.lowerCaseLng) {
                    p = p.map(part => part.toLowerCase());
                } else if (p.length === 2) {
                    p[0] = p[0].toLowerCase();
                    p[1] = p[1].toUpperCase();
                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                        p[1] = capitalize(p[1].toLowerCase());
                } else if (p.length === 3) {
                    p[0] = p[0].toLowerCase();
                    if (p[1].length === 2)
                        p[1] = p[1].toUpperCase();
                    if (p[0] !== 'sgn' && p[2].length === 2)
                        p[2] = p[2].toUpperCase();
                    if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                        p[1] = capitalize(p[1].toLowerCase());
                    if (specialCases.indexOf(p[2].toLowerCase()) > -1)
                        p[2] = capitalize(p[2].toLowerCase());
                }
                return p.join('-');
            }
            return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
        }
        isWhitelisted(code) {
            this.logger.deprecate('languageUtils.isWhitelisted', 'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.');
            return this.isSupportedCode(code);
        }
        isSupportedCode(code) {
            if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
                code = this.getLanguagePartFromCode(code);
            }
            return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
        }
        getBestMatchFromCodes(codes) {
            if (!codes)
                return null;
            let found;
            codes.forEach(code => {
                if (found)
                    return;
                let cleanedLng = this.formatLanguageCode(code);
                if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng))
                    found = cleanedLng;
            });
            if (!found && this.options.supportedLngs) {
                codes.forEach(code => {
                    if (found)
                        return;
                    let lngOnly = this.getLanguagePartFromCode(code);
                    if (this.isSupportedCode(lngOnly))
                        return found = lngOnly;
                    found = this.options.supportedLngs.find(supportedLng => {
                        if (supportedLng.indexOf(lngOnly) === 0)
                            return supportedLng;
                    });
                });
            }
            if (!found)
                found = this.getFallbackCodes(this.options.fallbackLng)[0];
            return found;
        }
        getFallbackCodes(fallbacks, code) {
            if (!fallbacks)
                return [];
            if (typeof fallbacks === 'string')
                fallbacks = [fallbacks];
            if (Object.prototype.toString.apply(fallbacks) === '[object Array]')
                return fallbacks;
            if (!code)
                return fallbacks.default || [];
            let found = fallbacks[code];
            if (!found)
                found = fallbacks[this.getScriptPartFromCode(code)];
            if (!found)
                found = fallbacks[this.formatLanguageCode(code)];
            if (!found)
                found = fallbacks[this.getLanguagePartFromCode(code)];
            if (!found)
                found = fallbacks.default;
            return found || [];
        }
        toResolveHierarchy(code, fallbackCode) {
            const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
            const codes = [];
            const addCode = c => {
                if (!c)
                    return;
                if (this.isSupportedCode(c)) {
                    codes.push(c);
                } else {
                    this.logger.warn(`rejecting language code not found in supportedLngs: ${ c }`);
                }
            };
            if (typeof code === 'string' && code.indexOf('-') > -1) {
                if (this.options.load !== 'languageOnly')
                    addCode(this.formatLanguageCode(code));
                if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly')
                    addCode(this.getScriptPartFromCode(code));
                if (this.options.load !== 'currentOnly')
                    addCode(this.getLanguagePartFromCode(code));
            } else if (typeof code === 'string') {
                addCode(this.formatLanguageCode(code));
            }
            fallbackCodes.forEach(fc => {
                if (codes.indexOf(fc) < 0)
                    addCode(this.formatLanguageCode(fc));
            });
            return codes;
        }
    }
    return LanguageUtil;
});
define('skylark-i18next/PluralResolver',['./logger'], function (baseLogger) {
    'use strict';
    let sets = [
        {
            lngs: [
                'ach',
                'ak',
                'am',
                'arn',
                'br',
                'fil',
                'gun',
                'ln',
                'mfe',
                'mg',
                'mi',
                'oc',
                'pt',
                'pt-BR',
                'tg',
                'ti',
                'tr',
                'uz',
                'wa'
            ],
            nr: [
                1,
                2
            ],
            fc: 1
        },
        {
            lngs: [
                'af',
                'an',
                'ast',
                'az',
                'bg',
                'bn',
                'ca',
                'da',
                'de',
                'dev',
                'el',
                'en',
                'eo',
                'es',
                'et',
                'eu',
                'fi',
                'fo',
                'fur',
                'fy',
                'gl',
                'gu',
                'ha',
                'hi',
                'hu',
                'hy',
                'ia',
                'it',
                'kn',
                'ku',
                'lb',
                'mai',
                'ml',
                'mn',
                'mr',
                'nah',
                'nap',
                'nb',
                'ne',
                'nl',
                'nn',
                'no',
                'nso',
                'pa',
                'pap',
                'pms',
                'ps',
                'pt-PT',
                'rm',
                'sco',
                'se',
                'si',
                'so',
                'son',
                'sq',
                'sv',
                'sw',
                'ta',
                'te',
                'tk',
                'ur',
                'yo'
            ],
            nr: [
                1,
                2
            ],
            fc: 2
        },
        {
            lngs: [
                'ay',
                'bo',
                'cgg',
                'fa',
                'ht',
                'id',
                'ja',
                'jbo',
                'ka',
                'kk',
                'km',
                'ko',
                'ky',
                'lo',
                'ms',
                'sah',
                'su',
                'th',
                'tt',
                'ug',
                'vi',
                'wo',
                'zh'
            ],
            nr: [1],
            fc: 3
        },
        {
            lngs: [
                'be',
                'bs',
                'cnr',
                'dz',
                'hr',
                'ru',
                'sr',
                'uk'
            ],
            nr: [
                1,
                2,
                5
            ],
            fc: 4
        },
        {
            lngs: ['ar'],
            nr: [
                0,
                1,
                2,
                3,
                11,
                100
            ],
            fc: 5
        },
        {
            lngs: [
                'cs',
                'sk'
            ],
            nr: [
                1,
                2,
                5
            ],
            fc: 6
        },
        {
            lngs: [
                'csb',
                'pl'
            ],
            nr: [
                1,
                2,
                5
            ],
            fc: 7
        },
        {
            lngs: ['cy'],
            nr: [
                1,
                2,
                3,
                8
            ],
            fc: 8
        },
        {
            lngs: ['fr'],
            nr: [
                1,
                2
            ],
            fc: 9
        },
        {
            lngs: ['ga'],
            nr: [
                1,
                2,
                3,
                7,
                11
            ],
            fc: 10
        },
        {
            lngs: ['gd'],
            nr: [
                1,
                2,
                3,
                20
            ],
            fc: 11
        },
        {
            lngs: ['is'],
            nr: [
                1,
                2
            ],
            fc: 12
        },
        {
            lngs: ['jv'],
            nr: [
                0,
                1
            ],
            fc: 13
        },
        {
            lngs: ['kw'],
            nr: [
                1,
                2,
                3,
                4
            ],
            fc: 14
        },
        {
            lngs: ['lt'],
            nr: [
                1,
                2,
                10
            ],
            fc: 15
        },
        {
            lngs: ['lv'],
            nr: [
                1,
                2,
                0
            ],
            fc: 16
        },
        {
            lngs: ['mk'],
            nr: [
                1,
                2
            ],
            fc: 17
        },
        {
            lngs: ['mnk'],
            nr: [
                0,
                1,
                2
            ],
            fc: 18
        },
        {
            lngs: ['mt'],
            nr: [
                1,
                2,
                11,
                20
            ],
            fc: 19
        },
        {
            lngs: ['or'],
            nr: [
                2,
                1
            ],
            fc: 2
        },
        {
            lngs: ['ro'],
            nr: [
                1,
                2,
                20
            ],
            fc: 20
        },
        {
            lngs: ['sl'],
            nr: [
                5,
                1,
                2,
                3
            ],
            fc: 21
        },
        {
            lngs: [
                'he',
                'iw'
            ],
            nr: [
                1,
                2,
                20,
                21
            ],
            fc: 22
        }
    ];
    let _rulesPluralsTypes = {
        1: function (n) {
            return Number(n > 1);
        },
        2: function (n) {
            return Number(n != 1);
        },
        3: function (n) {
            return 0;
        },
        4: function (n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        5: function (n) {
            return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
        },
        6: function (n) {
            return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
        },
        7: function (n) {
            return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        8: function (n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
        },
        9: function (n) {
            return Number(n >= 2);
        },
        10: function (n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
        },
        11: function (n) {
            return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
        },
        12: function (n) {
            return Number(n % 10 != 1 || n % 100 == 11);
        },
        13: function (n) {
            return Number(n !== 0);
        },
        14: function (n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
        },
        15: function (n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        16: function (n) {
            return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
        },
        17: function (n) {
            return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
        },
        18: function (n) {
            return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
        },
        19: function (n) {
            return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
        },
        20: function (n) {
            return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
        },
        21: function (n) {
            return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
        },
        22: function (n) {
            return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
        }
    };
    function createRules() {
        const rules = {};
        sets.forEach(set => {
            set.lngs.forEach(l => {
                rules[l] = {
                    numbers: set.nr,
                    plurals: _rulesPluralsTypes[set.fc]
                };
            });
        });
        return rules;
    }
    class PluralResolver {
        constructor(languageUtils, options = {}) {
            this.languageUtils = languageUtils;
            this.options = options;
            this.logger = baseLogger.create('pluralResolver');
            this.rules = createRules();
        }
        addRule(lng, obj) {
            this.rules[lng] = obj;
        }
        getRule(code) {
            return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
        }
        needsPlural(code) {
            const rule = this.getRule(code);
            return rule && rule.numbers.length > 1;
        }
        getPluralFormsOfKey(code, key) {
            const ret = [];
            const rule = this.getRule(code);
            if (!rule)
                return ret;
            rule.numbers.forEach(n => {
                const suffix = this.getSuffix(code, n);
                ret.push(`${ key }${ suffix }`);
            });
            return ret;
        }
        getSuffix(code, count) {
            const rule = this.getRule(code);
            if (rule) {
                const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
                let suffix = rule.numbers[idx];
                if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                    if (suffix === 2) {
                        suffix = 'plural';
                    } else if (suffix === 1) {
                        suffix = '';
                    }
                }
                const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
                if (this.options.compatibilityJSON === 'v1') {
                    if (suffix === 1)
                        return '';
                    if (typeof suffix === 'number')
                        return `_plural_${ suffix.toString() }`;
                    return returnSuffix();
                } else if (this.options.compatibilityJSON === 'v2') {
                    return returnSuffix();
                } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
                    return returnSuffix();
                }
                return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
            }
            this.logger.warn(`no plural rule found for: ${ code }`);
            return '';
        }
    }
    return PluralResolver;
});
define('skylark-i18next/Interpolator',[
    './utils',
    './logger'
], function (utils, baseLogger) {
    'use strict';
    class Interpolator {
        constructor(options = {}) {
            this.logger = baseLogger.create('interpolator');
            this.options = options;
            this.format = options.interpolation && options.interpolation.format || (value => value);
            this.init(options);
        }
        init(options = {}) {
            if (!options.interpolation)
                options.interpolation = { escapeValue: true };
            const iOpts = options.interpolation;
            this.escape = iOpts.escape !== undefined ? iOpts.escape : utils.escape;
            this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
            this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
            this.prefix = iOpts.prefix ? utils.regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
            this.suffix = iOpts.suffix ? utils.regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
            this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
            this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
            this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
            this.nestingPrefix = iOpts.nestingPrefix ? utils.regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || utils.regexEscape('$t(');
            this.nestingSuffix = iOpts.nestingSuffix ? utils.regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || utils.regexEscape(')');
            this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
            this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
            this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
            this.resetRegExp();
        }
        reset() {
            if (this.options)
                this.init(this.options);
        }
        resetRegExp() {
            const regexpStr = `${ this.prefix }(.+?)${ this.suffix }`;
            this.regexp = new RegExp(regexpStr, 'g');
            const regexpUnescapeStr = `${ this.prefix }${ this.unescapePrefix }(.+?)${ this.unescapeSuffix }${ this.suffix }`;
            this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
            const nestingRegexpStr = `${ this.nestingPrefix }(.+?)${ this.nestingSuffix }`;
            this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
        }
        interpolate(str, data, lng, options) {
            let match;
            let value;
            let replaces;
            const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
            function regexSafe(val) {
                return val.replace(/\$/g, '$$$$');
            }
            const handleFormat = key => {
                if (key.indexOf(this.formatSeparator) < 0) {
                    const path = utils.getPathWithDefaults(data, defaultData, key);
                    return this.alwaysFormat ? this.format(path, undefined, lng) : path;
                }
                const p = key.split(this.formatSeparator);
                const k = p.shift().trim();
                const f = p.join(this.formatSeparator).trim();
                return this.format(utils.getPathWithDefaults(data, defaultData, k), f, lng, options);
            };
            this.resetRegExp();
            const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
            const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
            const todos = [
                {
                    regex: this.regexpUnescape,
                    safeValue: val => regexSafe(val)
                },
                {
                    regex: this.regexp,
                    safeValue: val => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
                }
            ];
            todos.forEach(todo => {
                replaces = 0;
                while (match = todo.regex.exec(str)) {
                    value = handleFormat(match[1].trim());
                    if (value === undefined) {
                        if (typeof missingInterpolationHandler === 'function') {
                            const temp = missingInterpolationHandler(str, match, options);
                            value = typeof temp === 'string' ? temp : '';
                        } else if (skipOnVariables) {
                            value = match[0];
                            continue;
                        } else {
                            this.logger.warn(`missed to pass in variable ${ match[1] } for interpolating ${ str }`);
                            value = '';
                        }
                    } else if (typeof value !== 'string' && !this.useRawValueToEscape) {
                        value = utils.makeString(value);
                    }
                    str = str.replace(match[0], todo.safeValue(value));
                    todo.regex.lastIndex = 0;
                    replaces++;
                    if (replaces >= this.maxReplaces) {
                        break;
                    }
                }
            });
            return str;
        }
        nest(str, fc, options = {}) {
            let match;
            let value;
            let clonedOptions = { ...options };
            clonedOptions.applyPostProcessor = false;
            delete clonedOptions.defaultValue;
            function handleHasOptions(key, inheritedOptions) {
                const sep = this.nestingOptionsSeparator;
                if (key.indexOf(sep) < 0)
                    return key;
                const c = key.split(new RegExp(`${ sep }[ ]*{`));
                let optionsString = `{${ c[1] }`;
                key = c[0];
                optionsString = this.interpolate(optionsString, clonedOptions);
                optionsString = optionsString.replace(/'/g, '"');
                try {
                    clonedOptions = JSON.parse(optionsString);
                    if (inheritedOptions)
                        clonedOptions = {
                            ...inheritedOptions,
                            ...clonedOptions
                        };
                } catch (e) {
                    this.logger.warn(`failed parsing options string in nesting for key ${ key }`, e);
                    return `${ key }${ sep }${ optionsString }`;
                }
                delete clonedOptions.defaultValue;
                return key;
            }
            while (match = this.nestingRegexp.exec(str)) {
                let formatters = [];
                let doReduce = false;
                if (match[0].includes(this.formatSeparator) && !/{.*}/.test(match[1])) {
                    const r = match[1].split(this.formatSeparator).map(elem => elem.trim());
                    match[1] = r.shift();
                    formatters = r;
                    doReduce = true;
                }
                value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
                if (value && match[0] === str && typeof value !== 'string')
                    return value;
                if (typeof value !== 'string')
                    value = utils.makeString(value);
                if (!value) {
                    this.logger.warn(`missed to resolve ${ match[1] } for nesting ${ str }`);
                    value = '';
                }
                if (doReduce) {
                    value = formatters.reduce((v, f) => this.format(v, f, options.lng, options), value.trim());
                }
                str = str.replace(match[0], value);
                this.regexp.lastIndex = 0;
            }
            return str;
        }
    }
    return Interpolator;
});
define('skylark-i18next/BackendConnector',[
    './utils',
    './logger',
    './EventEmitter'
], function (utils, baseLogger, EventEmitter) {
    'use strict';
    function remove(arr, what) {
        let found = arr.indexOf(what);
        while (found !== -1) {
            arr.splice(found, 1);
            found = arr.indexOf(what);
        }
    }
    class Connector extends EventEmitter {
        constructor(backend, store, services, options = {}) {
            super();
            if (utils.isIE10) {
                EventEmitter.call(this);
            }
            this.backend = backend;
            this.store = store;
            this.services = services;
            this.languageUtils = services.languageUtils;
            this.options = options;
            this.logger = baseLogger.create('backendConnector');
            this.state = {};
            this.queue = [];
            if (this.backend && this.backend.init) {
                this.backend.init(services, options.backend, options);
            }
        }
        queueLoad(languages, namespaces, options, callback) {
            const toLoad = [];
            const pending = [];
            const toLoadLanguages = [];
            const toLoadNamespaces = [];
            languages.forEach(lng => {
                let hasAllNamespaces = true;
                namespaces.forEach(ns => {
                    const name = `${ lng }|${ ns }`;
                    if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
                        this.state[name] = 2;
                    } else if (this.state[name] < 0) {
                    } else if (this.state[name] === 1) {
                        if (pending.indexOf(name) < 0)
                            pending.push(name);
                    } else {
                        this.state[name] = 1;
                        hasAllNamespaces = false;
                        if (pending.indexOf(name) < 0)
                            pending.push(name);
                        if (toLoad.indexOf(name) < 0)
                            toLoad.push(name);
                        if (toLoadNamespaces.indexOf(ns) < 0)
                            toLoadNamespaces.push(ns);
                    }
                });
                if (!hasAllNamespaces)
                    toLoadLanguages.push(lng);
            });
            if (toLoad.length || pending.length) {
                this.queue.push({
                    pending,
                    loaded: {},
                    errors: [],
                    callback
                });
            }
            return {
                toLoad,
                pending,
                toLoadLanguages,
                toLoadNamespaces
            };
        }
        loaded(name, err, data) {
            const s = name.split('|');
            const lng = s[0];
            const ns = s[1];
            if (err)
                this.emit('failedLoading', lng, ns, err);
            if (data) {
                this.store.addResourceBundle(lng, ns, data);
            }
            this.state[name] = err ? -1 : 2;
            const loaded = {};
            this.queue.forEach(q => {
                utils.pushPath(q.loaded, [lng], ns);
                remove(q.pending, name);
                if (err)
                    q.errors.push(err);
                if (q.pending.length === 0 && !q.done) {
                    Object.keys(q.loaded).forEach(l => {
                        if (!loaded[l])
                            loaded[l] = [];
                        if (q.loaded[l].length) {
                            q.loaded[l].forEach(ns => {
                                if (loaded[l].indexOf(ns) < 0)
                                    loaded[l].push(ns);
                            });
                        }
                    });
                    q.done = true;
                    if (q.errors.length) {
                        q.callback(q.errors);
                    } else {
                        q.callback();
                    }
                }
            });
            this.emit('loaded', loaded);
            this.queue = this.queue.filter(q => !q.done);
        }
        read(lng, ns, fcName, tried = 0, wait = 350, callback) {
            if (!lng.length)
                return callback(null, {});
            return this.backend[fcName](lng, ns, (err, data) => {
                if (err && data && tried < 5) {
                    setTimeout(() => {
                        this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
                    }, wait);
                    return;
                }
                callback(err, data);
            });
        }
        prepareLoading(languages, namespaces, options = {}, callback) {
            if (!this.backend) {
                this.logger.warn('No backend was added via i18next.use. Will not load resources.');
                return callback && callback();
            }
            if (typeof languages === 'string')
                languages = this.languageUtils.toResolveHierarchy(languages);
            if (typeof namespaces === 'string')
                namespaces = [namespaces];
            const toLoad = this.queueLoad(languages, namespaces, options, callback);
            if (!toLoad.toLoad.length) {
                if (!toLoad.pending.length)
                    callback();
                return null;
            }
            toLoad.toLoad.forEach(name => {
                this.loadOne(name);
            });
        }
        load(languages, namespaces, callback) {
            this.prepareLoading(languages, namespaces, {}, callback);
        }
        reload(languages, namespaces, callback) {
            this.prepareLoading(languages, namespaces, { reload: true }, callback);
        }
        loadOne(name, prefix = '') {
            const s = name.split('|');
            const lng = s[0];
            const ns = s[1];
            this.read(lng, ns, 'read', undefined, undefined, (err, data) => {
                if (err)
                    this.logger.warn(`${ prefix }loading namespace ${ ns } for language ${ lng } failed`, err);
                if (!err && data)
                    this.logger.log(`${ prefix }loaded namespace ${ ns } for language ${ lng }`, data);
                this.loaded(name, err, data);
            });
        }
        saveMissing(languages, namespace, key, fallbackValue, isUpdate, options = {}) {
            if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
                this.logger.warn(`did not save key "${ key }" as the namespace "${ namespace }" was not yet loaded`, 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                return;
            }
            if (key === undefined || key === null || key === '')
                return;
            if (this.backend && this.backend.create) {
                this.backend.create(languages, namespace, key, fallbackValue, null, {
                    ...options,
                    isUpdate
                });
            }
            if (!languages || !languages[0])
                return;
            this.store.addResource(languages[0], namespace, key, fallbackValue);
        }
    }
    return Connector;
});
define('skylark-i18next/defaults',[],function () {
    'use strict';
    function get() {
        return {
            debug: false,
            initImmediate: true,
            ns: ['translation'],
            defaultNS: ['translation'],
            fallbackLng: ['dev'],
            fallbackNS: false,
            whitelist: false,
            nonExplicitWhitelist: false,
            supportedLngs: false,
            nonExplicitSupportedLngs: false,
            load: 'all',
            preload: false,
            simplifyPluralSuffix: true,
            keySeparator: '.',
            nsSeparator: ':',
            pluralSeparator: '_',
            contextSeparator: '_',
            partialBundledLanguages: false,
            saveMissing: false,
            updateMissing: false,
            saveMissingTo: 'fallback',
            saveMissingPlurals: true,
            missingKeyHandler: false,
            missingInterpolationHandler: false,
            postProcess: false,
            postProcessPassResolved: false,
            returnNull: true,
            returnEmptyString: true,
            returnObjects: false,
            joinArrays: false,
            returnedObjectHandler: false,
            parseMissingKeyHandler: false,
            appendNamespaceToMissingKey: false,
            appendNamespaceToCIMode: false,
            overloadTranslationOptionHandler: function handle(args) {
                var ret = {};
                if (typeof args[1] === 'object')
                    ret = args[1];
                if (typeof args[1] === 'string')
                    ret.defaultValue = args[1];
                if (typeof args[2] === 'string')
                    ret.tDescription = args[2];
                if (typeof args[2] === 'object' || typeof args[3] === 'object') {
                    var options = args[3] || args[2];
                    Object.keys(options).forEach(function (key) {
                        ret[key] = options[key];
                    });
                }
                return ret;
            },
            interpolation: {
                escapeValue: true,
                format: (value, format, lng, options) => value,
                prefix: '{{',
                suffix: '}}',
                formatSeparator: ',',
                unescapePrefix: '-',
                nestingPrefix: '$t(',
                nestingSuffix: ')',
                nestingOptionsSeparator: ',',
                maxReplaces: 1000,
                skipOnVariables: false
            }
        };
    }
    
    function transformOptions(options) {
        if (typeof options.ns === 'string')
            options.ns = [options.ns];
        if (typeof options.fallbackLng === 'string')
            options.fallbackLng = [options.fallbackLng];
        if (typeof options.fallbackNS === 'string')
            options.fallbackNS = [options.fallbackNS];
        if (options.whitelist) {
            if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {
                options.whitelist = options.whitelist.concat(['cimode']);
            }
            options.supportedLngs = options.whitelist;
        }
        if (options.nonExplicitWhitelist) {
            options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;
        }
        if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
            options.supportedLngs = options.supportedLngs.concat(['cimode']);
        }
        return options;
    }

    return {
        get: get,
        transformOptions: transformOptions
    };
});
define('skylark-i18next/i18next',[
    './logger',
    './EventEmitter',
    './ResourceStore',
    './Translator',
    './LanguageUtils',
    './PluralResolver',
    './Interpolator',
    './BackendConnector',
    './defaults',
    './postProcessor',
    './utils'
], function (baseLogger, EventEmitter, ResourceStore, Translator, LanguageUtils, PluralResolver, Interpolator, BackendConnector, defaults,  postProcessor, utils) {
    'use strict';
    function noop() {
    }
    class I18n extends EventEmitter {
        constructor(options = {}, callback) {
            super();
            if (utils.isIE10) {
                EventEmitter.call(this);
            }
            this.options = defaults.transformOptions(options);
            this.services = {};
            this.logger = baseLogger;
            this.modules = { external: [] };
            if (callback && !this.isInitialized && !options.isClone) {
                if (!this.options.initImmediate) {
                    this.init(options, callback);
                    return this;
                }
                setTimeout(() => {
                    this.init(options, callback);
                }, 0);
            }
        }
        init(options = {}, callback) {
            if (typeof options === 'function') {
                callback = options;
                options = {};
            }
            if (options.whitelist && !options.supportedLngs) {
                this.logger.deprecate('whitelist', 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.');
            }
            if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {
                this.logger.deprecate('whitelist', 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.');
            }
            this.options = {
                ...defaults.get(),
                ...this.options,
                ...defaults.transformOptions(options)
            };
            this.format = this.options.interpolation.format;
            if (!callback)
                callback = noop;
            function createClassOnDemand(ClassOrObject) {
                if (!ClassOrObject)
                    return null;
                if (typeof ClassOrObject === 'function')
                    return new ClassOrObject();
                return ClassOrObject;
            }
            if (!this.options.isClone) {
                if (this.modules.logger) {
                    baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
                } else {
                    baseLogger.init(null, this.options);
                }
                const lu = new LanguageUtils(this.options);
                this.store = new ResourceStore(this.options.resources, this.options);
                const s = this.services;
                s.logger = baseLogger;
                s.resourceStore = this.store;
                s.languageUtils = lu;
                s.pluralResolver = new PluralResolver(lu, {
                    prepend: this.options.pluralSeparator,
                    compatibilityJSON: this.options.compatibilityJSON,
                    simplifyPluralSuffix: this.options.simplifyPluralSuffix
                });
                s.interpolator = new Interpolator(this.options);
                s.utils = { hasLoadedNamespace: this.hasLoadedNamespace.bind(this) };
                s.backendConnector = new BackendConnector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
                s.backendConnector.on('*', (event, ...args) => {
                    this.emit(event, ...args);
                });
                if (this.modules.languageDetector) {
                    s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                    s.languageDetector.init(s, this.options.detection, this.options);
                }
                if (this.modules.i18nFormat) {
                    s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                    if (s.i18nFormat.init)
                        s.i18nFormat.init(this);
                }
                this.translator = new Translator(this.services, this.options);
                this.translator.on('*', (event, ...args) => {
                    this.emit(event, ...args);
                });
                this.modules.external.forEach(m => {
                    if (m.init)
                        m.init(this);
                });
            }
            if (!this.modules.languageDetector && !this.options.lng) {
                this.logger.warn('init: no languageDetector is used and no lng is defined');
            }
            const storeApi = [
                'getResource',
                'hasResourceBundle',
                'getResourceBundle',
                'getDataByLanguage'
            ];
            storeApi.forEach(fcName => {
                this[fcName] = (...args) => this.store[fcName](...args);
            });
            const storeApiChained = [
                'addResource',
                'addResources',
                'addResourceBundle',
                'removeResourceBundle'
            ];
            storeApiChained.forEach(fcName => {
                this[fcName] = (...args) => {
                    this.store[fcName](...args);
                    return this;
                };
            });
            const deferred = utils.defer();
            const load = () => {
                this.changeLanguage(this.options.lng, (err, t) => {
                    this.isInitialized = true;
                    this.logger.log('initialized', this.options);
                    this.emit('initialized', this.options);
                    deferred.resolve(t);
                    callback(err, t);
                });
            };
            if (this.options.resources || !this.options.initImmediate) {
                load();
            } else {
                setTimeout(load, 0);
            }
            return deferred;
        }
        loadResources(language, callback = noop) {
            let usedCallback = callback;
            let usedLng = typeof language === 'string' ? language : this.language;
            if (typeof language === 'function')
                usedCallback = language;
            if (!this.options.resources || this.options.partialBundledLanguages) {
                if (usedLng && usedLng.toLowerCase() === 'cimode')
                    return usedCallback();
                const toLoad = [];
                const append = lng => {
                    if (!lng)
                        return;
                    const lngs = this.services.languageUtils.toResolveHierarchy(lng);
                    lngs.forEach(l => {
                        if (toLoad.indexOf(l) < 0)
                            toLoad.push(l);
                    });
                };
                if (!usedLng) {
                    const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                    fallbacks.forEach(l => append(l));
                } else {
                    append(usedLng);
                }
                if (this.options.preload) {
                    this.options.preload.forEach(l => append(l));
                }
                this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
            } else {
                usedCallback(null);
            }
        }
        reloadResources(lngs, ns, callback) {
            const deferred = utils.defer();
            if (!lngs)
                lngs = this.languages;
            if (!ns)
                ns = this.options.ns;
            if (!callback)
                callback = noop;
            this.services.backendConnector.reload(lngs, ns, err => {
                deferred.resolve();
                callback(err);
            });
            return deferred;
        }
        use(module) {
            if (!module)
                throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
            if (!module.type)
                throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');
            if (module.type === 'backend') {
                this.modules.backend = module;
            }
            if (module.type === 'logger' || module.log && module.warn && module.error) {
                this.modules.logger = module;
            }
            if (module.type === 'languageDetector') {
                this.modules.languageDetector = module;
            }
            if (module.type === 'i18nFormat') {
                this.modules.i18nFormat = module;
            }
            if (module.type === 'postProcessor') {
                postProcessor.addPostProcessor(module);
            }
            if (module.type === '3rdParty') {
                this.modules.external.push(module);
            }
            return this;
        }
        changeLanguage(lng, callback) {
            this.isLanguageChangingTo = lng;
            const deferred = utils.defer();
            this.emit('languageChanging', lng);
            const done = (err, l) => {
                if (l) {
                    this.language = l;
                    this.languages = this.services.languageUtils.toResolveHierarchy(l);
                    this.translator.changeLanguage(l);
                    this.isLanguageChangingTo = undefined;
                    this.emit('languageChanged', l);
                    this.logger.log('languageChanged', l);
                } else {
                    this.isLanguageChangingTo = undefined;
                }
                deferred.resolve((...args) => this.t(...args));
                if (callback)
                    callback(err, (...args) => this.t(...args));
            };
            const setLng = lngs => {
                const l = typeof lngs === 'string' ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
                if (l) {
                    if (!this.language) {
                        this.language = l;
                        this.languages = this.services.languageUtils.toResolveHierarchy(l);
                    }
                    if (!this.translator.language)
                        this.translator.changeLanguage(l);
                    if (this.services.languageDetector)
                        this.services.languageDetector.cacheUserLanguage(l);
                }
                this.loadResources(l, err => {
                    done(err, l);
                });
            };
            if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
                setLng(this.services.languageDetector.detect());
            } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
                this.services.languageDetector.detect(setLng);
            } else {
                setLng(lng);
            }
            return deferred;
        }
        getFixedT(lng, ns) {
            const fixedT = (key, opts, ...rest) => {
                let options;
                if (typeof opts !== 'object') {
                    options = this.options.overloadTranslationOptionHandler([
                        key,
                        opts
                    ].concat(rest));
                } else {
                    options = { ...opts };
                }
                options.lng = options.lng || fixedT.lng;
                options.lngs = options.lngs || fixedT.lngs;
                options.ns = options.ns || fixedT.ns;
                return this.t(key, options);
            };
            if (typeof lng === 'string') {
                fixedT.lng = lng;
            } else {
                fixedT.lngs = lng;
            }
            fixedT.ns = ns;
            return fixedT;
        }
        t(...args) {
            return this.translator && this.translator.translate(...args);
        }
        exists(...args) {
            return this.translator && this.translator.exists(...args);
        }
        setDefaultNamespace(ns) {
            this.options.defaultNS = ns;
        }
        hasLoadedNamespace(ns, options = {}) {
            if (!this.isInitialized) {
                this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
                return false;
            }
            if (!this.languages || !this.languages.length) {
                this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
                return false;
            }
            const lng = this.languages[0];
            const fallbackLng = this.options ? this.options.fallbackLng : false;
            const lastLng = this.languages[this.languages.length - 1];
            if (lng.toLowerCase() === 'cimode')
                return true;
            const loadNotPending = (l, n) => {
                const loadState = this.services.backendConnector.state[`${ l }|${ n }`];
                return loadState === -1 || loadState === 2;
            };
            if (options.precheck) {
                const preResult = options.precheck(this, loadNotPending);
                if (preResult !== undefined)
                    return preResult;
            }
            if (this.hasResourceBundle(lng, ns))
                return true;
            if (!this.services.backendConnector.backend)
                return true;
            if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
                return true;
            return false;
        }
        loadNamespaces(ns, callback) {
            const deferred = utils.defer();
            if (!this.options.ns) {
                callback && callback();
                return Promise.resolve();
            }
            if (typeof ns === 'string')
                ns = [ns];
            ns.forEach(n => {
                if (this.options.ns.indexOf(n) < 0)
                    this.options.ns.push(n);
            });
            this.loadResources(err => {
                deferred.resolve();
                if (callback)
                    callback(err);
            });
            return deferred;
        }
        loadLanguages(lngs, callback) {
            const deferred = utils.defer();
            if (typeof lngs === 'string')
                lngs = [lngs];
            const preloaded = this.options.preload || [];
            const newLngs = lngs.filter(lng => preloaded.indexOf(lng) < 0);
            if (!newLngs.length) {
                if (callback)
                    callback();
                return Promise.resolve();
            }
            this.options.preload = preloaded.concat(newLngs);
            this.loadResources(err => {
                deferred.resolve();
                if (callback)
                    callback(err);
            });
            return deferred;
        }
        dir(lng) {
            if (!lng)
                lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
            if (!lng)
                return 'rtl';
            const rtlLngs = [
                'ar',
                'shu',
                'sqr',
                'ssh',
                'xaa',
                'yhd',
                'yud',
                'aao',
                'abh',
                'abv',
                'acm',
                'acq',
                'acw',
                'acx',
                'acy',
                'adf',
                'ads',
                'aeb',
                'aec',
                'afb',
                'ajp',
                'apc',
                'apd',
                'arb',
                'arq',
                'ars',
                'ary',
                'arz',
                'auz',
                'avl',
                'ayh',
                'ayl',
                'ayn',
                'ayp',
                'bbz',
                'pga',
                'he',
                'iw',
                'ps',
                'pbt',
                'pbu',
                'pst',
                'prp',
                'prd',
                'ug',
                'ur',
                'ydd',
                'yds',
                'yih',
                'ji',
                'yi',
                'hbo',
                'men',
                'xmn',
                'fa',
                'jpr',
                'peo',
                'pes',
                'prs',
                'dv',
                'sam'
            ];
            return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
        }
        createInstance(options = {}, callback) {
            return new I18n(options, callback);
        }
        cloneInstance(options = {}, callback = noop) {
            const mergedOptions = {
                ...this.options,
                ...options,
                ...{ isClone: true }
            };
            const clone = new I18n(mergedOptions);
            const membersToCopy = [
                'store',
                'services',
                'language'
            ];
            membersToCopy.forEach(m => {
                clone[m] = this[m];
            });
            clone.services = { ...this.services };
            clone.services.utils = { hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone) };
            clone.translator = new Translator(clone.services, clone.options);
            clone.translator.on('*', (event, ...args) => {
                clone.emit(event, ...args);
            });
            clone.init(mergedOptions, callback);
            clone.translator.options = clone.options;
            clone.translator.backendConnector.services.utils = { hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone) };
            return clone;
        }
    }
    return new I18n();
});
define('skylark-i18next/main',['./i18next'], function (i18next) {
    'use strict';
    return i18next;
});
define('skylark-i18next', ['skylark-i18next/main'], function (main) { return main; });

define('skylark-formio/vendors/vanilla-text-mask/adjustCaretPosition',[],function(){
  const defaultArray = [];
  const emptyString = '';

  function adjustCaretPosition({
    previousConformedValue = emptyString,
    previousPlaceholder = emptyString,
    currentCaretPosition = 0,
    conformedValue,
    rawValue,
    placeholderChar,
    placeholder,
    indexesOfPipedChars = defaultArray,
    caretTrapIndexes = defaultArray
  }) {
    if (currentCaretPosition === 0 || !rawValue.length) { return 0 }

    // Store lengths for faster performance?
    const rawValueLength = rawValue.length
    const previousConformedValueLength = previousConformedValue.length
    const placeholderLength = placeholder.length
    const conformedValueLength = conformedValue.length

    // This tells us how long the edit is. If user modified input from `(2__)` to `(243__)`,
    // we know the user in this instance pasted two characters
    const editLength = rawValueLength - previousConformedValueLength

    // If the edit length is positive, that means the user is adding characters, not deleting.
    const isAddition = editLength > 0

    // This is the first raw value the user entered that needs to be conformed to mask
    const isFirstRawValue = previousConformedValueLength === 0

    // A partial multi-character edit happens when the user makes a partial selection in their
    // input and edits that selection. That is going from `(123) 432-4348` to `() 432-4348` by
    // selecting the first 3 digits and pressing backspace.
    //
    // Such cases can also happen when the user presses the backspace while holding down the ALT
    // key.
    const isPartialMultiCharEdit = editLength > 1 && !isAddition && !isFirstRawValue

    // This algorithm doesn't support all cases of multi-character edits, so we just return
    // the current caret position.
    //
    // This works fine for most cases.
    if (isPartialMultiCharEdit) { return currentCaretPosition }

    // For a mask like (111), if the `previousConformedValue` is (1__) and user attempts to enter
    // `f` so the `rawValue` becomes (1f__), the new `conformedValue` would be (1__), which is the
    // same as the original `previousConformedValue`. We handle this case differently for caret
    // positioning.
    const possiblyHasRejectedChar = isAddition && (
      previousConformedValue === conformedValue ||
      conformedValue === placeholder
    )

    let startingSearchIndex = 0
    let trackRightCharacter
    let targetChar

    if (possiblyHasRejectedChar) {
      startingSearchIndex = currentCaretPosition - editLength
    } else {
      // At this point in the algorithm, we want to know where the caret is right before the raw input
      // has been conformed, and then see if we can find that same spot in the conformed input.
      //
      // We do that by seeing what character lies immediately before the caret, and then look for that
      // same character in the conformed input and place the caret there.

      // First, we need to normalize the inputs so that letter capitalization between raw input and
      // conformed input wouldn't matter.
      const normalizedConformedValue = conformedValue.toLowerCase()
      const normalizedRawValue = rawValue.toLowerCase()

      // Then we take all characters that come before where the caret currently is.
      const leftHalfChars = normalizedRawValue.substr(0, currentCaretPosition).split(emptyString)

      // Now we find all the characters in the left half that exist in the conformed input
      // This step ensures that we don't look for a character that was filtered out or rejected by `conformToMask`.
      const intersection = leftHalfChars.filter((char) => normalizedConformedValue.indexOf(char) !== -1)

      // The last character in the intersection is the character we want to look for in the conformed
      // value and the one we want to adjust the caret close to
      targetChar = intersection[intersection.length - 1]

      // Calculate the number of mask characters in the previous placeholder
      // from the start of the string up to the place where the caret is
      const previousLeftMaskChars = previousPlaceholder
        .substr(0, intersection.length)
        .split(emptyString)
        .filter(char => char !== placeholderChar)
        .length

      // Calculate the number of mask characters in the current placeholder
      // from the start of the string up to the place where the caret is
      const leftMaskChars = placeholder
        .substr(0, intersection.length)
        .split(emptyString)
        .filter(char => char !== placeholderChar)
        .length

      // Has the number of mask characters up to the caret changed?
      const masklengthChanged = leftMaskChars !== previousLeftMaskChars

      // Detect if `targetChar` is a mask character and has moved to the left
      const targetIsMaskMovingLeft = (
        previousPlaceholder[intersection.length - 1] !== undefined &&
        placeholder[intersection.length - 2] !== undefined &&
        previousPlaceholder[intersection.length - 1] !== placeholderChar &&
        previousPlaceholder[intersection.length - 1] !== placeholder[intersection.length - 1] &&
        previousPlaceholder[intersection.length - 1] === placeholder[intersection.length - 2]
      )

      // If deleting and the `targetChar` `is a mask character and `masklengthChanged` is true
      // or the mask is moving to the left, we can't use the selected `targetChar` any longer
      // if we are not at the end of the string.
      // In this case, change tracking strategy and track the character to the right of the caret.
      if (
        !isAddition &&
        (masklengthChanged || targetIsMaskMovingLeft) &&
        previousLeftMaskChars > 0 &&
        placeholder.indexOf(targetChar) > -1 &&
        rawValue[currentCaretPosition] !== undefined
      ) {
        trackRightCharacter = true
        targetChar = rawValue[currentCaretPosition]
      }

      // It is possible that `targetChar` will appear multiple times in the conformed value.
      // We need to know not to select a character that looks like our target character from the placeholder or
      // the piped characters, so we inspect the piped characters and the placeholder to see if they contain
      // characters that match our target character.

      // If the `conformedValue` got piped, we need to know which characters were piped in so that when we look for
      // our `targetChar`, we don't select a piped char by mistake
      const pipedChars = indexesOfPipedChars.map((index) => normalizedConformedValue[index])

      // We need to know how many times the `targetChar` occurs in the piped characters.
      const countTargetCharInPipedChars = pipedChars.filter((char) => char === targetChar).length

      // We need to know how many times it occurs in the intersection
      const countTargetCharInIntersection = intersection.filter((char) => char === targetChar).length

      // We need to know if the placeholder contains characters that look like
      // our `targetChar`, so we don't select one of those by mistake.
      const countTargetCharInPlaceholder = placeholder
        .substr(0, placeholder.indexOf(placeholderChar))
        .split(emptyString)
        .filter((char, index) => (
          // Check if `char` is the same as our `targetChar`, so we account for it
          char === targetChar &&

          // but also make sure that both the `rawValue` and placeholder don't have the same character at the same
          // index because if they are equal, that means we are already counting those characters in
          // `countTargetCharInIntersection`
          rawValue[index] !== char
        ))
        .length

      // The number of times we need to see occurrences of the `targetChar` before we know it is the one we're looking
      // for is:
      const requiredNumberOfMatches = (
        countTargetCharInPlaceholder +
        countTargetCharInIntersection +
        countTargetCharInPipedChars +
        // The character to the right of the caret isn't included in `intersection`
        // so add one if we are tracking the character to the right
        (trackRightCharacter ? 1 : 0)
      )

      // Now we start looking for the location of the `targetChar`.
      // We keep looping forward and store the index in every iteration. Once we have encountered
      // enough occurrences of the target character, we break out of the loop
      // If are searching for the second `1` in `1214`, `startingSearchIndex` will point at `4`.
      let numberOfEncounteredMatches = 0
      for (let i = 0; i < conformedValueLength; i++) {
        const conformedValueChar = normalizedConformedValue[i]

        startingSearchIndex = i + 1

        if (conformedValueChar === targetChar) {
          numberOfEncounteredMatches++
        }

        if (numberOfEncounteredMatches >= requiredNumberOfMatches) {
          break
        }
      }
    }

    // At this point, if we simply return `startingSearchIndex` as the adjusted caret position,
    // most cases would be handled. However, we want to fast forward or rewind the caret to the
    // closest placeholder character if it happens to be in a non-editable spot. That's what the next
    // logic is for.

    // In case of addition, we fast forward.
    if (isAddition) {
      // We want to remember the last placeholder character encountered so that if the mask
      // contains more characters after the last placeholder character, we don't forward the caret
      // that far to the right. Instead, we stop it at the last encountered placeholder character.
      let lastPlaceholderChar = startingSearchIndex

      for (let i = startingSearchIndex; i <= placeholderLength; i++) {
        if (placeholder[i] === placeholderChar) {
          lastPlaceholderChar = i
        }

        if (
          // If we're adding, we can position the caret at the next placeholder character.
          placeholder[i] === placeholderChar ||

          // If a caret trap was set by a mask function, we need to stop at the trap.
          caretTrapIndexes.indexOf(i) !== -1 ||

          // This is the end of the placeholder. We cannot move any further. Let's put the caret there.
          i === placeholderLength
        ) {
          return lastPlaceholderChar
        }
      }
    } else {
      // In case of deletion, we rewind.
      if (trackRightCharacter) {
        // Searching for the character that was to the right of the caret
        // We start at `startingSearchIndex` - 1 because it includes one character extra to the right
        for (let i = startingSearchIndex - 1; i >= 0; i--) {
          // If tracking the character to the right of the cursor, we move to the left until
          // we found the character and then place the caret right before it

          if (
            // `targetChar` should be in `conformedValue`, since it was in `rawValue`, just
            // to the right of the caret
            conformedValue[i] === targetChar ||

            // If a caret trap was set by a mask function, we need to stop at the trap.
            caretTrapIndexes.indexOf(i) !== -1 ||

            // This is the beginning of the placeholder. We cannot move any further.
            // Let's put the caret there.
            i === 0
          ) {
            return i
          }
        }
      } else {
        // Searching for the first placeholder or caret trap to the left

        for (let i = startingSearchIndex; i >= 0; i--) {
          // If we're deleting, we stop the caret right before the placeholder character.
          // For example, for mask `(111) 11`, current conformed input `(456) 86`. If user
          // modifies input to `(456 86`. That is, they deleted the `)`, we place the caret
          // right after the first `6`

          if (
            // If we're deleting, we can position the caret right before the placeholder character
            placeholder[i - 1] === placeholderChar ||

            // If a caret trap was set by a mask function, we need to stop at the trap.
            caretTrapIndexes.indexOf(i) !== -1 ||

            // This is the beginning of the placeholder. We cannot move any further.
            // Let's put the caret there.
            i === 0
          ) {
            return i
          }
        }
      }
    }
  }

  return adjustCaretPosition;
});
define('skylark-formio/vendors/vanilla-text-mask/createTextMaskInputElement',[
  "./utilities",
  "./constants",
  "./adjustCaretPosition",
  "./conformToMask"
],function(utilities,constants,adjustCaretPosition,conformToMask){


  const {convertMaskToPlaceholder, isArray, processCaretTraps,isString,isNumber} = utilities;
  const {strFunction} = constants;

  const defaultPlaceholderChar = constants.placeholderChar;

  const emptyString = ''
  const strNone = 'none'
  const strObject = 'object'
  const isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent)
  const defer = typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame : setTimeout

  function createTextMaskInputElement(config) {
    // Anything that we will need to keep between `update` calls, we will store in this `state` object.
    const state = {previousConformedValue: undefined, previousPlaceholder: undefined}

    return {
      state,

      // `update` is called by framework components whenever they want to update the `value` of the input element.
      // The caller can send a `rawValue` to be conformed and set on the input element. However, the default use-case
      // is for this to be read from the `inputElement` directly.
      update(rawValue, {
        inputElement,
        mask: providedMask,
        guide,
        pipe,
        placeholderChar = defaultPlaceholderChar,
        keepCharPositions = false,
        showMask = false
      } = config) {
        // if `rawValue` is `undefined`, read from the `inputElement`
        if (typeof rawValue === 'undefined') {
          rawValue = inputElement.value
        }

        // If `rawValue` equals `state.previousConformedValue`, we don't need to change anything. So, we return.
        // This check is here to handle controlled framework components that repeat the `update` call on every render.
        if (rawValue === state.previousConformedValue) { return }

        // Text Mask accepts masks that are a combination of a `mask` and a `pipe` that work together. If such a `mask` is
        // passed, we destructure it below, so the rest of the code can work normally as if a separate `mask` and a `pipe`
        // were passed.
        if (typeof providedMask === strObject && providedMask.pipe !== undefined && providedMask.mask !== undefined) {
          pipe = providedMask.pipe
          providedMask = providedMask.mask
        }

        // The `placeholder` is an essential piece of how Text Mask works. For a mask like `(111)`, the placeholder would
        // be `(___)` if the `placeholderChar` is set to `_`.
        let placeholder

        // We don't know what the mask would be yet. If it is an array, we take it as is, but if it's a function, we will
        // have to call that function to get the mask array.
        let mask

        // If the provided mask is an array, we can call `convertMaskToPlaceholder` here once and we'll always have the
        // correct `placeholder`.
        if (providedMask instanceof Array) {
          placeholder = convertMaskToPlaceholder(providedMask, placeholderChar)
        }

        // In framework components that support reactivity, it's possible to turn off masking by passing
        // `false` for `mask` after initialization. See https://github.com/text-mask/text-mask/pull/359
        if (providedMask === false) { return }

        // We check the provided `rawValue` before moving further.
        // If it's something we can't work with `getSafeRawValue` will throw.
        const safeRawValue = getSafeRawValue(rawValue)

        // `selectionEnd` indicates to us where the caret position is after the user has typed into the input
        const {selectionEnd: currentCaretPosition} = inputElement

        // We need to know what the `previousConformedValue` and `previousPlaceholder` is from the previous `update` call
        const {previousConformedValue, previousPlaceholder} = state

        let caretTrapIndexes

        // If the `providedMask` is a function. We need to call it at every `update` to get the `mask` array.
        // Then we also need to get the `placeholder`
        if (typeof providedMask === strFunction) {
          mask = providedMask(safeRawValue, {currentCaretPosition, previousConformedValue, placeholderChar})

          // disable masking if `mask` is `false`
          if (mask === false) { return }

          // mask functions can setup caret traps to have some control over how the caret moves. We need to process
          // the mask for any caret traps. `processCaretTraps` will remove the caret traps from the mask and return
          // the indexes of the caret traps.
          const {maskWithoutCaretTraps, indexes} = processCaretTraps(mask)

          mask = maskWithoutCaretTraps // The processed mask is what we're interested in
          caretTrapIndexes = indexes // And we need to store these indexes because they're needed by `adjustCaretPosition`

          placeholder = convertMaskToPlaceholder(mask, placeholderChar)

        // If the `providedMask` is not a function, we just use it as-is.
        } else {
          mask = providedMask
        }

        // The following object will be passed to `conformToMask` to determine how the `rawValue` will be conformed
        const conformToMaskConfig = {
          previousConformedValue,
          guide,
          placeholderChar,
          pipe,
          placeholder,
          currentCaretPosition,
          keepCharPositions
        }

        // `conformToMask` returns `conformedValue` as part of an object for future API flexibility
        const {conformedValue} = conformToMask(safeRawValue, mask, conformToMaskConfig)

        // The following few lines are to support the `pipe` feature.
        const piped = typeof pipe === strFunction

        let pipeResults = {}

        // If `pipe` is a function, we call it.
        if (piped) {
          // `pipe` receives the `conformedValue` and the configurations with which `conformToMask` was called.
          pipeResults = pipe(conformedValue, {rawValue: safeRawValue, ...conformToMaskConfig})

          // `pipeResults` should be an object. But as a convenience, we allow the pipe author to just return `false` to
          // indicate rejection. Or return just a string when there are no piped characters.
          // If the `pipe` returns `false` or a string, the block below turns it into an object that the rest
          // of the code can work with.
          if (pipeResults === false) {
            // If the `pipe` rejects `conformedValue`, we use the `previousConformedValue`, and set `rejected` to `true`.
            pipeResults = {value: previousConformedValue, rejected: true}
          } else if (isString(pipeResults)) {
            pipeResults = {value: pipeResults}
          }
        }

        // Before we proceed, we need to know which conformed value to use, the one returned by the pipe or the one
        // returned by `conformToMask`.
        const finalConformedValue = (piped) ? pipeResults.value : conformedValue

        // After determining the conformed value, we will need to know where to set
        // the caret position. `adjustCaretPosition` will tell us.
        const adjustedCaretPosition = adjustCaretPosition({
          previousConformedValue,
          previousPlaceholder,
          conformedValue: finalConformedValue,
          placeholder,
          rawValue: safeRawValue,
          currentCaretPosition,
          placeholderChar,
          indexesOfPipedChars: pipeResults.indexesOfPipedChars,
          caretTrapIndexes
        })

        // Text Mask sets the input value to an empty string when the condition below is set. It provides a better UX.
        const inputValueShouldBeEmpty = finalConformedValue === placeholder && adjustedCaretPosition === 0
        const emptyValue = showMask ? placeholder : emptyString
        const inputElementValue = (inputValueShouldBeEmpty) ? emptyValue : finalConformedValue

        state.previousConformedValue = inputElementValue // store value for access for next time
        state.previousPlaceholder = placeholder

        // In some cases, this `update` method will be repeatedly called with a raw value that has already been conformed
        // and set to `inputElement.value`. The below check guards against needlessly readjusting the input state.
        // See https://github.com/text-mask/text-mask/issues/231
        if (inputElement.value === inputElementValue) {
          return
        }

        inputElement.value = inputElementValue // set the input value
        safeSetSelection(inputElement, adjustedCaretPosition) // adjust caret position
      }
    }
  }

  function safeSetSelection(element, selectionPosition) {
    if (document.activeElement === element) {
      if (isAndroid) {
        defer(() => element.setSelectionRange(selectionPosition, selectionPosition, strNone), 0)
      } else {
        element.setSelectionRange(selectionPosition, selectionPosition, strNone)
      }
    }
  }

  function getSafeRawValue(inputValue) {
    if (isString(inputValue)) {
      return inputValue
    } else if (isNumber(inputValue)) {
      return String(inputValue)
    } else if (inputValue === undefined || inputValue === null) {
      return emptyString
    } else {
      throw new Error(
        "The 'value' provided to Text Mask needs to be a string or a number. The value " +
        `received was:\n\n ${JSON.stringify(inputValue)}`
      )
    }
  }

  return createTextMaskInputElement;

});
define('skylark-formio/vendors/vanilla-text-mask/maskInput',[
	"./createTextMaskInputElement"
],function(createTextMaskInputElement) {

	function maskInput(textMaskConfig) {
	  const {inputElement} = textMaskConfig
	  const textMaskInputElement = createTextMaskInputElement(textMaskConfig)
	  const inputHandler = ({target: {value}}) => textMaskInputElement.update(value)

	  inputElement.addEventListener('input', inputHandler)

	  textMaskInputElement.update(inputElement.value)

	  return {
	    textMaskInputElement,

	    destroy() {
	      inputElement.removeEventListener('input', inputHandler)
	    }
	  }
	}

	return  maskInput;
});


define('skylark-formio/Element',[
    'skylark-langx',
    './EventEmitter',
    './Formio',
    './utils/utils',
    'skylark-i18next',
    'skylark-moment',
    './vendors/vanilla-text-mask/maskInput'
], function (langx,EventEmitter, Formio, FormioUtils, i18next,  moment, maskInput) {
    'use strict';
    return class Element {
        constructor(options) {
            this.options = Object.assign({
                language: 'en',
                highlightErrors: true,
                componentErrorClass: 'formio-error-wrapper',
                componentWarningClass: 'formio-warning-wrapper',
                row: '',
                namespace: 'formio'
            }, options || {});
            this.id = FormioUtils.getRandomComponentId();
            this.eventHandlers = [];
            this.i18next = this.options.i18next || i18next;
            this.events = options && options.events ? options.events : new EventEmitter({
                wildcard: false,
                maxListeners: 0
            });
            this.defaultMask = null;
        }
        on(event, cb, internal, once = false) {
            if (!this.events) {
                return;
            }
            const type = `${ this.options.namespace }.${ event }`;
            cb.id = this.id;
            cb.internal = internal;
            return this.events[once ? 'once' : 'on'](type, cb);
        }
        once(event, cb, internal) {
            return this.on(event, cb, internal, true);
        }
        onAny(cb) {
            if (!this.events) {
                return;
            }
            return this.events.onAny(cb);
        }
        off(event) {
            if (!this.events) {
                return;
            }
            const type = `${ this.options.namespace }.${ event }`;
            langx.forEach(this.events.listeners(type), listener => { //_.each
                if (listener && listener.id === this.id) {
                    this.events.off(type, listener);
                }
            });
        }
        emit(event, ...data) {
            if (this.events) {
                this.events.emit(`${ this.options.namespace }.${ event }`, ...data);
            }
        }
        addEventListener(obj, type, func, persistent) {
            if (!obj) {
                return;
            }
            if (!persistent) {
                this.eventHandlers.push({
                    id: this.id,
                    obj,
                    type,
                    func
                });
            }
            if ('addEventListener' in obj) {
                obj.addEventListener(type, func, false);
            } else if ('attachEvent' in obj) {
                obj.attachEvent(`on${ type }`, func);
            }
            return this;
        }
        removeEventListener(obj, type, func = null) {
            const indexes = [];
            this.eventHandlers.forEach((handler, index) => {
                if (handler.id === this.id && obj.removeEventListener && handler.type === type && (!func || handler.func === func)) {
                    obj.removeEventListener(type, handler.func);
                    indexes.push(index);
                }
            });
            if (indexes.length) {
                langx.pullAt(this.eventHandlers, indexes);
            }
            return this;
        }
        removeEventListeners() {
            this.eventHandlers.forEach(handler => {
                if (this.id === handler.id && handler.type && handler.obj && handler.obj.removeEventListener) {
                    handler.obj.removeEventListener(handler.type, handler.func);
                }
            });
            this.eventHandlers = [];
        }
        removeAllEvents(includeExternal) {
            langx.forEach(this.events._events, (events, type) => {//_.each
                langx.forEach(events, listener => {//_.each
                    if (listener && this.id === listener.id && (includeExternal || listener.internal)) {
                        this.events.off(type, listener);
                    }
                });
            });
        }
        destroy() {
            this.removeEventListeners();
            this.removeAllEvents();
        }
        appendTo(element, container) {
            container.appendChild(element);
            return this;
        }
        prependTo(element, container) {
            if (container) {
                if (container.firstChild) {
                    try {
                        container.insertBefore(element, container.firstChild);
                    } catch (err) {
                        console.warn(err);
                        container.appendChild(element);
                    }
                } else {
                    container.appendChild(element);
                }
            }
            return this;
        }
        removeChildFrom(element, container) {
            if (container && container.contains(element)) {
                try {
                    container.removeChild(element);
                } catch (err) {
                    console.warn(err);
                }
            }
            return this;
        }
        ce(type, attr, children = null) {
            const element = document.createElement(type);
            if (attr) {
                this.attr(element, attr);
            }
            this.appendChild(element, children);
            return element;
        }
        appendChild(element, child) {
            if (Array.isArray(child)) {
                child.forEach(oneChild => this.appendChild(element, oneChild));
            } else if (child instanceof HTMLElement || child instanceof Text) {
                element.appendChild(child);
            } else if (child) {
                element.appendChild(this.text(child.toString()));
            }
            return this;
        }
        maskPlaceholder(mask) {
            return mask.map(char => char instanceof RegExp ? '_' : char).join('');
        }
        setInputMask(input, inputMask, placeholder) {
            if (input && inputMask) {
                const mask = FormioUtils.getInputMask(inputMask);
                this.defaultMask = mask;
                try {
                    if (input.mask) {
                        input.mask.destroy();
                    }
                    input.mask = maskInput({
                        inputElement: input,
                        mask
                    });
                } catch (e) {
                    console.warn(e);
                }
                if (mask.numeric) {
                    input.setAttribute('pattern', '\\d*');
                }
                if (placeholder) {
                    input.setAttribute('placeholder', this.maskPlaceholder(mask));
                }
            }
        }
        t(text, params) {
            params = params || {};
            params.nsSeparator = '::';
            params.keySeparator = '.|.';
            params.pluralSeparator = '._.';
            params.contextSeparator = '._.';
            const translated = this.i18next.t(text, params);
            return translated || text;
        }
        text(text) {
            return document.createTextNode(this.t(text));
        }
        attr(element, attr) {
            if (!element) {
                return;
            }
            langx.forEach(attr, (value, key) => {//_.each
                if (typeof value !== 'undefined') {
                    if (key.indexOf('on') === 0) {
                        this.addEventListener(element, key.substr(2).toLowerCase(), value);
                    } else {
                        element.setAttribute(key, value);
                    }
                }
            });
        }
        hasClass(element, className) {
            if (!element) {
                return false;
            }
            className = ` ${ className } `;
            return ` ${ element.className } `.replace(/[\n\t\r]/g, ' ').indexOf(className) > -1;
        }
        addClass(element, className) {
            if (!element) {
                return this;
            }
            const classes = element.getAttribute('class');
            if (!classes.includes(className)) {
                element.setAttribute('class', `${ classes } ${ className }`);
            }
            return this;
        }
        removeClass(element, className) {
            if (!element || !className) {
                return this;
            }
            let cls = element.getAttribute('class');
            if (cls) {
                cls = cls.replace(new RegExp(` ${ className }`, 'g'), '');
                element.setAttribute('class', cls);
            }
            return this;
        }
        empty(element) {
            if (element) {
                while (element.firstChild) {
                    element.removeChild(element.firstChild);
                }
            }
        }
        evalContext(additional) {
            return Object.assign({
                "_" : langx,  // modified by lwf
                utils: FormioUtils,
                util: FormioUtils,
                user: Formio.getUser(),
                moment,
                instance: this,
                self: this,
                token: Formio.getToken({ decode: true }),
                config: this.root && this.root.form && this.root.form.config ? this.root.form.config : {}
            }, additional, langx.get(this.root, 'options.evalContext', {}));
        }
        interpolate(string, data) {
            return FormioUtils.interpolate(string, this.evalContext(data));
        }
        evaluate(func, args, ret, tokenize) {
            return FormioUtils.evaluate(func, this.evalContext(args), ret, tokenize);
        }
        hook() {
            const name = arguments[0];
            if (this.options && this.options.hooks && this.options.hooks[name]) {
                return this.options.hooks[name].apply(this, Array.prototype.slice.call(arguments, 1));
            } else {
                const fn = typeof arguments[arguments.length - 1] === 'function' ? arguments[arguments.length - 1] : null;
                if (fn) {
                    return fn(null, arguments[1]);
                } else {
                    return arguments[1];
                }
            }
        }
    };
});
define('skylark-formio/components/_classes/componentModal/ComponentModal',[],function () {
    'use strict';
    return class ComponentModal {
        static render(component, data, topLevel) {
            const children = component.renderTemplate('component', data, topLevel);
            return component.renderTemplate('componentModal', {
                ...data,
                children
            });
        }
        constructor(component, modal) {
            this.component = component;
            this.modal = modal;
            this.currentValue = this.component.dataValue;
            this.dataLoaded = false;
            this.init();
        }
        get refs() {
            return this.component.refs;
        }
        init() {
            this.loadRefs();
        }
        setValue(value) {
            if (this.dataLoaded) {
                return;
            }
            this.currentValue = value;
            this.dataLoaded = true;
            this.updateView();
        }
        setOpenModalElement(template) {
            this.openModalTemplate = template;
            this.component.setContent(this.refs.openModalWrapper, template);
            this.loadRefs();
            this.setEventListeners();
        }
        loadRefs() {
            this.component.loadRefs(this.modal, {
                modalOverlay: 'single',
                modalContents: 'single',
                modalClose: 'single',
                openModalWrapper: 'single',
                openModal: 'single',
                modalSave: 'single',
                modalWrapper: 'single'
            });
        }
        setEventListeners() {
            this.component.addEventListener(this.refs.openModal, 'click', this.openModalHandler.bind(this));
            this.component.addEventListener(this.refs.modalOverlay, 'click', this.closeModalHandler.bind(this));
            this.component.addEventListener(this.refs.modalClose, 'click', this.closeModalHandler.bind(this));
            this.component.addEventListener(this.refs.modalSave, 'click', this.saveModalValueHandler.bind(this));
        }
        setOpenEventListener() {
            this.component.loadRefs(this.modal, { 'openModal': 'single' });
            this.component.addEventListener(this.refs.openModal, 'click', this.openModalHandler.bind(this));
        }
        openModalHandler(event) {
            event.preventDefault();
            this.refs.modalWrapper.classList.remove('component-rendering-hidden');
        }
        updateView() {
            const template = this.currentValue === this.component.defaultValue ? this.openModalTemplate : this.component.getModalPreviewTemplate();
            this.component.setContent(this.refs.openModalWrapper, template);
            this.setOpenEventListener();
        }
        closeModal() {
            this.refs.modalWrapper.classList.add('component-rendering-hidden');
            this.updateView();
        }
        closeModalHandler(event) {
            event.preventDefault();
            this.component.setValue(this.currentValue);
            this.closeModal();
        }
        saveModalValueHandler(event) {
            event.preventDefault();
            this.currentValue = this.component.dataValue;
            this.closeModal();
        }
    };
});
define('skylark-formio/components/_classes/component/Component',[
    "skylark-langx",
    '../../../vendors/vanilla-text-mask/conformToMask',
    '../../../vendors/getify/npo',
    '../../../vendors/tooltip-js/Tooltip',
    'skylark-lodash',
    '../../../vendors/ismobilejs/isMobile',
    '../../../Formio',
    '../../../utils/utils',
    '../../../validator/Validator',
    '../../../templates/Templates',
    '../../../utils/utils',
    '../../../Element',
    '../componentModal/ComponentModal'
], function (langx,conformToMask, NativePromise, Tooltip, _, isMobile, Formio, FormioUtils, Validator, Templates, utils, Element, ComponentModal) {
    'use strict';
    const CKEDITOR = 'https://cdn.form.io/ckeditor/16.0.0/ckeditor.js';
    const QUILL_URL = 'https://cdn.form.io/quill/1.3.7';
    const ACE_URL = 'https://cdn.form.io/ace/1.4.8/ace.js';
    const TINYMCE_URL = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js';
    return class Component extends Element {
        static schema(...sources) {
            return langx.mixin({  //_.merge 
                input: true,
                key: '',
                placeholder: '',
                prefix: '',
                customClass: '',
                suffix: '',
                multiple: false,
                defaultValue: null,
                protected: false,
                unique: false,
                persistent: true,
                hidden: false,
                clearOnHide: true,
                refreshOn: '',
                redrawOn: '',
                tableView: false,
                modalEdit: false,
                label: '',
                labelPosition: 'top',
                description: '',
                errorLabel: '',
                tooltip: '',
                hideLabel: false,
                tabindex: '',
                disabled: false,
                autofocus: false,
                dbIndex: false,
                customDefaultValue: '',
                calculateValue: '',
                widget: null,
                attributes: {},
                validateOn: 'change',
                validate: {
                    required: false,
                    custom: '',
                    customPrivate: false,
                    strictDateValidation: false,
                    multiple: false,
                    unique: false
                },
                conditional: {
                    show: null,
                    when: null,
                    eq: ''
                },
                overlay: {
                    style: '',
                    left: '',
                    top: '',
                    width: '',
                    height: ''
                },
                allowCalculateOverride: false,
                encrypted: false,
                showCharCount: false,
                showWordCount: false,
                properties: {},
                allowMultipleMasks: false
            }, ...sources);
        }
        static tableView(value, options) {
        }
        constructor(component, options, data) {
            super(Object.assign({
                renderMode: 'form',
                attachMode: 'full'
            }, options || {}));
            this._hasCondition = null;
            this.refs = {};
            if (component && this.options.components && this.options.components[component.type]) {
                langx.mixin(component, this.options.components[component.type]); //_.merge
            }
            this.validator = Validator;
            this.path = '';
            this.component = this.mergeSchema(component || {});
            this.originalComponent = utils.fastCloneDeep(this.component);
            this.attached = false;
            this.rendered = false;
            this._data = data || {};
            this.component.id = this.id;
            this.error = '';
            this.tooltip = '';
            this.row = this.options.row;
            this._disabled = utils.boolValue(this.component.disabled) ? this.component.disabled : false;
            this.root = this.options.root;
            this.pristine = true;
            this.parent = this.options.parent;
            this.options.name = this.options.name || 'data';
            this.validators = [
                'required',
                'minLength',
                'maxLength',
                'minWords',
                'maxWords',
                'custom',
                'pattern',
                'json',
                'mask'
            ];
            this._path = '';
            this._parentVisible = this.options.hasOwnProperty('parentVisible') ? this.options.parentVisible : true;
            this._visible = this._parentVisible && this.conditionallyVisible(null, data);
            this._parentDisabled = false;
            let lastChanged = null;
            let triggerArgs = [];
            const _triggerChange = langx.debounce((...args) => {
                if (this.root) {
                    this.root.changing = false;
                }
                triggerArgs = [];
                if (!args[1] && lastChanged) {
                    args[1] = lastChanged;
                }
                if (langx.isEmpty(args[0]) && lastChanged) {
                    args[0] = lastChanged.flags;
                }
                lastChanged = null;
                return this.onChange(...args);
            }, 100);
            this.triggerChange = (...args) => {
                if (args[1]) {
                    lastChanged = args[1];
                }
                if (this.root) {
                    this.root.changing = true;
                }
                if (args.length) {
                    triggerArgs = args;
                }
                return _triggerChange(...triggerArgs);
            };
            this.triggerRedraw = langx.debounce(this.redraw.bind(this), 100);
            this.tooltips = [];
            this.invalid = false;
            if (this.component) {
                this.type = this.component.type;
                if (this.allowData && this.key) {
                    this.options.name += `[${ this.key }]`;
                    if (this.visible || !this.component.clearOnHide) {
                        if (!this.hasValue()) {
                            this.dataValue = this.defaultValue;
                        } else {
                            this.dataValue = this.dataValue;
                        }
                    }
                }
                this.info = this.elementInfo();
            }
            this.hook('component');
            if (!this.options.skipInit) {
                this.init();
            }
        }
        get data() {
            return this._data;
        }
        set data(value) {
            this._data = value;
        }
        mergeSchema(component = {}) {
            return _.defaultsDeep(component, this.defaultSchema);
        }
        get ready() {
            return NativePromise.resolve(this);
        }
        get labelInfo() {
            const label = {};
            label.hidden = this.labelIsHidden();
            label.className = '';
            label.labelPosition = this.component.labelPosition;
            label.tooltipClass = `${ this.iconClass('question-sign') } text-muted`;
            if (this.hasInput && this.component.validate && utils.boolValue(this.component.validate.required)) {
                label.className += ' field-required';
            }
            if (label.hidden) {
                label.className += ' control-label--hidden';
            }
            if (this.info.attr.id) {
                label.for = this.info.attr.id;
            }
            return label;
        }
        init() {
            this.disabled = this.shouldDisabled;
        }
        destroy() {
            super.destroy();
            this.detach();
        }
        get shouldDisabled() {
            return this.options.readOnly || this.component.disabled || this.options.hasOwnProperty('disabled') && this.options.disabled[this.key];
        }
        get isInputComponent() {
            return !this.component.hasOwnProperty('input') || this.component.input;
        }
        get allowData() {
            return this.hasInput;
        }
        get hasInput() {
            return this.isInputComponent || this.refs.input && this.refs.input.length;
        }
        get defaultSchema() {
            return Component.schema();
        }
        get key() {
            return langx.get(this.component, 'key', '');
        }
        set parentVisible(value) {
            if (this._parentVisible !== value) {
                this._parentVisible = value;
                this.clearOnHide();
                this.redraw();
            }
        }
        get parentVisible() {
            return this._parentVisible;
        }
        set parentDisabled(value) {
            if (this._parentDisabled !== value) {
                this._parentDisabled = value;
                this.clearOnHide();
                this.redraw();
            }
        }
        get parentDisabled() {
            return this._parentDisabled;
        }
        set visible(value) {
            if (this._visible !== value) {
                this._visible = value;
                this.clearOnHide();
                this.redraw();
            }
        }
        get visible() {
            if (this.builderMode || this.options.showHiddenFields) {
                return true;
            }
            if (this.options.hide && this.options.hide[this.component.key]) {
                return false;
            }
            if (this.options.show && this.options.show[this.component.key]) {
                return true;
            }
            return this._visible && this._parentVisible;
        }
        get currentForm() {
            return this._currentForm;
        }
        set currentForm(instance) {
            this._currentForm = instance;
        }
        get fullMode() {
            return this.options.attachMode === 'full';
        }
        get builderMode() {
            return this.options.attachMode === 'builder';
        }
        get calculatedPath() {
            if (this._path) {
                return this._path;
            }
            this._path = this.key;
            if (!this.root) {
                return this._path;
            }
            let parent = this.parent;
            while (parent && parent.id !== this.root.id) {
                if ([
                        'datagrid',
                        'container',
                        'editgrid'
                    ].includes(parent.type) || parent.tree) {
                    this._path = `${ parent.key }.${ this._path }`;
                }
                parent = parent.parent;
            }
            return this._path;
        }
        get labelPosition() {
            return this.component.labelPosition;
        }
        get labelWidth() {
            return this.component.labelWidth || 30;
        }
        get labelMargin() {
            return this.component.labelMargin || 3;
        }
        get isAdvancedLabel() {
            return [
                'left-left',
                'left-right',
                'right-left',
                'right-right'
            ].includes(this.labelPosition);
        }
        get labelPositions() {
            return this.labelPosition.split('-');
        }
        rightDirection(direction) {
            return direction === 'right';
        }
        getLabelInfo() {
            const isRightPosition = this.rightDirection(this.labelPositions[0]);
            const isRightAlign = this.rightDirection(this.labelPositions[1]);
            const labelStyles = `
      flex: ${ this.labelWidth };
      ${ isRightPosition ? 'margin-left' : 'margin-right' }:${ this.labelMargin }%;
    `;
            const contentStyles = `
      flex: ${ 100 - this.labelWidth - this.labelMargin };
    `;
            return {
                isRightPosition,
                isRightAlign,
                labelStyles,
                contentStyles
            };
        }
        getModifiedSchema(schema, defaultSchema, recursion) {
            const modified = {};
            if (!defaultSchema) {
                return schema;
            }
            langx.forEach(schema, (val, key) => { //_.each
                if (!langx.isArray(val) && langx.isObject(val) && defaultSchema.hasOwnProperty(key)) {
                    const subModified = this.getModifiedSchema(val, defaultSchema[key], true);
                    if (!langx.isEmpty(subModified)) {
                        modified[key] = subModified;
                    }
                } else if (langx.isArray(val)) {
                    if (val.length !== 0) {
                        modified[key] = val;
                    }
                } else if (!recursion && key === 'type' || !recursion && key === 'key' || !recursion && key === 'label' || !recursion && key === 'input' || !recursion && key === 'tableView' || val !== '' && !defaultSchema.hasOwnProperty(key) || val !== '' && val !== defaultSchema[key]) {
                    modified[key] = val;
                }
            });
            return modified;
        }
        get schema() {
            return utils.fastCloneDeep(this.getModifiedSchema(_.omit(this.component, 'id'), this.defaultSchema));
        }
        t(text, params) {
            if (!text) {
                return '';
            }
            params = params || {};
            params.data = this.rootValue;
            params.row = this.data;
            params.component = this.component;
            params.nsSeparator = '::';
            params.keySeparator = '.|.';
            params.pluralSeparator = '._.';
            params.contextSeparator = '._.';
            const translated = this.i18next.t(text, params);
            return translated || text;
        }
        labelIsHidden() {
            return !this.component.label || !this.inDataGrid && this.component.hideLabel || this.inDataGrid && !this.component.dataGridLabel || this.options.inputsOnly;
        }
        get transform() {
            return Templates.current.hasOwnProperty('transform') ? Templates.current.transform.bind(Templates.current) : (type, value) => value;
        }
        getTemplate(names, modes) {
            modes = Array.isArray(modes) ? modes : [modes];
            names = Array.isArray(names) ? names : [names];
            if (!modes.includes('form')) {
                modes.push('form');
            }
            let result = null;
            if (this.options.templates) {
                result = this.checkTemplate(this.options.templates, names, modes);
                if (result) {
                    return result;
                }
            }
            const frameworkTemplates = this.options.template ? Templates.templates[this.options.template] : Templates.current;
            result = this.checkTemplate(frameworkTemplates, names, modes);
            if (result) {
                return result;
            }
            const name = names[names.length - 1];
            const templatesByName = Templates.defaultTemplates[name];
            if (!templatesByName) {
                return `Unknown template: ${ name }`;
            }
            const templateByMode = this.checkTemplateMode(templatesByName, modes);
            if (templateByMode) {
                return templateByMode;
            }
            return templatesByName.form;
        }
        checkTemplate(templates, names, modes) {
            for (const name of names) {
                const templatesByName = templates[name];
                if (templatesByName) {
                    const templateByMode = this.checkTemplateMode(templatesByName, modes);
                    if (templateByMode) {
                        return templateByMode;
                    }
                }
            }
            return null;
        }
        checkTemplateMode(templatesByName, modes) {
            for (const mode of modes) {
                const templateByMode = templatesByName[mode];
                if (templateByMode) {
                    return templateByMode;
                }
            }
            return null;
        }
        renderTemplate(name, data = {}, modeOption) {
            const mode = modeOption || this.options.renderMode || 'form';
            data.component = this.component;
            data.self = this;
            data.options = this.options;
            data.readOnly = this.options.readOnly;
            data.iconClass = this.iconClass.bind(this);
            data.t = this.t.bind(this);
            data.transform = this.transform;
            data.id = data.id || this.id;
            data.key = data.key || this.key;
            data.value = data.value || this.dataValue;
            data.disabled = this.disabled;
            data.builder = this.builderMode;
            data.render = (...args) => {
                console.warn(`Form.io 'render' template function is deprecated.
      If you need to render template (template A) inside of another template (template B),
      pass pre-compiled template A (use this.renderTemplate('template_A_name') as template context variable for template B`);
                return this.renderTemplate(...args);
            };
            data.label = this.labelInfo;
            data.tooltip = this.interpolate(this.component.tooltip || '').replace(/(?:\r\n|\r|\n)/g, '<br />');
            const names = [
                `${ name }-${ this.component.type }-${ this.key }`,
                `${ name }-${ this.component.type }`,
                `${ name }-${ this.key }`,
                `${ name }`
            ];
            return this.hook(`render${ name.charAt(0).toUpperCase() + name.substring(1, name.length) }`, this.interpolate(this.getTemplate(names, mode), data), data, mode);
        }
        sanitize(dirty) {
            return FormioUtils.sanitize(dirty, this.options);
        }
        renderString(template, data) {
            if (!template) {
                return '';
            }
            return this.interpolate(template, data);
        }
        performInputMapping(input) {
            return input;
        }
        getBrowserLanguage() {
            const nav = window.navigator;
            const browserLanguagePropertyKeys = [
                'language',
                'browserLanguage',
                'systemLanguage',
                'userLanguage'
            ];
            let language;
            if (Array.isArray(nav.languages)) {
                for (let i = 0; i < nav.languages.length; i++) {
                    language = nav.languages[i];
                    if (language && language.length) {
                        return language.split(';')[0];
                    }
                }
            }
            for (let i = 0; i < browserLanguagePropertyKeys.length; i++) {
                language = nav[browserLanguagePropertyKeys[i]];
                if (language && language.length) {
                    return language.split(';')[0];
                }
            }
            return null;
        }
        beforePage() {
            return NativePromise.resolve(true);
        }
        beforeNext() {
            return this.beforePage(true);
        }
        beforeSubmit() {
            return NativePromise.resolve(true);
        }
        get submissionTimezone() {
            this.options.submissionTimezone = this.options.submissionTimezone || langx.get(this.root, 'options.submissionTimezone');
            return this.options.submissionTimezone;
        }
        loadRefs(element, refs) {
            for (const ref in refs) {
                if (refs[ref] === 'single') {
                    this.refs[ref] = element.querySelector(`[ref="${ ref }"]`);
                } else {
                    this.refs[ref] = element.querySelectorAll(`[ref="${ ref }"]`);
                }
            }
        }
        setOpenModalElement() {
            const template = `
      <label class="control-label">${ this.component.label }</label><br>
      <button lang='en' class='btn btn-light btn-md open-modal-button' ref='openModal'>Click to set value</button>
    `;
            this.componentModal.setOpenModalElement(template);
        }
        getModalPreviewTemplate() {
            return `
      <label class="control-label">${ this.component.label }</label><br>
      <button lang='en' class='btn btn-light btn-md open-modal-button' ref='openModal'>${ this.getValueAsString(this.dataValue) }</button>`;
        }
        build(element) {
            element = element || this.element;
            this.empty(element);
            this.setContent(element, this.render());
            return this.attach(element);
        }
        render(children = `Unknown component: ${ this.component.type }`, topLevel = false) {
            const isVisible = this.visible;
            this.rendered = true;
            if (!this.builderMode && this.component.modalEdit) {
                return ComponentModal.render(this, {
                    visible: isVisible,
                    id: this.id,
                    classes: this.className,
                    styles: this.customStyle,
                    children
                }, topLevel);
            } else {
                return this.renderTemplate('component', {
                    visible: isVisible,
                    id: this.id,
                    classes: this.className,
                    styles: this.customStyle,
                    children
                }, topLevel);
            }
        }
        attach(element) {
            if (!this.builderMode && this.component.modalEdit) {
                this.componentModal = new ComponentModal(this, element);
                this.setOpenModalElement();
            }
            this.attached = true;
            this.element = element;
            element.component = this;
            if (this.element.id) {
                this.id = this.element.id;
            }
            this.loadRefs(element, {
                messageContainer: 'single',
                tooltip: 'multiple'
            });
            this.refs.tooltip.forEach((tooltip, index) => {
                const title = this.interpolate(tooltip.getAttribute('data-title') || this.t(this.component.tooltip)).replace(/(?:\r\n|\r|\n)/g, '<br />');
                this.tooltips[index] = new Tooltip(tooltip, {
                    trigger: 'hover click focus',
                    placement: 'right',
                    html: true,
                    title: title,
                    template: `
          <div class="tooltip" style="opacity: 1;" role="tooltip">
            <div class="tooltip-arrow"></div>
            <div class="tooltip-inner"></div>
          </div>`
                });
            });
            this.attachLogic();
            this.autofocus();
            this.hook('attachComponent', element, this);
            const type = this.component.type;
            if (type) {
                this.hook(`attach${ type.charAt(0).toUpperCase() + type.substring(1, type.length) }`, element, this);
            }
            return NativePromise.resolve();
        }
        addShortcut(element, shortcut) {
            if (!element || !this.root || this.root === this) {
                return;
            }
            if (!shortcut) {
                shortcut = this.component.shortcut;
            }
            this.root.addShortcut(element, shortcut);
        }
        removeShortcut(element, shortcut) {
            if (!element || this.root === this) {
                return;
            }
            if (!shortcut) {
                shortcut = this.component.shortcut;
            }
            this.root.removeShortcut(element, shortcut);
        }
        detach() {
            this.refs = {};
            this.removeEventListeners();
            this.detachLogic();
            if (this.tooltip) {
                this.tooltip.dispose();
            }
        }
        checkRefresh(refreshData, changed) {
            const changePath = langx.get(changed, 'instance.calculatedPath', false);
            if (changePath && this.calculatedPath === changePath) {
                return;
            }
            if (refreshData === 'data') {
                this.refresh(this.data);
            } else if (changePath && changePath === refreshData && changed && changed.instance && this.inContext(changed.instance)) {
                this.refresh(changed.value);
            }
        }
        checkRefreshOn(changed) {
            const refreshOn = this.component.refreshOn || this.component.redrawOn;
            if (refreshOn) {
                if (Array.isArray(refreshOn)) {
                    refreshOn.forEach(refreshData => {
                        this.checkRefresh(refreshData, changed);
                    });
                } else {
                    this.checkRefresh(refreshOn, changed);
                }
            }
        }
        refresh(value) {
            if (this.hasOwnProperty('refreshOnValue')) {
                this.refreshOnChanged = !langx.isEqual(value, this.refreshOnValue);
            } else {
                this.refreshOnChanged = true;
            }
            this.refreshOnValue = utils.fastCloneDeep(value);
            if (this.refreshOnChanged) {
                if (this.component.clearOnRefresh) {
                    this.setValue(null);
                }
                this.triggerRedraw();
            }
        }
        inContext(component) {
            if (component.data === this.data) {
                return true;
            }
            let parent = this.parent;
            while (parent) {
                if (parent.data === component.data) {
                    return true;
                }
                parent = parent.parent;
            }
            return false;
        }
        get viewOnly() {
            return this.options.readOnly && this.options.viewAsHtml;
        }
        createViewOnlyElement() {
            this.element = this.ce('dl', { id: this.id });
            if (this.element) {
                this.element.component = this;
            }
            return this.element;
        }
        get defaultViewOnlyValue() {
            return '-';
        }
        getWidgetValueAsString(value) {
            const noInputWidget = !this.refs.input || !this.refs.input[0] || !this.refs.input[0].widget;
            if (!value || noInputWidget) {
                return value;
            }
            if (Array.isArray(value)) {
                const values = [];
                value.forEach((val, index) => {
                    const widget = this.refs.input[index] && this.refs.input[index].widge;
                    if (widget) {
                        values.push(widget.getValueAsString(val));
                    }
                });
                return values;
            }
            const widget = this.refs.input[0].widget;
            return widget.getValueAsString(value);
        }
        getValueAsString(value) {
            if (!value) {
                return '';
            }
            value = this.getWidgetValueAsString(value);
            if (Array.isArray(value)) {
                return value.join(', ');
            }
            if (langx.isPlainObject(value)) {
                return JSON.stringify(value);
            }
            if (value === null || value === undefined) {
                return '';
            }
            return value.toString();
        }
        getView(value) {
            if (this.component.protected) {
                return '--- PROTECTED ---';
            }
            return this.getValueAsString(value);
        }
        updateItems(...args) {
            this.restoreValue();
            this.onChange(...args);
        }
        itemValue(data, forceUseValue = false) {
            if (langx.isObject(data)) {
                if (this.valueProperty) {
                    return langx.get(data, this.valueProperty);
                }
                if (forceUseValue) {
                    return data.value;
                }
            }
            return data;
        }
        itemValueForHTMLMode(value) {
            if (Array.isArray(value)) {
                const values = value.map(item => Array.isArray(item) ? this.itemValueForHTMLMode(item) : this.itemValue(item));
                return values.join(', ');
            }
            return this.itemValue(value);
        }
        createModal(element, attr) {
            const dialog = this.ce('div', attr || {});
            this.setContent(dialog, this.renderTemplate('dialog'));
            dialog.refs = {};
            this.loadRefs.call(dialog, dialog, {
                dialogOverlay: 'single',
                dialogContents: 'single',
                dialogClose: 'single'
            });
            dialog.refs.dialogContents.appendChild(element);
            document.body.appendChild(dialog);
            document.body.classList.add('modal-open');
            dialog.close = () => {
                document.body.classList.remove('modal-open');
                dialog.dispatchEvent(new CustomEvent('close'));
            };
            this.addEventListener(dialog, 'close', () => this.removeChildFrom(dialog, document.body));
            const close = event => {
                event.preventDefault();
                dialog.close();
            };
            this.addEventListener(dialog.refs.dialogOverlay, 'click', close);
            this.addEventListener(dialog.refs.dialogClose, 'click', close);
            return dialog;
        }
        get className() {
            let className = this.hasInput ? 'form-group has-feedback ' : '';
            className += `formio-component formio-component-${ this.component.type } `;
            if (this.key) {
                className += `formio-component-${ this.key } `;
            }
            if (this.component.multiple) {
                className += 'formio-component-multiple ';
            }
            if (this.component.customClass) {
                className += this.component.customClass;
            }
            if (this.hasInput && this.component.validate && utils.boolValue(this.component.validate.required)) {
                className += ' required';
            }
            if (this.labelIsHidden()) {
                className += ' formio-component-label-hidden';
            }
            if (!this.visible) {
                className += ' formio-hidden';
            }
            return className;
        }
        get customStyle() {
            let customCSS = '';
            langx.forEach(this.component.style, (value, key) => { //_.each
                if (value !== '') {
                    customCSS += `${ key }:${ value };`;
                }
            });
            return customCSS;
        }
        get isMobile() {
            return isMobile();
        }
        getElement() {
            return this.element;
        }
        evalContext(additional) {
            return super.evalContext(Object.assign({
                component: this.component,
                row: this.data,
                rowIndex: this.rowIndex,
                data: this.rootValue,
                iconClass: this.iconClass.bind(this),
                submission: this.root ? this.root._submission : {},
                form: this.root ? this.root._form : {}
            }, additional));
        }
        setPristine(pristine) {
            this.pristine = pristine;
        }
        removeValue(index) {
            this.splice(index);
            this.redraw();
            this.restoreValue();
            this.triggerRootChange();
        }
        iconClass(name, spinning) {
            const iconset = this.options.iconset || Templates.current.defaultIconset || 'fa';
            return Templates.current.hasOwnProperty('iconClass') ? Templates.current.iconClass(iconset, name, spinning) : this.options.iconset === 'fa' ? Templates.defaultTemplates.iconClass(iconset, name, spinning) : name;
        }
        get name() {
            return this.t(this.component.label || this.component.placeholder || this.key);
        }
        get errorLabel() {
            return this.t(this.component.errorLabel || this.component.label || this.component.placeholder || this.key);
        }
        errorMessage(type) {
            return this.component.errors && this.component.errors[type] ? this.component.errors[type] : type;
        }
        setContent(element, content) {
            if (element instanceof HTMLElement) {
                element.innerHTML = this.sanitize(content);
                return true;
            }
            return false;
        }
        redraw() {
            if (!this.element || !this.element.parentNode) {
                return NativePromise.resolve();
            }
            this.clear();
            const parent = this.element.parentNode;
            const index = Array.prototype.indexOf.call(parent.children, this.element);
            this.element.outerHTML = this.sanitize(this.render());
            this.element = parent.children[index];
            return this.attach(this.element);
        }
        rebuild() {
            this.destroy();
            this.init();
            return this.redraw();
        }
        removeEventListeners() {
            super.removeEventListeners();
            this.tooltips.forEach(tooltip => tooltip.dispose());
            this.tooltips = [];
            this.refs.input = [];
        }
        hasClass(element, className) {
            if (!element) {
                return;
            }
            return super.hasClass(element, this.transform('class', className));
        }
        addClass(element, className) {
            if (!element) {
                return;
            }
            return super.addClass(element, this.transform('class', className));
        }
        removeClass(element, className) {
            if (!element) {
                return;
            }
            return super.removeClass(element, this.transform('class', className));
        }
        hasCondition() {
            if (this._hasCondition !== null) {
                return this._hasCondition;
            }
            this._hasCondition = FormioUtils.hasCondition(this.component);
            return this._hasCondition;
        }
        conditionallyVisible(data, row) {
            data = data || this.rootValue;
            row = row || this.data;
            if (this.builderMode || !this.hasCondition()) {
                return !this.component.hidden;
            }
            data = data || (this.root ? this.root.data : {});
            return this.checkCondition(row, data);
        }
        checkCondition(row, data) {
            return FormioUtils.checkCondition(this.component, row || this.data, data || this.rootValue, this.root ? this.root._form : {}, this);
        }
        checkComponentConditions(data, flags, row) {
            data = data || this.rootValue;
            flags = flags || {};
            row = row || this.data;
            if (!this.builderMode && this.fieldLogic(data, row)) {
                this.redraw();
            }
            const visible = this.conditionallyVisible(data, row);
            if (this.visible !== visible) {
                this.visible = visible;
            }
            return visible;
        }
        checkConditions(data, flags, row) {
            data = data || this.rootValue;
            flags = flags || {};
            row = row || this.data;
            return this.checkComponentConditions(data, flags, row);
        }
        get logic() {
            return this.component.logic || [];
        }
        fieldLogic(data, row) {
            data = data || this.rootValue;
            row = row || this.data;
            const logics = this.logic;
            if (logics.length === 0) {
                return;
            }
            const newComponent = utils.fastCloneDeep(this.originalComponent);
            let changed = logics.reduce((changed, logic) => {
                const result = FormioUtils.checkTrigger(newComponent, logic.trigger, row, data, this.root ? this.root._form : {}, this);
                return (result ? this.applyActions(newComponent, logic.actions, result, row, data) : false) || changed;
            }, false);
            if (!langx.isEqual(this.component, newComponent)) {
                this.component = newComponent;
                this.disabled = this.shouldDisabled;
                changed = true;
            }
            return changed;
        }
        isIE() {
            const userAgent = window.navigator.userAgent;
            const msie = userAgent.indexOf('MSIE ');
            if (msie > 0) {
                return parseInt(userAgent.substring(msie + 5, userAgent.indexOf('.', msie)), 10);
            }
            const trident = userAgent.indexOf('Trident/');
            if (trident > 0) {
                const rv = userAgent.indexOf('rv:');
                return parseInt(userAgent.substring(rv + 3, userAgent.indexOf('.', rv)), 10);
            }
            const edge = userAgent.indexOf('Edge/');
            if (edge > 0) {
                return parseInt(userAgent.substring(edge + 5, userAgent.indexOf('.', edge)), 10);
            }
            return false;
        }
        applyActions(newComponent, actions, result, row, data) {
            data = data || this.rootValue;
            row = row || this.data;
            return actions.reduce((changed, action) => {
                switch (action.type) {
                case 'property': {
                        FormioUtils.setActionProperty(newComponent, action, result, row, data, this);
                        const property = action.property.value;
                        if (!langx.isEqual(langx.get(this.component, property), langx.get(newComponent, property))) {
                            changed = true;
                        }
                        break;
                    }
                case 'value': {
                        const oldValue = this.getValue();
                        const newValue = this.evaluate(action.value, {
                            value: langx.clone(oldValue),
                            data,
                            row,
                            component: newComponent,
                            result
                        }, 'value');
                        if (!langx.isEqual(oldValue, newValue)) {
                            this.setValue(newValue);
                            if (this.viewOnly) {
                                this.dataValue = newValue;
                            }
                            changed = true;
                        }
                        break;
                    }
                case 'mergeComponentSchema': {
                        const schema = this.evaluate(action.schemaDefinition, {
                            value: langx.clone(this.getValue()),
                            data,
                            row,
                            component: newComponent,
                            result
                        }, 'schema');
                        langx.mixin(newComponent, schema); //_.assign
                        if (!langx.isEqual(this.component, newComponent)) {
                            changed = true;
                        }
                        break;
                    }
                }
                return changed;
            }, false);
        }
        addInputError(message, dirty, elements) {
            this.addMessages(message);
            this.setErrorClasses(elements, dirty, !!message);
        }
        removeInputError(elements) {
            this.setErrorClasses(elements, true, false);
        }
        addMessages(messages) {
            if (!messages) {
                return;
            }
            if (typeof messages === 'string') {
                messages = {
                    messages,
                    level: 'error'
                };
            }
            if (!Array.isArray(messages)) {
                messages = [messages];
            }
            if (this.refs.messageContainer) {
                this.setContent(this.refs.messageContainer, messages.map(message => this.renderTemplate('message', message)).join(''));
            }
        }
        setErrorClasses(elements, dirty, hasErrors, hasMessages) {
            this.clearErrorClasses();
            elements.forEach(element => this.removeClass(this.performInputMapping(element), 'is-invalid'));
            if (hasErrors) {
                elements.forEach(input => this.addClass(this.performInputMapping(input), 'is-invalid'));
                if (dirty && this.options.highlightErrors) {
                    this.addClass(this.element, this.options.componentErrorClass);
                } else {
                    this.addClass(this.element, 'has-error');
                }
            }
            if (hasMessages) {
                this.addClass(this.element, 'has-message');
            }
        }
        clearOnHide() {
            if (!this.rootPristine && this.component.clearOnHide !== false && !this.options.readOnly && !this.options.showHiddenFields) {
                if (!this.visible) {
                    this.deleteValue();
                } else if (!this.hasValue()) {
                    this.setValue(this.defaultValue, { noUpdateEvent: true });
                }
            }
        }
        triggerRootChange(...args) {
            if (this.options.onChange) {
                this.options.onChange(...args);
            } else if (this.root) {
                this.root.triggerChange(...args);
            }
        }
        onChange(flags, fromRoot) {
            flags = flags || {};
            if (flags.modified) {
                this.pristine = false;
                this.addClass(this.getElement(), 'formio-modified');
            }
            if (this.component.validateOn === 'blur' && !this.errors.length) {
                flags.noValidate = true;
            }
            if (this.component.onChange) {
                this.evaluate(this.component.onChange, { flags });
            }
            const changed = {
                instance: this,
                component: this.component,
                value: this.dataValue,
                flags: flags
            };
            this.emit('componentChange', changed);
            let modified = false;
            if (flags.modified) {
                modified = true;
                delete flags.modified;
            }
            if (!fromRoot) {
                this.triggerRootChange(flags, changed, modified);
            }
            return changed;
        }
        get wysiwygDefault() {
            return {
                quill: {
                    theme: 'snow',
                    placeholder: this.t(this.component.placeholder),
                    modules: {
                        toolbar: [
                            [{
                                    'size': [
                                        'small',
                                        false,
                                        'large',
                                        'huge'
                                    ]
                                }],
                            [{
                                    'header': [
                                        1,
                                        2,
                                        3,
                                        4,
                                        5,
                                        6,
                                        false
                                    ]
                                }],
                            [{ 'font': [] }],
                            [
                                'bold',
                                'italic',
                                'underline',
                                'strike',
                                { 'script': 'sub' },
                                { 'script': 'super' },
                                'clean'
                            ],
                            [
                                { 'color': [] },
                                { 'background': [] }
                            ],
                            [
                                { 'list': 'ordered' },
                                { 'list': 'bullet' },
                                { 'indent': '-1' },
                                { 'indent': '+1' },
                                { 'align': [] }
                            ],
                            [
                                'blockquote',
                                'code-block'
                            ],
                            [
                                'link',
                                'image',
                                'video',
                                'formula',
                                'source'
                            ]
                        ]
                    }
                },
                ace: {
                    theme: 'ace/theme/xcode',
                    maxLines: 12,
                    minLines: 12,
                    tabSize: 2,
                    mode: 'javascript',
                    placeholder: this.t(this.component.placeholder)
                },
                ckeditor: {
                    image: {
                        toolbar: [
                            'imageTextAlternative',
                            '|',
                            'imageStyle:full',
                            'imageStyle:alignLeft',
                            'imageStyle:alignCenter',
                            'imageStyle:alignRight'
                        ],
                        styles: [
                            'full',
                            'alignLeft',
                            'alignCenter',
                            'alignRight'
                        ]
                    }
                },
                tiny: { theme: 'silver' },
                default: {}
            };
        }
        addCKE(element, settings, onChange) {
            settings = langx.isEmpty(settings) ? {} : settings;
            settings.base64Upload = true;
            settings.mediaEmbed = { previewsInData: true };
            settings = langx.mixin(this.wysiwygDefault.ckeditor, langx.get(this.options, 'editors.ckeditor.settings', {}), settings); //_.merge
            return Formio.requireLibrary('ckeditor', 'ClassicEditor', langx.get(this.options, 'editors.ckeditor.src', CKEDITOR), true).then(() => {
                if (!element.parentNode) {
                    return NativePromise.reject();
                }
                return ClassicEditor.create(element, settings).then(editor => {
                    editor.model.document.on('change', () => onChange(editor.data.get()));
                    return editor;
                });
            });
        }
        addQuill(element, settings, onChange) {
            settings = _.isEmpty(settings) ? this.wysiwygDefault.quill : settings;
            settings = _.merge(this.wysiwygDefault.quill, _.get(this.options, 'editors.quill.settings', {}), settings);
            Formio.requireLibrary(`quill-css-${ settings.theme }`, 'Quill', [{
                    type: 'styles',
                    src: `${ QUILL_URL }/quill.${ settings.theme }.css`
                }], true);
            return Formio.requireLibrary('quill', 'Quill', _.get(this.options, 'editors.quill.src', `${ QUILL_URL }/quill.min.js`), true).then(() => {
                if (!element.parentNode) {
                    return NativePromise.reject();
                }
                this.quill = new Quill(element, settings);
                const txtArea = document.createElement('textarea');
                txtArea.setAttribute('class', 'quill-source-code');
                this.quill.addContainer('ql-custom').appendChild(txtArea);
                const qlSource = element.parentNode.querySelector('.ql-source');
                if (qlSource) {
                    this.addEventListener(qlSource, 'click', event => {
                        event.preventDefault();
                        if (txtArea.style.display === 'inherit') {
                            this.quill.setContents(this.quill.clipboard.convert(txtArea.value));
                        }
                        txtArea.style.display = txtArea.style.display === 'none' ? 'inherit' : 'none';
                    });
                }
                this.addEventListener(element, 'click', () => this.quill.focus());
                const elm = document.querySelectorAll('.ql-formats > button');
                for (let i = 0; i < elm.length; i++) {
                    elm[i].setAttribute('tabindex', '-1');
                }
                this.quill.on('text-change', () => {
                    txtArea.value = this.quill.root.innerHTML;
                    onChange(txtArea);
                });
                return this.quill;
            });
        }
        addAce(element, settings, onChange) {
            settings = langx.mixin(this.wysiwygDefault.ace, langx.get(this.options, 'editors.ace.settings', {}), settings || {}); //_.merge
            //return Formio.requireLibrary('ace', 'ace', langx.get(this.options, 'editors.ace.src', ACE_URL), true).then(editor => { // modified by lwf
            var d = new langx.Deferred();
            require(["skylark-ace"],function(ace){    
                let editor = ace.edit(element);
                editor.removeAllListeners('change');
                editor.setOptions(settings);
                editor.getSession().setMode(`ace/mode/${ settings.mode }`);
                editor.on('change', () => onChange(editor.getValue()));
                //return editor;
                d.resolve(editor)
            },function(e){
                d.reject(e);
            });

            return d.promise;
        }
        addTiny(element, settings, onChange) {
            return Formio.requireLibrary('tinymce', 'tinymce', TINYMCE_URL.replace('no-api-key', settings.tinyApiKey), true).then(editor => {
                return editor.init({
                    ...settings,
                    target: element,
                    init_instance_callback: editor => {
                        editor.on('Change', () => onChange(editor.getContent()));
                    }
                });
            });
        }
        get tree() {
            return this.component.tree || false;
        }
        get emptyValue() {
            return null;
        }
        hasValue(data) {
            return _.has(data || this.data, this.key);
        }
        get rootValue() {
            return this.root ? this.root.data : this.data;
        }
        get rootPristine() {
            return langx.get(this, 'root.pristine', false);
        }
        get dataValue() {
            if (!this.key || !this.visible && this.component.clearOnHide && !this.rootPristine) {
                return this.emptyValue;
            }
            if (!this.hasValue()) {
                const empty = this.component.multiple ? [] : this.emptyValue;
                if (!this.rootPristine) {
                    this.dataValue = empty;
                }
                return empty;
            }
            return langx.get(this._data, this.key);
        }
        set dataValue(value) {
            if (!this.allowData || !this.key || !this.visible && this.component.clearOnHide && !this.rootPristine) {
                return value;
            }
            if (value !== null && value !== undefined) {
                value = this.hook('setDataValue', value, this.key, this._data);
            }
            if (value === null || value === undefined) {
                this.unset();
                return value;
            }
            _.set(this._data, this.key, value);
            return value;
        }
        splice(index) {
            if (this.hasValue()) {
                const dataValue = this.dataValue || [];
                if (langx.isArray(dataValue) && dataValue.hasOwnProperty(index)) {
                    dataValue.splice(index, 1);
                    this.dataValue = dataValue;
                    this.triggerChange();
                }
            }
        }
        unset() {
            _.unset(this._data, this.key);
        }
        deleteValue() {
            this.setValue(null, {
                noUpdateEvent: true,
                noDefault: true
            });
            this.unset();
        }
        get defaultValue() {
            let defaultValue = this.emptyValue;
            if (this.component.defaultValue) {
                defaultValue = this.component.defaultValue;
            }
            if (this.component.customDefaultValue && !this.options.preview) {
                defaultValue = this.evaluate(this.component.customDefaultValue, { value: '' }, 'value');
            }
            if (this.defaultMask) {
                if (typeof defaultValue === 'string') {
                    defaultValue = conformToMask(defaultValue, this.defaultMask).conformedValue;
                    if (!FormioUtils.matchInputMask(defaultValue, this.defaultMask)) {
                        defaultValue = '';
                    }
                } else {
                    defaultValue = '';
                }
            }
            return langx.clone(defaultValue); //_.cloneDeep
        }
        getValue() {
            if (!this.hasInput || this.viewOnly || !this.refs.input || !this.refs.input.length) {
                return this.dataValue;
            }
            const values = [];
            for (const i in this.refs.input) {
                if (this.refs.input.hasOwnProperty(i)) {
                    if (!this.component.multiple) {
                        return this.getValueAt(i);
                    }
                    values.push(this.getValueAt(i));
                }
            }
            if (values.length === 0 && !this.component.multiple) {
                return '';
            }
            return values;
        }
        getValueAt(index) {
            const input = this.performInputMapping(this.refs.input[index]);
            return input ? input.value : undefined;
        }
        setValue(value, flags = {}) {
            const changed = this.updateValue(value, flags);
            if (this.componentModal && flags && flags.fromSubmission) {
                this.componentModal.setValue(value);
            }
            value = this.dataValue;
            if (!this.hasInput) {
                return changed;
            }
            const isArray = Array.isArray(value);
            if (isArray && Array.isArray(this.defaultValue) && this.refs.hasOwnProperty('input') && this.refs.input && this.refs.input.length !== value.length) {
                this.redraw();
            }
            for (const i in this.refs.input) {
                if (this.refs.input.hasOwnProperty(i)) {
                    this.setValueAt(i, isArray ? value[i] : value, flags);
                }
            }
            return changed;
        }
        setValueAt(index, value, flags = {}) {
            if (!flags.noDefault && (value === null || value === undefined) && !this.component.multiple) {
                value = this.defaultValue;
            }
            const input = this.performInputMapping(this.refs.input[index]);
            if (input.mask) {
                input.mask.textMaskInputElement.update(value);
            } else if (input.widget && input.widget.setValue) {
                input.widget.setValue(value);
            } else {
                input.value = value;
            }
        }
        get hasSetValue() {
            return this.hasValue() && !this.isEmpty(this.dataValue);
        }
        restoreValue() {
            if (this.hasSetValue) {
                this.setValue(this.dataValue, { noUpdateEvent: true });
            } else {
                if (this.defaultValue) {
                    const defaultValue = this.component.multiple && !this.dataValue.length ? [] : this.defaultValue;
                    this.setValue(defaultValue, { noUpdateEvent: true });
                }
            }
        }
        normalizeValue(value) {
            if (this.component.multiple && !Array.isArray(value)) {
                value = value ? [value] : [];
            }
            return value;
        }
        updateComponentValue(value, flags = {}) {
            let newValue = !flags.resetValue && (value === undefined || value === null) ? this.getValue() : value;
            newValue = this.normalizeValue(newValue, flags);
            const changed = newValue !== undefined ? this.hasChanged(newValue, this.dataValue) : false;
            if (changed) {
                this.dataValue = newValue;
                this.updateOnChange(flags, changed);
            }
            return changed;
        }
        updateValue(...args) {
            return this.updateComponentValue(...args);
        }
        getIcon(name, content, styles, ref = 'icon') {
            return this.renderTemplate('icon', {
                className: this.iconClass(name),
                ref,
                styles,
                content
            });
        }
        resetValue() {
            this.setValue(this.emptyValue, {
                noUpdateEvent: true,
                noValidate: true,
                resetValue: true
            });
            this.unset();
        }
        hasChanged(newValue, oldValue) {
            if ((newValue === undefined || newValue === null) && (oldValue === undefined || oldValue === null || this.isEmpty(oldValue))) {
                return false;
            }
            if (newValue !== undefined && newValue !== null && !this.hasValue()) {
                return true;
            }
            return !langx.isEqual(newValue, oldValue);
        }
        updateOnChange(flags = {}, changed = false) {
            if (!flags.noUpdateEvent && changed) {
                this.triggerChange(flags);
                return true;
            }
            return false;
        }
        convertNumberOrBoolToString(value) {
            if (typeof value === 'number' || typeof value === 'boolean') {
                return value.toString();
            }
            return value;
        }
        calculateComponentValue(data, flags, row) {
            if (!this.component.calculateValue || (!this.visible || this.component.hidden) && this.component.clearOnHide && !this.rootPristine) {
                return false;
            }
            const allowOverride = this.component.allowCalculateOverride;
            let firstPass = false;
            const dataValue = this.dataValue;
            if (this.calculatedValue === undefined) {
                firstPass = true;
                this.calculatedValue = null;
            }
            if (allowOverride && this.calculatedValue && !langx.isEqual(dataValue, this.convertNumberOrBoolToString(this.calculatedValue))) {
                return false;
            }
            const calculatedValue = this.evaluate(this.component.calculateValue, {
                value: dataValue,
                data,
                row: row || this.data
            }, 'value');
            if (allowOverride && firstPass && !this.isEmpty(dataValue) && !langx.isEqual(dataValue, this.convertNumberOrBoolToString(calculatedValue))) {
                this.calculatedValue = calculatedValue;
                return true;
            }
            const changed = this.setValue(calculatedValue, flags);
            this.calculatedValue = this.dataValue;
            return changed;
        }
        calculateValue(data, flags, row) {
            data = data || this.rootValue;
            flags = flags || {};
            row = row || this.data;
            return this.calculateComponentValue(data, flags, row);
        }
        get label() {
            return this.component.label;
        }
        set label(value) {
            this.component.label = value;
            if (this.labelElement) {
                this.labelElement.innerText = value;
            }
        }
        getRoot() {
            return this.root;
        }
        invalidMessage(data, dirty, ignoreCondition, row) {
            if (!ignoreCondition && !this.checkCondition(row, data)) {
                return '';
            }
            if (this.invalid) {
                return this.invalid;
            }
            if (!this.hasInput || !dirty && this.pristine) {
                return '';
            }
            return langx.map(Validator.checkComponent(this, data), 'message').join('\n\n');
        }
        isValid(data, dirty) {
            return !this.invalidMessage(data, dirty);
        }
        setComponentValidity(messages, dirty) {
            const hasErrors = !!messages.filter(message => message.level === 'error').length;
            if (messages.length && (dirty || !this.pristine)) {
                this.setCustomValidity(messages, dirty);
            } else {
                this.setCustomValidity('');
            }
            return !hasErrors;
        }
        checkComponentValidity(data, dirty, row, async = false) {
            data = data || this.rootValue;
            row = row || this.data;
            if (this.shouldSkipValidation(data, dirty, row)) {
                this.setCustomValidity('');
                return async ? NativePromise.resolve(true) : true;
            }
            const check = Validator.checkComponent(this, data, row, true, async);
            return async ? check.then(messages => this.setComponentValidity(messages, dirty)) : this.setComponentValidity(check, dirty);
        }
        checkValidity(data, dirty, row) {
            data = data || this.rootValue;
            row = row || this.data;
            return this.checkComponentValidity(data, dirty, row);
        }
        checkAsyncValidity(data, dirty, row) {
            return NativePromise.resolve(this.checkComponentValidity(data, dirty, row, true));
        }
        checkData(data, flags, row) {
            data = data || this.rootValue;
            flags = flags || {};
            row = row || this.data;
            this.checkRefreshOn(flags.changed);
            if (flags.noCheck) {
                return true;
            }
            this.calculateComponentValue(data, flags, row);
            this.checkComponentConditions(data, flags, row);
            if (flags.noValidate) {
                return true;
            }
            let isDirty = !this.builderMode && !this.options.preview && !this.isEmpty(this.defaultValue) && this.isEqual(this.defaultValue, this.dataValue);
            if (this.options.alwaysDirty || flags.dirty) {
                isDirty = true;
            }
            if (flags.fromSubmission && this.hasValue(data)) {
                isDirty = true;
            }
            return this.checkComponentValidity(data, isDirty, row);
        }
        get validationValue() {
            return this.dataValue;
        }
        isEmpty(value = this.dataValue) {
            const isEmptyArray = langx.isArray(value) && value.length === 1 ? langx.isEqual(value[0], this.emptyValue) : false;
            return value == null || value.length === 0 || langx.isEqual(value, this.emptyValue) || isEmptyArray;
        }
        isEqual(valueA, valueB = this.dataValue) {
            return this.isEmpty(valueA) && this.isEmpty(valueB) || langx.isEqual(valueA, valueB);
        }
        validateMultiple() {
            return true;
        }
        get errors() {
            return this.error ? [this.error] : [];
        }
        clearErrorClasses() {
            this.removeClass(this.element, this.options.componentErrorClass);
            this.removeClass(this.element, 'alert alert-danger');
            this.removeClass(this.element, 'has-error');
            this.removeClass(this.element, 'has-message');
        }
        setCustomValidity(messages, dirty, external) {
            if (typeof messages === 'string' && messages) {
                messages = {
                    level: 'error',
                    message: messages
                };
            }
            if (!Array.isArray(messages)) {
                if (messages) {
                    messages = [messages];
                } else {
                    messages = [];
                }
            }
            const hasErrors = !!messages.filter(message => message.level === 'error').length;
            if (messages.length) {
                if (this.refs.messageContainer) {
                    this.empty(this.refs.messageContainer);
                }
                this.error = {
                    component: this.component,
                    message: messages[0].message,
                    messages,
                    external: !!external
                };
                this.emit('componentError', this.error);
                this.addMessages(messages, dirty, this.refs.input);
                if (this.refs.input) {
                    this.setErrorClasses(this.refs.input, dirty, hasErrors, !!messages.length);
                }
            } else if (this.error && this.error.external === !!external) {
                if (this.refs.messageContainer) {
                    this.empty(this.refs.messageContainer);
                }
                this.error = null;
                if (this.refs.input) {
                    this.setErrorClasses(this.refs.input, dirty, hasErrors, !!messages.length);
                }
                this.clearErrorClasses();
            }
        }
        isValueHidden() {
            if (!this.root || !this.root.hasOwnProperty('editing')) {
                return false;
            }
            if (!this.root || !this.root.editing) {
                return false;
            }
            return this.component.protected || !this.component.persistent || this.component.persistent === 'client-only';
        }
        shouldSkipValidation(data, dirty, row) {
            const rules = [
                () => this.shouldDisabled,
                () => this.isValueHidden(),
                () => !this.visible,
                () => !this.checkCondition(row, data)
            ];
            return rules.some(pred => pred());
        }
        whenReady() {
            console.warn('The whenReady() method has been deprecated. Please use the dataReady property instead.');
            return this.dataReady;
        }
        get dataReady() {
            return NativePromise.resolve();
        }
        asString(value) {
            value = value || this.getValue();
            return (Array.isArray(value) ? value : [value]).map(_.toString).join(', ');
        }
        get disabled() {
            return this._disabled || this.parentDisabled;
        }
        set disabled(disabled) {
            this._disabled = disabled;
        }
        setDisabled(element, disabled) {
            if (!element) {
                return;
            }
            element.disabled = disabled;
            if (disabled) {
                element.setAttribute('disabled', 'disabled');
            } else {
                element.removeAttribute('disabled');
            }
        }
        setLoading(element, loading) {
            if (!element || element.loading === loading) {
                return;
            }
            element.loading = loading;
            if (!element.loader && loading) {
                element.loader = this.ce('i', { class: `${ this.iconClass('refresh', true) } button-icon-right` });
            }
            if (element.loader) {
                if (loading) {
                    this.appendTo(element.loader, element);
                } else {
                    this.removeChildFrom(element.loader, element);
                }
            }
        }
        selectOptions(select, tag, options, defaultValue) {
            langx.forEach(options, option => {  //_.each
                const attrs = { value: option.value };
                if (defaultValue !== undefined && option.value === defaultValue) {
                    attrs.selected = 'selected';
                }
                const optionElement = this.ce('option', attrs);
                optionElement.appendChild(this.text(option.label));
                select.appendChild(optionElement);
            });
        }
        setSelectValue(select, value) {
            const options = select.querySelectorAll('option');
            langx.forEach(options, option => { //_.each
                if (option.value === value) {
                    option.setAttribute('selected', 'selected');
                } else {
                    option.removeAttribute('selected');
                }
            });
            if (select.onchange) {
                select.onchange();
            }
            if (select.onselect) {
                select.onselect();
            }
        }
        clear() {
            this.detach();
            this.empty(this.getElement());
        }
        append(element) {
            this.appendTo(element, this.element);
        }
        prepend(element) {
            this.prependTo(element, this.element);
        }
        removeChild(element) {
            this.removeChildFrom(element, this.element);
        }
        detachLogic() {
            this.logic.forEach(logic => {
                if (logic.trigger.type === 'event') {
                    const event = this.interpolate(logic.trigger.event);
                    this.off(event);
                }
            });
        }
        attachLogic() {
            if (this.builderMode) {
                return;
            }
            this.logic.forEach(logic => {
                if (logic.trigger.type === 'event') {
                    const event = this.interpolate(logic.trigger.event);
                    this.on(event, (...args) => {
                        const newComponent = utils.fastCloneDeep(this.originalComponent);
                        if (this.applyActions(newComponent, logic.actions, args)) {
                            if (!langx.isEqual(this.component, newComponent)) {
                                this.component = newComponent;
                            }
                            this.redraw();
                        }
                    }, true);
                }
            });
        }
        elementInfo() {
            const attributes = {
                name: this.options.name,
                type: this.component.inputType || 'text',
                class: 'form-control',
                lang: this.options.language
            };
            if (this.component.placeholder) {
                attributes.placeholder = this.t(this.component.placeholder);
            }
            if (this.component.tabindex) {
                attributes.tabindex = this.component.tabindex;
            }
            if (this.disabled) {
                attributes.disabled = 'disabled';
            }
            _.defaults(attributes, this.component.attributes);
            return {
                type: 'input',
                component: this.component,
                changeEvent: 'change',
                attr: attributes
            };
        }
        autofocus() {
            if (this.component.autofocus && !this.builderMode) {
                this.on('render', () => this.focus(), true);
            }
        }
        focus() {
            if (this.refs.input && this.refs.input[0]) {
                this.refs.input[0].focus();
            }
        }
    };
    Component.externalLibraries = {};
    Component.requireLibrary = function (name, property, src, polling) {
        if (!Component.externalLibraries.hasOwnProperty(name)) {
            Component.externalLibraries[name] = {};
            Component.externalLibraries[name].ready = new NativePromise((resolve, reject) => {
                Component.externalLibraries[name].resolve = resolve;
                Component.externalLibraries[name].reject = reject;
            });
            const callbackName = `${ name }Callback`;
            if (!polling && !window[callbackName]) {
                window[callbackName] = function () {
                    this.resolve();
                }.bind(Component.externalLibraries[name]);
            }
            const plugin = langx.get(window, property);
            if (plugin) {
                Component.externalLibraries[name].resolve(plugin);
            } else {
                src = Array.isArray(src) ? src : [src];
                src.forEach(lib => {
                    let attrs = {};
                    let elementType = '';
                    if (typeof lib === 'string') {
                        lib = {
                            type: 'script',
                            src: lib
                        };
                    }
                    switch (lib.type) {
                    case 'script':
                        elementType = 'script';
                        attrs = {
                            src: lib.src,
                            type: 'text/javascript',
                            defer: true,
                            async: true
                        };
                        break;
                    case 'styles':
                        elementType = 'link';
                        attrs = {
                            href: lib.src,
                            rel: 'stylesheet'
                        };
                        break;
                    }
                    const script = document.createElement(elementType);
                    for (const attr in attrs) {
                        script.setAttribute(attr, attrs[attr]);
                    }
                    document.getElementsByTagName('head')[0].appendChild(script);
                });
                if (polling) {
                    setTimeout(function checkLibrary() {
                        const plugin = langx.get(window, property);
                        if (plugin) {
                            Component.externalLibraries[name].resolve(plugin);
                        } else {
                            setTimeout(checkLibrary, 200);
                        }
                    }, 200);
                }
            }
        }
        return Component.externalLibraries[name].ready;
    };
    Component.libraryReady = function (name) {
        if (Component.externalLibraries.hasOwnProperty(name) && Component.externalLibraries[name].ready) {
            return Component.externalLibraries[name].ready;
        }
        return NativePromise.reject(`${ name } library was not required.`);
    };
});
define('skylark-formio/components/_classes/field/Field',['../component/Component'], function (Component) {
    'use strict';
    return class Field extends Component {
        render(element) {
            if (this.noField) {
                return super.render(element);
            } else if (this.isAdvancedLabel) {
                return super.render(this.renderTemplate('field', {
                    ...this.getLabelInfo(),
                    labelMarkup: this.renderTemplate('label'),
                    element: element
                }, 'align'));
            } else {
                return super.render(this.renderTemplate('field', {
                    labelMarkup: this.renderTemplate('label'),
                    element: element
                }));
            }
        }
    };
});
define('skylark-formio/components/Components',[
    './_classes/component/Component',
//    './_classes/nested/NestedComponent',
    'skylark-lodash'
], function (Component, 
    //NestedComponent, 
    _) {
    'use strict';
     class Components {
        static get components() {
            if (!Components._components) {
                Components._components = {};
            }
            return Components._components;
        }
        static setComponents(comps) {
            if (comps.base) {
                comps.base.tableView = function (value, options) {
                    const comp = Components.create(options.component, options.options || {}, options.data || {}, true);
                    return comp.getView(value);
                };
            }
            _.assign(Components.components, comps);
        }
        static addComponent(name, comp) {
            return Components.setComponent(name, comp);
        }
        static setComponent(name, comp) {
            Components.components[name] = comp;
        }
        static create(component, options, data) {
            let comp = null;
            if (component.type && Components.components.hasOwnProperty(component.type)) {
                comp = new Components.components[component.type](component, options, data);
            } else if (Array.isArray(component.components)) {
                comp = new Components.NestedComponent(component, options, data);
            } else {
                comp = new Component(component, options, data);
            }
            return comp;
        }
    };

    return Components;
});
define('skylark-formio/components/_classes/nested/NestedComponent',[
    'skylark-lodash',
    '../field/Field',
    '../../Components',
    '../../../vendors/getify/npo'
], function (_, Field, Components, NativePromise) {
    'use strict';
    class NestedComponent extends Field {
        static schema(...extend) {
            return Field.schema({ tree: false }, ...extend);
        }
        constructor(component, options, data) {
            super(component, options, data);
            this.type = 'components';
            this._collapsed = !!this.component.collapsed;
        }
        get defaultSchema() {
            return NestedComponent.schema();
        }
        get schema() {
            const schema = super.schema;
            const components = _.uniqBy(this.getComponents(), 'component.key');
            schema.components = _.map(components, 'schema');
            return schema;
        }
        get collapsed() {
            return this._collapsed;
        }
        set collapsed(value) {
            this._collapsed = value;
            this.redraw();
        }
        set visible(value) {
            super.visible = value;
            const isVisible = this.visible;
            const forceShow = this.options.show && this.options.show[this.component.key];
            const forceHide = this.options.hide && this.options.hide[this.component.key];
            this.components.forEach(component => {
                const conditionallyVisible = component.conditionallyVisible();
                if (forceShow || conditionallyVisible) {
                    component.visible = true;
                } else if (forceHide || !isVisible || !conditionallyVisible) {
                    component.visible = false;
                }
                if (!component.visible) {
                    component.error = '';
                }
                component.parentVisible = isVisible;
            });
        }
        get visible() {
            return super.visible;
        }
        set parentVisible(value) {
            super.parentVisible = value;
            this.components.forEach(component => {
                component.parentVisible = this.visible;
            });
        }
        get parentVisible() {
            return super.parentVisible;
        }
        get disabled() {
            return super.disabled;
        }
        set disabled(disabled) {
            super.disabled = disabled;
            this.components.forEach(component => component.parentDisabled = disabled);
        }
        set parentDisabled(value) {
            super.parentDisabled = value;
            this.components.forEach(component => {
                component.parentDisabled = this.disabled;
            });
        }
        get parentDisabled() {
            return super.parentDisabled;
        }
        get ready() {
            return NativePromise.all(this.getComponents().map(component => component.ready));
        }
        get currentForm() {
            return super.currentForm;
        }
        set currentForm(instance) {
            super.currentForm = instance;
            this.getComponents().forEach(component => {
                component.currentForm = instance;
            });
        }
        get rowIndex() {
            return this._rowIndex;
        }
        set rowIndex(value) {
            this._rowIndex = value;
            this.eachComponent(component => {
                component.rowIndex = value;
            });
        }
        componentContext() {
            return this._data;
        }
        get data() {
            return this._data;
        }
        set data(value) {
            this._data = value;
            this.eachComponent(component => {
                component.data = this.componentContext(component);
            });
        }
        getComponents() {
            return this.components || [];
        }
        everyComponent(fn) {
            const components = this.getComponents();
            _.each(components, (component, index) => {
                if (fn(component, components, index) === false) {
                    return false;
                }
                if (typeof component.everyComponent === 'function') {
                    if (component.everyComponent(fn) === false) {
                        return false;
                    }
                }
            });
        }
        hasComponent(component) {
            let result = false;
            this.everyComponent(comp => {
                if (comp === component) {
                    result = true;
                    return false;
                }
            });
            return result;
        }
        flattenComponents() {
            const result = {};
            this.everyComponent(component => {
                result[component.component.flattenAs || component.key] = component;
            });
            return result;
        }
        eachComponent(fn) {
            _.each(this.getComponents(), (component, index) => {
                if (fn(component, index) === false) {
                    return false;
                }
            });
        }
        getComponent(path, fn) {
            path = Array.isArray(path) ? path : [path];
            const [key, ...remainingPath] = path;
            let comp = null;
            if (!_.isString(key)) {
                return comp;
            }
            this.everyComponent((component, components) => {
                if (component.component.key === key) {
                    comp = component;
                    if (remainingPath.length > 0 && 'getComponent' in component) {
                        comp = component.getComponent(remainingPath, fn);
                    } else if (fn) {
                        fn(component, components);
                    }
                    return false;
                }
            });
            return comp;
        }
        getComponentById(id, fn) {
            let comp = null;
            this.everyComponent((component, components) => {
                if (component.id === id) {
                    comp = component;
                    if (fn) {
                        fn(component, components);
                    }
                    return false;
                }
            });
            return comp;
        }
        createComponent(component, options, data, before) {
            if (!component) {
                return;
            }
            options = options || this.options;
            data = data || this.data;
            options.parent = this;
            options.parentVisible = this.visible;
            options.root = this.root || this;
            options.skipInit = true;
            const comp = Components.create(component, options, data, true);
            if (component.key) {
                let thisPath = this;
                while (thisPath && !thisPath.allowData && thisPath.parent) {
                    thisPath = thisPath.parent;
                }
                comp.path = thisPath.path ? `${ thisPath.path }.` : '';
                comp.path += component.key;
            }
            comp.init();
            if (component.internal) {
                return comp;
            }
            if (before) {
                const index = _.findIndex(this.components, { id: before.id });
                if (index !== -1) {
                    this.components.splice(index, 0, comp);
                } else {
                    this.components.push(comp);
                }
            } else {
                this.components.push(comp);
            }
            return comp;
        }
        getContainer() {
            return this.element;
        }
        get componentComponents() {
            return this.component.components || [];
        }
        get nestedKey() {
            return `nested-${ this.key }`;
        }
        get templateName() {
            return 'container';
        }
        init() {
            this.components = this.components || [];
            this.addComponents();
            return super.init();
        }
        addComponents(data, options) {
            data = data || this.data;
            options = options || this.options;
            if (options.components) {
                this.components = options.components;
            } else {
                const components = this.hook('addComponents', this.componentComponents, this) || [];
                components.forEach(component => this.addComponent(component, data));
            }
        }
        addComponent(component, data, before, noAdd) {
            data = data || this.data;
            component = this.hook('addComponent', component, data, before, noAdd);
            const comp = this.createComponent(component, this.options, data, before ? before : null);
            if (noAdd) {
                return comp;
            }
            return comp;
        }
        render(children) {
            return super.render(children || this.renderTemplate(this.templateName, {
                children: this.renderComponents(),
                nestedKey: this.nestedKey,
                collapsed: this.collapsed
            }));
        }
        renderComponents(components) {
            components = components || this.getComponents();
            const children = components.map(component => component.render());
            return this.renderTemplate('components', {
                children,
                components
            });
        }
        attach(element) {
            const superPromise = super.attach(element);
            this.loadRefs(element, {
                header: 'single',
                collapsed: this.collapsed,
                [this.nestedKey]: 'single'
            });
            let childPromise = NativePromise.resolve();
            if (this.refs[this.nestedKey]) {
                childPromise = this.attachComponents(this.refs[this.nestedKey]);
            }
            if (this.component.collapsible && this.refs.header) {
                this.addEventListener(this.refs.header, 'click', () => {
                    this.collapsed = !this.collapsed;
                });
            }
            return NativePromise.all([
                superPromise,
                childPromise
            ]);
        }
        attachComponents(element, components, container) {
            components = components || this.components;
            container = container || this.component.components;
            element = this.hook('attachComponents', element, components, container, this);
            if (!element) {
                return new NativePromise(() => {
                });
            }
            let index = 0;
            const promises = [];
            Array.prototype.slice.call(element.children).forEach(child => {
                if (!child.getAttribute('data-noattach') && components[index]) {
                    promises.push(components[index].attach(child));
                    index++;
                }
            });
            return NativePromise.all(promises);
        }
        removeComponent(component, components) {
            components = components || this.components;
            component.destroy();
            _.remove(components, { id: component.id });
        }
        removeComponentByKey(key, fn) {
            const comp = this.getComponent(key, (component, components) => {
                this.removeComponent(component, components);
                if (fn) {
                    fn(component, components);
                }
            });
            if (!comp) {
                if (fn) {
                    fn(null);
                }
                return null;
            }
        }
        removeComponentById(id, fn) {
            const comp = this.getComponentById(id, (component, components) => {
                this.removeComponent(component, components);
                if (fn) {
                    fn(component, components);
                }
            });
            if (!comp) {
                if (fn) {
                    fn(null);
                }
                return null;
            }
        }
        updateValue(value, flags = {}) {
            return this.components.reduce((changed, comp) => {
                return comp.updateValue(null, flags) || changed;
            }, super.updateValue(value, flags));
        }
        shouldSkipValidation(data, dirty, row) {
            if (!this.component.input) {
                return true;
            } else {
                return super.shouldSkipValidation(data, dirty, row);
            }
        }
        checkData(data, flags, row, components) {
            if (this.builderMode) {
                return true;
            }
            data = data || this.rootValue;
            flags = flags || {};
            row = row || this.data;
            components = components || this.getComponents();
            return components.reduce((valid, comp) => {
                return comp.checkData(data, flags, row) && valid;
            }, super.checkData(data, flags, row));
        }
        checkConditions(data, flags, row) {
            this.getComponents().forEach(comp => comp.checkConditions(data, flags, row));
            return super.checkConditions(data, flags, row);
        }
        clearOnHide(show) {
            super.clearOnHide(show);
            if (this.component.clearOnHide) {
                if (this.allowData && !this.hasValue()) {
                    this.dataValue = this.defaultValue;
                }
                if (this.hasValue()) {
                    this.restoreComponentsContext();
                }
            }
            this.getComponents().forEach(component => component.clearOnHide(show));
        }
        restoreComponentsContext() {
            this.getComponents().forEach(component => component.data = this.dataValue);
        }
        beforePage(next) {
            return NativePromise.all(this.getComponents().map(comp => comp.beforePage(next)));
        }
        beforeSubmit() {
            return NativePromise.all(this.getComponents().map(comp => comp.beforeSubmit()));
        }
        calculateValue(data, flags, row) {
            if (!this.conditionallyVisible()) {
                return false;
            }
            return this.getComponents().reduce((changed, comp) => comp.calculateValue(data, flags, row) || changed, super.calculateValue(data, flags, row));
        }
        isLastPage() {
            return this.pages.length - 1 === this.page;
        }
        isValid(data, dirty) {
            return this.getComponents().reduce((valid, comp) => comp.isValid(data, dirty) && valid, super.isValid(data, dirty));
        }
        checkValidity(data, dirty, row) {
            if (!this.checkCondition(row, data)) {
                this.setCustomValidity('');
                return true;
            }
            return this.getComponents().reduce((check, comp) => comp.checkValidity(data, dirty, row) && check, super.checkValidity(data, dirty, row));
        }
        checkAsyncValidity(data, dirty, row) {
            const promises = [super.checkAsyncValidity(data, dirty, row)];
            this.eachComponent(component => promises.push(component.checkAsyncValidity(data, dirty, row)));
            return NativePromise.all(promises).then(results => results.reduce((valid, result) => valid && result, true));
        }
        setPristine(pristine) {
            super.setPristine(pristine);
            this.getComponents().forEach(comp => comp.setPristine(pristine));
        }
        detach() {
            this.components.forEach(component => {
                component.detach();
            });
            super.detach();
        }
        destroy() {
            this.destroyComponents();
            super.destroy();
        }
        destroyComponents() {
            const components = this.getComponents().slice();
            components.forEach(comp => this.removeComponent(comp, this.components));
            this.components = [];
        }
        get errors() {
            const thisErrors = this.error ? [this.error] : [];
            return this.getComponents().reduce((errors, comp) => errors.concat(comp.errors || []), thisErrors);
        }
        getValue() {
            return this.data;
        }
        resetValue() {
            this.getComponents().forEach(comp => comp.resetValue());
            this.unset();
            this.setPristine(true);
        }
        get dataReady() {
            return NativePromise.all(this.getComponents().map(component => component.dataReady));
        }
        setNestedValue(component, value, flags = {}) {
            component._data = this.componentContext(component);
            if (component.type === 'button') {
                return false;
            }
            if (component.type === 'components') {
                return component.setValue(value, flags);
            } else if (value && component.hasValue(value)) {
                return component.setValue(_.get(value, component.key), flags);
            } else if (!this.rootPristine || component.visible) {
                flags.noValidate = !flags.dirty;
                flags.resetValue = true;
                return component.setValue(component.defaultValue, flags);
            }
        }
        setValue(value, flags = {}) {
            if (!value) {
                return false;
            }
            return this.getComponents().reduce((changed, component) => {
                return this.setNestedValue(component, value, flags, changed) || changed;
            }, false);
        }
    };


    Components.NestedComponent = NestedComponent;

    return NestedComponent;
});
define('skylark-formio/components/_classes/nesteddata/NestedDataComponent',[
    '../component/Component',
    '../nested/NestedComponent',
    'skylark-lodash'
], function (Component, NestedComponent, _) {
    'use strict';
    'use strict';
    return class NestedDataComponent extends NestedComponent {
        hasChanged(newValue, oldValue) {
            if (newValue !== undefined && newValue !== null && !this.hasValue()) {
                return true;
            }
            return !_.isEqual(newValue, oldValue);
        }
        get allowData() {
            return true;
        }
        getValueAsString() {
            return '[Complex Data]';
        }
        getValue() {
            return this.dataValue;
        }
        updateValue(value, flags = {}) {
            return Component.prototype.updateValue.call(this, value, flags);
        }
    };
});
define('skylark-formio/components/container/Container',[
    'skylark-lodash',
    '../_classes/component/Component',
    '../_classes/nesteddata/NestedDataComponent'
], function (_, Component, NestedDataComponent) {
    'use strict';
    return class ContainerComponent extends NestedDataComponent {
        static schema(...extend) {
            return NestedDataComponent.schema({
                label: 'Container',
                type: 'container',
                key: 'container',
                clearOnHide: true,
                input: true,
                tree: true,
                hideLabel: true,
                components: []
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Container',
                icon: 'folder-open',
                group: 'data',
                documentation: 'http://help.form.io/userguide/#container',
                weight: 10,
                schema: ContainerComponent.schema()
            };
        }
        constructor(...args) {
            super(...args);
            this.type = 'container';
        }
        addComponents(data, options) {
            return super.addComponents(this.dataValue, options);
        }
        get defaultSchema() {
            return ContainerComponent.schema();
        }
        get emptyValue() {
            return {};
        }
        get templateName() {
            return 'container';
        }
        componentContext() {
            return this.dataValue;
        }
        setValue(value, flags = {}) {
            let changed = false;
            const hasValue = this.hasValue();
            if (hasValue && _.isEmpty(this.dataValue)) {
                flags.noValidate = true;
            }
            if (!value || !_.isObject(value) || !hasValue) {
                changed = true;
                this.dataValue = this.defaultValue;
            }
            changed = super.setValue(value, flags) || changed;
            this.updateOnChange(flags, changed);
            return changed;
        }
        checkData(data, flags, row, components) {
            data = data || this.rootValue;
            flags = flags || {};
            row = row || this.data;
            components = components || this.getComponents();
            return components.reduce((valid, comp) => {
                return comp.checkData(data, flags, this.dataValue) && valid;
            }, Component.prototype.checkData.call(this, data, flags, row));
        }
    };
});
define('skylark-formio/components/address/Address',[
    "skylark-langx",
    '../../vendors/kraaden/autocomplete',
    'skylark-lodash',
    '../../Formio',
    '../../providers/address/GoogleAddressProvider',
    '../_classes/field/Field',
    '../_classes/nested/NestedComponent',
    '../container/Container'
], function (langx,autocompleter, _, Formio, GoogleAddressProvider, Field, NestedComponent, ContainerComponent) {
    'use strict';
    const AddressComponentMode = {
        Autocomplete: 'autocomplete',
        Manual: 'manual'
    };
    const RemoveValueIconHiddenClass = 'address-autocomplete-remove-value-icon--hidden';
    const ChildConditional = "show = _.get(instance, 'parent.manualMode', false);";
    return class AddressComponent extends ContainerComponent {
        static schema(...extend) {
            return ContainerComponent.schema({
                type: 'address',
                label: 'Address',
                key: 'address',
                switchToManualModeLabel: "Can't find address? Switch to manual mode.",
                provider: '',
                providerOptions: {},
                manualModeViewString: '',
                hideLabel: false,
                disableClearIcon: false,
                enableManualMode: false,
                components: [
                    {
                        label: 'Address 1',
                        tableView: false,
                        key: 'address1',
                        type: 'textfield',
                        input: true,
                        customConditional: ChildConditional
                    },
                    {
                        label: 'Address 2',
                        tableView: false,
                        key: 'address2',
                        type: 'textfield',
                        input: true,
                        customConditional: ChildConditional
                    },
                    {
                        label: 'City',
                        tableView: false,
                        key: 'city',
                        type: 'textfield',
                        input: true,
                        customConditional: ChildConditional
                    },
                    {
                        label: 'State',
                        tableView: false,
                        key: 'state',
                        type: 'textfield',
                        input: true,
                        customConditional: ChildConditional
                    },
                    {
                        label: 'Country',
                        tableView: false,
                        key: 'country',
                        type: 'textfield',
                        input: true,
                        customConditional: ChildConditional
                    },
                    {
                        label: 'Zip Code',
                        tableView: false,
                        key: 'zip',
                        type: 'textfield',
                        input: true,
                        customConditional: ChildConditional
                    }
                ]
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Address',
                group: 'advanced',
                icon: 'home',
                documentation: 'http://help.form.io/userguide/#address',
                weight: 35,
                schema: AddressComponent.schema()
            };
        }
        mergeSchema(component = {}) {
            let {defaultSchema} = this;
            if (component.components) {
                defaultSchema = langx.omit(defaultSchema, 'components');
            }
            return langx.defaults(component, defaultSchema); //_.defaulsDeep
        }
        init() {
            this.components = this.components || [];
            if (this.builderMode || this.manualModeEnabled) {
                NestedComponent.prototype.addComponents.call(this, this.manualMode ? this.address : {});
            }
            Field.prototype.init.call(this);
            if (!this.builderMode) {
                if (this.component.provider) {
                    const {provider, providerOptions} = this.component;
                    this.provider = this.initializeProvider(provider, providerOptions);
                } else if (this.component.map) {
                    this.component.provider = GoogleAddressProvider.name;
                    this.component.providerOptions = this.component.providerOptions || {};
                    const {map, provider, providerOptions} = this.component;
                    const {key, region} = map;
                    if (key) {
                        langx.set(providerOptions, 'params.key', key);
                    }
                    if (region) {
                        langx.set(providerOptions, 'params.region', region);
                    }
                    this.provider = this.initializeProvider(provider, providerOptions);
                }
            }
        }
        initializeProvider(provider, options = {}) {
            const Provider = Formio.Providers.getProvider('address', provider);
            return new Provider(options);
        }
        get emptyValue() {
            return this.manualModeEnabled ? {
                mode: AddressComponentMode.Autocomplete,
                address: {}
            } : {};
        }
        get mode() {
            return this.manualModeEnabled ? this.dataValue ? this.dataValue.mode : this.dataValue : AddressComponentMode.Autocomplete;
        }
        set mode(value) {
            if (this.manualModeEnabled) {
                this.dataValue.mode = value;
            }
        }
        get autocompleteMode() {
            return this.mode === AddressComponentMode.Autocomplete;
        }
        get manualMode() {
            return this.mode === AddressComponentMode.Manual;
        }
        get manualModeEnabled() {
            return Boolean(this.component.enableManualMode);
        }
        restoreComponentsContext() {
            this.getComponents().forEach(component => {
                component.data = this.address;
                component.setValue(component.dataValue, { noUpdateEvent: true });
            });
        }
        get address() {
            return this.manualModeEnabled && this.dataValue ? this.dataValue.address : this.dataValue;
        }
        set address(value) {
            if (this.manualModeEnabled) {
                this.dataValue.address = value;
            } else {
                this.dataValue = value;
            }
        }
        get defaultSchema() {
            return AddressComponent.schema();
        }
        isValueInLegacyFormat(value) {
            return value && !value.mode;
        }
        normalizeValue(value) {
            return this.manualModeEnabled && this.isValueInLegacyFormat(value) ? {
                mode: AddressComponentMode.Autocomplete,
                address: value
            } : value;
        }
        setValue(value, flags = {}) {
            const changed = Field.prototype.setValue.call(this, value, flags);
            if (this.manualMode) {
                this.restoreComponentsContext();
            }
            if (changed) {
                this.redraw();
            }
            return changed;
        }
        static get modeSwitcherRef() {
            return 'modeSwitcher';
        }
        static get removeValueIconRef() {
            return 'removeValueIcon';
        }
        static get searchInputRef() {
            return 'searchInput';
        }
        get modeSwitcher() {
            return this.refs ? this.refs[AddressComponent.modeSwitcherRef] || null : null;
        }
        get removeValueIcon() {
            return this.refs ? this.refs[AddressComponent.removeValueIconRef] || null : null;
        }
        get searchInput() {
            return this.refs ? this.refs[AddressComponent.searchInputRef] || null : null;
        }
        get searchInputAttributes() {
            const attr = {
                name: this.options.name,
                type: 'text',
                class: 'form-control',
                lang: this.options.language,
                tabindex: this.component.tabindex || 0
            };
            if (this.component.placeholder) {
                attr.placeholder = this.t(this.component.placeholder);
            }
            if (this.disabled) {
                attr.disabled = 'disabled';
            }
            langx.defaults(attr, this.component.attributes);
            return attr;
        }
        get templateName() {
            return 'address';
        }
        render() {
            return super.render(this.renderTemplate(this.templateName, {
                children: this.builderMode || this.manualModeEnabled ? this.renderComponents() : '',
                nestedKey: this.nestedKey,
                inputAttributes: this.searchInputAttributes,
                ref: {
                    modeSwitcher: AddressComponent.modeSwitcherRef,
                    removeValueIcon: AddressComponent.removeValueIconRef,
                    searchInput: AddressComponent.searchInputRef
                },
                displayValue: this.getDisplayValue(),
                mode: {
                    autocomplete: this.autocompleteMode,
                    manual: this.manualMode
                }
            }));
        }
        attach(element) {
            const result = (this.builderMode || this.manualMode ? super.attach : Field.prototype.attach).call(this, element);
            if (!this.builderMode) {
                if (!this.provider && this.component.provider) {
                    const {provider, providerOptions} = this.component;
                    this.provider = this.initializeProvider(provider, providerOptions);
                }
            }
            this.loadRefs(element, {
                [AddressComponent.modeSwitcherRef]: 'single',
                [AddressComponent.removeValueIconRef]: 'single',
                [AddressComponent.searchInputRef]: 'single'
            });
            if (!this.builderMode && this.searchInput && this.provider) {
                autocompleter({
                    input: this.searchInput,
                    debounceWaitMs: 300,
                    fetch: (text, update) => {
                        const query = text;
                        this.provider.search(query).then(update);
                    },
                    render: address => {
                        const div = this.ce('div');
                        div.textContent = this.getDisplayValue(address);
                        return div;
                    },
                    onSelect: address => {
                        this.address = address;
                        this.triggerChange({ modified: true });
                        if (this.searchInput) {
                            this.searchInput.value = this.getDisplayValue();
                        }
                        this.updateRemoveIcon();
                    }
                });
                this.addEventListener(this.searchInput, 'blur', () => {
                    if (!this.searchInput) {
                        return;
                    }
                    if (this.searchInput.value) {
                        this.searchInput.value = this.getDisplayValue();
                    }
                });
                this.addEventListener(this.searchInput, 'keyup', () => {
                    if (!this.searchInput) {
                        return;
                    }
                    if (!this.searchInput.value) {
                        this.clearAddress();
                    }
                });
            }
            if (this.modeSwitcher) {
                this.addEventListener(this.modeSwitcher, 'change', () => {
                    if (!this.modeSwitcher) {
                        return;
                    }
                    this.dataValue = this.emptyValue;
                    this.mode = this.modeSwitcher.checked ? AddressComponentMode.Manual : AddressComponentMode.Autocomplete;
                    if (!this.builderMode) {
                        if (this.manualMode) {
                            this.restoreComponentsContext();
                        }
                        this.triggerChange({ modified: true });
                    }
                    this.redraw();
                });
            }
            if (!this.builderMode && this.removeValueIcon) {
                this.updateRemoveIcon();
                const removeValueHandler = () => {
                    this.clearAddress();
                    this.focus();
                };
                this.addEventListener(this.removeValueIcon, 'click', removeValueHandler);
                this.addEventListener(this.removeValueIcon, 'keydown', ({key}) => {
                    if (key === 'Enter') {
                        removeValueHandler();
                    }
                });
            }
            return result;
        }
        addChildComponent(component) {
            component.customConditional = ChildConditional;
        }
        redraw() {
            const modeSwitcherInFocus = this.modeSwitcher && document.activeElement === this.modeSwitcher;
            return super.redraw().then(result => {
                if (modeSwitcherInFocus && this.modeSwitcher) {
                    this.modeSwitcher.focus();
                }
                return result;
            });
        }
        clearAddress() {
            if (!this.isEmpty()) {
                this.triggerChange();
            }
            this.dataValue = this.emptyValue;
            if (this.searchInput) {
                this.searchInput.value = '';
            }
            this.updateRemoveIcon();
        }
        getDisplayValue(value = this.address) {
            return this.provider && !this.manualMode ? this.provider.getDisplayValue(value) : '';
        }
        validateMultiple() {
            return false;
        }
        updateRemoveIcon() {
            if (this.removeValueIcon) {
                if (this.isEmpty() || this.disabled) {
                    this.addClass(this.removeValueIcon, RemoveValueIconHiddenClass);
                } else {
                    this.removeClass(this.removeValueIcon, RemoveValueIconHiddenClass);
                }
            }
        }
        getValueAsString(value) {
            if (!value) {
                return '';
            }
            const normalizedValue = this.normalizeValue(value);
            const {address, mode} = this.manualModeEnabled ? normalizedValue : {
                address: normalizedValue,
                mode: AddressComponentMode.Autocomplete
            };
            const valueInManualMode = mode === AddressComponentMode.Manual;
            if (this.provider && !valueInManualMode) {
                return this.getDisplayValue(address);
            }
            if (valueInManualMode) {
                if (this.component.manualModeViewString) {
                    return this.interpolate(this.component.manualModeViewString, {
                        address,
                        data: this.data,
                        component: this.component
                    });
                }
                return this.getComponents().filter(component => component.hasValue(address)).map(component => [
                    component,
                    langx.get(address, component.key)
                ]).filter(([component, componentValue]) => !component.isEmpty(componentValue)).map(([component, componentValue]) => component.getValueAsString(componentValue)).join(', ');
            }
            return super.getValueAsString(address);
        }
        focus() {
            if (this.searchInput) {
                this.searchInput.focus();
            }
        }
    };
});
define('skylark-formio/components/_classes/multivalue/Multivalue',[
    '../field/Field',
    'skylark-lodash'
], function (Field, _) {
    'use strict';
    return class Multivalue extends Field {
        get dataValue() {
            const parent = super.dataValue;
            if (!parent && this.component.multiple) {
                return [];
            }
            return parent;
        }
        set dataValue(value) {
            super.dataValue = value;
        }
        get defaultValue() {
            let value = super.defaultValue;
            if (this.component.multiple) {
                if (_.isArray(value)) {
                    value = !value.length ? [super.emptyValue] : value;
                } else {
                    value = [value];
                }
            }
            return value;
        }
        get addAnother() {
            return this.t(this.component.addAnother || ' Add Another');
        }
        useWrapper() {
            return this.component.hasOwnProperty('multiple') && this.component.multiple;
        }
        render() {
            if (!this.useWrapper()) {
                return super.render(`<div ref="element">${ this.renderElement(this.dataValue) }</div>`);
            }
            let dataValue = this.dataValue;
            if (!Array.isArray(dataValue)) {
                dataValue = dataValue ? [dataValue] : [];
            }
            return super.render(this.renderTemplate('multiValueTable', {
                rows: dataValue.map(this.renderRow.bind(this)).join(''),
                disabled: this.disabled,
                addAnother: this.addAnother
            }));
        }
        renderElement() {
            return '';
        }
        renderRow(value, index) {
            return this.renderTemplate('multiValueRow', {
                index,
                disabled: this.disabled,
                element: `${ this.renderElement(value, index) }`
            });
        }
        attach(dom) {
            const superAttach = super.attach(dom);
            this.loadRefs(dom, {
                addButton: 'multiple',
                input: 'multiple',
                removeRow: 'multiple',
                mask: 'multiple',
                select: 'multiple'
            });
            this.refs.input.forEach(this.attachElement.bind(this));
            if (!this.component.multiple) {
                return;
            }
            this.refs.removeRow.forEach((removeButton, index) => {
                this.addEventListener(removeButton, 'click', event => {
                    event.preventDefault();
                    this.removeValue(index);
                });
            });
            this.refs.addButton.forEach(addButton => {
                this.addEventListener(addButton, 'click', event => {
                    event.preventDefault();
                    this.addValue();
                });
            });
            return superAttach;
        }
        detach() {
            if (this.refs.input && this.refs.input.length) {
                this.refs.input.forEach(input => {
                    if (input.mask) {
                        input.mask.destroy();
                    }
                    if (input.widget) {
                        input.widget.destroy();
                    }
                });
            }
            if (this.refs.mask && this.refs.mask.length) {
                this.refs.mask.forEach(input => {
                    if (input.mask) {
                        input.mask.destroy();
                    }
                });
            }
            super.detach();
        }
        attachElement(element, index) {
            this.addEventListener(element, this.inputInfo.changeEvent, () => {
                const textCase = _.get(this.component, 'case', 'mixed');
                if (textCase !== 'mixed') {
                    const {selectionStart, selectionEnd} = element;
                    if (textCase === 'uppercase' && element.value) {
                        element.value = element.value.toUpperCase();
                    }
                    if (textCase === 'lowercase' && element.value) {
                        element.value = element.value.toLowerCase();
                    }
                    if (element.selectionStart && element.selectionEnd) {
                        element.selectionStart = selectionStart;
                        element.selectionEnd = selectionEnd;
                    }
                }
                if (element.mask) {
                    setTimeout(() => {
                        return this.updateValue(null, { modified: this.component.type !== 'hidden' }, index);
                    }, 1);
                } else {
                    return this.updateValue(null, { modified: this.component.type !== 'hidden' }, index);
                }
            });
            if (!this.attachMultiMask(index)) {
                this.setInputMask(element);
            }
        }
        onSelectMaskHandler(event) {
            this.updateMask(event.target.maskInput, this.getMaskPattern(event.target.value));
        }
        getMaskPattern(maskName) {
            if (!this.multiMasks) {
                this.multiMasks = {};
            }
            if (this.multiMasks[maskName]) {
                return this.multiMasks[maskName];
            }
            const mask = this.component.inputMasks.find(inputMask => inputMask.label === maskName);
            this.multiMasks[maskName] = mask ? mask.mask : this.component.inputMasks[0].mask;
            return this.multiMasks[maskName];
        }
        attachMultiMask(index) {
            if (!(this.isMultipleMasksField && this.component.inputMasks.length && this.refs.input.length)) {
                return false;
            }
            const maskSelect = this.refs.select[index];
            maskSelect.onchange = this.onSelectMaskHandler.bind(this);
            maskSelect.maskInput = this.refs.mask[index];
            this.setInputMask(maskSelect.maskInput, this.component.inputMasks[0].mask);
            return true;
        }
        updateMask(input, mask) {
            if (!mask) {
                return;
            }
            this.setInputMask(input, mask, !this.component.placeholder);
            this.updateValue();
        }
        addNewValue(value) {
            if (value === undefined) {
                value = this.component.defaultValue ? this.component.defaultValue : this.emptyValue;
                if (Array.isArray(value) && value.length === 0) {
                    value = this.emptyValue;
                }
            }
            let dataValue = this.dataValue || [];
            if (!Array.isArray(dataValue)) {
                dataValue = [dataValue];
            }
            if (Array.isArray(value)) {
                dataValue = dataValue.concat(value);
            } else {
                dataValue.push(value);
            }
            this.dataValue = dataValue;
        }
        addValue() {
            this.addNewValue();
            this.redraw();
            this.checkConditions();
            if (!this.isEmpty(this.dataValue)) {
                this.restoreValue();
            }
            if (this.root) {
                this.root.onChange();
            }
        }
    };
});
define('skylark-formio/widgets/InputWidget',[
    'skylark-lodash',
    '../Element',
    '../vendors/getify/npo'
], function (_, Element, NativePromise) {
    'use strict';
    return class InputWidget extends Element {
        static get defaultSettings() {
            return { type: 'input' };
        }
        constructor(settings, component) {
            super(settings);
            this.namespace = 'formio.widget';
            this.component = component || {};
            this.settings = _.merge({}, this.defaultSettings, settings || {});
        }
        attach(input) {
            this._input = input;
            return NativePromise.resolve();
        }
        get defaultSettings() {
            return {};
        }
        set disabled(disabled) {
            if (disabled) {
                this._input.setAttribute('disabled', 'disabled');
            } else {
                this._input.removeAttribute('disabled');
            }
        }
        get input() {
            return this._input;
        }
        getValue() {
            return this._input.value;
        }
        getValueAsString(value) {
            return value;
        }
        validationValue(value) {
            return value;
        }
        addPrefix() {
            return null;
        }
        addSuffix() {
            return null;
        }
        setValue(value) {
            this._input.value = value;
        }
    };
});
/* flatpickr v4.5.7, @license MIT */
define('skylark-formio/vendors/flatpickr/flatpickr',[], function () { 
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var HOOKS = [
        "onChange",
        "onClose",
        "onDayCreate",
        "onDestroy",
        "onKeyDown",
        "onMonthChange",
        "onOpen",
        "onParseConfig",
        "onReady",
        "onValueUpdate",
        "onYearChange",
        "onPreCalendarPosition",
    ];
    var defaults = {
        _disable: [],
        _enable: [],
        allowInput: false,
        altFormat: "F j, Y",
        altInput: false,
        altInputClass: "form-control input",
        animate: typeof window === "object" &&
            window.navigator.userAgent.indexOf("MSIE") === -1,
        ariaDateFormat: "F j, Y",
        clickOpens: true,
        closeOnSelect: true,
        conjunction: ", ",
        dateFormat: "Y-m-d",
        defaultHour: 12,
        defaultMinute: 0,
        defaultSeconds: 0,
        disable: [],
        disableMobile: false,
        enable: [],
        enableSeconds: false,
        enableTime: false,
        errorHandler: function (err) {
            return typeof console !== "undefined" && console.warn(err);
        },
        getWeek: function (givenDate) {
            var date = new Date(givenDate.getTime());
            date.setHours(0, 0, 0, 0);
            // Thursday in current week decides the year.
            date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
            // January 4 is always in week 1.
            var week1 = new Date(date.getFullYear(), 0, 4);
            // Adjust to Thursday in week 1 and count number of weeks from date to week1.
            return (1 +
                Math.round(((date.getTime() - week1.getTime()) / 86400000 -
                    3 +
                    ((week1.getDay() + 6) % 7)) /
                    7));
        },
        hourIncrement: 1,
        ignoredFocusElements: [],
        inline: false,
        locale: "default",
        minuteIncrement: 5,
        mode: "single",
        nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
        noCalendar: false,
        now: new Date(),
        onChange: [],
        onClose: [],
        onDayCreate: [],
        onDestroy: [],
        onKeyDown: [],
        onMonthChange: [],
        onOpen: [],
        onParseConfig: [],
        onReady: [],
        onValueUpdate: [],
        onYearChange: [],
        onPreCalendarPosition: [],
        plugins: [],
        position: "auto",
        positionElement: undefined,
        prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
        shorthandCurrentMonth: false,
        showMonths: 1,
        static: false,
        time_24hr: false,
        weekNumbers: false,
        wrap: false
    };

    var english = {
        weekdays: {
            shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            longhand: [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
            ]
        },
        months: {
            shorthand: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
            ],
            longhand: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
            ]
        },
        daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        firstDayOfWeek: 0,
        ordinal: function (nth) {
            var s = nth % 100;
            if (s > 3 && s < 21)
                return "th";
            switch (s % 10) {
                case 1:
                    return "st";
                case 2:
                    return "nd";
                case 3:
                    return "rd";
                default:
                    return "th";
            }
        },
        rangeSeparator: " to ",
        weekAbbreviation: "Wk",
        scrollTitle: "Scroll to increment",
        toggleTitle: "Click to toggle",
        amPM: ["AM", "PM"],
        yearAriaLabel: "Year"
    };

    var pad = function (number) { return ("0" + number).slice(-2); };
    var int = function (bool) { return (bool === true ? 1 : 0); };
    /* istanbul ignore next */
    function debounce(func, wait, immediate) {
        if (immediate === void 0) { immediate = false; }
        var timeout;
        return function () {
            var context = this, args = arguments;
            timeout !== null && clearTimeout(timeout);
            timeout = window.setTimeout(function () {
                timeout = null;
                if (!immediate)
                    func.apply(context, args);
            }, wait);
            if (immediate && !timeout)
                func.apply(context, args);
        };
    }
    var arrayify = function (obj) {
        return obj instanceof Array ? obj : [obj];
    };

    function toggleClass(elem, className, bool) {
        if (bool === true)
            return elem.classList.add(className);
        elem.classList.remove(className);
    }
    function createElement(tag, className, content) {
        var e = window.document.createElement(tag);
        className = className || "";
        content = content || "";
        e.className = className;
        if (content !== undefined)
            e.textContent = content;
        return e;
    }
    function clearNode(node) {
        while (node.firstChild)
            node.removeChild(node.firstChild);
    }
    function findParent(node, condition) {
        if (condition(node))
            return node;
        else if (node.parentNode)
            return findParent(node.parentNode, condition);
        return undefined; // nothing found
    }
    function createNumberInput(inputClassName, opts) {
        var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
        if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
            numInput.type = "number";
        }
        else {
            numInput.type = "text";
            numInput.pattern = "\\d*";
        }
        if (opts !== undefined)
            for (var key in opts)
                numInput.setAttribute(key, opts[key]);
        wrapper.appendChild(numInput);
        wrapper.appendChild(arrowUp);
        wrapper.appendChild(arrowDown);
        return wrapper;
    }
    function getEventTarget(event) {
        if (typeof event.composedPath === "function") {
            var path = event.composedPath();
            return path[0];
        }
        return event.target;
    }

    var do_nothing = function () { return undefined; };
    var monthToStr = function (monthNumber, shorthand, locale) { return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber]; };
    var revFormat = {
        D: do_nothing,
        F: function (dateObj, monthName, locale) {
            dateObj.setMonth(locale.months.longhand.indexOf(monthName));
        },
        G: function (dateObj, hour) {
            dateObj.setHours(parseFloat(hour));
        },
        H: function (dateObj, hour) {
            dateObj.setHours(parseFloat(hour));
        },
        J: function (dateObj, day) {
            dateObj.setDate(parseFloat(day));
        },
        K: function (dateObj, amPM, locale) {
            dateObj.setHours((dateObj.getHours() % 12) +
                12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
        },
        M: function (dateObj, shortMonth, locale) {
            dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
        },
        S: function (dateObj, seconds) {
            dateObj.setSeconds(parseFloat(seconds));
        },
        U: function (_, unixSeconds) { return new Date(parseFloat(unixSeconds) * 1000); },
        W: function (dateObj, weekNum) {
            var weekNumber = parseInt(weekNum);
            return new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
        },
        Y: function (dateObj, year) {
            dateObj.setFullYear(parseFloat(year));
        },
        Z: function (_, ISODate) { return new Date(ISODate); },
        d: function (dateObj, day) {
            dateObj.setDate(parseFloat(day));
        },
        h: function (dateObj, hour) {
            dateObj.setHours(parseFloat(hour));
        },
        i: function (dateObj, minutes) {
            dateObj.setMinutes(parseFloat(minutes));
        },
        j: function (dateObj, day) {
            dateObj.setDate(parseFloat(day));
        },
        l: do_nothing,
        m: function (dateObj, month) {
            dateObj.setMonth(parseFloat(month) - 1);
        },
        n: function (dateObj, month) {
            dateObj.setMonth(parseFloat(month) - 1);
        },
        s: function (dateObj, seconds) {
            dateObj.setSeconds(parseFloat(seconds));
        },
        u: function (_, unixMillSeconds) {
            return new Date(parseFloat(unixMillSeconds));
        },
        w: do_nothing,
        y: function (dateObj, year) {
            dateObj.setFullYear(2000 + parseFloat(year));
        }
    };
    var tokenRegex = {
        D: "(\\w+)",
        F: "(\\w+)",
        G: "(\\d\\d|\\d)",
        H: "(\\d\\d|\\d)",
        J: "(\\d\\d|\\d)\\w+",
        K: "",
        M: "(\\w+)",
        S: "(\\d\\d|\\d)",
        U: "(.+)",
        W: "(\\d\\d|\\d)",
        Y: "(\\d{4})",
        Z: "(.+)",
        d: "(\\d\\d|\\d)",
        h: "(\\d\\d|\\d)",
        i: "(\\d\\d|\\d)",
        j: "(\\d\\d|\\d)",
        l: "(\\w+)",
        m: "(\\d\\d|\\d)",
        n: "(\\d\\d|\\d)",
        s: "(\\d\\d|\\d)",
        u: "(.+)",
        w: "(\\d\\d|\\d)",
        y: "(\\d{2})"
    };
    var formats = {
        // get the date in UTC
        Z: function (date) { return date.toISOString(); },
        // weekday name, short, e.g. Thu
        D: function (date, locale, options) {
            return locale.weekdays.shorthand[formats.w(date, locale, options)];
        },
        // full month name e.g. January
        F: function (date, locale, options) {
            return monthToStr(formats.n(date, locale, options) - 1, false, locale);
        },
        // padded hour 1-12
        G: function (date, locale, options) {
            return pad(formats.h(date, locale, options));
        },
        // hours with leading zero e.g. 03
        H: function (date) { return pad(date.getHours()); },
        // day (1-30) with ordinal suffix e.g. 1st, 2nd
        J: function (date, locale) {
            return locale.ordinal !== undefined
                ? date.getDate() + locale.ordinal(date.getDate())
                : date.getDate();
        },
        // AM/PM
        K: function (date, locale) { return locale.amPM[int(date.getHours() > 11)]; },
        // shorthand month e.g. Jan, Sep, Oct, etc
        M: function (date, locale) {
            return monthToStr(date.getMonth(), true, locale);
        },
        // seconds 00-59
        S: function (date) { return pad(date.getSeconds()); },
        // unix timestamp
        U: function (date) { return date.getTime() / 1000; },
        W: function (date, _, options) {
            return options.getWeek(date);
        },
        // full year e.g. 2016
        Y: function (date) { return date.getFullYear(); },
        // day in month, padded (01-30)
        d: function (date) { return pad(date.getDate()); },
        // hour from 1-12 (am/pm)
        h: function (date) { return (date.getHours() % 12 ? date.getHours() % 12 : 12); },
        // minutes, padded with leading zero e.g. 09
        i: function (date) { return pad(date.getMinutes()); },
        // day in month (1-30)
        j: function (date) { return date.getDate(); },
        // weekday name, full, e.g. Thursday
        l: function (date, locale) {
            return locale.weekdays.longhand[date.getDay()];
        },
        // padded month number (01-12)
        m: function (date) { return pad(date.getMonth() + 1); },
        // the month number (1-12)
        n: function (date) { return date.getMonth() + 1; },
        // seconds 0-59
        s: function (date) { return date.getSeconds(); },
        // Unix Milliseconds
        u: function (date) { return date.getTime(); },
        // number of the day of the week
        w: function (date) { return date.getDay(); },
        // last two digits of year e.g. 16 for 2016
        y: function (date) { return String(date.getFullYear()).substring(2); }
    };

    var createDateFormatter = function (_a) {
        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
        return function (dateObj, frmt, overrideLocale) {
            var locale = overrideLocale || l10n;
            if (config.formatDate !== undefined) {
                return config.formatDate(dateObj, frmt, locale);
            }
            return frmt
                .split("")
                .map(function (c, i, arr) {
                return formats[c] && arr[i - 1] !== "\\"
                    ? formats[c](dateObj, locale, config)
                    : c !== "\\"
                        ? c
                        : "";
            })
                .join("");
        };
    };
    var createDateParser = function (_a) {
        var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
        return function (date, givenFormat, timeless, customLocale) {
            if (date !== 0 && !date)
                return undefined;
            var locale = customLocale || l10n;
            var parsedDate;
            var date_orig = date;
            if (date instanceof Date)
                parsedDate = new Date(date.getTime());
            else if (typeof date !== "string" &&
                date.toFixed !== undefined // timestamp
            )
                // create a copy
                parsedDate = new Date(date);
            else if (typeof date === "string") {
                // date string
                var format = givenFormat || (config || defaults).dateFormat;
                var datestr = String(date).trim();
                if (datestr === "today") {
                    parsedDate = new Date();
                    timeless = true;
                }
                else if (/Z$/.test(datestr) ||
                    /GMT$/.test(datestr) // datestrings w/ timezone
                )
                    parsedDate = new Date(date);
                else if (config && config.parseDate)
                    parsedDate = config.parseDate(date, format);
                else {
                    parsedDate =
                        !config || !config.noCalendar
                            ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)
                            : new Date(new Date().setHours(0, 0, 0, 0));
                    var matched = void 0, ops = [];
                    for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
                        var token_1 = format[i];
                        var isBackSlash = token_1 === "\\";
                        var escaped = format[i - 1] === "\\" || isBackSlash;
                        if (tokenRegex[token_1] && !escaped) {
                            regexStr += tokenRegex[token_1];
                            var match = new RegExp(regexStr).exec(date);
                            if (match && (matched = true)) {
                                ops[token_1 !== "Y" ? "push" : "unshift"]({
                                    fn: revFormat[token_1],
                                    val: match[++matchIndex]
                                });
                            }
                        }
                        else if (!isBackSlash)
                            regexStr += "."; // don't really care
                        ops.forEach(function (_a) {
                            var fn = _a.fn, val = _a.val;
                            return (parsedDate = fn(parsedDate, val, locale) || parsedDate);
                        });
                    }
                    parsedDate = matched ? parsedDate : undefined;
                }
            }
            /* istanbul ignore next */
            if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
                config.errorHandler(new Error("Invalid date provided: " + date_orig));
                return undefined;
            }
            if (timeless === true)
                parsedDate.setHours(0, 0, 0, 0);
            return parsedDate;
        };
    };
    /**
     * Compute the difference in dates, measured in ms
     */
    function compareDates(date1, date2, timeless) {
        if (timeless === void 0) { timeless = true; }
        if (timeless !== false) {
            return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -
                new Date(date2.getTime()).setHours(0, 0, 0, 0));
        }
        return date1.getTime() - date2.getTime();
    }
    var isBetween = function (ts, ts1, ts2) {
        return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
    };
    var duration = {
        DAY: 86400000
    };

    if (typeof Object.assign !== "function") {
        Object.assign = function (target) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (!target) {
                throw TypeError("Cannot convert undefined or null to object");
            }
            var _loop_1 = function (source) {
                if (source) {
                    Object.keys(source).forEach(function (key) { return (target[key] = source[key]); });
                }
            };
            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
                var source = args_1[_a];
                _loop_1(source);
            }
            return target;
        };
    }

    var DEBOUNCED_CHANGE_MS = 300;
    function FlatpickrInstance(element, instanceConfig) {
        var self = {
            config: __assign({}, flatpickr.defaultConfig),
            l10n: english
        };
        self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
        self._handlers = [];
        self._bind = bind;
        self._setHoursFromDate = setHoursFromDate;
        self._positionCalendar = positionCalendar;
        self.changeMonth = changeMonth;
        self.changeYear = changeYear;
        self.clear = clear;
        self.close = close;
        self._createElement = createElement;
        self.destroy = destroy;
        self.isEnabled = isEnabled;
        self.jumpToDate = jumpToDate;
        self.open = open;
        self.redraw = redraw;
        self.set = set;
        self.setDate = setDate;
        self.toggle = toggle;
        function setupHelperFunctions() {
            self.utils = {
                getDaysInMonth: function (month, yr) {
                    if (month === void 0) { month = self.currentMonth; }
                    if (yr === void 0) { yr = self.currentYear; }
                    if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))
                        return 29;
                    return self.l10n.daysInMonth[month];
                }
            };
        }
        function init() {
            self.element = self.input = element;
            self.isOpen = false;
            parseConfig();
            setupLocale();
            setupInputs();
            setupDates();
            setupHelperFunctions();
            if (!self.isMobile)
                build();
            bindEvents();
            if (self.selectedDates.length || self.config.noCalendar) {
                if (self.config.enableTime) {
                    setHoursFromDate(self.config.noCalendar
                        ? self.latestSelectedDateObj || self.config.minDate
                        : undefined);
                }
                updateValue(false);
            }
            setCalendarWidth();
            self.showTimeInput =
                self.selectedDates.length > 0 || self.config.noCalendar;
            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
            /* TODO: investigate this further
        
              Currently, there is weird positioning behavior in safari causing pages
              to scroll up. https://github.com/chmln/flatpickr/issues/563
        
              However, most browsers are not Safari and positioning is expensive when used
              in scale. https://github.com/chmln/flatpickr/issues/1096
            */
            if (!self.isMobile && isSafari) {
                positionCalendar();
            }
            triggerEvent("onReady");
        }
        function bindToInstance(fn) {
            return fn.bind(self);
        }
        function setCalendarWidth() {
            var config = self.config;
            if (config.weekNumbers === false && config.showMonths === 1)
                return;
            else if (config.noCalendar !== true) {
                window.requestAnimationFrame(function () {
                    if (self.calendarContainer !== undefined) {
                        self.calendarContainer.style.visibility = "hidden";
                        self.calendarContainer.style.display = "block";
                    }
                    if (self.daysContainer !== undefined) {
                        var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
                        self.daysContainer.style.width = daysWidth + "px";
                        self.calendarContainer.style.width =
                            daysWidth +
                                (self.weekWrapper !== undefined
                                    ? self.weekWrapper.offsetWidth
                                    : 0) +
                                "px";
                        self.calendarContainer.style.removeProperty("visibility");
                        self.calendarContainer.style.removeProperty("display");
                    }
                });
            }
        }
        /**
         * The handler for all events targeting the time inputs
         */
        function updateTime(e) {
            if (self.selectedDates.length === 0) {
                setDefaultTime();
            }
            if (e !== undefined && e.type !== "blur") {
                timeWrapper(e);
            }
            var prevValue = self._input.value;
            setHoursFromInputs();
            updateValue();
            if (self._input.value !== prevValue) {
                self._debouncedChange();
            }
        }
        function ampm2military(hour, amPM) {
            return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);
        }
        function military2ampm(hour) {
            switch (hour % 24) {
                case 0:
                case 12:
                    return 12;
                default:
                    return hour % 12;
            }
        }
        /**
         * Syncs the selected date object time with user's time input
         */
        function setHoursFromInputs() {
            if (self.hourElement === undefined || self.minuteElement === undefined)
                return;
            var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined
                ? (parseInt(self.secondElement.value, 10) || 0) % 60
                : 0;
            if (self.amPM !== undefined) {
                hours = ampm2military(hours, self.amPM.textContent);
            }
            var limitMinHours = self.config.minTime !== undefined ||
                (self.config.minDate &&
                    self.minDateHasTime &&
                    self.latestSelectedDateObj &&
                    compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===
                        0);
            var limitMaxHours = self.config.maxTime !== undefined ||
                (self.config.maxDate &&
                    self.maxDateHasTime &&
                    self.latestSelectedDateObj &&
                    compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===
                        0);
            if (limitMaxHours) {
                var maxTime = self.config.maxTime !== undefined
                    ? self.config.maxTime
                    : self.config.maxDate;
                hours = Math.min(hours, maxTime.getHours());
                if (hours === maxTime.getHours())
                    minutes = Math.min(minutes, maxTime.getMinutes());
                if (minutes === maxTime.getMinutes())
                    seconds = Math.min(seconds, maxTime.getSeconds());
            }
            if (limitMinHours) {
                var minTime = self.config.minTime !== undefined
                    ? self.config.minTime
                    : self.config.minDate;
                hours = Math.max(hours, minTime.getHours());
                if (hours === minTime.getHours())
                    minutes = Math.max(minutes, minTime.getMinutes());
                if (minutes === minTime.getMinutes())
                    seconds = Math.max(seconds, minTime.getSeconds());
            }
            setHours(hours, minutes, seconds);
        }
        /**
         * Syncs time input values with a date
         */
        function setHoursFromDate(dateObj) {
            var date = dateObj || self.latestSelectedDateObj;
            if (date)
                setHours(date.getHours(), date.getMinutes(), date.getSeconds());
        }
        function setDefaultHours() {
            var hours = self.config.defaultHour;
            var minutes = self.config.defaultMinute;
            var seconds = self.config.defaultSeconds;
            if (self.config.minDate !== undefined) {
                var min_hr = self.config.minDate.getHours();
                var min_minutes = self.config.minDate.getMinutes();
                hours = Math.max(hours, min_hr);
                if (hours === min_hr)
                    minutes = Math.max(min_minutes, minutes);
                if (hours === min_hr && minutes === min_minutes)
                    seconds = self.config.minDate.getSeconds();
            }
            if (self.config.maxDate !== undefined) {
                var max_hr = self.config.maxDate.getHours();
                var max_minutes = self.config.maxDate.getMinutes();
                hours = Math.min(hours, max_hr);
                if (hours === max_hr)
                    minutes = Math.min(max_minutes, minutes);
                if (hours === max_hr && minutes === max_minutes)
                    seconds = self.config.maxDate.getSeconds();
            }
            setHours(hours, minutes, seconds);
        }
        /**
         * Sets the hours, minutes, and optionally seconds
         * of the latest selected date object and the
         * corresponding time inputs
         * @param {Number} hours the hour. whether its military
         *                 or am-pm gets inferred from config
         * @param {Number} minutes the minutes
         * @param {Number} seconds the seconds (optional)
         */
        function setHours(hours, minutes, seconds) {
            if (self.latestSelectedDateObj !== undefined) {
                self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
            }
            if (!self.hourElement || !self.minuteElement || self.isMobile)
                return;
            self.hourElement.value = pad(!self.config.time_24hr
                ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)
                : hours);
            self.minuteElement.value = pad(minutes);
            if (self.amPM !== undefined)
                self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
            if (self.secondElement !== undefined)
                self.secondElement.value = pad(seconds);
        }
        /**
         * Handles the year input and incrementing events
         * @param {Event} event the keyup or increment event
         */
        function onYearInput(event) {
            var year = parseInt(event.target.value) + (event.delta || 0);
            if (year / 1000 > 1 ||
                (event.key === "Enter" && !/[^\d]/.test(year.toString()))) {
                changeYear(year);
            }
        }
        /**
         * Essentially addEventListener + tracking
         * @param {Element} element the element to addEventListener to
         * @param {String} event the event name
         * @param {Function} handler the event handler
         */
        function bind(element, event, handler, options) {
            if (event instanceof Array)
                return event.forEach(function (ev) { return bind(element, ev, handler, options); });
            if (element instanceof Array)
                return element.forEach(function (el) { return bind(el, event, handler, options); });
            element.addEventListener(event, handler, options);
            self._handlers.push({
                element: element,
                event: event,
                handler: handler,
                options: options
            });
        }
        /**
         * A mousedown handler which mimics click.
         * Minimizes latency, since we don't need to wait for mouseup in most cases.
         * Also, avoids handling right clicks.
         *
         * @param {Function} handler the event handler
         */
        function onClick(handler) {
            return function (evt) {
                evt.which === 1 && handler(evt);
            };
        }
        function triggerChange() {
            triggerEvent("onChange");
        }
        /**
         * Adds all the necessary event listeners
         */
        function bindEvents() {
            if (self.config.wrap) {
                ["open", "close", "toggle", "clear"].forEach(function (evt) {
                    Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {
                        return bind(el, "click", self[evt]);
                    });
                });
            }
            if (self.isMobile) {
                setupMobile();
                return;
            }
            var debouncedResize = debounce(onResize, 50);
            self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
            if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
                bind(self.daysContainer, "mouseover", function (e) {
                    if (self.config.mode === "range")
                        onMouseOver(e.target);
                });
            bind(window.document.body, "keydown", onKeyDown);
            if (!self.config.static)
                bind(self._input, "keydown", onKeyDown);
            if (!self.config.inline && !self.config.static)
                bind(window, "resize", debouncedResize);
            if (window.ontouchstart !== undefined)
                bind(window.document, "click", documentClick);
            else
                bind(window.document, "mousedown", onClick(documentClick));
            bind(window.document, "focus", documentClick, { capture: true });
            if (self.config.clickOpens === true) {
                bind(self._input, "focus", self.open);
                bind(self._input, "mousedown", onClick(self.open));
            }
            if (self.daysContainer !== undefined) {
                bind(self.monthNav, "mousedown", onClick(onMonthNavClick));
                bind(self.monthNav, ["keyup", "increment"], onYearInput);
                bind(self.daysContainer, "mousedown", onClick(selectDate));
            }
            if (self.timeContainer !== undefined &&
                self.minuteElement !== undefined &&
                self.hourElement !== undefined) {
                var selText = function (e) {
                    return e.target.select();
                };
                bind(self.timeContainer, ["increment"], updateTime);
                bind(self.timeContainer, "blur", updateTime, { capture: true });
                bind(self.timeContainer, "mousedown", onClick(timeIncrement));
                bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
                if (self.secondElement !== undefined)
                    bind(self.secondElement, "focus", function () { return self.secondElement && self.secondElement.select(); });
                if (self.amPM !== undefined) {
                    bind(self.amPM, "mousedown", onClick(function (e) {
                        updateTime(e);
                        triggerChange();
                    }));
                }
            }
        }
        /**
         * Set the calendar view to a particular date.
         * @param {Date} jumpDate the date to set the view to
         */
        function jumpToDate(jumpDate) {
            var jumpTo = jumpDate !== undefined
                ? self.parseDate(jumpDate)
                : self.latestSelectedDateObj ||
                    (self.config.minDate && self.config.minDate > self.now
                        ? self.config.minDate
                        : self.config.maxDate && self.config.maxDate < self.now
                            ? self.config.maxDate
                            : self.now);
            try {
                if (jumpTo !== undefined) {
                    self.currentYear = jumpTo.getFullYear();
                    self.currentMonth = jumpTo.getMonth();
                }
            }
            catch (e) {
                /* istanbul ignore next */
                e.message = "Invalid date supplied: " + jumpTo;
                self.config.errorHandler(e);
            }
            self.redraw();
        }
        /**
         * The up/down arrow handler for time inputs
         * @param {Event} e the click event
         */
        function timeIncrement(e) {
            if (~e.target.className.indexOf("arrow"))
                incrementNumInput(e, e.target.classList.contains("arrowUp") ? 1 : -1);
        }
        /**
         * Increments/decrements the value of input associ-
         * ated with the up/down arrow by dispatching an
         * "increment" event on the input.
         *
         * @param {Event} e the click event
         * @param {Number} delta the diff (usually 1 or -1)
         * @param {Element} inputElem the input element
         */
        function incrementNumInput(e, delta, inputElem) {
            var target = e && e.target;
            var input = inputElem ||
                (target && target.parentNode && target.parentNode.firstChild);
            var event = createEvent("increment");
            event.delta = delta;
            input && input.dispatchEvent(event);
        }
        function build() {
            var fragment = window.document.createDocumentFragment();
            self.calendarContainer = createElement("div", "flatpickr-calendar");
            self.calendarContainer.tabIndex = -1;
            if (!self.config.noCalendar) {
                fragment.appendChild(buildMonthNav());
                self.innerContainer = createElement("div", "flatpickr-innerContainer");
                if (self.config.weekNumbers) {
                    var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
                    self.innerContainer.appendChild(weekWrapper);
                    self.weekNumbers = weekNumbers;
                    self.weekWrapper = weekWrapper;
                }
                self.rContainer = createElement("div", "flatpickr-rContainer");
                self.rContainer.appendChild(buildWeekdays());
                if (!self.daysContainer) {
                    self.daysContainer = createElement("div", "flatpickr-days");
                    self.daysContainer.tabIndex = -1;
                }
                buildDays();
                self.rContainer.appendChild(self.daysContainer);
                self.innerContainer.appendChild(self.rContainer);
                fragment.appendChild(self.innerContainer);
            }
            if (self.config.enableTime) {
                fragment.appendChild(buildTime());
            }
            toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
            toggleClass(self.calendarContainer, "animate", self.config.animate === true);
            toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
            self.calendarContainer.appendChild(fragment);
            var customAppend = self.config.appendTo !== undefined &&
                self.config.appendTo.nodeType !== undefined;
            if (self.config.inline || self.config.static) {
                self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
                if (self.config.inline) {
                    if (!customAppend && self.element.parentNode)
                        self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
                    else if (self.config.appendTo !== undefined)
                        self.config.appendTo.appendChild(self.calendarContainer);
                }
                if (self.config.static) {
                    var wrapper = createElement("div", "flatpickr-wrapper");
                    if (self.element.parentNode)
                        self.element.parentNode.insertBefore(wrapper, self.element);
                    wrapper.appendChild(self.element);
                    if (self.altInput)
                        wrapper.appendChild(self.altInput);
                    wrapper.appendChild(self.calendarContainer);
                }
            }
            if (!self.config.static && !self.config.inline)
                (self.config.appendTo !== undefined
                    ? self.config.appendTo
                    : window.document.body).appendChild(self.calendarContainer);
        }
        function createDay(className, date, dayNumber, i) {
            var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", "flatpickr-day " + className, date.getDate().toString());
            dayElement.dateObj = date;
            dayElement.$i = i;
            dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
            if (className.indexOf("hidden") === -1 &&
                compareDates(date, self.now) === 0) {
                self.todayDateElem = dayElement;
                dayElement.classList.add("today");
                dayElement.setAttribute("aria-current", "date");
            }
            if (dateIsEnabled) {
                dayElement.tabIndex = -1;
                if (isDateSelected(date)) {
                    dayElement.classList.add("selected");
                    self.selectedDateElem = dayElement;
                    if (self.config.mode === "range") {
                        toggleClass(dayElement, "startRange", self.selectedDates[0] &&
                            compareDates(date, self.selectedDates[0], true) === 0);
                        toggleClass(dayElement, "endRange", self.selectedDates[1] &&
                            compareDates(date, self.selectedDates[1], true) === 0);
                        if (className === "nextMonthDay")
                            dayElement.classList.add("inRange");
                    }
                }
            }
            else {
                dayElement.classList.add("disabled");
            }
            if (self.config.mode === "range") {
                if (isDateInRange(date) && !isDateSelected(date))
                    dayElement.classList.add("inRange");
            }
            if (self.weekNumbers &&
                self.config.showMonths === 1 &&
                className !== "prevMonthDay" &&
                dayNumber % 7 === 1) {
                self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
            }
            triggerEvent("onDayCreate", dayElement);
            return dayElement;
        }
        function focusOnDayElem(targetNode) {
            targetNode.focus();
            if (self.config.mode === "range")
                onMouseOver(targetNode);
        }
        function getFirstAvailableDay(delta) {
            var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
            var endMonth = delta > 0 ? self.config.showMonths : -1;
            for (var m = startMonth; m != endMonth; m += delta) {
                var month = self.daysContainer.children[m];
                var startIndex = delta > 0 ? 0 : month.children.length - 1;
                var endIndex = delta > 0 ? month.children.length : -1;
                for (var i = startIndex; i != endIndex; i += delta) {
                    var c = month.children[i];
                    if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
                        return c;
                }
            }
            return undefined;
        }
        function getNextAvailableDay(current, delta) {
            var givenMonth = current.className.indexOf("Month") === -1
                ? current.dateObj.getMonth()
                : self.currentMonth;
            var endMonth = delta > 0 ? self.config.showMonths : -1;
            var loopDelta = delta > 0 ? 1 : -1;
            for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
                var month = self.daysContainer.children[m];
                var startIndex = givenMonth - self.currentMonth === m
                    ? current.$i + delta
                    : delta < 0
                        ? month.children.length - 1
                        : 0;
                var numMonthDays = month.children.length;
                for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
                    var c = month.children[i];
                    if (c.className.indexOf("hidden") === -1 &&
                        isEnabled(c.dateObj) &&
                        Math.abs(current.$i - i) >= Math.abs(delta))
                        return focusOnDayElem(c);
                }
            }
            self.changeMonth(loopDelta);
            focusOnDay(getFirstAvailableDay(loopDelta), 0);
            return undefined;
        }
        function focusOnDay(current, offset) {
            var dayFocused = isInView(document.activeElement || document.body);
            var startElem = current !== undefined
                ? current
                : dayFocused
                    ? document.activeElement
                    : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)
                        ? self.selectedDateElem
                        : self.todayDateElem !== undefined && isInView(self.todayDateElem)
                            ? self.todayDateElem
                            : getFirstAvailableDay(offset > 0 ? 1 : -1);
            if (startElem === undefined)
                return self._input.focus();
            if (!dayFocused)
                return focusOnDayElem(startElem);
            getNextAvailableDay(startElem, offset);
        }
        function buildMonthDays(year, month) {
            var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
            var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12);
            var daysInMonth = self.utils.getDaysInMonth(month), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
            var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
            // prepend days from the ending of previous month
            for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
                days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
            }
            // Start at 1 since there is no 0th day
            for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
                days.appendChild(createDay("", new Date(year, month, dayNumber), dayNumber, dayIndex));
            }
            // append days from the next month
            for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&
                (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
                days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
            }
            //updateNavigationCurrentMonth();
            var dayContainer = createElement("div", "dayContainer");
            dayContainer.appendChild(days);
            return dayContainer;
        }
        function buildDays() {
            if (self.daysContainer === undefined) {
                return;
            }
            clearNode(self.daysContainer);
            // TODO: week numbers for each month
            if (self.weekNumbers)
                clearNode(self.weekNumbers);
            var frag = document.createDocumentFragment();
            for (var i = 0; i < self.config.showMonths; i++) {
                var d = new Date(self.currentYear, self.currentMonth, 1);
                d.setMonth(self.currentMonth + i);
                frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
            }
            self.daysContainer.appendChild(frag);
            self.days = self.daysContainer.firstChild;
            if (self.config.mode === "range" && self.selectedDates.length === 1) {
                onMouseOver();
            }
        }
        function buildMonth() {
            var container = createElement("div", "flatpickr-month");
            var monthNavFragment = window.document.createDocumentFragment();
            var monthElement = createElement("span", "cur-month");
            var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
            var yearElement = yearInput.getElementsByTagName("input")[0];
            yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
            if (self.config.minDate) {
                yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
            }
            if (self.config.maxDate) {
                yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
                yearElement.disabled =
                    !!self.config.minDate &&
                        self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
            }
            var currentMonth = createElement("div", "flatpickr-current-month");
            currentMonth.appendChild(monthElement);
            currentMonth.appendChild(yearInput);
            monthNavFragment.appendChild(currentMonth);
            container.appendChild(monthNavFragment);
            return {
                container: container,
                yearElement: yearElement,
                monthElement: monthElement
            };
        }
        function buildMonths() {
            clearNode(self.monthNav);
            self.monthNav.appendChild(self.prevMonthNav);
            if (self.config.showMonths) {
                self.yearElements = [];
                self.monthElements = [];
            }
            for (var m = self.config.showMonths; m--;) {
                var month = buildMonth();
                self.yearElements.push(month.yearElement);
                self.monthElements.push(month.monthElement);
                self.monthNav.appendChild(month.container);
            }
            self.monthNav.appendChild(self.nextMonthNav);
        }
        function buildMonthNav() {
            self.monthNav = createElement("div", "flatpickr-months");
            self.yearElements = [];
            self.monthElements = [];
            self.prevMonthNav = createElement("span", "flatpickr-prev-month");
            self.prevMonthNav.innerHTML = self.config.prevArrow;
            self.nextMonthNav = createElement("span", "flatpickr-next-month");
            self.nextMonthNav.innerHTML = self.config.nextArrow;
            buildMonths();
            Object.defineProperty(self, "_hidePrevMonthArrow", {
                get: function () { return self.__hidePrevMonthArrow; },
                set: function (bool) {
                    if (self.__hidePrevMonthArrow !== bool) {
                        toggleClass(self.prevMonthNav, "disabled", bool);
                        self.__hidePrevMonthArrow = bool;
                    }
                }
            });
            Object.defineProperty(self, "_hideNextMonthArrow", {
                get: function () { return self.__hideNextMonthArrow; },
                set: function (bool) {
                    if (self.__hideNextMonthArrow !== bool) {
                        toggleClass(self.nextMonthNav, "disabled", bool);
                        self.__hideNextMonthArrow = bool;
                    }
                }
            });
            self.currentYearElement = self.yearElements[0];
            updateNavigationCurrentMonth();
            return self.monthNav;
        }
        function buildTime() {
            self.calendarContainer.classList.add("hasTime");
            if (self.config.noCalendar)
                self.calendarContainer.classList.add("noCalendar");
            self.timeContainer = createElement("div", "flatpickr-time");
            self.timeContainer.tabIndex = -1;
            var separator = createElement("span", "flatpickr-time-separator", ":");
            var hourInput = createNumberInput("flatpickr-hour");
            self.hourElement = hourInput.getElementsByTagName("input")[0];
            var minuteInput = createNumberInput("flatpickr-minute");
            self.minuteElement = minuteInput.getElementsByTagName("input")[0];
            self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
            self.hourElement.value = pad(self.latestSelectedDateObj
                ? self.latestSelectedDateObj.getHours()
                : self.config.time_24hr
                    ? self.config.defaultHour
                    : military2ampm(self.config.defaultHour));
            self.minuteElement.value = pad(self.latestSelectedDateObj
                ? self.latestSelectedDateObj.getMinutes()
                : self.config.defaultMinute);
            self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
            self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
            self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
            self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
            self.minuteElement.setAttribute("min", "0");
            self.minuteElement.setAttribute("max", "59");
            self.timeContainer.appendChild(hourInput);
            self.timeContainer.appendChild(separator);
            self.timeContainer.appendChild(minuteInput);
            if (self.config.time_24hr)
                self.timeContainer.classList.add("time24hr");
            if (self.config.enableSeconds) {
                self.timeContainer.classList.add("hasSeconds");
                var secondInput = createNumberInput("flatpickr-second");
                self.secondElement = secondInput.getElementsByTagName("input")[0];
                self.secondElement.value = pad(self.latestSelectedDateObj
                    ? self.latestSelectedDateObj.getSeconds()
                    : self.config.defaultSeconds);
                self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
                self.secondElement.setAttribute("min", "0");
                self.secondElement.setAttribute("max", "59");
                self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
                self.timeContainer.appendChild(secondInput);
            }
            if (!self.config.time_24hr) {
                // add self.amPM if appropriate
                self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj
                    ? self.hourElement.value
                    : self.config.defaultHour) > 11)]);
                self.amPM.title = self.l10n.toggleTitle;
                self.amPM.tabIndex = -1;
                self.timeContainer.appendChild(self.amPM);
            }
            return self.timeContainer;
        }
        function buildWeekdays() {
            if (!self.weekdayContainer)
                self.weekdayContainer = createElement("div", "flatpickr-weekdays");
            else
                clearNode(self.weekdayContainer);
            for (var i = self.config.showMonths; i--;) {
                var container = createElement("div", "flatpickr-weekdaycontainer");
                self.weekdayContainer.appendChild(container);
            }
            updateWeekdays();
            return self.weekdayContainer;
        }
        function updateWeekdays() {
            var firstDayOfWeek = self.l10n.firstDayOfWeek;
            var weekdays = self.l10n.weekdays.shorthand.slice();
            if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
                weekdays = weekdays.splice(firstDayOfWeek, weekdays.length).concat(weekdays.splice(0, firstDayOfWeek));
            }
            for (var i = self.config.showMonths; i--;) {
                self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
            }
        }
        /* istanbul ignore next */
        function buildWeeks() {
            self.calendarContainer.classList.add("hasWeeks");
            var weekWrapper = createElement("div", "flatpickr-weekwrapper");
            weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
            var weekNumbers = createElement("div", "flatpickr-weeks");
            weekWrapper.appendChild(weekNumbers);
            return {
                weekWrapper: weekWrapper,
                weekNumbers: weekNumbers
            };
        }
        function changeMonth(value, is_offset) {
            if (is_offset === void 0) { is_offset = true; }
            var delta = is_offset ? value : value - self.currentMonth;
            if ((delta < 0 && self._hidePrevMonthArrow === true) ||
                (delta > 0 && self._hideNextMonthArrow === true))
                return;
            self.currentMonth += delta;
            if (self.currentMonth < 0 || self.currentMonth > 11) {
                self.currentYear += self.currentMonth > 11 ? 1 : -1;
                self.currentMonth = (self.currentMonth + 12) % 12;
                triggerEvent("onYearChange");
            }
            buildDays();
            triggerEvent("onMonthChange");
            updateNavigationCurrentMonth();
        }
        function clear(triggerChangeEvent, toInitial) {
            if (triggerChangeEvent === void 0) { triggerChangeEvent = true; }
            if (toInitial === void 0) { toInitial = true; }
            self.input.value = "";
            if (self.altInput !== undefined)
                self.altInput.value = "";
            if (self.mobileInput !== undefined)
                self.mobileInput.value = "";
            self.selectedDates = [];
            self.latestSelectedDateObj = undefined;
            if (toInitial === true) {
                self.currentYear = self._initialDate.getFullYear();
                self.currentMonth = self._initialDate.getMonth();
            }
            self.showTimeInput = false;
            if (self.config.enableTime === true) {
                setDefaultHours();
            }
            self.redraw();
            if (triggerChangeEvent)
                // triggerChangeEvent is true (default) or an Event
                triggerEvent("onChange");
        }
        function close() {
            self.isOpen = false;
            if (!self.isMobile) {
                if (self.calendarContainer !== undefined) {
                    self.calendarContainer.classList.remove("open");
                }
                if (self._input !== undefined) {
                    self._input.classList.remove("active");
                }
            }
            triggerEvent("onClose");
        }
        function destroy() {
            if (self.config !== undefined)
                triggerEvent("onDestroy");
            for (var i = self._handlers.length; i--;) {
                var h = self._handlers[i];
                h.element.removeEventListener(h.event, h.handler, h.options);
            }
            self._handlers = [];
            if (self.mobileInput) {
                if (self.mobileInput.parentNode)
                    self.mobileInput.parentNode.removeChild(self.mobileInput);
                self.mobileInput = undefined;
            }
            else if (self.calendarContainer && self.calendarContainer.parentNode) {
                if (self.config.static && self.calendarContainer.parentNode) {
                    var wrapper = self.calendarContainer.parentNode;
                    wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
                    if (wrapper.parentNode) {
                        while (wrapper.firstChild)
                            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
                        wrapper.parentNode.removeChild(wrapper);
                    }
                }
                else
                    self.calendarContainer.parentNode.removeChild(self.calendarContainer);
            }
            if (self.altInput) {
                self.input.type = "text";
                if (self.altInput.parentNode)
                    self.altInput.parentNode.removeChild(self.altInput);
                delete self.altInput;
            }
            if (self.input) {
                self.input.type = self.input._type;
                self.input.classList.remove("flatpickr-input");
                self.input.removeAttribute("readonly");
                self.input.value = "";
            }
            [
                "_showTimeInput",
                "latestSelectedDateObj",
                "_hideNextMonthArrow",
                "_hidePrevMonthArrow",
                "__hideNextMonthArrow",
                "__hidePrevMonthArrow",
                "isMobile",
                "isOpen",
                "selectedDateElem",
                "minDateHasTime",
                "maxDateHasTime",
                "days",
                "daysContainer",
                "_input",
                "_positionElement",
                "innerContainer",
                "rContainer",
                "monthNav",
                "todayDateElem",
                "calendarContainer",
                "weekdayContainer",
                "prevMonthNav",
                "nextMonthNav",
                "currentMonthElement",
                "currentYearElement",
                "navigationCurrentMonth",
                "selectedDateElem",
                "config",
            ].forEach(function (k) {
                try {
                    delete self[k];
                }
                catch (_) { }
            });
        }
        function isCalendarElem(elem) {
            if (self.config.appendTo && self.config.appendTo.contains(elem))
                return true;
            return self.calendarContainer.contains(elem);
        }
        function documentClick(e) {
            if (self.isOpen && !self.config.inline) {
                var eventTarget_1 = getEventTarget(e);
                var isCalendarElement = isCalendarElem(eventTarget_1);
                var isInput = eventTarget_1 === self.input ||
                    eventTarget_1 === self.altInput ||
                    self.element.contains(eventTarget_1) ||
                    // web components
                    // e.path is not present in all browsers. circumventing typechecks
                    (e.path &&
                        e.path.indexOf &&
                        (~e.path.indexOf(self.input) ||
                            ~e.path.indexOf(self.altInput)));
                var lostFocus = e.type === "blur"
                    ? isInput &&
                        e.relatedTarget &&
                        !isCalendarElem(e.relatedTarget)
                    : !isInput &&
                        !isCalendarElement &&
                        !isCalendarElem(e.relatedTarget);
                var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {
                    return elem.contains(eventTarget_1);
                });
                if (lostFocus && isIgnored) {
                    self.close();
                    if (self.config.mode === "range" && self.selectedDates.length === 1) {
                        self.clear(false);
                        self.redraw();
                    }
                }
            }
        }
        function changeYear(newYear) {
            if (!newYear ||
                (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||
                (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))
                return;
            var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
            self.currentYear = newYearNum || self.currentYear;
            if (self.config.maxDate &&
                self.currentYear === self.config.maxDate.getFullYear()) {
                self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
            }
            else if (self.config.minDate &&
                self.currentYear === self.config.minDate.getFullYear()) {
                self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
            }
            if (isNewYear) {
                self.redraw();
                triggerEvent("onYearChange");
            }
        }
        function isEnabled(date, timeless) {
            if (timeless === void 0) { timeless = true; }
            var dateToCheck = self.parseDate(date, undefined, timeless); // timeless
            if ((self.config.minDate &&
                dateToCheck &&
                compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||
                (self.config.maxDate &&
                    dateToCheck &&
                    compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))
                return false;
            if (self.config.enable.length === 0 && self.config.disable.length === 0)
                return true;
            if (dateToCheck === undefined)
                return false;
            var bool = self.config.enable.length > 0, array = bool ? self.config.enable : self.config.disable;
            for (var i = 0, d = void 0; i < array.length; i++) {
                d = array[i];
                if (typeof d === "function" &&
                    d(dateToCheck) // disabled by function
                )
                    return bool;
                else if (d instanceof Date &&
                    dateToCheck !== undefined &&
                    d.getTime() === dateToCheck.getTime())
                    // disabled by date
                    return bool;
                else if (typeof d === "string" && dateToCheck !== undefined) {
                    // disabled by date string
                    var parsed = self.parseDate(d, undefined, true);
                    return parsed && parsed.getTime() === dateToCheck.getTime()
                        ? bool
                        : !bool;
                }
                else if (
                // disabled by range
                typeof d === "object" &&
                    dateToCheck !== undefined &&
                    d.from &&
                    d.to &&
                    dateToCheck.getTime() >= d.from.getTime() &&
                    dateToCheck.getTime() <= d.to.getTime())
                    return bool;
            }
            return !bool;
        }
        function isInView(elem) {
            if (self.daysContainer !== undefined)
                return (elem.className.indexOf("hidden") === -1 &&
                    self.daysContainer.contains(elem));
            return false;
        }
        function onKeyDown(e) {
            // e.key                      e.keyCode
            // "Backspace"                        8
            // "Tab"                              9
            // "Enter"                           13
            // "Escape"     (IE "Esc")           27
            // "ArrowLeft"  (IE "Left")          37
            // "ArrowUp"    (IE "Up")            38
            // "ArrowRight" (IE "Right")         39
            // "ArrowDown"  (IE "Down")          40
            // "Delete"     (IE "Del")           46
            var isInput = e.target === self._input;
            var allowInput = self.config.allowInput;
            var allowKeydown = self.isOpen && (!allowInput || !isInput);
            var allowInlineKeydown = self.config.inline && isInput && !allowInput;
            if (e.keyCode === 13 && isInput) {
                if (allowInput) {
                    self.setDate(self._input.value, true, e.target === self.altInput
                        ? self.config.altFormat
                        : self.config.dateFormat);
                    return e.target.blur();
                }
                else
                    self.open();
            }
            else if (isCalendarElem(e.target) ||
                allowKeydown ||
                allowInlineKeydown) {
                var isTimeObj = !!self.timeContainer &&
                    self.timeContainer.contains(e.target);
                switch (e.keyCode) {
                    case 13:
                        if (isTimeObj) {
                            updateTime();
                            focusAndClose();
                        }
                        else
                            selectDate(e);
                        break;
                    case 27: // escape
                        e.preventDefault();
                        focusAndClose();
                        break;
                    case 8:
                    case 46:
                        if (isInput && !self.config.allowInput) {
                            e.preventDefault();
                            self.clear();
                        }
                        break;
                    case 37:
                    case 39:
                        if (!isTimeObj) {
                            e.preventDefault();
                            if (self.daysContainer !== undefined &&
                                (allowInput === false ||
                                    (document.activeElement && isInView(document.activeElement)))) {
                                var delta_1 = e.keyCode === 39 ? 1 : -1;
                                if (!e.ctrlKey)
                                    focusOnDay(undefined, delta_1);
                                else {
                                    e.stopPropagation();
                                    changeMonth(delta_1);
                                    focusOnDay(getFirstAvailableDay(1), 0);
                                }
                            }
                        }
                        else if (self.hourElement)
                            self.hourElement.focus();
                        break;
                    case 38:
                    case 40:
                        e.preventDefault();
                        var delta = e.keyCode === 40 ? 1 : -1;
                        if ((self.daysContainer && e.target.$i !== undefined) ||
                            e.target === self.input) {
                            if (e.ctrlKey) {
                                e.stopPropagation();
                                changeYear(self.currentYear - delta);
                                focusOnDay(getFirstAvailableDay(1), 0);
                            }
                            else if (!isTimeObj)
                                focusOnDay(undefined, delta * 7);
                        }
                        else if (self.config.enableTime) {
                            if (!isTimeObj && self.hourElement)
                                self.hourElement.focus();
                            updateTime(e);
                            self._debouncedChange();
                        }
                        break;
                    case 9:
                        if (isTimeObj) {
                            var elems = [
                                self.hourElement,
                                self.minuteElement,
                                self.secondElement,
                                self.amPM,
                            ].filter(function (x) { return x; });
                            var i = elems.indexOf(e.target);
                            if (i !== -1) {
                                var target = elems[i + (e.shiftKey ? -1 : 1)];
                                if (target !== undefined) {
                                    e.preventDefault();
                                    target.focus();
                                }
                                else if (e.shiftKey) {
                                    e.preventDefault();
                                    self._input.focus();
                                }
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
            if (self.amPM !== undefined && e.target === self.amPM) {
                switch (e.key) {
                    case self.l10n.amPM[0].charAt(0):
                    case self.l10n.amPM[0].charAt(0).toLowerCase():
                        self.amPM.textContent = self.l10n.amPM[0];
                        setHoursFromInputs();
                        updateValue();
                        break;
                    case self.l10n.amPM[1].charAt(0):
                    case self.l10n.amPM[1].charAt(0).toLowerCase():
                        self.amPM.textContent = self.l10n.amPM[1];
                        setHoursFromInputs();
                        updateValue();
                        break;
                }
            }
            triggerEvent("onKeyDown", e);
        }
        function onMouseOver(elem) {
            if (self.selectedDates.length !== 1 ||
                (elem &&
                    (!elem.classList.contains("flatpickr-day") ||
                        elem.classList.contains("disabled"))))
                return;
            var hoverDate = elem
                ? elem.dateObj.getTime()
                : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime()), lastDate = self.daysContainer.lastChild
                .lastChild.dateObj.getTime();
            var containsDisabled = false;
            var minRange = 0, maxRange = 0;
            for (var t = rangeStartDate; t < lastDate; t += duration.DAY) {
                if (!isEnabled(new Date(t), true)) {
                    containsDisabled =
                        containsDisabled || (t > rangeStartDate && t < rangeEndDate);
                    if (t < initialDate && (!minRange || t > minRange))
                        minRange = t;
                    else if (t > initialDate && (!maxRange || t < maxRange))
                        maxRange = t;
                }
            }
            for (var m = 0; m < self.config.showMonths; m++) {
                var month = self.daysContainer.children[m];
                var prevMonth = self.daysContainer.children[m - 1];
                var _loop_1 = function (i, l) {
                    var dayElem = month.children[i], date = dayElem.dateObj;
                    var timestamp = date.getTime();
                    var outOfRange = (minRange > 0 && timestamp < minRange) ||
                        (maxRange > 0 && timestamp > maxRange);
                    if (outOfRange) {
                        dayElem.classList.add("notAllowed");
                        ["inRange", "startRange", "endRange"].forEach(function (c) {
                            dayElem.classList.remove(c);
                        });
                        return "continue";
                    }
                    else if (containsDisabled && !outOfRange)
                        return "continue";
                    ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {
                        dayElem.classList.remove(c);
                    });
                    if (elem !== undefined) {
                        elem.classList.add(hoverDate < self.selectedDates[0].getTime()
                            ? "startRange"
                            : "endRange");
                        if (month.contains(elem) ||
                            !(m > 0 &&
                                prevMonth &&
                                prevMonth.lastChild.dateObj.getTime() >= timestamp)) {
                            if (initialDate < hoverDate && timestamp === initialDate)
                                dayElem.classList.add("startRange");
                            else if (initialDate > hoverDate && timestamp === initialDate)
                                dayElem.classList.add("endRange");
                            if (timestamp >= minRange &&
                                (maxRange === 0 || timestamp <= maxRange) &&
                                isBetween(timestamp, initialDate, hoverDate))
                                dayElem.classList.add("inRange");
                        }
                    }
                };
                for (var i = 0, l = month.children.length; i < l; i++) {
                    _loop_1(i, l);
                }
            }
        }
        function onResize() {
            if (self.isOpen && !self.config.static && !self.config.inline)
                positionCalendar();
        }
        function setDefaultTime() {
            self.setDate(self.config.minDate !== undefined
                ? new Date(self.config.minDate.getTime())
                : new Date(), false);
            setDefaultHours();
            updateValue();
        }
        function open(e, positionElement) {
            if (positionElement === void 0) { positionElement = self._positionElement; }
            if (self.isMobile === true) {
                if (e) {
                    e.preventDefault();
                    e.target && e.target.blur();
                }
                if (self.mobileInput !== undefined) {
                    self.mobileInput.focus();
                    self.mobileInput.click();
                }
                triggerEvent("onOpen");
                return;
            }
            if (self._input.disabled || self.config.inline)
                return;
            var wasOpen = self.isOpen;
            self.isOpen = true;
            if (!wasOpen) {
                self.calendarContainer.classList.add("open");
                self._input.classList.add("active");
                triggerEvent("onOpen");
                positionCalendar(positionElement);
            }
            if (self.config.enableTime === true && self.config.noCalendar === true) {
                if (self.selectedDates.length === 0) {
                    setDefaultTime();
                }
                if (self.config.allowInput === false &&
                    (e === undefined ||
                        !self.timeContainer.contains(e.relatedTarget))) {
                    setTimeout(function () { return self.hourElement.select(); }, 50);
                }
            }
        }
        function minMaxDateSetter(type) {
            return function (date) {
                var dateObj = (self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat));
                var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
                if (dateObj !== undefined) {
                    self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] =
                        dateObj.getHours() > 0 ||
                            dateObj.getMinutes() > 0 ||
                            dateObj.getSeconds() > 0;
                }
                if (self.selectedDates) {
                    self.selectedDates = self.selectedDates.filter(function (d) { return isEnabled(d); });
                    if (!self.selectedDates.length && type === "min")
                        setHoursFromDate(dateObj);
                    updateValue();
                }
                if (self.daysContainer) {
                    redraw();
                    if (dateObj !== undefined)
                        self.currentYearElement[type] = dateObj.getFullYear().toString();
                    else
                        self.currentYearElement.removeAttribute(type);
                    self.currentYearElement.disabled =
                        !!inverseDateObj &&
                            dateObj !== undefined &&
                            inverseDateObj.getFullYear() === dateObj.getFullYear();
                }
            };
        }
        function parseConfig() {
            var boolOpts = [
                "wrap",
                "weekNumbers",
                "allowInput",
                "clickOpens",
                "time_24hr",
                "enableTime",
                "noCalendar",
                "altInput",
                "shorthandCurrentMonth",
                "inline",
                "static",
                "enableSeconds",
                "disableMobile",
            ];
            var userConfig = __assign({}, instanceConfig, JSON.parse(JSON.stringify(element.dataset || {})));
            var formats = {};
            self.config.parseDate = userConfig.parseDate;
            self.config.formatDate = userConfig.formatDate;
            Object.defineProperty(self.config, "enable", {
                get: function () { return self.config._enable; },
                set: function (dates) {
                    self.config._enable = parseDateRules(dates);
                }
            });
            Object.defineProperty(self.config, "disable", {
                get: function () { return self.config._disable; },
                set: function (dates) {
                    self.config._disable = parseDateRules(dates);
                }
            });
            var timeMode = userConfig.mode === "time";
            if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
                formats.dateFormat =
                    userConfig.noCalendar || timeMode
                        ? "H:i" + (userConfig.enableSeconds ? ":S" : "")
                        : flatpickr.defaultConfig.dateFormat +
                            " H:i" +
                            (userConfig.enableSeconds ? ":S" : "");
            }
            if (userConfig.altInput &&
                (userConfig.enableTime || timeMode) &&
                !userConfig.altFormat) {
                formats.altFormat =
                    userConfig.noCalendar || timeMode
                        ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K")
                        : flatpickr.defaultConfig.altFormat +
                            (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
            }
            Object.defineProperty(self.config, "minDate", {
                get: function () { return self.config._minDate; },
                set: minMaxDateSetter("min")
            });
            Object.defineProperty(self.config, "maxDate", {
                get: function () { return self.config._maxDate; },
                set: minMaxDateSetter("max")
            });
            var minMaxTimeSetter = function (type) { return function (val) {
                self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i");
            }; };
            Object.defineProperty(self.config, "minTime", {
                get: function () { return self.config._minTime; },
                set: minMaxTimeSetter("min")
            });
            Object.defineProperty(self.config, "maxTime", {
                get: function () { return self.config._maxTime; },
                set: minMaxTimeSetter("max")
            });
            if (userConfig.mode === "time") {
                self.config.noCalendar = true;
                self.config.enableTime = true;
            }
            Object.assign(self.config, formats, userConfig);
            for (var i = 0; i < boolOpts.length; i++)
                self.config[boolOpts[i]] =
                    self.config[boolOpts[i]] === true ||
                        self.config[boolOpts[i]] === "true";
            HOOKS.filter(function (hook) { return self.config[hook] !== undefined; }).forEach(function (hook) {
                self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
            });
            self.isMobile =
                !self.config.disableMobile &&
                    !self.config.inline &&
                    self.config.mode === "single" &&
                    !self.config.disable.length &&
                    !self.config.enable.length &&
                    !self.config.weekNumbers &&
                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            for (var i = 0; i < self.config.plugins.length; i++) {
                var pluginConf = self.config.plugins[i](self) || {};
                for (var key in pluginConf) {
                    if (HOOKS.indexOf(key) > -1) {
                        self.config[key] = arrayify(pluginConf[key])
                            .map(bindToInstance)
                            .concat(self.config[key]);
                    }
                    else if (typeof userConfig[key] === "undefined")
                        self.config[key] = pluginConf[key];
                }
            }
            triggerEvent("onParseConfig");
        }
        function setupLocale() {
            if (typeof self.config.locale !== "object" &&
                typeof flatpickr.l10ns[self.config.locale] === "undefined")
                self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
            self.l10n = __assign({}, flatpickr.l10ns["default"], (typeof self.config.locale === "object"
                ? self.config.locale
                : self.config.locale !== "default"
                    ? flatpickr.l10ns[self.config.locale]
                    : undefined));
            tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
            self.formatDate = createDateFormatter(self);
            self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
        }
        function positionCalendar(customPositionElement) {
            if (self.calendarContainer === undefined)
                return;
            triggerEvent("onPreCalendarPosition");
            var positionElement = customPositionElement || self._positionElement;
            var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (function (acc, child) { return acc + child.offsetHeight; }), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" ||
                (configPosVertical !== "below" &&
                    distanceFromBottom < calendarHeight &&
                    inputBounds.top > calendarHeight);
            var top = window.pageYOffset +
                inputBounds.top +
                (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
            toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
            toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
            if (self.config.inline)
                return;
            var left = window.pageXOffset +
                inputBounds.left -
                (configPosHorizontal != null && configPosHorizontal === "center"
                    ? (calendarWidth - inputBounds.width) / 2
                    : 0);
            var right = window.document.body.offsetWidth - inputBounds.right;
            var rightMost = left + calendarWidth > window.document.body.offsetWidth;
            var centerMost = right + calendarWidth > window.document.body.offsetWidth;
            toggleClass(self.calendarContainer, "rightMost", rightMost);
            if (self.config.static)
                return;
            self.calendarContainer.style.top = top + "px";
            if (!rightMost) {
                self.calendarContainer.style.left = left + "px";
                self.calendarContainer.style.right = "auto";
            }
            else if (!centerMost) {
                self.calendarContainer.style.left = "auto";
                self.calendarContainer.style.right = right + "px";
            }
            else {
                var doc = document.styleSheets[0];
                // some testing environments don't have css support
                if (doc === undefined)
                    return;
                var bodyWidth = window.document.body.offsetWidth;
                var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
                var centerBefore = ".flatpickr-calendar.centerMost:before";
                var centerAfter = ".flatpickr-calendar.centerMost:after";
                var centerIndex = doc.cssRules.length;
                var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
                toggleClass(self.calendarContainer, "rightMost", false);
                toggleClass(self.calendarContainer, "centerMost", true);
                doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
                self.calendarContainer.style.left = centerLeft + "px";
                self.calendarContainer.style.right = "auto";
            }
        }
        function redraw() {
            if (self.config.noCalendar || self.isMobile)
                return;
            updateNavigationCurrentMonth();
            buildDays();
        }
        function focusAndClose() {
            self._input.focus();
            if (window.navigator.userAgent.indexOf("MSIE") !== -1 ||
                navigator.msMaxTouchPoints !== undefined) {
                // hack - bugs in the way IE handles focus keeps the calendar open
                setTimeout(self.close, 0);
            }
            else {
                self.close();
            }
        }
        function selectDate(e) {
            e.preventDefault();
            e.stopPropagation();
            var isSelectable = function (day) {
                return day.classList &&
                    day.classList.contains("flatpickr-day") &&
                    !day.classList.contains("disabled") &&
                    !day.classList.contains("notAllowed");
            };
            var t = findParent(e.target, isSelectable);
            if (t === undefined)
                return;
            var target = t;
            var selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));
            var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||
                selectedDate.getMonth() >
                    self.currentMonth + self.config.showMonths - 1) &&
                self.config.mode !== "range";
            self.selectedDateElem = target;
            if (self.config.mode === "single")
                self.selectedDates = [selectedDate];
            else if (self.config.mode === "multiple") {
                var selectedIndex = isDateSelected(selectedDate);
                if (selectedIndex)
                    self.selectedDates.splice(parseInt(selectedIndex), 1);
                else
                    self.selectedDates.push(selectedDate);
            }
            else if (self.config.mode === "range") {
                if (self.selectedDates.length === 2) {
                    self.clear(false, false);
                }
                self.latestSelectedDateObj = selectedDate;
                self.selectedDates.push(selectedDate);
                // unless selecting same date twice, sort ascendingly
                if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
                    self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
            }
            setHoursFromInputs();
            if (shouldChangeMonth) {
                var isNewYear = self.currentYear !== selectedDate.getFullYear();
                self.currentYear = selectedDate.getFullYear();
                self.currentMonth = selectedDate.getMonth();
                if (isNewYear)
                    triggerEvent("onYearChange");
                triggerEvent("onMonthChange");
            }
            updateNavigationCurrentMonth();
            buildDays();
            updateValue();
            if (self.config.enableTime)
                setTimeout(function () { return (self.showTimeInput = true); }, 50);
            // maintain focus
            if (!shouldChangeMonth &&
                self.config.mode !== "range" &&
                self.config.showMonths === 1)
                focusOnDayElem(target);
            else if (self.selectedDateElem !== undefined &&
                self.hourElement === undefined) {
                self.selectedDateElem && self.selectedDateElem.focus();
            }
            if (self.hourElement !== undefined)
                self.hourElement !== undefined && self.hourElement.focus();
            if (self.config.closeOnSelect) {
                var single = self.config.mode === "single" && !self.config.enableTime;
                var range = self.config.mode === "range" &&
                    self.selectedDates.length === 2 &&
                    !self.config.enableTime;
                if (single || range) {
                    focusAndClose();
                }
            }
            triggerChange();
        }
        var CALLBACKS = {
            locale: [setupLocale, updateWeekdays],
            showMonths: [buildMonths, setCalendarWidth, buildWeekdays]
        };
        function set(option, value) {
            if (option !== null && typeof option === "object")
                Object.assign(self.config, option);
            else {
                self.config[option] = value;
                if (CALLBACKS[option] !== undefined)
                    CALLBACKS[option].forEach(function (x) { return x(); });
                else if (HOOKS.indexOf(option) > -1)
                    self.config[option] = arrayify(value);
            }
            self.redraw();
            updateValue(false);
        }
        function setSelectedDate(inputDate, format) {
            var dates = [];
            if (inputDate instanceof Array)
                dates = inputDate.map(function (d) { return self.parseDate(d, format); });
            else if (inputDate instanceof Date || typeof inputDate === "number")
                dates = [self.parseDate(inputDate, format)];
            else if (typeof inputDate === "string") {
                switch (self.config.mode) {
                    case "single":
                    case "time":
                        dates = [self.parseDate(inputDate, format)];
                        break;
                    case "multiple":
                        dates = inputDate
                            .split(self.config.conjunction)
                            .map(function (date) { return self.parseDate(date, format); });
                        break;
                    case "range":
                        dates = inputDate
                            .split(self.l10n.rangeSeparator)
                            .map(function (date) { return self.parseDate(date, format); });
                        break;
                    default:
                        break;
                }
            }
            else
                self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
            self.selectedDates = dates.filter(function (d) { return d instanceof Date && isEnabled(d, false); });
            if (self.config.mode === "range")
                self.selectedDates.sort(function (a, b) { return a.getTime() - b.getTime(); });
        }
        function setDate(date, triggerChange, format) {
            if (triggerChange === void 0) { triggerChange = false; }
            if (format === void 0) { format = self.config.dateFormat; }
            if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))
                return self.clear(triggerChange);
            setSelectedDate(date, format);
            self.showTimeInput = self.selectedDates.length > 0;
            self.latestSelectedDateObj = self.selectedDates[0];
            self.redraw();
            jumpToDate();
            setHoursFromDate();
            updateValue(triggerChange);
            if (triggerChange)
                triggerEvent("onChange");
        }
        function parseDateRules(arr) {
            return arr
                .slice()
                .map(function (rule) {
                if (typeof rule === "string" ||
                    typeof rule === "number" ||
                    rule instanceof Date) {
                    return self.parseDate(rule, undefined, true);
                }
                else if (rule &&
                    typeof rule === "object" &&
                    rule.from &&
                    rule.to)
                    return {
                        from: self.parseDate(rule.from, undefined),
                        to: self.parseDate(rule.to, undefined)
                    };
                return rule;
            })
                .filter(function (x) { return x; }); // remove falsy values
        }
        function setupDates() {
            self.selectedDates = [];
            self.now = self.parseDate(self.config.now) || new Date();
            // Workaround IE11 setting placeholder as the input's value
            var preloadedDate = self.config.defaultDate ||
                ((self.input.nodeName === "INPUT" ||
                    self.input.nodeName === "TEXTAREA") &&
                    self.input.placeholder &&
                    self.input.value === self.input.placeholder
                    ? null
                    : self.input.value);
            if (preloadedDate)
                setSelectedDate(preloadedDate, self.config.dateFormat);
            self._initialDate =
                self.selectedDates.length > 0
                    ? self.selectedDates[0]
                    : self.config.minDate &&
                        self.config.minDate.getTime() > self.now.getTime()
                        ? self.config.minDate
                        : self.config.maxDate &&
                            self.config.maxDate.getTime() < self.now.getTime()
                            ? self.config.maxDate
                            : self.now;
            self.currentYear = self._initialDate.getFullYear();
            self.currentMonth = self._initialDate.getMonth();
            if (self.selectedDates.length > 0)
                self.latestSelectedDateObj = self.selectedDates[0];
            if (self.config.minTime !== undefined)
                self.config.minTime = self.parseDate(self.config.minTime, "H:i");
            if (self.config.maxTime !== undefined)
                self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
            self.minDateHasTime =
                !!self.config.minDate &&
                    (self.config.minDate.getHours() > 0 ||
                        self.config.minDate.getMinutes() > 0 ||
                        self.config.minDate.getSeconds() > 0);
            self.maxDateHasTime =
                !!self.config.maxDate &&
                    (self.config.maxDate.getHours() > 0 ||
                        self.config.maxDate.getMinutes() > 0 ||
                        self.config.maxDate.getSeconds() > 0);
            Object.defineProperty(self, "showTimeInput", {
                get: function () { return self._showTimeInput; },
                set: function (bool) {
                    self._showTimeInput = bool;
                    if (self.calendarContainer)
                        toggleClass(self.calendarContainer, "showTimeInput", bool);
                    self.isOpen && positionCalendar();
                }
            });
        }
        function setupInputs() {
            self.input = self.config.wrap
                ? element.querySelector("[data-input]")
                : element;
            /* istanbul ignore next */
            if (!self.input) {
                self.config.errorHandler(new Error("Invalid input element specified"));
                return;
            }
            // hack: store previous type to restore it after destroy()
            self.input._type = self.input.type;
            self.input.type = "text";
            self.input.classList.add("flatpickr-input");
            self._input = self.input;
            if (self.config.altInput) {
                // replicate self.element
                self.altInput = createElement(self.input.nodeName, self.input.className + " " + self.config.altInputClass);
                self._input = self.altInput;
                self.altInput.placeholder = self.input.placeholder;
                self.altInput.disabled = self.input.disabled;
                self.altInput.required = self.input.required;
                self.altInput.tabIndex = self.input.tabIndex;
                self.altInput.type = "text";
                self.input.setAttribute("type", "hidden");
                if (!self.config.static && self.input.parentNode)
                    self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
            }
            if (!self.config.allowInput)
                self._input.setAttribute("readonly", "readonly");
            self._positionElement = self.config.positionElement || self._input;
        }
        function setupMobile() {
            var inputType = self.config.enableTime
                ? self.config.noCalendar
                    ? "time"
                    : "datetime-local"
                : "date";
            self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
            self.mobileInput.step = self.input.getAttribute("step") || "any";
            self.mobileInput.tabIndex = 1;
            self.mobileInput.type = inputType;
            self.mobileInput.disabled = self.input.disabled;
            self.mobileInput.required = self.input.required;
            self.mobileInput.placeholder = self.input.placeholder;
            self.mobileFormatStr =
                inputType === "datetime-local"
                    ? "Y-m-d\\TH:i:S"
                    : inputType === "date"
                        ? "Y-m-d"
                        : "H:i:S";
            if (self.selectedDates.length > 0) {
                self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
            }
            if (self.config.minDate)
                self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
            if (self.config.maxDate)
                self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
            self.input.type = "hidden";
            if (self.altInput !== undefined)
                self.altInput.type = "hidden";
            try {
                if (self.input.parentNode)
                    self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
            }
            catch (_a) { }
            bind(self.mobileInput, "change", function (e) {
                self.setDate(e.target.value, false, self.mobileFormatStr);
                triggerEvent("onChange");
                triggerEvent("onClose");
            });
        }
        function toggle(e) {
            if (self.isOpen === true)
                return self.close();
            self.open(e);
        }
        function triggerEvent(event, data) {
            // If the instance has been destroyed already, all hooks have been removed
            if (self.config === undefined)
                return;
            var hooks = self.config[event];
            if (hooks !== undefined && hooks.length > 0) {
                for (var i = 0; hooks[i] && i < hooks.length; i++)
                    hooks[i](self.selectedDates, self.input.value, self, data);
            }
            if (event === "onChange") {
                self.input.dispatchEvent(createEvent("change"));
                // many front-end frameworks bind to the input event
                self.input.dispatchEvent(createEvent("input"));
            }
        }
        function createEvent(name) {
            var e = document.createEvent("Event");
            e.initEvent(name, true, true);
            return e;
        }
        function isDateSelected(date) {
            for (var i = 0; i < self.selectedDates.length; i++) {
                if (compareDates(self.selectedDates[i], date) === 0)
                    return "" + i;
            }
            return false;
        }
        function isDateInRange(date) {
            if (self.config.mode !== "range" || self.selectedDates.length < 2)
                return false;
            return (compareDates(date, self.selectedDates[0]) >= 0 &&
                compareDates(date, self.selectedDates[1]) <= 0);
        }
        function updateNavigationCurrentMonth() {
            if (self.config.noCalendar || self.isMobile || !self.monthNav)
                return;
            self.yearElements.forEach(function (yearElement, i) {
                var d = new Date(self.currentYear, self.currentMonth, 1);
                d.setMonth(self.currentMonth + i);
                self.monthElements[i].textContent =
                    monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) +
                        " ";
                yearElement.value = d.getFullYear().toString();
            });
            self._hidePrevMonthArrow =
                self.config.minDate !== undefined &&
                    (self.currentYear === self.config.minDate.getFullYear()
                        ? self.currentMonth <= self.config.minDate.getMonth()
                        : self.currentYear < self.config.minDate.getFullYear());
            self._hideNextMonthArrow =
                self.config.maxDate !== undefined &&
                    (self.currentYear === self.config.maxDate.getFullYear()
                        ? self.currentMonth + 1 > self.config.maxDate.getMonth()
                        : self.currentYear > self.config.maxDate.getFullYear());
        }
        function getDateStr(format) {
            return self.selectedDates
                .map(function (dObj) { return self.formatDate(dObj, format); })
                .filter(function (d, i, arr) {
                return self.config.mode !== "range" ||
                    self.config.enableTime ||
                    arr.indexOf(d) === i;
            })
                .join(self.config.mode !== "range"
                ? self.config.conjunction
                : self.l10n.rangeSeparator);
        }
        /**
         * Updates the values of inputs associated with the calendar
         */
        function updateValue(triggerChange) {
            if (triggerChange === void 0) { triggerChange = true; }
            if (self.selectedDates.length === 0)
                return self.clear(triggerChange);
            if (self.mobileInput !== undefined && self.mobileFormatStr) {
                self.mobileInput.value =
                    self.latestSelectedDateObj !== undefined
                        ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)
                        : "";
            }
            self.input.value = getDateStr(self.config.dateFormat);
            if (self.altInput !== undefined) {
                self.altInput.value = getDateStr(self.config.altFormat);
            }
            if (triggerChange !== false)
                triggerEvent("onValueUpdate");
        }
        function onMonthNavClick(e) {
            e.preventDefault();
            var isPrevMonth = self.prevMonthNav.contains(e.target);
            var isNextMonth = self.nextMonthNav.contains(e.target);
            if (isPrevMonth || isNextMonth) {
                changeMonth(isPrevMonth ? -1 : 1);
            }
            else if (self.yearElements.indexOf(e.target) >= 0) {
                e.target.select();
            }
            else if (e.target.classList.contains("arrowUp")) {
                self.changeYear(self.currentYear + 1);
            }
            else if (e.target.classList.contains("arrowDown")) {
                self.changeYear(self.currentYear - 1);
            }
        }
        function timeWrapper(e) {
            e.preventDefault();
            var isKeyDown = e.type === "keydown", input = e.target;
            if (self.amPM !== undefined && e.target === self.amPM) {
                self.amPM.textContent =
                    self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
            }
            var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta ||
                (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);
            var newValue = curValue + step * delta;
            if (typeof input.value !== "undefined" && input.value.length === 2) {
                var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
                if (newValue < min) {
                    newValue =
                        max +
                            newValue +
                            int(!isHourElem) +
                            (int(isHourElem) && int(!self.amPM));
                    if (isMinuteElem)
                        incrementNumInput(undefined, -1, self.hourElement);
                }
                else if (newValue > max) {
                    newValue =
                        input === self.hourElement ? newValue - max - int(!self.amPM) : min;
                    if (isMinuteElem)
                        incrementNumInput(undefined, 1, self.hourElement);
                }
                if (self.amPM &&
                    isHourElem &&
                    (step === 1
                        ? newValue + curValue === 23
                        : Math.abs(newValue - curValue) > step)) {
                    self.amPM.textContent =
                        self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
                }
                input.value = pad(newValue);
            }
        }
        init();
        return self;
    }
    /* istanbul ignore next */
    function _flatpickr(nodeList, config) {
        // static list
        var nodes = Array.prototype.slice
            .call(nodeList)
            .filter(function (x) { return x instanceof HTMLElement; });
        var instances = [];
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            try {
                if (node.getAttribute("data-fp-omit") !== null)
                    continue;
                if (node._flatpickr !== undefined) {
                    node._flatpickr.destroy();
                    node._flatpickr = undefined;
                }
                node._flatpickr = FlatpickrInstance(node, config || {});
                instances.push(node._flatpickr);
            }
            catch (e) {
                console.error(e);
            }
        }
        return instances.length === 1 ? instances[0] : instances;
    }
    /* istanbul ignore next */
    if (typeof HTMLElement !== "undefined") {
        // browser env
        HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
            return _flatpickr(this, config);
        };
        HTMLElement.prototype.flatpickr = function (config) {
            return _flatpickr([this], config);
        };
    }
    /* istanbul ignore next */
    var flatpickr = function (selector, config) {
        if (typeof selector === "string") {
            return _flatpickr(window.document.querySelectorAll(selector), config);
        }
        else if (selector instanceof Node) {
            return _flatpickr([selector], config);
        }
        else {
            return _flatpickr(selector, config);
        }
    };
    /* istanbul ignore next */
    flatpickr.defaultConfig = defaults;
    flatpickr.l10ns = {
        en: __assign({}, english),
        "default": __assign({}, english)
    };
    flatpickr.localize = function (l10n) {
        flatpickr.l10ns["default"] = __assign({}, flatpickr.l10ns["default"], l10n);
    };
    flatpickr.setDefaults = function (config) {
        flatpickr.defaultConfig = __assign({}, flatpickr.defaultConfig, config);
    };
    flatpickr.parseDate = createDateParser({});
    flatpickr.formatDate = createDateFormatter({});
    flatpickr.compareDates = compareDates;
    /* istanbul ignore next */
    if (typeof jQuery !== "undefined") {
        jQuery.fn.flatpickr = function (config) {
            return _flatpickr(this, config);
        };
    }
    Date.prototype.fp_incr = function (days) {
        return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
    };
    if (typeof window !== "undefined") {
        window.flatpickr = flatpickr;
    }

    return flatpickr;

});

define('skylark-formio/widgets/CalendarWidget',[
    '../vendors/flatpickr/flatpickr',
    './InputWidget',
    '../utils/utils',
    'skylark-moment',
    'skylark-lodash'
], function (Flatpickr, InputWidget, utils, moment, _) {
    'use strict';
    const DEFAULT_FORMAT = 'yyyy-MM-dd hh:mm a';
    const ISO_8601_FORMAT = 'yyyy-MM-ddTHH:mm:ssZ';
    return class CalendarWidget extends InputWidget {
        static get defaultSettings() {
            return {
                type: 'calendar',
                altInput: true,
                allowInput: true,
                clickOpens: true,
                enableDate: true,
                enableTime: true,
                mode: 'single',
                noCalendar: false,
                format: DEFAULT_FORMAT,
                dateFormat: ISO_8601_FORMAT,
                useLocaleSettings: false,
                language: 'us-en',
                hourIncrement: 1,
                minuteIncrement: 5,
                time_24hr: false,
                saveAs: 'date',
                displayInTimezone: '',
                timezone: '',
                disable: [],
                minDate: '',
                maxDate: ''
            };
        }
        constructor(settings, component) {
            super(settings, component);
            if (this.settings.noCalendar) {
                this.settings.format = this.settings.format.replace(/yyyy-MM-dd /g, '');
            }
            if (!this.settings.enableTime) {
                this.settings.format = this.settings.format.replace(/ hh:mm a$/g, '');
            } else if (this.settings.time_24hr) {
                this.settings.format = this.settings.format.replace(/hh:mm a$/g, 'HH:mm');
            }
        }
        loadZones() {
            const timezone = this.timezone;
            if (!utils.zonesLoaded() && utils.shouldLoadZones(timezone)) {
                utils.loadZones(timezone).then(() => this.emit('redraw'));
                return true;
            }
            return false;
        }
        attach(input) {
            const superAttach = super.attach(input);
            if (input && !input.getAttribute('placeholder')) {
                input.setAttribute('placeholder', this.settings.format);
            }
            const dateFormatInfo = utils.getLocaleDateFormatInfo(this.settings.language);
            this.defaultFormat = {
                date: dateFormatInfo.dayFirst ? 'd/m/Y ' : 'm/d/Y ',
                time: 'G:i K'
            };
            this.closedOn = 0;
            this.valueFormat = this.settings.dateFormat || ISO_8601_FORMAT;
            this.valueMomentFormat = utils.convertFormatToMoment(this.valueFormat);
            this.settings.minDate = utils.getDateSetting(this.settings.minDate);
            this.settings.disable = this.disabledDates;
            this.settings.disableWeekends ? this.settings.disable.push(this.disableWeekends) : '';
            this.settings.disableWeekdays ? this.settings.disable.push(this.disableWeekdays) : '';
            this.settings.disableFunction ? this.settings.disable.push(this.disableFunction) : '';
            this.settings.maxDate = utils.getDateSetting(this.settings.maxDate);
            this.settings.altFormat = utils.convertFormatToFlatpickr(this.settings.format);
            this.settings.dateFormat = utils.convertFormatToFlatpickr(this.settings.dateFormat);
            this.settings.onChange = () => this.emit('update');
            this.settings.onClose = () => {
                this.closedOn = Date.now();
                if (this.calendar) {
                    this.emit('blur');
                }
            };
            this.settings.formatDate = (date, format) => {
                if (this.settings.readOnly && format === this.settings.altFormat) {
                    if (this.settings.saveAs === 'text' || this.formatDate()) {
                        return Flatpickr.formatDate(date, format);
                    }
                    return utils.formatOffset(Flatpickr.undefined.bind(Flatpickr), date, format, this.timezone);
                }
                return Flatpickr.formatDate(date, format);
            };
            if (this._input) {
                this.calendar = new Flatpickr(this._input, this.settings);
                this.setInputMask(this.calendar._input, utils.convertFormatToMask(this.settings.format));
                this.addEventListener(this.calendar._input, 'blur', () => this.calendar.setDate(this.calendar._input.value, true, this.settings.altFormat));
            }
            return superAttach;
        }
        get disableWeekends() {
            return function (date) {
                return date.getDay() === 0 || date.getDay() === 6;
            };
        }
        get disableWeekdays() {
            return date => !this.disableWeekends(date);
        }
        get disableFunction() {
            return date => this.evaluate(`return ${ this.settings.disableFunction }`, { date });
        }
        get timezone() {
            if (this.settings.timezone) {
                return this.settings.timezone;
            }
            if (this.settings.displayInTimezone === 'submission' && this.settings.submissionTimezone) {
                return this.settings.submissionTimezone;
            }
            if (this.settings.displayInTimezone === 'utc') {
                return 'UTC';
            }
            return utils.currentTimezone();
        }
        get defaultSettings() {
            return CalendarWidget.defaultSettings;
        }
        addSuffix(suffix) {
            this.addEventListener(suffix, 'click', () => {
                if (this.calendar && !this.calendar.isOpen && Date.now() - this.closedOn > 200) {
                    this.calendar.open();
                }
            });
            return suffix;
        }
        set disabled(disabled) {
            super.disabled = disabled;
            if (this.calendar) {
                if (disabled) {
                    this.calendar._input.setAttribute('disabled', 'disabled');
                } else {
                    this.calendar._input.removeAttribute('disabled');
                }
                this.calendar.close();
                this.calendar.redraw();
            }
        }
        get input() {
            return this.calendar ? this.calendar.altInput : null;
        }
        get disabledDates() {
            if (this.settings.disabledDates) {
                const disabledDates = this.settings.disabledDates.split(',');
                return disabledDates.map(item => {
                    const dateMask = /\d{4}-\d{2}-\d{2}/g;
                    const dates = item.match(dateMask);
                    if (dates.length) {
                        return dates.length === 1 ? item.match(dateMask)[0] : {
                            from: item.match(dateMask)[0],
                            to: item.match(dateMask)[1]
                        };
                    }
                });
            }
            return [];
        }
        get localeFormat() {
            let format = '';
            if (this.settings.enableDate) {
                format += this.defaultFormat.date;
            }
            if (this.settings.enableTime) {
                format += this.defaultFormat.time;
            }
            return format;
        }
        get dateTimeFormat() {
            return this.settings.useLocaleSettings ? this.localeFormat : utils.convertFormatToFlatpickr(this.dateFormat);
        }
        get dateFormat() {
            return _.get(this.settings, 'format', DEFAULT_FORMAT);
        }
        getDateValue(date, format) {
            return moment(date).format(utils.convertFormatToMoment(format));
        }
        getValue() {
            if (!this.calendar) {
                return super.getValue();
            }
            const dates = this.calendar.selectedDates;
            if (!dates || !dates.length) {
                return super.getValue();
            }
            if (!(dates[0] instanceof Date)) {
                return 'Invalid Date';
            }
            return this.getDateValue(dates[0], this.valueFormat);
        }
        setValue(value) {
            if (!this.calendar) {
                return super.setValue(value);
            }
            if (value) {
                if (this.settings.saveAs !== 'text' && this.settings.readOnly && !this.loadZones()) {
                    this.calendar.setDate(utils.momentDate(value, this.valueFormat, this.timezone).toDate(), false);
                } else {
                    this.calendar.setDate(moment(value, this.valueMomentFormat).toDate(), false);
                }
            } else {
                this.calendar.clear(false);
            }
        }
        getValueAsString(value, format) {
            format = format || this.dateFormat;
            if (this.settings.saveAs === 'text') {
                return this.getDateValue(value, format);
            }
            return utils.formatDate(value, format, this.timezone);
        }
        validationValue(value) {
            if (typeof value === 'string') {
                return new Date(value);
            }
            return value.map(val => new Date(val));
        }
        destroy() {
            super.destroy();
            if (this.calendar) {
                this.calendar.destroy();
            }
        }
    };
});
define('skylark-formio/widgets/index',[
    './InputWidget',
    './CalendarWidget'
], function (InputWidget, CalendarWidget) {
    'use strict';
    return {
        input: InputWidget,
        calendar: CalendarWidget
    };
});
define('skylark-formio/components/_classes/input/Input',[
    "skylark-langx",
    '../multivalue/Multivalue',
    '../../../utils/utils',
    '../../../widgets/index',
    'skylark-lodash'
], function (langx,Multivalue, a, Widgets, _) {
    'use strict';
    return class Input extends Multivalue {
        constructor(component, options, data) {
            super(component, options, data);
            this.triggerUpdateValueAt = langx.debounce(this.updateValueAt.bind(this), 100);
        }
        static schema(...extend) {
            return Multivalue.schema({ widget: { type: 'input' } }, ...extend);
        }
        get inputInfo() {
            const attr = {
                name: this.options.name,
                type: this.component.inputType || 'text',
                class: 'form-control',
                lang: this.options.language
            };
            if (this.component.placeholder) {
                attr.placeholder = this.t(this.component.placeholder);
            }
            if (this.component.tabindex) {
                attr.tabindex = this.component.tabindex;
            }
            if (this.disabled) {
                attr.disabled = 'disabled';
            }
            langx.defaults(attr, this.component.attributes);
            return {
                id: this.key,
                type: 'input',
                changeEvent: 'input',
                content: '',
                attr
            };
        }
        get maskOptions() {
            return langx.map(this.component.inputMasks, mask => {
                return {
                    label: mask.label,
                    value: mask.label
                };
            });
        }
        get isMultipleMasksField() {
            return this.component.allowMultipleMasks && !!this.component.inputMasks && !!this.component.inputMasks.length;
        }
        getMaskByName(maskName) {
            const inputMask = langx.find(this.component.inputMasks, inputMask => {
                return inputMask.label === maskName;
            });
            return inputMask ? inputMask.mask : undefined;
        }
        setInputMask(input, inputMask) {
            return super.setInputMask(input, inputMask || this.component.inputMask, !this.component.placeholder);
        }
        getMaskOptions() {
            return this.component.inputMasks.map(mask => ({
                label: mask.label,
                value: mask.label
            }));
        }
        get remainingWords() {
            const maxWords = parseInt(langx.get(this.component, 'validate.maxWords'), 10); //_.parseInt
            const wordCount = langx.words(this.dataValue).length;
            return maxWords - wordCount;
        }
        renderElement(value, index) {
            if (value && typeof value === 'string') {
                value = value.replace(/"/g, '&quot;');
            }
            const info = this.inputInfo;
            info.attr = info.attr || {};
            info.attr.value = this.getValueAsString(this.formatValue(this.parseValue(value)));
            if (this.isMultipleMasksField) {
                info.attr.class += ' formio-multiple-mask-input';
            }
            if (this.component.widget && this.component.widget.type === 'calendar') {
                const calendarIcon = this.renderTemplate('icon', {
                    ref: 'icon',
                    className: this.iconClass(this.component.enableDate || this.component.widget.enableDate ? 'calendar' : 'time'),
                    styles: '',
                    content: ''
                }).trim();
                if (this.component.prefix !== calendarIcon) {
                    this.component.suffix = calendarIcon;
                }
            }
            return this.isMultipleMasksField ? this.renderTemplate('multipleMasksInput', {
                input: info,
                value,
                index,
                selectOptions: this.getMaskOptions() || []
            }) : this.renderTemplate('input', {
                input: info,
                value: this.formatValue(this.parseValue(value)),
                index
            });
        }
        setCounter(type, element, count, max) {
            if (max) {
                const remaining = max - count;
                if (remaining > 0) {
                    this.removeClass(element, 'text-danger');
                } else {
                    this.addClass(element, 'text-danger');
                }
                this.setContent(element, this.t(`{{ remaining }} ${ type } remaining.`, { remaining: remaining }));
            } else {
                this.setContent(element, this.t(`{{ count }} ${ type }`, { count: count }));
            }
        }
        updateValueAt(value, flags, index) {
            flags = flags || {};
            if (langx.get(this.component, 'showWordCount', false)) {
                if (this.refs.wordcount && this.refs.wordcount[index]) {
                    const maxWords = parseInt(langx.get(this.component, 'validate.maxWords', 0), 10);//_.parseInt
                    this.setCounter('words', this.refs.wordcount[index], langx.words(value).length, maxWords);
                }
            }
            if (langx.get(this.component, 'showCharCount', false)) {
                if (this.refs.charcount && this.refs.charcount[index]) {
                    const maxChars = parseInt(langx.get(this.component, 'validate.maxLength', 0), 10); //_.parseInt
                    this.setCounter('characters', this.refs.charcount[index], value.length, maxChars);
                }
            }
        }
        getValueAt(index) {
            const input = this.performInputMapping(this.refs.input[index]);
            if (input && input.widget) {
                return input.widget.getValue();
            }
            return input ? input.value : undefined;
        }
        updateValue(value, flags, index) {
            flags = flags || {};
            const changed = super.updateValue(value, flags);
            this.triggerUpdateValueAt(this.dataValue, flags, index);
            return changed;
        }
        parseValue(value) {
            return value;
        }
        formatValue(value) {
            return value;
        }
        attach(element) {
            this.loadRefs(element, {
                charcount: 'multiple',
                wordcount: 'multiple',
                prefix: 'multiple',
                suffix: 'multiple'
            });
            return super.attach(element);
        }
        getWidget(index) {
            index = index || 0;
            if (this.refs.input && this.refs.input[index]) {
                return this.refs.input[index].widget;
            }
            return null;
        }
        getValueAsString(value) {
            return super.getValueAsString(this.getWidgetValueAsString(value));
        }
        attachElement(element, index) {
            super.attachElement(element, index);
            if (element.widget) {
                element.widget.destroy();
            }
            element.widget = this.createWidget(index);
            if (element.widget) {
                element.widget.attach(element);
                if (this.refs.prefix && this.refs.prefix[index]) {
                    element.widget.addPrefix(this.refs.prefix[index]);
                }
                if (this.refs.suffix && this.refs.suffix[index]) {
                    element.widget.addSuffix(this.refs.suffix[index]);
                }
            }
            this.addFocusBlurEvents(element);
            if (this.options.submitOnEnter) {
                this.addEventListener(element, 'keypress', event => {
                    const key = event.keyCode || event.which;
                    if (key === 13) {
                        event.preventDefault();
                        event.stopPropagation();
                        this.emit('submitButton');
                    }
                });
            }
        }
        createWidget(index) {
            if (!this.component.widget) {
                return null;
            }
            const settings = typeof this.component.widget === 'string' ? { type: this.component.widget } : this.component.widget;
            if (!Widgets.hasOwnProperty(settings.type)) {
                return null;
            }
            const widget = new Widgets[settings.type](settings, this.component);
            widget.on('update', () => this.updateValue(widget.getValue(), { modified: true }, index), true);
            widget.on('redraw', () => this.redraw(), true);
            return widget;
        }
        detach() {
            super.detach();
            if (this.refs && this.refs.input) {
                for (let i = 0; i <= this.refs.input.length; i++) {
                    const widget = this.getWidget(i);
                    if (widget) {
                        widget.destroy();
                    }
                }
            }
        }
        addFocusBlurEvents(element) {
            this.addEventListener(element, 'focus', () => {
                if (this.root.focusedComponent !== this) {
                    if (this.root.pendingBlur) {
                        this.root.pendingBlur();
                    }
                    this.root.focusedComponent = this;
                    this.emit('focus', this);
                } else if (this.root.focusedComponent === this && this.root.pendingBlur) {
                    this.root.pendingBlur.cancel();
                    this.root.pendingBlur = null;
                }
            });
            this.addEventListener(element, 'blur', () => {
                this.root.pendingBlur = a.delay(() => {
                    this.emit('blur', this);
                    if (this.component.validateOn === 'blur') {
                        this.root.triggerChange({}, {
                            instance: this,
                            component: this.component,
                            value: this.dataValue,
                            flags: {}
                        });
                    }
                    this.root.focusedComponent = null;
                    this.root.pendingBlur = null;
                });
            });
        }
    };
});
define('skylark-formio/components/button/Button',[
    'skylark-lodash',
    '../_classes/field/Field',
    '../_classes/input/Input',
    '../../utils/utils'
], function (_, Field, Input, a) {
    'use strict';
    return class ButtonComponent extends Field {
        static schema(...extend) {
            return Input.schema({
                type: 'button',
                label: 'Submit',
                key: 'submit',
                size: 'md',
                leftIcon: '',
                rightIcon: '',
                block: false,
                action: 'submit',
                persistent: false,
                disableOnInvalid: false,
                theme: 'primary',
                dataGridLabel: true
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Button',
                group: 'basic',
                icon: 'stop',
                documentation: 'http://help.form.io/userguide/#button',
                weight: 110,
                schema: ButtonComponent.schema()
            };
        }
        get defaultSchema() {
            return ButtonComponent.schema();
        }
        get inputInfo() {
            const info = super.elementInfo();
            info.type = 'button';
            info.attr.type = [
                'submit',
                'saveState'
            ].includes(this.component.action) ? 'submit' : 'button';
            this.component.theme = this.component.theme || 'default';
            info.attr.class = `btn btn-${ this.component.theme }`;
            if (this.component.size) {
                info.attr.class += ` btn-${ this.component.size }`;
            }
            if (this.component.block) {
                info.attr.class += ' btn-block';
            }
            if (this.component.customClass) {
                info.attr.class += ` ${ this.component.customClass }`;
            }
            info.content = this.t(this.component.label);
            return info;
        }
        get labelInfo() {
            return { hidden: true };
        }
        set loading(loading) {
            this.setLoading(this.refs.button, loading);
        }
        createLabel() {
        }
        createInput(container) {
            this.refs.button = super.createInput(container);
            return this.refs.button;
        }
        get emptyValue() {
            return false;
        }
        getValue() {
            return this.dataValue;
        }
        get clicked() {
            return this.dataValue;
        }
        get defaultValue() {
            return false;
        }
        get className() {
            let className = super.className;
            className += ' form-group';
            return className;
        }
        render() {
            if (this.viewOnly || this.options.hideButtons) {
                this._visible = false;
            }
            return super.render(this.renderTemplate('button', {
                component: this.component,
                input: this.inputInfo
            }));
        }
        attachButton() {
            this.addShortcut(this.refs.button);
            let onChange = null;
            let onError = null;
            if (this.component.action === 'submit') {
                this.on('submitButton', () => {
                    this.disabled = true;
                }, true);
                this.on('submitDone', () => {
                    this.loading = false;
                    this.disabled = false;
                    this.addClass(this.refs.button, 'btn-success submit-success');
                    this.removeClass(this.refs.button, 'btn-danger submit-fail');
                    this.addClass(this.refs.buttonMessageContainer, 'has-success');
                    this.removeClass(this.refs.buttonMessageContainer, 'has-error');
                    this.setContent(this.refs.buttonMessage, this.t('complete'));
                }, true);
                this.on('submitError', () => {
                    this.loading = false;
                    this.disabled = false;
                    this.removeClass(this.refs.button, 'btn-success submit-success');
                    this.addClass(this.refs.button, 'btn-danger submit-fail');
                    this.removeClass(this.refs.buttonMessageContainer, 'has-success');
                    this.addClass(this.refs.buttonMessageContainer, 'has-error');
                    this.setContent(this.refs.buttonMessage, this.t(this.errorMessage('error')));
                }, true);
                onChange = (value, isValid) => {
                    this.removeClass(this.refs.button, 'btn-success submit-success');
                    this.removeClass(this.refs.button, 'btn-danger submit-fail');
                    if (isValid && this.hasError) {
                        this.hasError = false;
                        this.setContent(this.refs.buttonMessage, '');
                        this.removeClass(this.refs.buttonMessageContainer, 'has-success');
                        this.removeClass(this.refs.buttonMessageContainer, 'has-error');
                    }
                };
                onError = () => {
                    this.hasError = true;
                    this.removeClass(this.refs.button, 'btn-success submit-success');
                    this.addClass(this.refs.button, 'btn-danger submit-fail');
                    this.removeClass(this.refs.buttonMessageContainer, 'has-success');
                    this.addClass(this.refs.buttonMessageContainer, 'has-error');
                    this.setContent(this.refs.buttonMessage, this.t(this.errorMessage('error')));
                };
            }
            if (this.component.action === 'url') {
                this.on('requestButton', () => {
                    this.disabled = true;
                }, true);
                this.on('requestDone', () => {
                    this.loading = false;
                    this.disabled = false;
                }, true);
            }
            this.on('change', (value, flags) => {
                const isValid = flags && flags.noValidate ? this.root ? this.root.checkValidity(this.root.data) : true : value.isValid;
                this.loading = false;
                this.disabled = this.shouldDisabled || this.component.disableOnInvalid && !isValid;
                this.setDisabled(this.refs.button, this.disabled);
                if (onChange) {
                    onChange(value, isValid);
                }
            }, true);
            this.on('error', () => {
                this.loading = false;
                this.disabled = false;
                if (onError) {
                    onError();
                }
            }, true);
            this.addEventListener(this.refs.button, 'click', this.onClick.bind(this));
            this.disabled = this.shouldDisabled;
            function getUrlParameter(name) {
                name = name.replace(/[[]/, '\\[').replace(/[\]]/, '\\]');
                const regex = new RegExp(`[\\?&]${ name }=([^&#]*)`);
                const results = regex.exec(location.search);
                if (!results) {
                    return results;
                }
                return decodeURIComponent(results[1].replace(/\+/g, ' '));
            }
            if (this.component.action === 'oauth' && this.component.oauth && this.component.oauth.authURI) {
                const iss = getUrlParameter('iss');
                if (iss && this.component.oauth.authURI.indexOf(iss) === 0) {
                    this.openOauth();
                }
            }
        }
        attach(element) {
            this.loadRefs(element, {
                button: 'single',
                buttonMessageContainer: 'single',
                buttonMessage: 'single'
            });
            const superAttach = super.attach(element);
            this.attachButton();
            return superAttach;
        }
        detach(element) {
            if (element && this.refs.button) {
                this.removeShortcut(this.refs.button);
            }
        }
        onClick(event) {
            this.triggerReCaptcha();
            if (this.disabled || this.options.attachMode === 'builder') {
                return;
            }
            this.dataValue = true;
            if (this.component.action !== 'submit' && this.component.showValidations) {
                this.emit('checkValidity', this.data);
            }
            switch (this.component.action) {
            case 'saveState':
            case 'submit':
                event.preventDefault();
                event.stopPropagation();
                this.loading = true;
                this.emit('submitButton', {
                    state: this.component.state || 'submitted',
                    component: this.component,
                    instance: this
                });
                break;
            case 'event':
                this.emit(this.interpolate(this.component.event), this.data);
                this.events.emit(this.interpolate(this.component.event), this.data);
                this.emit('customEvent', {
                    type: this.interpolate(this.component.event),
                    component: this.component,
                    data: this.data,
                    event: event
                });
                break;
            case 'custom': {
                    const form = this.getRoot();
                    const flattened = a.flattenComponents(form.component.components, true);
                    const components = {};
                    _.each(flattened, (component, key) => {
                        const element = form.getComponent(key);
                        if (element) {
                            components[key] = element;
                        }
                    });
                    this.evaluate(this.component.custom, {
                        form,
                        flattened,
                        components
                    });
                    break;
                }
            case 'url':
                this.loading = true;
                this.emit('requestButton', {
                    component: this.component,
                    instance: this
                });
                this.emit('requestUrl', {
                    url: this.interpolate(this.component.url),
                    headers: this.component.headers
                });
                break;
            case 'reset':
                this.emit('resetForm');
                break;
            case 'delete':
                this.emit('deleteSubmission');
                break;
            case 'oauth':
                if (this.root === this) {
                    console.warn('You must add the OAuth button to a form for it to function properly');
                    return;
                }
                if (!this.component.oauth) {
                    this.root.setAlert('danger', 'You must assign this button to an OAuth action before it will work.');
                    break;
                }
                if (this.component.oauth.error) {
                    this.root.setAlert('danger', `The Following Error Has Occured${ this.component.oauth.error }`);
                    break;
                }
                this.openOauth(this.component.oauth);
                break;
            }
        }
        openOauth() {
            if (!this.root.formio) {
                console.warn('You must attach a Form API url to your form in order to use OAuth buttons.');
                return;
            }
            const settings = this.component.oauth;
            let params = {
                response_type: 'code',
                client_id: settings.clientId,
                redirect_uri: window.location.origin || `${ window.location.protocol }//${ window.location.host }`,
                state: settings.state,
                scope: settings.scope
            };
            if (settings.display) {
                params.display = settings.display;
            }
            params = Object.keys(params).map(key => {
                return `${ key }=${ encodeURIComponent(params[key]) }`;
            }).join('&');
            const url = `${ settings.authURI }?${ params }`;
            const popup = window.open(url, settings.provider, 'width=1020,height=618');
            const interval = setInterval(() => {
                try {
                    const popupHost = popup.location.host;
                    const currentHost = window.location.host;
                    if (popup && !popup.closed && popupHost === currentHost && popup.location.search) {
                        popup.close();
                        const params = popup.location.search.substr(1).split('&').reduce((params, param) => {
                            const split = param.split('=');
                            params[split[0]] = split[1];
                            return params;
                        }, {});
                        if (params.error) {
                            alert(params.error_description || params.error);
                            this.root.setAlert('danger', params.error_description || params.error);
                            return;
                        }
                        if (settings.state !== params.state) {
                            this.root.setAlert('danger', 'OAuth state does not match. Please try logging in again.');
                            return;
                        }
                        const submission = {
                            data: {},
                            oauth: {}
                        };
                        submission.oauth[settings.provider] = params;
                        submission.oauth[settings.provider].redirectURI = window.location.origin || `${ window.location.protocol }//${ window.location.host }`;
                        this.root.formio.saveSubmission(submission).then(result => {
                            this.root.onSubmit(result, true);
                        }).catch(err => {
                            this.root.onSubmissionError(err);
                        });
                    }
                } catch (error) {
                    if (error.name !== 'SecurityError') {
                        this.root.setAlert('danger', error.message || error);
                    }
                }
                if (!popup || popup.closed || popup.closed === undefined) {
                    clearInterval(interval);
                }
            }, 100);
        }
        focus() {
            if (this.refs.button) {
                this.refs.button.focus();
            }
        }
        triggerReCaptcha() {
            if (!this.root) {
                return;
            }
            const recaptchaComponent = this.root.components.find(component => {
                return component.component.type === 'recaptcha' && component.component.eventType === 'buttonClick' && component.component.buttonKey === this.component.key;
            });
            if (recaptchaComponent) {
                recaptchaComponent.verify(`${ this.component.key }Click`);
            }
        }
    };
});
define('skylark-formio/components/checkbox/Checkbox',['../_classes/field/Field'], function (Field) {
    'use strict';
    return class CheckBoxComponent extends Field {
        static schema(...extend) {
            return Field.schema({
                type: 'checkbox',
                inputType: 'checkbox',
                label: 'Checkbox',
                key: 'checkbox',
                dataGridLabel: true,
                labelPosition: 'right',
                value: '',
                name: ''
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Checkbox',
                group: 'basic',
                icon: 'check-square',
                documentation: 'http://help.form.io/userguide/#checkbox',
                weight: 50,
                schema: CheckBoxComponent.schema()
            };
        }
        get defaultSchema() {
            return CheckBoxComponent.schema();
        }
        get defaultValue() {
            return this.component.name ? '' : (this.component.defaultValue || false).toString() === 'true';
        }
        get labelClass() {
            let className = '';
            if (this.isInputComponent && !this.options.inputsOnly && this.component.validate && this.component.validate.required) {
                className += ' field-required';
            }
            return `${ className }`;
        }
        get hasSetValue() {
            return this.hasValue();
        }
        get inputInfo() {
            const info = super.elementInfo();
            info.type = 'input';
            info.changeEvent = 'click';
            info.attr.type = this.component.inputType || 'checkbox';
            info.attr.class = 'form-check-input';
            if (this.component.name) {
                info.attr.name = `data[${ this.component.name }]`;
            }
            info.attr.value = this.component.value ? this.component.value : 0;
            info.label = this.t(this.component.label);
            info.labelClass = this.labelClass;
            return info;
        }
        get labelInfo() {
            return { hidden: true };
        }
        render() {
            return super.render(this.renderTemplate('checkbox', {
                input: this.inputInfo,
                checked: this.dataValue,
                tooltip: this.interpolate(this.t(this.component.tooltip) || '').replace(/(?:\r\n|\r|\n)/g, '<br />')
            }));
        }
        attach(element) {
            this.loadRefs(element, { input: 'multiple' });
            this.input = this.refs.input[0];
            if (this.refs.input) {
                this.addEventListener(this.input, this.inputInfo.changeEvent, () => this.updateValue(null, { modified: true }));
                this.addShortcut(this.input);
            }
            return super.attach(element);
        }
        detach(element) {
            if (element && this.input) {
                this.removeShortcut(this.input);
            }
        }
        get emptyValue() {
            return false;
        }
        isEmpty(value = this.dataValue) {
            return super.isEmpty(value) || value === false;
        }
        get key() {
            return this.component.name ? this.component.name : super.key;
        }
        getValueAt(index) {
            if (this.component.name) {
                return this.refs.input[index].checked ? this.component.value : '';
            }
            return !!this.refs.input[index].checked;
        }
        getValue() {
            const value = super.getValue();
            if (this.component.name) {
                return value ? this.setCheckedState(value) : this.setCheckedState(this.dataValue);
            } else {
                return value === '' ? this.dataValue : !!value;
            }
        }
        setCheckedState(value) {
            if (!this.input) {
                return;
            }
            if (this.component.name) {
                this.input.value = value === this.component.value ? this.component.value : 0;
                this.input.checked = value === this.component.value ? 1 : 0;
            } else if (value === 'on') {
                this.input.value = 1;
                this.input.checked = 1;
            } else if (value === 'off') {
                this.input.value = 0;
                this.input.checked = 0;
            } else if (value) {
                this.input.value = 1;
                this.input.checked = 1;
            } else {
                this.input.value = 0;
                this.input.checked = 0;
            }
            if (this.input.checked) {
                this.input.setAttribute('checked', true);
            } else {
                this.input.removeAttribute('checked');
            }
            return value;
        }
        setValue(value, flags = {}) {
            if (this.setCheckedState(value) !== undefined || !this.input && value !== undefined && (this.visible || !this.component.clearOnHide)) {
                return this.updateValue(value, flags);
            }
            return false;
        }
        getValueAsString(value) {
            return value ? 'Yes' : 'No';
        }
    };
});
define('skylark-formio/components/columns/Columns',[
    'skylark-lodash',
    '../_classes/nested/NestedComponent'
], function (_, NestedComponent) {
    'use strict';
    return class ColumnsComponent extends NestedComponent {
        static schema(...extend) {
            return NestedComponent.schema({
                label: 'Columns',
                key: 'columns',
                type: 'columns',
                columns: [
                    {
                        components: [],
                        width: 6,
                        offset: 0,
                        push: 0,
                        pull: 0,
                        size: 'md'
                    },
                    {
                        components: [],
                        width: 6,
                        offset: 0,
                        push: 0,
                        pull: 0,
                        size: 'md'
                    }
                ],
                clearOnHide: false,
                input: false,
                tableView: false,
                persistent: false,
                autoAdjust: false,
                hideOnChildrenHidden: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Columns',
                icon: 'columns',
                group: 'layout',
                documentation: 'http://help.form.io/userguide/#columns',
                weight: 10,
                schema: ColumnsComponent.schema()
            };
        }
        constructor(component, options, data) {
            super(component, options, data);
            this.rows = [];
        }
        get schema() {
            const schema = _.omit(super.schema, ['components']);
            schema.columns.map((column, colIndex) => {
                column.components.map((comp, compIndex) => {
                    const clonedComp = _.clone(comp);
                    clonedComp.internal = true;
                    const component = this.createComponent(clonedComp);
                    delete component.component.internal;
                    schema.columns[colIndex].components[compIndex] = component.schema;
                });
            });
            return schema;
        }
        get defaultSchema() {
            return ColumnsComponent.schema();
        }
        get className() {
            return `row ${ super.className }`;
        }
        get columnKey() {
            return `column-${ this.id }`;
        }
        init() {
            super.init();
            this.columns = [];
            _.each(this.component.columns, (column, index) => {
                this.columns[index] = [];
                if (!column.size) {
                    column.size = 'md';
                }
                if (!Array.isArray(column.components)) {
                    column.components = [];
                }
                _.each(column.components, comp => {
                    comp.hideOnChildrenHidden = this.component.hideOnChildrenHidden;
                    const component = this.createComponent(comp);
                    component.column = index;
                    this.columns[index].push(component);
                });
            });
            this.rows = this.groupByRow();
        }
        labelIsHidden() {
            return true;
        }
        render() {
            return super.render(this.renderTemplate('columns', {
                columnKey: this.columnKey,
                columnComponents: this.columns.map(column => this.renderComponents(column))
            }));
        }
        attach(element) {
            this.loadRefs(element, { [this.columnKey]: 'multiple' });
            const superAttach = super.attach(element);
            this.refs[this.columnKey].forEach((column, index) => this.attachComponents(column, this.columns[index], this.component.columns[index].components));
            return superAttach;
        }
        get gridSize() {
            return 12;
        }
        justifyRow(columns) {
            const visible = _.filter(columns, 'visible');
            const nbColumns = columns.length;
            const nbVisible = visible.length;
            if (nbColumns > 0 && nbVisible > 0) {
                const w = Math.floor(this.gridSize / nbVisible);
                const totalWidth = w * nbVisible;
                const span = this.gridSize - totalWidth;
                _.each(visible, column => {
                    column.component.width = w;
                });
                _.last(visible).component.width += span;
                _.each(visible, col => {
                    if (col.element) {
                        col.element.setAttribute('class', col.className);
                    }
                });
            }
        }
        groupByRow() {
            const initVal = {
                stack: [],
                rows: []
            };
            const width = x => x.component.width;
            const result = _.reduce(this.components, (acc, next) => {
                const stack = [
                    ...acc.stack,
                    next
                ];
                if (_.sumBy(stack, width) <= this.gridSize) {
                    acc.stack = stack;
                    return acc;
                } else {
                    acc.rows = [
                        ...acc.rows,
                        acc.stack
                    ];
                    acc.stack = [next];
                    return acc;
                }
            }, initVal);
            return _.concat(result.rows, [result.stack]);
        }
        justify() {
            _.each(this.columns, this.justifyRow.bind(this));
        }
        checkComponentConditions(data, flags, row) {
            if (this.component.autoAdjust) {
                const result = super.checkComponentConditions(data, flags, row);
                this.justify();
                return result;
            } else {
                return super.checkComponentConditions(data, flags, row);
            }
        }
        detach(all) {
            super.detach(all);
        }
        destroy() {
            super.destroy();
            this.columns = [];
        }
    };
});
define('skylark-formio/components/content/Content',[
    '../_classes/component/Component',
    'skylark-lodash'
], function (Component, _) {
    'use strict';
    return class ContentComponent extends Component {
        static schema(...extend) {
            return Component.schema({
                label: 'Content',
                type: 'content',
                key: 'content',
                input: false,
                html: ''
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Content',
                group: 'layout',
                icon: 'html5',
                preview: false,
                documentation: 'http://help.form.io/userguide/#content-component',
                weight: 5,
                schema: ContentComponent.schema()
            };
        }
        get defaultSchema() {
            return ContentComponent.schema();
        }
        get content() {
            if (this.builderMode) {
                return this.component.html;
            }
            const submission = _.get(this.root, 'submission', {});
            return this.component.html ? this.interpolate(this.component.html, {
                metadata: submission.metadata || {},
                submission: submission,
                data: this.rootValue,
                row: this.data
            }) : '';
        }
        render() {
            return super.render(this.renderTemplate('html', {
                tag: 'div',
                attrs: [],
                content: this.content
            }));
        }
        attach(element) {
            this.loadRefs(element, { html: 'single' });
            if (this.component.refreshOnChange) {
                this.on('change', () => {
                    if (this.refs.html) {
                        this.setContent(this.refs.html, this.content);
                    }
                }, true);
            }
            return super.attach(element);
        }
        get emptyValue() {
            return '';
        }
    };
});
define('skylark-formio/vendors/text-mask-addons/createAutoCorrectedDatePipe',[],function(){
  const maxValueMonth = [31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  const formatOrder = ['yyyy', 'yy', 'mm', 'dd', 'HH', 'MM', 'SS']
  function createAutoCorrectedDatePipe(dateFormat = 'mm dd yyyy', {
    minYear = 1,
    maxYear = 9999
  } = {}) {
    const dateFormatArray = dateFormat
      .split(/[^dmyHMS]+/)
      .sort((a, b) => formatOrder.indexOf(a) - formatOrder.indexOf(b))
    return function(conformedValue) {
      const indexesOfPipedChars = []
      const maxValue = {'dd': 31, 'mm': 12, 'yy': 99, 'yyyy': maxYear, 'HH': 23, 'MM': 59, 'SS': 59}
      const minValue = {'dd': 1, 'mm': 1, 'yy': 0, 'yyyy': minYear, 'HH': 0, 'MM': 0, 'SS': 0}
      const conformedValueArr = conformedValue.split('')

      // Check first digit
      dateFormatArray.forEach((format) => {
        const position = dateFormat.indexOf(format)
        const maxFirstDigit = parseInt(maxValue[format].toString().substr(0, 1), 10)

        if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {
          conformedValueArr[position + 1] = conformedValueArr[position]
          conformedValueArr[position] = 0
          indexesOfPipedChars.push(position)
        }
      })

      // Check for invalid date
      let month = 0
      const isInvalid = dateFormatArray.some((format) => {
        const position = dateFormat.indexOf(format)
        const length = format.length
        const textValue = conformedValue.substr(position, length).replace(/\D/g, '')
        const value = parseInt(textValue, 10)
        if (format === 'mm') {
          month = value || 0
        }
        const maxValueForFormat = format === 'dd' ? maxValueMonth[month] : maxValue[format]
        if (format === 'yyyy' && (minYear !== 1 || maxYear !== 9999)) {
          const scopedMaxValue = parseInt(maxValue[format].toString().substring(0, textValue.length), 10)
          const scopedMinValue = parseInt(minValue[format].toString().substring(0, textValue.length), 10)
          return value < scopedMinValue || value > scopedMaxValue
        }
        return value > maxValueForFormat || (textValue.length === length && value < minValue[format])
      })

      if (isInvalid) {
        return false
      }

      return {
        value: conformedValueArr.join(''),
        indexesOfPipedChars
      }
    }
  }

  return createAutoCorrectedDatePipe;
});


define('skylark-formio/vendors/text-mask-addons/createNumberMask',[],function(){
  const dollarSign = '$'
  const emptyString = ''
  const comma = ','
  const period = '.'
  const minus = '-'
  const minusRegExp = /-/
  const nonDigitsRegExp = /\D+/g
  const number = 'number'
  const digitRegExp = /\d/
  const caretTrap = '[]'

  function createNumberMask({
    prefix = dollarSign,
    suffix = emptyString,
    includeThousandsSeparator = true,
    thousandsSeparatorSymbol = comma,
    allowDecimal = false,
    decimalSymbol = period,
    decimalLimit = 2,
    requireDecimal = false,
    allowNegative = false,
    allowLeadingZeroes = false,
    integerLimit = null
  } = {}) {
    const prefixLength = prefix && prefix.length || 0
    const suffixLength = suffix && suffix.length || 0
    const thousandsSeparatorSymbolLength = thousandsSeparatorSymbol && thousandsSeparatorSymbol.length || 0

    function numberMask(rawValue = emptyString) {
      const rawValueLength = rawValue.length

      if (
        rawValue === emptyString ||
        (rawValue[0] === prefix[0] && rawValueLength === 1)
      ) {
        return prefix.split(emptyString).concat([digitRegExp]).concat(suffix.split(emptyString))
      } else if(
        rawValue === decimalSymbol &&
        allowDecimal
      ) {
        return prefix.split(emptyString).concat(['0', decimalSymbol, digitRegExp]).concat(suffix.split(emptyString))
      }

      const isNegative = (rawValue[0] === minus) && allowNegative
      //If negative remove "-" sign
      if(isNegative) {
        rawValue = rawValue.toString().substr(1)
      }

      const indexOfLastDecimal = rawValue.lastIndexOf(decimalSymbol)
      const hasDecimal = indexOfLastDecimal !== -1

      let integer
      let fraction
      let mask

      // remove the suffix
      if (rawValue.slice(suffixLength * -1) === suffix) {
        rawValue = rawValue.slice(0, suffixLength * -1)
      }

      if (hasDecimal && (allowDecimal || requireDecimal)) {
        integer = rawValue.slice(rawValue.slice(0, prefixLength) === prefix ? prefixLength : 0, indexOfLastDecimal)

        fraction = rawValue.slice(indexOfLastDecimal + 1, rawValueLength)
        fraction = convertToMask(fraction.replace(nonDigitsRegExp, emptyString))
      } else {
        if (rawValue.slice(0, prefixLength) === prefix) {
          integer = rawValue.slice(prefixLength)
        } else {
          integer = rawValue
        }
      }

      if (integerLimit && typeof integerLimit === number) {
        const thousandsSeparatorRegex = thousandsSeparatorSymbol === '.' ? '[.]' : `${thousandsSeparatorSymbol}`
        const numberOfThousandSeparators = (integer.match(new RegExp(thousandsSeparatorRegex, 'g')) || []).length

        integer = integer.slice(0, integerLimit + (numberOfThousandSeparators * thousandsSeparatorSymbolLength))
      }

      integer = integer.replace(nonDigitsRegExp, emptyString)

      if (!allowLeadingZeroes) {
        integer = integer.replace(/^0+(0$|[^0])/, '$1')
      }

      integer = (includeThousandsSeparator) ? addThousandsSeparator(integer, thousandsSeparatorSymbol) : integer

      mask = convertToMask(integer)

      if ((hasDecimal && allowDecimal) || requireDecimal === true) {
        if (rawValue[indexOfLastDecimal - 1] !== decimalSymbol) {
          mask.push(caretTrap)
        }

        mask.push(decimalSymbol, caretTrap)

        if (fraction) {
          if (typeof decimalLimit === number) {
            fraction = fraction.slice(0, decimalLimit)
          }

          mask = mask.concat(fraction)
        }

        if (requireDecimal === true && rawValue[indexOfLastDecimal - 1] === decimalSymbol) {
          mask.push(digitRegExp)
        }
      }

      if (prefixLength > 0) {
        mask = prefix.split(emptyString).concat(mask)
      }

      if (isNegative) {
        // If user is entering a negative number, add a mask placeholder spot to attract the caret to it.
        if (mask.length === prefixLength) {
          mask.push(digitRegExp)
        }

        mask = [minusRegExp].concat(mask)
      }

      if (suffix.length > 0) {
        mask = mask.concat(suffix.split(emptyString))
      }

      return mask
    }

    numberMask.instanceOf = 'createNumberMask'

    return numberMask
  }

  function convertToMask(strNumber) {
    return strNumber
      .split(emptyString)
      .map((char) => digitRegExp.test(char) ? digitRegExp : char)
  }

  // http://stackoverflow.com/a/10899795/604296
  function addThousandsSeparator(n, thousandsSeparatorSymbol) {
    return n.replace(/\B(?=(\d{3})+(?!\d))/g, thousandsSeparatorSymbol)
  }

  return createNumberMask;

});


define('skylark-formio/vendors/text-mask-addons/emailPipe',[],function(){
  const atSymbol = '@'
  const allAtSymbolsRegExp = /@/g
  const emptyString = ''
  const atDot = '@.'
  const dot = '.'
  const dotDot = '..'
  const emptyArray = []
  const allDotsRegExp = /\./g

  function emailPipe(conformedValue, config) {
    const {currentCaretPosition, rawValue, previousConformedValue, placeholderChar} = config

    let value = conformedValue

    value = removeAllAtSymbolsButFirst(value)

    const indexOfAtDot = value.indexOf(atDot)

    const emptyEmail = rawValue.match(new RegExp(`[^@\\s.${placeholderChar}]`)) === null

    if (emptyEmail) {
      return emptyString
    }

    if (
      value.indexOf(dotDot) !== -1 ||
      indexOfAtDot !== -1 && currentCaretPosition !== (indexOfAtDot + 1) ||
      rawValue.indexOf(atSymbol) === -1 && previousConformedValue !== emptyString && rawValue.indexOf(dot) !== -1
    ) {
      return false
    }

    const indexOfAtSymbol = value.indexOf(atSymbol)
    const domainPart = value.slice(indexOfAtSymbol + 1, value.length)

    if (
      (domainPart.match(allDotsRegExp) || emptyArray).length > 1 &&
      value.substr(-1) === dot &&
      currentCaretPosition !== rawValue.length
    ) {
      value = value.slice(0, value.length - 1)
    }

    return value
  }

  function removeAllAtSymbolsButFirst(str) {
    let atSymbolCount = 0

    return str.replace(allAtSymbolsRegExp, () => {
      atSymbolCount++

      return (atSymbolCount === 1) ? atSymbol : emptyString
    })
  }

  return emailPipe;
});


define('skylark-formio/vendors/text-mask-addons/emailMask',['./emailPipe'],function(emailPipe){
  const asterisk = '*'
  const dot = '.'
  const emptyString = ''
  const atSymbol = '@'
  const caretTrap = '[]'
  const space = ' '
  const g = 'g'
  const anyNonWhitespaceRegExp = /[^\s]/
  const anyNonDotOrWhitespaceRegExp = /[^.\s]/
  const allWhitespaceRegExp = /\s/g

  function emailMask(rawValue, config) {
    rawValue = rawValue.replace(allWhitespaceRegExp, emptyString)

    const {placeholderChar, currentCaretPosition} = config
    const indexOfFirstAtSymbol = rawValue.indexOf(atSymbol)
    const indexOfLastDot = rawValue.lastIndexOf(dot)
    const indexOfTopLevelDomainDot = (indexOfLastDot < indexOfFirstAtSymbol) ? -1 : indexOfLastDot

    let localPartToDomainConnector = getConnector(rawValue, indexOfFirstAtSymbol + 1, atSymbol)
    let domainNameToTopLevelDomainConnector = getConnector(rawValue, indexOfTopLevelDomainDot - 1, dot)

    let localPart = getLocalPart(rawValue, indexOfFirstAtSymbol, placeholderChar)
    let domainName = getDomainName(rawValue, indexOfFirstAtSymbol, indexOfTopLevelDomainDot, placeholderChar)
    let topLevelDomain = getTopLevelDomain(rawValue, indexOfTopLevelDomainDot, placeholderChar, currentCaretPosition)

    localPart = convertToMask(localPart)
    domainName = convertToMask(domainName)
    topLevelDomain = convertToMask(topLevelDomain, true)

    const mask = localPart
      .concat(localPartToDomainConnector)
      .concat(domainName)
      .concat(domainNameToTopLevelDomainConnector)
      .concat(topLevelDomain)

    return mask
  }

  function getConnector(rawValue, indexOfConnection, connectionSymbol) {
    const connector = []

    if (rawValue[indexOfConnection] === connectionSymbol) {
      connector.push(connectionSymbol)
    } else {
      connector.push(caretTrap, connectionSymbol)
    }

    connector.push(caretTrap)

    return connector
  }

  function getLocalPart(rawValue, indexOfFirstAtSymbol) {
    if (indexOfFirstAtSymbol === -1) {
      return rawValue
    } else {
      return rawValue.slice(0, indexOfFirstAtSymbol)
    }
  }

  function getDomainName(rawValue, indexOfFirstAtSymbol, indexOfTopLevelDomainDot, placeholderChar) {
    let domainName = emptyString

    if (indexOfFirstAtSymbol !== -1) {
      if (indexOfTopLevelDomainDot === -1) {
        domainName = rawValue.slice(indexOfFirstAtSymbol + 1, rawValue.length)
      } else {
        domainName = rawValue.slice(indexOfFirstAtSymbol + 1, indexOfTopLevelDomainDot)
      }
    }

    domainName = domainName.replace(new RegExp(`[\\s${placeholderChar}]`, g), emptyString)

    if (domainName === atSymbol) {
      return asterisk
    } else if (domainName.length < 1) {
      return space
    } else if (domainName[domainName.length - 1] === dot) {
      return domainName.slice(0, domainName.length - 1)
    } else {
      return domainName
    }
  }

  function getTopLevelDomain(rawValue, indexOfTopLevelDomainDot, placeholderChar, currentCaretPosition) {
    let topLevelDomain = emptyString

    if (indexOfTopLevelDomainDot !== -1) {
      topLevelDomain = rawValue.slice(indexOfTopLevelDomainDot + 1, rawValue.length)
    }

    topLevelDomain = topLevelDomain.replace(new RegExp(`[\\s${placeholderChar}.]`, g), emptyString)

    if (topLevelDomain.length === 0) {
      return (rawValue[indexOfTopLevelDomainDot - 1] === dot && currentCaretPosition !== rawValue.length) ?
        asterisk :
        emptyString
    } else {
      return topLevelDomain
    }
  }

  function convertToMask(str, noDots) {
    return str
      .split(emptyString)
      .map((char) => char === space ? char : (noDots) ? anyNonDotOrWhitespaceRegExp : anyNonWhitespaceRegExp)
  }

  return emailMask;
});


define('skylark-formio/vendors/text-mask-addons/index',[
	'./createAutoCorrectedDatePipe',
	'./createNumberMask',
	'./emailMask',
],function(createAutoCorrectedDatePipe,createNumberMask,emailMask){
	return {
		createAutoCorrectedDatePipe,
		createNumberMask,
		emailMask
	};
})
;
define('skylark-formio/components/number/Number',[
    '../../vendors/vanilla-text-mask/maskInput',
    '../../vendors/vanilla-text-mask/conformToMask',
    'skylark-lodash',
    '../../vendors/text-mask-addons/index',
    '../_classes/input/Input',
    '../../utils/utils'
], function (maskInput,conformToMask, _, maskAddons, Input, utils) {
    'use strict';
    return class NumberComponent extends Input {
        static schema(...extend) {
            return Input.schema({
                type: 'number',
                label: 'Number',
                key: 'number',
                validate: {
                    min: '',
                    max: '',
                    step: 'any',
                    integer: ''
                }
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Number',
                icon: 'hashtag',
                group: 'basic',
                documentation: 'http://help.form.io/userguide/#number',
                weight: 30,
                schema: NumberComponent.schema()
            };
        }
        constructor(...args) {
            super(...args);
            this.validators = this.validators.concat([
                'min',
                'max'
            ]);
            const separators = utils.getNumberSeparators(this.options.language);
            this.decimalSeparator = this.options.decimalSeparator = this.options.decimalSeparator || separators.decimalSeparator;
            if (this.component.delimiter) {
                if (this.options.hasOwnProperty('thousandsSeparator')) {
                    console.warn("Property 'thousandsSeparator' is deprecated. Please use i18n to specify delimiter.");
                }
                this.delimiter = this.options.thousandsSeparator || separators.delimiter;
            } else {
                this.delimiter = '';
            }
            const requireDecimal = _.get(this.component, 'requireDecimal', false);
            this.decimalLimit = utils.getNumberDecimalLimit(this.component, requireDecimal ? 2 : 20);
            if (_.has(this.options, `languageOverride.${ this.options.language }`)) {
                const override = _.get(this.options, `languageOverride.${ this.options.language }`);
                this.decimalSeparator = override.decimalSeparator;
                this.delimiter = override.delimiter;
            }
            this.numberMask = this.createNumberMask();
        }
        createNumberMask() {
            return maskAddons.createNumberMask({
                prefix: '',
                suffix: '',
                requireDecimal: _.get(this.component, 'requireDecimal', false),
                thousandsSeparatorSymbol: _.get(this.component, 'thousandsSeparator', this.delimiter),
                decimalSymbol: _.get(this.component, 'decimalSymbol', this.decimalSeparator),
                decimalLimit: _.get(this.component, 'decimalLimit', this.decimalLimit),
                allowNegative: _.get(this.component, 'allowNegative', true),
                allowDecimal: _.get(this.component, 'allowDecimal', !(this.component.validate && this.component.validate.integer))
            });
        }
        get defaultSchema() {
            return NumberComponent.schema();
        }
        get defaultValue() {
            let defaultValue = super.defaultValue;
            if (!defaultValue && this.component.defaultValue === 0) {
                defaultValue = this.component.defaultValue;
            }
            return defaultValue;
        }
        parseNumber(value) {
            value = value.split(this.delimiter).join('').replace(this.decimalSeparator, '.');
            if (this.component.validate && this.component.validate.integer) {
                return parseInt(value, 10);
            } else {
                return parseFloat(value);
            }
        }
        setInputMask(input) {
            let numberPattern = '[0-9';
            numberPattern += this.decimalSeparator || '';
            numberPattern += this.delimiter || '';
            numberPattern += ']*';
            input.setAttribute('pattern', numberPattern);
            input.mask = maskInput({
                inputElement: input,
                mask: this.numberMask
            });
        }
        get inputInfo() {
            const info = super.inputInfo;
            if (this.component.mask) {
                info.attr.type = 'password';
            } else {
                info.attr.type = 'text';
            }
            info.attr.inputmode = 'numeric';
            info.changeEvent = 'input';
            return info;
        }
        getValueAt(index) {
            if (!this.refs.input.length || !this.refs.input[index]) {
                return null;
            }
            const val = this.refs.input[index].value;
            return val ? this.parseNumber(val) : null;
        }
        setValueAt(index, value, flags = {}) {
            return super.setValueAt(index, this.formatValue(this.parseValue(value)), flags);
        }
        parseValue(input) {
            let value = parseFloat(input);
            if (!_.isNaN(value)) {
                value = String(value).replace('.', this.decimalSeparator);
            } else {
                value = null;
            }
            return value;
        }
        formatValue(value) {
            if (this.component.requireDecimal && value && !value.includes(this.decimalSeparator)) {
                return `${ value }${ this.decimalSeparator }${ _.repeat('0', this.decimalLimit) }`;
            } else if (this.component.requireDecimal && value && value.includes(this.decimalSeparator)) {
                return `${ value }${ _.repeat('0', this.decimalLimit - value.split(this.decimalSeparator)[1].length) }`;
            }
            return value;
        }
        focus() {
            const input = this.refs.input[0];
            if (input) {
                input.focus();
                input.setSelectionRange(0, input.value.length);
            }
        }
        getMaskedValue(value) {
            return conformToMask(value === null ? '0' : value.toString(), this.numberMask).conformedValue;
        }
        getValueAsString(value) {
            if (!value && value !== 0) {
                return '';
            }
            value = this.getWidgetValueAsString(value);
            if (Array.isArray(value)) {
                return value.map(this.getMaskedValue).join(', ');
            }
            return this.getMaskedValue(value);
        }
        addFocusBlurEvents(element) {
            super.addFocusBlurEvents(element);
            this.addEventListener(element, 'blur', () => {
                element.value = this.getValueAsString(this.formatValue(this.parseValue(this.dataValue)));
            });
        }
    };
});
define('skylark-formio/components/currency/Currency',[
    "skylark-langx",
    '../../vendors/text-mask-addons/index',
    'skylark-lodash',
    '../../utils/utils',
    '../number/Number'
], function (langx,textMasks, _, utils, NumberComponent) {
    'use strict';
    return class CurrencyComponent extends NumberComponent {
        static schema(...extend) {
            return NumberComponent.schema({
                type: 'currency',
                label: 'Currency',
                key: 'currency'
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Currency',
                group: 'advanced',
                icon: 'usd',
                documentation: 'http://help.form.io/userguide/#currency',
                weight: 70,
                schema: CurrencyComponent.schema()
            };
        }
        constructor(component, options, data) {
            if (component && !component.hasOwnProperty('delimiter')) {
                component.delimiter = true;
            }
            super(component, options, data);
        }
        createNumberMask() {
            const decimalLimit = langx.get(this.component, 'decimalLimit', 2);
            const affixes = utils.getCurrencyAffixes({
                currency: this.component.currency,
                decimalLimit: decimalLimit,
                decimalSeparator: this.decimalSeparator,
                lang: this.options.language
            });
            this.prefix = this.options.prefix || affixes.prefix;
            this.suffix = this.options.suffix || affixes.suffix;
            return textMasks.createNumberMask({
                prefix: this.prefix,
                suffix: this.suffix,
                thousandsSeparatorSymbol: langx.get(this.component, 'thousandsSeparator', this.delimiter),
                decimalSymbol: langx.get(this.component, 'decimalSymbol', this.decimalSeparator),
                decimalLimit: decimalLimit,
                allowNegative: langx.get(this.component, 'allowNegative', true),
                allowDecimal: langx.get(this.component, 'allowDecimal', true)
            });
        }
        get defaultSchema() {
            return CurrencyComponent.schema();
        }
        parseNumber(value) {
            return super.parseNumber(this.stripPrefixSuffix(value));
        }
        parseValue(value) {
            return super.parseValue(this.stripPrefixSuffix(value));
        }
        addZerosAndFormatValue(value) {
            if (!value && value !== 0)
                return;
            const decimalLimit = langx.get(this.component, 'decimalLimit', 2);
            let integerPart;
            let decimalPart = '';
            let decimalPartNumbers = [];
            if (value.includes(this.decimalSeparator)) {
                [integerPart, decimalPart] = value.split(this.decimalSeparator);
                decimalPartNumbers = [...decimalPart.split('')];
            } else {
                integerPart = value;
            }
            if (decimalPart.length < decimalLimit) {
                while (decimalPartNumbers.length < decimalLimit) {
                    decimalPartNumbers.push('0');
                }
            }
            const formattedValue = `${ integerPart }${ this.decimalSeparator }${ decimalPartNumbers.join('') }`;
            return super.formatValue(formattedValue);
        }
        getValueAsString(value) {
            const stringValue = super.getValueAsString(value);
            if (value || value == '0') {
                return this.addZerosAndFormatValue(stringValue);
            }
            return stringValue;
        }
        formatValue(value) {
            if (value && this.disabled) {
                return this.addZerosAndFormatValue(value);
            }
            return super.formatValue(value);
        }
        stripPrefixSuffix(value) {
            if (typeof value === 'string') {
                try {
                    const hasPrefix = this.prefix ? value.includes(this.prefix) : false;
                    const hasSuffix = this.suffix ? value.includes(this.suffix) : false;
                    const hasDelimiter = value.includes(this.delimiter);
                    const hasDecimalSeparator = value.includes(this.decimalSeparator);
                    if (this.prefix) {
                        value = value.replace(this.prefix, '');
                    }
                    if (this.suffix) {
                        value = value.replace(this.suffix, '');
                    }
                    if ((hasPrefix || hasSuffix) && !hasDelimiter && !hasDecimalSeparator && (Number.isNaN(+value) || !value)) {
                        value = '0';
                    }
                } catch (err) {
                }
            }
            return value;
        }
        addFocusBlurEvents(element) {
            super.addFocusBlurEvents(element);
            this.addEventListener(element, 'blur', () => {
                element.value = this.getValueAsString(this.addZerosAndFormatValue(this.parseValue(this.dataValue)));
            });
        }
    };
});
define('skylark-devices-points/points',[
	"skylark-langx-ns"
],function(skylark){
	return skylark.attach("devices.points",{});
});
define('skylark-devices-points/mouse',[
	"./points"
],function(points){
	/**
	 * Function: isMouseEvent
	 * 
	 * Returns true if the event was generated using a mouse (not a pen or touch device).
	 */
	function isMouseEvent(evt) 	{
		return (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===
			evt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?
				evt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);
	}
	
	/**
	 * Function: isLeftMouseButton
	 * 
	 * Returns true if the left mouse button is pressed for the given event.
	 * To check if a button is pressed during a mouseMove you should use the
	 * <mxGraph.isMouseDown> property. Note that this returns true in Firefox
	 * for control+left-click on the Mac.
	 */
	function isLeftMouseButton(evt) {
		// Special case for mousemove and mousedown we check the buttons
		// if it exists because which is 0 even if no button is pressed
		if ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))
		{
			return evt.buttons == 1;
		}
		else if ('which' in evt)
		{
	        return evt.which === 1;
	    }
		else
		{
	        return evt.button === 1;
	    }
	}
	
	/**
	 * Function: isMiddleMouseButton
	 * 
	 * Returns true if the middle mouse button is pressed for the given event.
	 * To check if a button is pressed during a mouseMove you should use the
	 * <mxGraph.isMouseDown> property.
	 */
	function isMiddleMouseButton(evt) {
		if ('which' in evt)
		{
	        return evt.which === 2;
	    }
		else
		{
	        return evt.button === 4;
	    }
	}
	
	/**
	 * Function: isRightMouseButton
	 * 
	 * Returns true if the right mouse button was pressed. Note that this
	 * button might not be available on some systems. For handling a popup
	 * trigger <isPopupTrigger> should be used.
	 */
	function isRightMouseButton(evt){
		if ('which' in evt)
		{
	        return evt.which === 3;
	    }
		else
		{
	        return evt.button === 2;
	    }
	}

  /**
   * @summary Gets the event name for mouse wheel
   * @returns {string}
   */
  function mouseWheelEvent() {
    return 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support "wheel"
      document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least "mousewheel"
        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox
  };

  /**
   * @summary Normalize mousewheel values accross browsers
   * @description From Facebook's Fixed Data Table
   * {@link https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js}
   * @copyright Facebook
   * @param {MouseWheelEvent} event
   * @returns {{spinX: number, spinY: number, pixelX: number, pixelY: number}}
   */
  function normalizeWheel(event) {
    var PIXEL_STEP  = 10;
    var LINE_HEIGHT = 40;
    var PAGE_HEIGHT = 800;

    var sX = 0, sY = 0; // spinX, spinY
    var pX = 0, pY = 0; // pixelX, pixelY

    // Legacy
    if ('detail'      in event) { sY = event.detail; }
    if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }
    if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }
    if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }

    // side scrolling on FF with DOMMouseScroll
    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }

    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;

    if ('deltaY' in event) { pY = event.deltaY; }
    if ('deltaX' in event) { pX = event.deltaX; }

    if ((pX || pY) && event.deltaMode) {
      if (event.deltaMode === 1) { // delta in LINE units
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      }
      else {                      // delta in PAGE units
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    }

    // Fall-back if spin cannot be determined
    if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }
    if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }

    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  };

	return points.mouse = {
		mouseWheelEvent,
		normalizeWheel,

		isMouseEvent,
		isLeftMouseButton,
		isMiddleMouseButton,
		isRightMouseButton
	};
});
define('skylark-devices-points/touch',[
	"./points"
],function(points){

  /**
   * @summary Detects if the user is using a touch screen
   * @returns {Promise<boolean>}
   */
   function isTouchEnabled () {
    return new Promise(function(resolve) {
      var listener = function(e) {
        if (e) {
          resolve(true);
        }
        else {
          resolve(false);
        }

        window.removeEventListener('touchstart', listener);
      };

      window.addEventListener('touchstart', listener, false);

      // after 10 secs auto-reject the promise
      setTimeout(listener, 10000);
    });
  };


  /*
   * Converts single-touch event to mouse event.
   */
  function mousy(elm) {
    var touchToMouse = function(event) {
        if (event.touches.length > 1) return; //allow default multi-touch gestures to work
        var touch = event.changedTouches[0];
        var type = "";
        
        switch (event.type) {
        case "touchstart": 
            type = "mousedown"; break;
        case "touchmove":  
            type="mousemove";   break;
        case "touchend":   
            type="mouseup";     break;
        default: 
            return;
        }
        
        // https://developer.mozilla.org/en/DOM/event.initMouseEvent for API
        var simulatedEvent = document.createEvent("MouseEvent");
        simulatedEvent.initMouseEvent(type, true, true, window, 1, 
                touch.screenX, touch.screenY, 
                touch.clientX, touch.clientY, false, 
                false, false, false, 0, null);
        
        touch.target.dispatchEvent(simulatedEvent);
        event.preventDefault();
    };

    elm = elm || document;

    elm.addEventListener("touchstart",touchToMouse,true);
    elm.addEventListener("touchmove",touchToMouse,true);
    elm.addEventListener("touchend",touchToMouse,true);
  }

  return points.touch = {
  	isTouchEnabled,
    mousy
  };
	
});
define('skylark-langx-scripter/scripter',[
    "skylark-langx/skylark",
    "skylark-langx"
], function(skylark, langx) {

    var head = document.getElementsByTagName('head')[0],
        scriptsByUrl = {},
        scriptElementsById = {},
        count = 0;

    function scripter() {
        return scripter;
    }


    var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
    };

    function evaluate(code,node, doc ) {
        doc = doc || document;

        var i, val,
            script = doc.createElement("script");

        script.text = code;
        if ( node ) {
            for ( i in preservedScriptAttributes ) {

                // Support: Firefox 64+, Edge 18+
                // Some browsers don't support the "nonce" property on scripts.
                // On the other hand, just using `getAttribute` is not enough as
                // the `nonce` attribute is reset to an empty string whenever it
                // becomes browsing-context connected.
                // See https://github.com/whatwg/html/issues/2369
                // See https://html.spec.whatwg.org/#nonce-attributes
                // The `node.getAttribute` check was added for the sake of
                // `jQuery.globalEval` so that it can fake a nonce-containing node
                // via an object.
                val = node[ i ] || node.getAttribute && node.getAttribute( i );
                if ( val ) {
                    script.setAttribute( i, val );
                }
            }
        }
        doc.head.appendChild( script ).parentNode.removeChild( script );

        return this;
    }

    langx.mixin(scripter, {
        /*
         * Load a script from a url into the document.
         * @param {} url
         * @param {} loadedCallback
         * @param {} errorCallback
         */
        loadJavaScript: function(url, loadedCallback, errorCallback) {
            var script = scriptsByUrl[url];
            if (!script) {
                script = scriptsByUrl[url] = {
                    state: 0, //0:unload,1:loaded,-1:loaderror
                    loadedCallbacks: [],
                    errorCallbacks: []
                }
            }

            script.loadedCallbacks.push(loadedCallback);
            script.errorCallbacks.push(errorCallback);

            if (script.state === 1) {
                script.node.onload();
            } else if (script.state === -1) {
                script.node.onerror();
            } else {
                var node = script.node = document.createElement("script"),
                    id = script.id = (count++);

                node.type = "text/javascript";
                node.async = false;
                node.defer = false;
                startTime = new Date().getTime();
                head.appendChild(node);

                node.onload = function() {
                        script.state = 1;

                        var callbacks = script.loadedCallbacks,
                            i = callbacks.length;

                        while (i--) {
                            callbacks[i]();
                        }
                        script.loadedCallbacks = [];
                        script.errorCallbacks = [];
                    },
                    node.onerror = function() {
                        script.state = -1;
                        var callbacks = script.errorCallbacks,
                            i = callbacks.length;

                        while (i--) {
                            callbacks[i]();
                        }
                        script.loadedCallbacks = [];
                        script.errorCallbacks = [];
                    };
                node.src = url;

                scriptElementsById[id] = node;
            }
            return script.id;
        },
        /*
         * Remove the specified script from the document.
         * @param {Number} id
         */
        deleteJavaScript: function(id) {
            var node = scriptElementsById[id];
            if (node) {
                var url = node.src;
                if (node.parentNode) {
                    node.parentNode.remove(node);
                }
                delete scriptElementsById[id];
                delete scriptsByUrl[url];
            }
        },

        evaluate : evaluate,

        loadScript : function(url) {
            var d = new langx.Deferred();

            d.promise.scriptId = this.loadJavaScript(url,function(){
                d.resolve();
            },function(e){
                d.reject(e);
            });

            return d.promise;
        }


    });

    return skylark.attach("langx.scripter", scripter);
});
define('skylark-langx-scripter/main',[
	"./scripter"
],function(scripter){
	
	return scripter;
});
define('skylark-langx-scripter', ['skylark-langx-scripter/main'], function (main) { return main; });

define('skylark-domx-browser/browser',[
    "skylark-langx/skylark",
    "skylark-langx/langx"
], function(skylark,langx) {
    "use strict";

    var browser = langx.hoster.browser;


    langx.mixin(browser, {

        isIE : !!/msie/i.exec( window.navigator.userAgent ),

        location: function() {
            return window.location;
        },

        support : {

        }

    });



    return skylark.attach("domx.browser",browser);
});

define('skylark-domx-browser/support/css3',[
    "skylark-langx/langx",
    "../browser"
], function(langx,browser) {
    "use strict";

    var checkedCssProperties = {
            "transitionproperty": "TransitionProperty",
        },
        transEndEventNames = {
          WebkitTransition : 'webkitTransitionEnd',
          MozTransition    : 'transitionend',
          OTransition      : 'oTransitionEnd otransitionend',
          transition       : 'transitionend'
        },
        transEndEventName = null;


    var css3PropPrefix = "",
        css3StylePrefix = "",
        css3EventPrefix = "",

        cssStyles = {},
        cssProps = {},

        vendorPrefix,
        vendorPrefixRE,
        vendorPrefixesRE = /^(Webkit|webkit|O|Moz|moz|ms)(.*)$/,

        document = window.document,
        testEl = document.createElement("div"),

        matchesSelector = testEl.webkitMatchesSelector ||
                          testEl.mozMatchesSelector ||
                          testEl.oMatchesSelector ||
                          testEl.matchesSelector,

        testStyle = testEl.style;

    for (var name in testStyle) {
        var matched = name.match(vendorPrefixRE || vendorPrefixesRE);
        if (matched) {
            if (!vendorPrefixRE) {
                vendorPrefix = matched[1];
                vendorPrefixRE = new RegExp("^(" + vendorPrefix + ")(.*)$");

                css3StylePrefix = vendorPrefix;
                css3PropPrefix = '-' + vendorPrefix.toLowerCase() + '-';
                css3EventPrefix = vendorPrefix.toLowerCase();
            }

            cssStyles[langx.lowerFirst(matched[2])] = name;
            var cssPropName = langx.dasherize(matched[2]);
            cssProps[cssPropName] = css3PropPrefix + cssPropName;

            if (transEndEventNames[name]) {
              transEndEventName = transEndEventNames[name];
            }
        }
    }

    if (!transEndEventName) {
        if (testStyle["transition"] !== undefined) {
            transEndEventName = transEndEventNames["transition"];
        }
    }

    function normalizeCssEvent(name) {
        return css3EventPrefix ? css3EventPrefix + name : name.toLowerCase();
    }

    function normalizeCssProperty(name) {
        return cssProps[name] || name;
    }

    function normalizeStyleProperty(name) {
        return cssStyles[name] || name;
    }


    var css3 = {

        normalizeStyleProperty: normalizeStyleProperty,

        normalizeCssProperty: normalizeCssProperty,

        normalizeCssEvent: normalizeCssEvent,

        matchesSelector: matchesSelector        
    };

    langx.mixin(browser,css3);

    browser.css3PropPrefix = css3.propPrefix =  css3PropPrefix;

    if  (transEndEventName) {
        browser.support.transition = css3.transition = {
            end : transEndEventName
        };
    }

    browser.support.cssPointerEvents = css3.pointerEvents =  (function() {
        testEl.style.cssText = 'pointer-events:auto';
        return testEl.style.pointerEvents === 'auto';
    })(),




    testEl = null;

    return browser.support.css3 = css3;
});

define('skylark-domx-browser/support/fullscreen',[
    "../browser"
],function(browser){

    const FullscreenApi = { 
        prefixed: true 
    };

    const apiMap = [
        [
            'requestFullscreen',
            'exitFullscreen',
            'fullscreenElement',
            'fullscreenEnabled',
            'fullscreenchange',
            'fullscreenerror',
            'fullscreen'
        ],
        [
            'webkitRequestFullscreen',
            'webkitExitFullscreen',
            'webkitFullscreenElement',
            'webkitFullscreenEnabled',
            'webkitfullscreenchange',
            'webkitfullscreenerror',
            '-webkit-full-screen'
        ],
        [
            'mozRequestFullScreen',
            'mozCancelFullScreen',
            'mozFullScreenElement',
            'mozFullScreenEnabled',
            'mozfullscreenchange',
            'mozfullscreenerror',
            '-moz-full-screen'
        ],
        [
            'msRequestFullscreen',
            'msExitFullscreen',
            'msFullscreenElement',
            'msFullscreenEnabled',
            'MSFullscreenChange',
            'MSFullscreenError',
            '-ms-fullscreen'
        ]
    ];
    const specApi = apiMap[0];
    let browserApi;
    for (let i = 0; i < apiMap.length; i++) {
        if (apiMap[i][1] in document) {
            browserApi = apiMap[i];
            break;
        }
    }
    if (browserApi) {
        for (let i = 0; i < browserApi.length; i++) {
            FullscreenApi[specApi[i]] = browserApi[i];
        }
        FullscreenApi.prefixed = browserApi[0] !== specApi[0];

        browser.requestFullscreen = function() {
            return document.body[FullscreenApi["requestFullscreen"]].apply(this,arguments);
        };
        browser.exitFullscreen = function() {
            return document[FullscreenApi["exitFullscreen"]].apply(this,arguments);
        };

        browser.support.fullscreen = FullscreenApi;
    } else {
        browser.support.fullscreen = null;
    }

    return browser.support.fullscreen;
});
define('skylark-domx-browser/support/touch',[
	"../browser"
],function(browser){

    function supportTouch() {
        return !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch);
    }

    return browser.support.tocuh = supportTouch();
});
define('skylark-domx-browser/main',[
	"./browser",
	"./support/css3",
	"./support/fullscreen",
	"./support/touch"
],function(browser){
	return browser;
});
define('skylark-domx-browser', ['skylark-domx-browser/main'], function (main) { return main; });

define('skylark-domx-noder/noder',[
    "skylark-langx-ns",
    "skylark-langx-types",
    "skylark-langx-arrays",
    "skylark-langx-strings",
    "skylark-langx-scripter",
    "skylark-domx-browser"
], function(skylark, types, arrays, strings,scripter,browser) {
    var  
        map = Array.prototype.map,
        slice = Array.prototype.slice;


    /**
     * Generate id
     * @param   {HTMLElement} el
     * @returns {String}
     * @private
     */
    function generateId(el) {
        var str = el.tagName + el.className + el.src + el.href + el.textContent,
            i = str.length,
            sum = 0;

        while (i--) {
            sum += str.charCodeAt(i);
        }

        return sum.toString(36);
    }


    function noder() {
        return noder;
    }

    Object.assign(noder, {


        blur : function(el) {
            el.blur();
        },


        generateId
    });

    return skylark.attach("domx.noder" , noder);
});
define('skylark-domx-noder/active',[
	"./noder"
],function(noder){

    function activeElement(doc) {
        doc = doc || document;
        var el;

        // Support: IE 9 only
        // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
        try {
            el = doc.activeElement;
        } catch ( error ) {
            el = doc.body;
        }

        // Support: IE 9 - 11 only
        // IE may return null instead of an element
        // Interestingly, this only seems to occur when NOT in an iframe
        if ( !el ) {
            el = doc.body;
        }

        // Support: IE 11 only
        // IE11 returns a seemingly empty object in some cases when accessing
        // document.activeElement from an <iframe>
        if ( !el.nodeName ) {
            el = doc.body;
        }

        return el;
    };
	return noder.active = activeElement;
});
define('skylark-domx-noder/_enhance_place_content',[
    "skylark-langx-types",
    "skylark-langx-arrays",
	"./noder"
],function(types,arrays,noder){
    function enhancePlaceContent(placing,node) {
        if (types.isFunction(placing)) {
            return placing.apply(node,[]);
        }
        if (types.isArrayLike(placing)) {
            var neddsFlattern;
            for (var i=0;i<placing.length;i++) {
                if (types.isFunction(placing[i])) {
                    placing[i] = placing[i].apply(node,[]);
                    if (types.isArrayLike(placing[i])) {
                        neddsFlattern = true;
                    }
                }
            }
            if (neddsFlattern) {
                placing = arrays.flatten(placing);
            }
        }
        return placing;
    }

	return enhancePlaceContent;
});
define('skylark-domx-noder/is-element',[
	"./noder"
],function(noder){
 
    function isElement(node) {
        return node && node.nodeType === 1;
    }

	
	return noder.isElement = isElement;
});
define('skylark-domx-noder/is-text-node',[
	"./noder"
],function(noder){
 
    function isTextNode(node) {
        return node && node.nodeType === 3;
    }

	
	return noder.isTextNode = isTextNode;
});
define('skylark-domx-noder/is-fragment',[
	"./noder"
],function(noder){
 
    function isFragment(node) {
        return node && node.nodeType === 11;
    }

	return noder.isFragment = isFragment;
});
define('skylark-domx-noder/_normalize_content',[
    "skylark-langx-types",
	"./noder",
    "./is-element",
    "./is-text-node",
    "./is-fragment"
],function(types,noder,isElement,isTextNode,isFragment){
    var  
        map = Array.prototype.map;
        
    function normalizeContent(content) {
        if (typeof content === 'function') {
            content = content();
        }
        return map.call(types.isArrayLike(content) ? content : [content],value => {
            if (typeof value === 'function') {
                value = value();
            }
            if (isElement(value) || isTextNode(value) || isFragment(value)) {
                return value;
            }
            if (typeof value === 'string' && /\S/.test(value)) {
                return document.createTextNode(value);
            }
        }).filter(value => value);
    }

	return normalizeContent;
});
define('skylark-domx-noder/_ensure_nodes',[
    "skylark-langx-arrays",
	"./noder",
    "./_normalize_content"
],function(arrays,noder,normalizeContent){
    var  
        map = Array.prototype.map;

    function ensureNodes(content, copyByClone) {
        var nodes = normalizeContent(content);


        //if (!types.isArrayLike(nodes)) {
        //    nodes = [nodes];
        //}
        if (copyByClone) {
            nodes = map.call(nodes, function(node) {
                return node.cloneNode(true);
            });
        }
        return arrays.flatten(nodes);
    }

	return ensureNodes;
});
define('skylark-domx-noder/after',[
	"./noder",
    "./_enhance_place_content",
    "./_ensure_nodes"
],function(noder,enhancePlaceContent,ensureNodes){
 
    function after(node, placing, copyByClone) {
        placing = enhancePlaceContent(placing,node);
        var refNode = node,
            parent = refNode.parentNode;
        if (parent) {
            var nodes = ensureNodes(placing, copyByClone),
                refNode = refNode.nextSibling;

            for (var i = 0; i < nodes.length; i++) {
                if (refNode) {
                    parent.insertBefore(nodes[i], refNode);
                } else {
                    parent.appendChild(nodes[i]);
                }
            }
        }
        return this;
    }

	
	return noder.after = after;
});
define('skylark-domx-noder/append',[
    "./noder",
    "./_enhance_place_content",
    "./_ensure_nodes"
],function(noder,enhancePlaceContent,ensureNodes){
 
    function append(node, placing, copyByClone) {
        placing = enhancePlaceContent(placing,node);
        var parentNode = node,
            nodes = ensureNodes(placing, copyByClone);
        for (var i = 0; i < nodes.length; i++) {
            parentNode.appendChild(nodes[i]);
        }
        return this;
    }
    
    return noder.append = append;
});
define('skylark-domx-noder/before',[
    "./noder",
    "./_enhance_place_content",
    "./_ensure_nodes"
],function(noder,enhancePlaceContent,ensureNodes){
 

    function before(node, placing, copyByClone) {
        placing = enhancePlaceContent(placing,node);
        var refNode = node,
            parent = refNode.parentNode;
        if (parent) {
            var nodes = ensureNodes(placing, copyByClone);
            for (var i = 0; i < nodes.length; i++) {
                parent.insertBefore(nodes[i], refNode);
            }
        }
        return this;
    }

	
	return noder.before = before;
});
define('skylark-domx-noder/body',[
	"./noder"
],function(noder){
	function body() {
		return  document.body;
	}
	
	return noder.body = body;
});
define('skylark-domx-noder/clone',[
	"./noder"
],function(noder){
 
    /*   
     * Create a deep copy of the set of matched elements.
     * @param {HTMLElement} node
     * @param {Boolean} deep
     */
    function clone(node, deep) {
        return node.cloneNode(deep);
    }

	
	return noder.clone = clone;
});
define('skylark-domx-noder/is-child-of',[
	"./noder"
],function(noder){
    /*   
     * Check to see if a dom node is a descendant of another dom node.
     * @param {Node} node
     * @param {Node} parent
     * @param {Node} directly
     */
    function isChildOf(node, parent, directly) {
        if (directly) {
            return node.parentNode === parent;
        }
        if (document.documentElement.contains) {
            return parent.contains(node);
        }
        while (node) {
            if (parent === node) {
                return true;
            }

            node = node.parentNode;
        }

        return false;
    }
	
	return noder.isChildOf = isChildOf;
});
define('skylark-domx-noder/contains',[
	"./noder",
    "./is-child-of"
],function(noder,isChildOf){
 
    /*   
     * Check to see if a dom node is a descendant of another dom node .
     * @param {String} node
     * @param {Node} child
     */
    function contains(node, child) {
        return isChildOf(child, node);
    }
	
	return noder.contains = contains;
});
define('skylark-domx-noder/create-element',[
    "skylark-langx-types",
	"./noder"
],function(types,noder){
 
    /*   
     * Create a element and set attributes on it.
     * @param {HTMLElement} tag
     * @param {attrs} attrs
     * @param } parent
     */
    function createElement(tag, props,attrs, parent) {
        var node;

        if (/svg/i.test(tag)) {
            node = document.createElementNS("http://www.w3.org/2000/svg", tag)
        } else {
            node = document.createElement(tag);
        }

        if (types.isHtmlNode(props)) {
            parent = props;
            props = null;
            attrs = null;
        } else if (types.isHtmlNode(attrs)){
            parent = attrs;
            attrs = null;
        }

        if (props) {
            for (var name in props) {
                node[name] = props[name];
            }
        }

        if (attrs) {
            for (var name in attrs) {
                node.setAttribute(name, attrs[name]);
            }
        }
        if (parent) {
            noder.append(parent, node);
        }
        return node;
    }

	
	return noder.createElement = createElement;
});
define('skylark-domx-noder/create-fragment',[
    "skylark-langx-strings",
	"./noder",
    "./create-element"
],function(strings,noder,createElement){
    var fragmentRE = /^\s*<(\w+|!)[^>]*>/,
        singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        div = document.createElement("div"),
        table = document.createElement('table'),
        tableBody = document.createElement('tbody'),
        tableRow = document.createElement('tr'),
        containers = {
            'tr': tableBody,
            'tbody': table,
            'thead': table,
            'tfoot': table,
            'td': tableRow,
            'th': tableRow,
            '*': div
        },
        slice = Array.prototype.slice;


    function removeSelfClosingTags(xml) {
        var split = xml.split("/>");
        var newXml = "";
        for (var i = 0; i < split.length - 1;i++) {
            var edsplit = split[i].split("<");
            newXml += split[i] + "></" + edsplit[edsplit.length - 1].split(" ")[0] + ">";
        }
        return newXml + split[split.length-1];
    }


    /*   
     * Create a DocumentFragment from the HTML fragment.
     * @param {String} html
     */
    function createFragment(html) {
        // A special case optimization for a single tag
        html = strings.trim(html);
        if (singleTagRE.test(html)) {
            return [createElement(RegExp.$1)];
        }

        var name = fragmentRE.test(html) && RegExp.$1
        if (!(name in containers)) {
            name = "*"
        }
        var container = containers[name];
        container.innerHTML = removeSelfClosingTags("" + html);
        dom = slice.call(container.childNodes);

        dom.forEach(function(node) {
            container.removeChild(node);
        })

        return dom;
    }

	
	return noder.createFragment = createFragment;
});
define('skylark-domx-noder/create-text-node',[
	"./noder"
],function(noder){
 
    /*   
     * Create a new Text node.
     * @param {String} text
     * @param {Node} child
     */
    function createTextNode(text) {
        return document.createTextNode(text);
    }


	return noder.createTextNode = createTextNode;
});
define('skylark-domx-noder/doc',[
	"./noder"
],function(noder){
 
    /*   
     * Get the current document object.
     */
    function doc() {
        return document;
    }

	return noder.doc = doc;
});
define('skylark-domx-noder/empty',[
	"./noder"
],function(noder){
 
    /*   
     * Remove all child nodes of the set of matched elements from the DOM.
     * @param {Object} node
     */
    function empty(node) {
        while (node.hasChildNodes()) {
            var child = node.firstChild;
            node.removeChild(child);
        }
        return this;
    }
	
	return noder.empty = empty;
});
define('skylark-domx-noder/focusable',[
	"./noder"
],function(noder){
 
    // Selectors
    function focusable( element, hasTabindex ) {
        var map, mapName, img, focusableIfVisible, fieldset,
            nodeName = element.nodeName.toLowerCase();

        if ( "area" === nodeName ) {
            map = element.parentNode;
            mapName = map.name;
            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
                return false;
            }
            img = $( "img[usemap='#" + mapName + "']" );
            return img.length > 0 && img.is( ":visible" );
        }

        if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
            focusableIfVisible = !element.disabled;

            if ( focusableIfVisible ) {

                // Form controls within a disabled fieldset are disabled.
                // However, controls within the fieldset's legend do not get disabled.
                // Since controls generally aren't placed inside legends, we skip
                // this portion of the check.
                fieldset = $( element ).closest( "fieldset" )[ 0 ];
                if ( fieldset ) {
                    focusableIfVisible = !fieldset.disabled;
                }
            }
        } else if ( "a" === nodeName ) {
            focusableIfVisible = element.href || hasTabindex;
        } else {
            focusableIfVisible = hasTabindex;
        }

        return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
    };
	
	return noder.focusable = focusable;
});
define('skylark-domx-noder/from-point',[
	"./noder"
],function(noder){

    function fromPoint(x,y) {
        return document.elementFromPoint(x,y);
    }

	
	return noder.fromPoint = fromPoint;
});
define('skylark-domx-noder/fullscreen',[
    "skylark-domx-browser",
	"./noder"
],function(browser,noder){

    var fulledEl = null;

    function fullscreen(el) {
        if (el === false) {
            return browser.exitFullscreen.apply(document);
        } else if (el) {
            return el[browser.support.fullscreen.requestFullscreen]();
            fulledEl = el;
        } else {
            return (
                document.fullscreenElement ||
                document.webkitFullscreenElement ||
                document.mozFullScreenElement ||
                document.msFullscreenElement
            )
        }
    }
	
	return noder.fullscreen = fullscreen;
});
define('skylark-domx-noder/html',[
    "skylark-langx-types",
    "skylark-langx-scripter",
	"./noder",
    "./empty"
],function(types,scripter,noder,empty){
 
   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
       rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );

    /*   
     * Get the HTML contents of the first element in the set of matched elements.
     * @param {HTMLElement} node
     * @param {String} html
     */
    function _html(node, html) {
        if (html === undefined) {
            return node.innerHTML;
        } else {
            empty(node);
            html = html || "";
            if (types.isString(html)) {
                html = html.replace( rxhtmlTag, "<$1></$2>" );
            }
            if (types.isString(html) || types.isNumber(html)) {               
                node.innerHTML = html;
            } else if (types.isArrayLike(html)) {
                for (var i = 0; i < html.length; i++) {
                    node.appendChild(html[i]);
                }
            } else {
                node.appendChild(html);
            }

            return this;
        }
    }


    function html(node,value) {
        var result = _html(node,value);

        if (value !== undefined) {
            var scripts = node.querySelectorAll('script');

            for (var i =0; i<scripts.length; i++) {
                var node1 = scripts[i];
                if (rscriptType.test( node1.type || "" ) ) {
                  scripter.evaluate(node1.textContent,node1);
                }
            }       
            return this;         
        } else {
            return result;
        }
    }


	return noder.html = html;
});
define('skylark-domx-noder/is-active',[
	"./noder"
],function(noder){
    function isActive (elem) {
            return elem === document.activeElement && (elem.type || elem.href);
    }

	
	return noder.isActive = isActive;
});
define('skylark-domx-noder/is-block-node',[
	"./noder"
],function(noder){

    var blockNodes = ["div", "p", "ul", "ol", "li", "blockquote", "hr", "pre", "h1", "h2", "h3", "h4", "h5", "table"];

    function isBlockNode(node) {
        if (!node || node.nodeType === 3) {
          return false;
        }
        return new RegExp("^(" + (blockNodes.join('|')) + ")$").test(node.nodeName.toLowerCase());
    }


	
	return noder.isBlockNode = isBlockNode;
});
define('skylark-domx-noder/is-doc',[
	"./noder"
],function(noder){
    /*   
     * Check to see if a dom node is a document.
     * @param {Node} node
     */
    function isDocument(node) {
        return node != null && node.nodeType == node.DOCUMENT_NODE
    }

	
	return noder.isDoc = isDocument;
});
define('skylark-domx-noder/is-editable',[
	"./noder"
],function(noder){
 
    function isEditable (el) {
      if (!el) { return false; } // no parents were editable
      if (el.contentEditable === 'false') { return false; } // stop the lookup
      if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain
      return isEditable(el.parentNode); // contentEditable is set to 'inherit'
    }

	
	return noder.isEditable = isEditable;
});
define('skylark-domx-noder/is-fullscreen',[
	"./noder",
    "./fullscreen"
],function(noder,fullscreen){
 
    function isFullscreen(el) {
        return fullscreen() === el;
    }
	
	return noder.isFullscreen = isFullscreen;
});
define('skylark-domx-noder/is-in-document',[
	"./noder"
],function(noder){
    /*   
     * Check to see if a dom node is in the document
     * @param {Node} node
     */
    function isInDocument(node) {
      return (node === document.body) ? true : document.body.contains(node);
    }     

	
	return noder.isInDocument = isInDocument;
});
define('skylark-domx-noder/is-in-frame',[
	"./noder"
],function(noder){
     function isInFrame() {
        try {
            return window.parent !== window.self;
        } catch (x) {
            return true;
        }
    }
	
	return noder.isInFrame = isInFrame;
});
define('skylark-domx-noder/is-input',[
	"./noder",
    "./is-editable"
],function(noder,isEditable){
 
    function isInput (el) { 
        return el.tagName === 'INPUT' || 
               el.tagName === 'TEXTAREA' || 
               el.tagName === 'SELECT' || 
               isEditable(el); 
    }
	
	return noder.isInput = isInput;
});
define('skylark-domx-noder/is-window',[
    "skylark-langx-types",
    "./noder"
],function(types,noder){
   
    return noder.isWindow = types.isWindow;
	
});
define('skylark-domx-noder/node-name',[
	"./noder"
],function(noder){
 
    function nodeName(elm, chkName) {
        var name = elm.nodeName && elm.nodeName.toLowerCase();
        if (chkName !== undefined) {
            return name === chkName.toLowerCase();
        }
        return name;
    };
	
	return noder.nodeName = nodeName;
});
define('skylark-domx-noder/offset-parent',[
	"./noder"
],function(noder){
 
    var  rootNodeRE = /^(?:body|html)$/i;
    
    /*   
     *
     * @param {Node} elm
     */
    function offsetParent(elm) {
        var parent = elm.offsetParent || document.body;
        while (parent && !rootNodeRE.test(parent.nodeName) && document.defaultView.getComputedStyle(parent).position == "static") {
            parent = parent.offsetParent;
        }
        return parent;
    }
	
	return noder.offsetParent = offsetParent;
});
define('skylark-domx-styler/styler',[
    "skylark-langx/skylark",
    "skylark-langx/langx"
], function(skylark, langx) {
    var every = Array.prototype.every,
        forEach = Array.prototype.forEach,
        camelCase = langx.camelCase,
        dasherize = langx.dasherize;

    function maybeAddPx(name, value) {
        return (typeof value == "number" && !cssNumber[dasherize(name)]) ? value + "px" : value
    }

    var cssNumber = {
            'column-count': 1,
            'columns': 1,
            'font-weight': 1,
            'line-height': 1,
            'opacity': 1,
            'z-index': 1,
            'zoom': 1
        },
        classReCache = {

        };

    function classRE(name) {
        return name in classReCache ?
            classReCache[name] : (classReCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'));
    }

    // access className property while respecting SVGAnimatedString
    /*
     * Adds the specified class(es) to each element in the set of matched elements.
     * @param {HTMLElement} node
     * @param {String} value
     */
    function className(node, value) {
        var klass = node.className || '',
            svg = klass && klass.baseVal !== undefined

        if (value === undefined) return svg ? klass.baseVal : klass
        svg ? (klass.baseVal = value) : (node.className = value)
    }

    function disabled(elm, value ) {
        if (arguments.length < 2) {
            return !!this.dom.disabled;
        }

        elm.disabled = value;

        return this;
    }

    var elementDisplay = {};

    function defaultDisplay(nodeName) {
        var element, display
        if (!elementDisplay[nodeName]) {
            element = document.createElement(nodeName)
            document.body.appendChild(element)
            display = getStyles(element).getPropertyValue("display")
            element.parentNode.removeChild(element)
            display == "none" && (display = "block")
            elementDisplay[nodeName] = display
        }
        return elementDisplay[nodeName]
    }
    /*
     * Display the matched elements.
     * @param {HTMLElement} elm
     */
    function show(elm) {
        styler.css(elm, "display", "");
        if (styler.css(elm, "display") == "none") {
            styler.css(elm, "display", defaultDisplay(elm.nodeName));
        }
        return this;
    }

    function isInvisible(elm) {
        return styler.css(elm, "display") == "none" || styler.css(elm, "opacity") == 0 || styler.css(elm,"visibility") == "hidden";
    }

    /*
     * Hide the matched elements.
     * @param {HTMLElement} elm
     */
    function hide(elm) {
        styler.css(elm, "display", "none");
        return this;
    }

    /*
     * Adds the specified class(es) to each element in the set of matched elements.
     * @param {HTMLElement} elm
     * @param {String} name
     */
    function addClass(elm, name) {
        if (!name) return this
        var cls = className(elm),
            names;
        if (langx.isString(name)) {
            names = name.split(/\s+/g);
        } else {
            names = name;
        }
        names.forEach(function(klass) {
            var re = classRE(klass);
            if (!cls.match(re)) {
                cls += (cls ? " " : "") + klass;
            }
        });

        className(elm, cls);

        return this;
    }

    function getStyles( elem ) {

        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if ( !view || !view.opener ) {
            view = window;
        }

        return view.getComputedStyle( elem);
    }


    /*
     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.
     * @param {HTMLElement} elm
     * @param {String} property
     * @param {Any} value
     */
    function css(elm, property, value) {
        //if (arguments.length < 3) {
        if (value == void 0) {
            var computedStyle,
                computedStyle = getStyles(elm)
            if (property == void 0) {
                return computedStyle;
            } else if (langx.isString(property)) {
                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))
            } else if (langx.isArrayLike(property)) {
                var props = {}
                forEach.call(property, function(prop) {
                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))
                })
                return props
            }
        }

        var css = '';
        if (typeof(property) == 'string') {
            if (!value && value !== 0) {
                elm.style.removeProperty(dasherize(property));
            } else {
                css = dasherize(property) + ":" + maybeAddPx(property, value)
            }
        } else {
            for (key in property) {
                if (property[key] === undefined) {
                    continue;
                }
                if (!property[key] && property[key] !== 0) {
                    elm.style.removeProperty(dasherize(key));
                } else {
                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'
                }
            }
        }

        elm.style.cssText += ';' + css;
        return this;
    }

    /*
     * Determine whether any of the matched elements are assigned the given class.
     * @param {HTMLElement} elm
     * @param {String} name
     */
    function hasClass(elm, name) {
        var re = classRE(name);
        return elm.className && elm.className.match(re);
    }

    /*
     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
     * @param {HTMLElement} elm
     * @param {String} name
     */
    function removeClass(elm, name) {
        if (name) {
            var cls = className(elm),
                names;

            if (langx.isString(name)) {
                names = name.split(/\s+/g);
            } else {
                names = name;
            }

            names.forEach(function(klass) {
                var re = classRE(klass);
                if (cls.match(re)) {
                    cls = cls.replace(re, " ");
                }
            });

            className(elm, cls.trim());
        } else {
            className(elm, "");
        }

        return this;
    }

    /*
     * Add or remove one or more classes from the specified element.
     * @param {HTMLElement} elm
     * @param {String} name
     * @param {} when
     */
    function toggleClass(elm, name, when) {
        var self = this;
        name.split(/\s+/g).forEach(function(klass) {
            if (when === undefined) {
                when = !hasClass(elm, klass);
            }
            if (when) {
                addClass(elm, klass);
            } else {
                removeClass(elm, klass)
            }
        });

        return self;
    }

    var styler = function() {
        return styler;
    };

    langx.mixin(styler, {
        autocssfix: false,
        cssHooks: {

        },

        addClass: addClass,
        className: className,
        css: css,
        disabled : disabled,        
        hasClass: hasClass,
        hide: hide,
        isInvisible: isInvisible,
        removeClass: removeClass,
        show: show,
        toggleClass: toggleClass
    });

    return skylark.attach("domx.styler", styler);
});
define('skylark-domx-styler/main',[
	"./styler"
],function(styler,velm,$){
	
	return styler;
});
define('skylark-domx-styler', ['skylark-domx-styler/main'], function (main) { return main; });

define('skylark-domx-noder/overlay',[
	"skylark-domx-styler",
	"./noder"
],function(styler,noder){
    /*   
     *
     * @param {Node} elm
     * @param {Node} params
     */
    function overlay(elm, params) {
        var overlayDiv = noder.createElement("div", params);
        styler.css(overlayDiv, {
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            zIndex: 0x7FFFFFFF,
            opacity: 0.7
        });
        elm.appendChild(overlayDiv);
        return overlayDiv;

    }

    return noder.overlay = overlay;
 });
define('skylark-domx-noder/owner-doc',[
	"./noder"
],function(noder){
 
    /*   
     * Get the owner document object for the specified element.
     * @param {Node} elm
     */
    function ownerDoc(elm) {
        if (!elm) {
            return document;
        }

        if (elm.nodeType == 9) {
            return elm;
        }

        return elm.ownerDocument;
    }

	
	return noder.ownerDoc = ownerDoc;
});
define('skylark-domx-noder/owner-window',[
	"./noder",
    "./owner-doc"
],function(noder,ownerDoc){
 
    /*   
     *
     * @param {Node} elm
     */
    function ownerWindow(elm) {
        var doc = ownerDoc(elm);
        return doc.defaultView || doc.parentWindow;
    }

	return noder.ownerWindow = ownerWindow;
});
define('skylark-domx-noder/prepend',[
    "./noder",
    "./_enhance_place_content",
    "./_ensure_nodes"
],function(noder,enhancePlaceContent,ensureNodes){

    /*   
     * insert one or more nodes as the first children of the specified node.
     * @param {Node} node
     * @param {Node or ArrayLike} placing
     * @param {Boolean Optional} copyByClone
     */
    function prepend(node, placing, copyByClone) {
        var parentNode = node,
            refNode = parentNode.firstChild,
            nodes = ensureNodes(placing, copyByClone);
        for (var i = 0; i < nodes.length; i++) {
            if (refNode) {
                parentNode.insertBefore(nodes[i], refNode);
            } else {
                parentNode.appendChild(nodes[i]);
            }
        }
        return this;
    }

	
	return noder.prepend = prepend;
});
define('skylark-domx-noder/reflow',[
	"./noder"
],function(noder){
 
    function reflow(elm) {
        if (!elm) {
          elm = document;
        }
        elm.offsetHeight;

        return this;      
    }
	
	return noder.reflow = reflow;
});
define('skylark-domx-noder/remove-child',[
    "skylark-langx-types",
	"./noder"
],function(types,noder){
 

    function removeChild(node,children) {
        if (!types.isArrayLike(children)) {
            children = [children];
        }
        for (var i=0;i<children.length;i++) {
            node.removeChild(children[i]);
        }

        return this;
    }

	
	return noder.removeChild = removeChild;
});
define('skylark-domx-noder/remove',[
	"./noder"
],function(noder){
 
    /*   
     * Remove the set of matched elements from the DOM.
     * @param {Node} node
     */
    function remove(node) {
        if (node && node.parentNode) {
            try {
                node.parentNode.removeChild(node);
            } catch (e) {
                console.warn("The node is already removed", e);
            }
        }
        return this;
    }
	
	return noder.remove = remove;
});
define('skylark-domx-noder/replace',[
	"./noder"
],function(noder){
     /*   
     * Replace an old node with the specified node.
     * @param {Node} node
     * @param {Node} oldNode
     */
    function replace(node, oldNode) {
        oldNode.parentNode.replaceChild(node, oldNode);
        return this;
    }

	return noder.replace = replace;
});
define('skylark-domx-noder/reverse',[
	"./noder"
],function(noder){
    /*   
     *
     * @param {Node} node
     */
    function reverse(node) {
        var firstChild = node.firstChild;
        for (var i = node.children.length - 1; i > 0; i--) {
            if (i > 0) {
                var child = node.children[i];
                node.insertBefore(child, firstChild);
            }
        }
    }
	
	return noder.reverse = reverse;
});
define('skylark-domx-noder/root',[
	"./noder"
],function(noder){
	function root() {
		return  document.documentElement;
	}
	
	return noder.root = root;
});
define('skylark-domx-noder/scrolling-element',[
	"./noder"
],function(noder){
	function scrollingElement() {
		return document.scrollingElement || document.documentElement;
	}
	
	return noder.scrollingElement = scrollingElement;
});
define('skylark-domx-noder/selectable',[
	"./noder"
],function(noder){
 

    function selectable(elem, selectable) {
        if (elem === undefined || elem.style === undefined)
            return;
        elem.onselectstart = selectable ? function () {
            return false;
        } : function () {
        };
        elem.style.MozUserSelect = selectable ? 'auto' : 'none';
        elem.style.KhtmlUserSelect = selectable ? 'auto' : 'none';
        elem.unselectable = selectable ? 'on' : 'off';
    }

	
	return noder.selectable = selectable;
});
define('skylark-domx-noder/throb',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./noder"
],function(langx,styler,noder) {

    
    /*   
     * Replace an old node with the specified node.
     * @param {HTMLElement} elm
     * @param {Node} params
     */
    function throb(elm, params) {
        params = params || {};

        var self = this,
            text = params.text,
            style = params.style,
            time = params.time,
            callback = params.callback,
            timer,

            throbber = noder.createElement("div", {
                "className": params.className || "throbber"
            }),
            //_overlay = overlay(throbber, {
            //    "class": 'overlay fade'
            //}),
            remove = function() {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                if (throbber) {
                    noder.remove(throbber);
                    throbber = null;
                }
            },
            update = function(params) {
                if (params && params.text && throbber) {
                    textNode.nodeValue = params.text;
                }
            };

        if (params.style) {
            styler.css(throbber,params.style);
        }

        //throb = noder.createElement("div", {
        //   "class": params.throb && params.throb.className || "throb"
        //}),
        //textNode = noder.createTextNode(text || ""),
 
        var content = params.content ||  '<span class="throb"></span>';

        //throb.appendChild(textNode);
        //throbber.appendChild(throb);

        noder.html(throbber,content);
        
        elm.appendChild(throbber);

        var end = function() {
            remove();
            if (callback) callback();
        };
        if (time) {
            timer = setTimeout(end, time);
        }

        return {
            throbber : throbber,
            remove: remove,
            update: update
        };
    }

    return noder.throb = throb;
});
define('skylark-domx-noder/traverse',[
	"./noder"
],function(noder){
 
    /*   
     * traverse the specified node and its descendants, perform the callback function on each
     * @param {Node} node
     * @param {Function} fn
     */
    function traverse(node, fn) {
        fn(node)
        for (var i = 0, len = node.childNodes.length; i < len; i++) {
            traverse(node.childNodes[i], fn);
        }
        return this;
    }
	
	return noder.traverse = traverse;
});
define('skylark-domx-noder/unwrap',[
	"./noder",
    "./is-doc"
],function(noder,isDoc){

    /*   
     * Remove the parents of the set of matched elements from the DOM, leaving the matched
     * @param {Node} node
     */
    function unwrap(node) {
        var child, parent = node.parentNode;
        if (parent) {
            if (isDoc(parent.parentNode)) return;
            parent.parentNode.insertBefore(node, parent);
        }
    }

	return noder.unwrap = unwrap;
});
define('skylark-domx-noder/wrapper-inner',[
	"./noder"
],function(noder){
    var  slice = Array.prototype.slice;

    /*   
     * Wrap an HTML structure around the content of each element in the set of matched
     * @param {Node} node
     * @param {Node} wrapperNode
     */
    function wrapperInner(node, wrapperNode) {
        var childNodes = slice.call(node.childNodes);
        node.appendChild(wrapperNode);
        for (var i = 0; i < childNodes.length; i++) {
            wrapperNode.appendChild(childNodes[i]);
        }
        return this;
    }

	
	return noder.wrapperInner = wrapperInner;
});
define('skylark-domx-noder/wrapper',[
	"./noder"
],function(noder){
 
    /*   
     * Wrap an HTML structure around each element in the set of matched elements.
     * @param {Node} node
     * @param {Node} wrapperNode
     */
    function wrapper(node, wrapperNode) {
        if (types.isString(wrapperNode)) {
            wrapperNode = this.createFragment(wrapperNode).firstChild;
        }
        node.parentNode.insertBefore(wrapperNode, node);
        wrapperNode.appendChild(node);
    }
	
	return noder.wrapper = wrapper;
});
define('skylark-domx-noder/main',[
	"./noder",
	"./active",
	"./after",
	"./append",
	"./before",
	"./body",
	"./clone",
	"./contains",
	"./create-element",
	"./create-fragment",
	"./create-text-node",
	"./doc",
	"./empty",
	"./focusable",
	"./from-point",
	"./fullscreen",
	"./html",
	"./is-active",
	"./is-block-node",
	"./is-child-of",
	"./is-doc",
	"./is-editable",
	"./is-element",
	"./is-fragment",
	"./is-fullscreen",
	"./is-in-document",
	"./is-in-frame",
	"./is-input",
	"./is-text-node",
	"./is-window",
	"./node-name",
	"./offset-parent",
	"./overlay",
	"./owner-doc",
	"./owner-window",
	"./prepend",
	"./reflow",
	"./remove-child",
	"./remove",
	"./replace",
	"./reverse",
	"./root",
	"./scrolling-element",
	"./selectable",
	"./throb",
	"./traverse",
	"./unwrap",
	"./wrapper-inner",
	"./wrapper",
	"./throb"
],function(noder){
	return noder;
});
define('skylark-domx-noder', ['skylark-domx-noder/main'], function (main) { return main; });

define('skylark-domx-finder/finder',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-noder",
    "skylark-domx-styler"
], function(skylark, langx, browser, noder,styler) {
    var local = {},
        filter = Array.prototype.filter,
        slice = Array.prototype.slice,
        nativeMatchesSelector = browser.matchesSelector;

    /*
    ---
    name: Slick.Parser
    description: Standalone CSS3 Selector parser
    provides: Slick.Parser
    ...
    */
    ;
    (function() {

        var parsed,
            separatorIndex,
            combinatorIndex,
            reversed,
            cache = {},
            reverseCache = {},
            reUnescape = /\\/g;

        var parse = function(expression, isReversed) {
            if (expression == null) return null;
            if (expression.Slick === true) return expression;
            expression = ('' + expression).replace(/^\s+|\s+$/g, '');
            reversed = !!isReversed;
            var currentCache = (reversed) ? reverseCache : cache;
            if (currentCache[expression]) return currentCache[expression];
            parsed = {
                Slick: true,
                expressions: [],
                raw: expression,
                reverse: function() {
                    return parse(this.raw, true);
                }
            };
            separatorIndex = -1;
            while (expression != (expression = expression.replace(regexp, parser)));
            parsed.length = parsed.expressions.length;
            return currentCache[parsed.raw] = (reversed) ? reverse(parsed) : parsed;
        };

        var reverseCombinator = function(combinator) {
            if (combinator === '!') return ' ';
            else if (combinator === ' ') return '!';
            else if ((/^!/).test(combinator)) return combinator.replace(/^!/, '');
            else return '!' + combinator;
        };

        var reverse = function(expression) {
            var expressions = expression.expressions;
            for (var i = 0; i < expressions.length; i++) {
                var exp = expressions[i];
                var last = {
                    parts: [],
                    tag: '*',
                    combinator: reverseCombinator(exp[0].combinator)
                };

                for (var j = 0; j < exp.length; j++) {
                    var cexp = exp[j];
                    if (!cexp.reverseCombinator) cexp.reverseCombinator = ' ';
                    cexp.combinator = cexp.reverseCombinator;
                    delete cexp.reverseCombinator;
                }

                exp.reverse().push(last);
            }
            return expression;
        };

        var escapeRegExp = (function() {
            // Credit: XRegExp 0.6.1 (c) 2007-2008 Steven Levithan <http://stevenlevithan.com/regex/xregexp/> MIT License
            var from = /(?=[\-\[\]{}()*+?.\\\^$|,#\s])/g,
                to = '\\';
            return function(string) {
                return string.replace(from, to)
            }
        }())

        var regexp = new RegExp(
            "^(?:\\s*(,)\\s*|\\s*(<combinator>+)\\s*|(\\s+)|(<unicode>+|\\*)|\\#(<unicode>+)|\\.(<unicode>+)|\\[\\s*(<unicode1>+)(?:\\s*([*^$!~|]?=)(?:\\s*(?:([\"']?)(.*?)\\9)))?\\s*\\](?!\\])|(:+)(<unicode>+)(?:\\((?:(?:([\"'])([^\\13]*)\\13)|((?:\\([^)]+\\)|[^()]*)+))\\))?)"
            .replace(/<combinator>/, '[' + escapeRegExp(">+~`!@$%^&={}\\;</") + ']')
            .replace(/<unicode>/g, '(?:[\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])')
            .replace(/<unicode1>/g, '(?:[:\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])')
        );

        function parser(
            rawMatch,

            separator,
            combinator,
            combinatorChildren,

            tagName,
            id,
            className,

            attributeKey,
            attributeOperator,
            attributeQuote,
            attributeValue,

            pseudoMarker,
            pseudoClass,
            pseudoQuote,
            pseudoClassQuotedValue,
            pseudoClassValue
        ) {
            if (separator || separatorIndex === -1) {
                parsed.expressions[++separatorIndex] = [];
                combinatorIndex = -1;
                if (separator) return '';
            }

            if (combinator || combinatorChildren || combinatorIndex === -1) {
                combinator = combinator || ' ';
                var currentSeparator = parsed.expressions[separatorIndex];
                if (reversed && currentSeparator[combinatorIndex])
                    currentSeparator[combinatorIndex].reverseCombinator = reverseCombinator(combinator);
                currentSeparator[++combinatorIndex] = {
                    combinator: combinator,
                    tag: '*'
                };
            }

            var currentParsed = parsed.expressions[separatorIndex][combinatorIndex];

            if (tagName) {
                currentParsed.tag = tagName.replace(reUnescape, '');

            } else if (id) {
                currentParsed.id = id.replace(reUnescape, '');

            } else if (className) {
                className = className.replace(reUnescape, '');

                if (!currentParsed.classList) currentParsed.classList = [];
                if (!currentParsed.classes) currentParsed.classes = [];
                currentParsed.classList.push(className);
                currentParsed.classes.push({
                    value: className,
                    regexp: new RegExp('(^|\\s)' + escapeRegExp(className) + '(\\s|$)')
                });

            } else if (pseudoClass) {
                pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue;
                pseudoClassValue = pseudoClassValue ? pseudoClassValue.replace(reUnescape, '') : null;

                if (!currentParsed.pseudos) currentParsed.pseudos = [];
                currentParsed.pseudos.push({
                    key: pseudoClass.replace(reUnescape, ''),
                    value: pseudoClassValue,
                    type: pseudoMarker.length == 1 ? 'class' : 'element'
                });

            } else if (attributeKey) {
                attributeKey = attributeKey.replace(reUnescape, '');
                attributeValue = (attributeValue || '').replace(reUnescape, '');

                var test, regexp;

                switch (attributeOperator) {
                    case '^=':
                        regexp = new RegExp('^' + escapeRegExp(attributeValue));
                        break;
                    case '$=':
                        regexp = new RegExp(escapeRegExp(attributeValue) + '$');
                        break;
                    case '~=':
                        regexp = new RegExp('(^|\\s)' + escapeRegExp(attributeValue) + '(\\s|$)');
                        break;
                    case '|=':
                        regexp = new RegExp('^' + escapeRegExp(attributeValue) + '(-|$)');
                        break;
                    case '=':
                        test = function(value) {
                            return attributeValue == value;
                        };
                        break;
                    case '*=':
                        test = function(value) {
                            return value && value.indexOf(attributeValue) > -1;
                        };
                        break;
                    case '!=':
                        test = function(value) {
                            return attributeValue != value;
                        };
                        break;
                    default:
                        test = function(value) {
                            return !!value;
                        };
                }

                if (attributeValue == '' && (/^[*$^]=$/).test(attributeOperator)) test = function() {
                    return false;
                };

                if (!test) test = function(value) {
                    return value && regexp.test(value);
                };

                if (!currentParsed.attributes) currentParsed.attributes = [];
                currentParsed.attributes.push({
                    key: attributeKey,
                    operator: attributeOperator,
                    value: attributeValue,
                    test: test
                });

            }

            return '';
        };

        // Slick NS

        var Slick = (this.Slick || {});

        Slick.parse = function(expression) {
            return parse(expression);
        };

        Slick.escapeRegExp = escapeRegExp;

        if (!this.Slick) this.Slick = Slick;

    }).apply(local);


    var simpleClassSelectorRE = /^\.([\w-]*)$/,
        simpleIdSelectorRE = /^#([\w-]*)$/,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        slice = Array.prototype.slice;


    local.parseSelector = local.Slick.parse;


    var pseudos = local.pseudos = {
        // custom pseudos
        "button": function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === "button" || name === "button";
        },

        'checked': function(elm) {
            return !!elm.checked;
        },

        'contains': function(elm, idx, nodes, text) {
            if ($(this).text().indexOf(text) > -1) return this
        },

        'disabled': function(elm) {
            return !!elm.disabled;
        },

        'enabled': function(elm) {
            return !elm.disabled;
        },

        'eq': function(elm, idx, nodes, value) {
            return (idx == value);
        },

        'even': function(elm, idx, nodes, value) {
            return (idx % 2) === 0;
        },

        'focus': function(elm) {
            return document.activeElement === elm && (elm.href || elm.type || elm.tabindex);
        },

        'focusable': function( elm ) {
            return noder.focusable(elm, elm.tabindex != null );
        },

        'first': function(elm, idx) {
            return (idx === 0);
        },

        'gt': function(elm, idx, nodes, value) {
            return (idx > value);
        },

        'has': function(elm, idx, nodes, sel) {
            return find(elm, sel);
        },

        // Element/input types
        "header": function(elem) {
            return rheader.test(elem.nodeName);
        },

        'hidden': function(elm) {
            return !local.pseudos["visible"](elm);
        },

        "input": function(elem) {
            return rinputs.test(elem.nodeName);
        },

        'last': function(elm, idx, nodes) {
            return (idx === nodes.length - 1);
        },

        'lt': function(elm, idx, nodes, value) {
            return (idx < value);
        },

        'not': function(elm, idx, nodes, sel) {
            return !matches(elm, sel);
        },

        'odd': function(elm, idx, nodes, value) {
            return (idx % 2) === 1;
        },

        /*   
         * Get the parent of each element in the current set of matched elements.
         * @param {Object} elm
         */
        'parent': function(elm) {
            return !!elm.parentElement;
        },

        'selected': function(elm) {
            return !!elm.selected;
        },

        'tabbable': function(elm) {
            var tabIndex = elm.tabindex,
                hasTabindex = tabIndex != null;
            return ( !hasTabindex || tabIndex >= 0 ) && noder.focusable( element, hasTabindex );
        },

        'text': function(elm) {
            return elm.type === "text";
        },

        'visible': function(elm) {
            return elm.offsetWidth && elm.offsetWidth
        },
        'empty': function(elm) {
            return !elm.hasChildNodes();
        }
    };

    ["first", "eq", "last"].forEach(function(item) {
        pseudos[item].isArrayFilter = true;
    });



    pseudos["nth"] = pseudos["eq"];

    function createInputPseudo(type) {
        return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
        };
    }

    function createButtonPseudo(type) {
        return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
        };
    }

    // Add button/input type pseudos
    for (i in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true
    }) {
        pseudos[i] = createInputPseudo(i);
    }
    for (i in {
        submit: true,
        reset: true
    }) {
        pseudos[i] = createButtonPseudo(i);
    }


    local.divide = function(cond) {
        var nativeSelector = "",
            customPseudos = [],
            tag,
            id,
            classes,
            attributes,
            pseudos;


        if (id = cond.id) {
            nativeSelector += ("#" + id);
        }
        if (classes = cond.classes) {
            for (var i = classes.length; i--;) {
                nativeSelector += ("." + classes[i].value);
            }
        }
        if (attributes = cond.attributes) {
            for (var i = 0; i < attributes.length; i++) {
                if (attributes[i].operator) {
                    nativeSelector += ("[" + attributes[i].key + attributes[i].operator + JSON.stringify(attributes[i].value) + "]");
                } else {
                    nativeSelector += ("[" + attributes[i].key + "]");
                }
            }
        }
        if (pseudos = cond.pseudos) {
            for (i = pseudos.length; i--;) {
                part = pseudos[i];
                if (this.pseudos[part.key]) {
                    customPseudos.push(part);
                } else {
                    if (part.value !== undefined) {
                        nativeSelector += (":" + part.key + "(" + JSON.stringify(part))
                    }
                }
            }
        }

        if (tag = cond.tag) {
            if (tag !== "*") {
                nativeSelector = tag.toUpperCase() + nativeSelector;
            }
        }

        if (!nativeSelector) {
            nativeSelector = "*";
        }

        return {
            nativeSelector: nativeSelector,
            customPseudos: customPseudos
        }

    };

    local.check = function(node, cond, idx, nodes, arrayFilte) {
        var tag,
            id,
            classes,
            attributes,
            pseudos,

            i, part, cls, pseudo;

        if (!arrayFilte) {
            if (tag = cond.tag) {
                var nodeName = node.nodeName.toUpperCase();
                if (tag == '*') {
                    if (nodeName < '@') return false; // Fix for comment nodes and closed nodes
                } else {
                    if (nodeName != (tag || "").toUpperCase()) return false;
                }
            }

            if (id = cond.id) {
                if (node.getAttribute('id') != id) {
                    return false;
                }
            }


            if (classes = cond.classes) {
                for (i = classes.length; i--;) {
                    cls = node.getAttribute('class');
                    if (!(cls && classes[i].regexp.test(cls))) return false;
                }
            }

            if (attributes = cond.attributes) {
                for (i = attributes.length; i--;) {
                    part = attributes[i];
                    if (part.operator ? !part.test(node.getAttribute(part.key)) : !node.hasAttribute(part.key)) return false;
                }
            }

        }
        if (pseudos = cond.pseudos) {
            for (i = pseudos.length; i--;) {
                part = pseudos[i];
                if (pseudo = this.pseudos[part.key]) {
                    if ((arrayFilte && pseudo.isArrayFilter) || (!arrayFilte && !pseudo.isArrayFilter)) {
                        if (!pseudo(node, idx, nodes, part.value)) {
                            return false;
                        }
                    }
                } else {
                    if (!arrayFilte && !nativeMatchesSelector.call(node, part.key)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    local.match = function(node, selector) {

        var parsed;

        if (langx.isString(selector)) {
            parsed = local.Slick.parse(selector);
        } else {
            parsed = selector;
        }

        if (!parsed) {
            return true;
        }

        // simple (single) selectors
        var expressions = parsed.expressions,
            simpleExpCounter = 0,
            i,
            currentExpression;
        for (i = 0;
            (currentExpression = expressions[i]); i++) {
            if (currentExpression.length == 1) {
                var exp = currentExpression[0];
                if (this.check(node, exp)) {
                    return true;
                }
                simpleExpCounter++;
            }
        }

        if (simpleExpCounter == parsed.length) {
            return false;
        }

        var nodes = this.query(document, parsed),
            item;
        for (i = 0; item = nodes[i++];) {
            if (item === node) {
                return true;
            }
        }
        return false;
    };


    local.filterSingle = function(nodes, exp) {
        var matchs = filter.call(nodes, function(node, idx) {
            return local.check(node, exp, idx, nodes, false);
        });

        matchs = filter.call(matchs, function(node, idx) {
            return local.check(node, exp, idx, matchs, true);
        });
        return matchs;
    };

    local.filter = function(nodes, selector) {
        var parsed;

        if (langx.isString(selector)) {
            parsed = local.Slick.parse(selector);
        } else {
            return local.filterSingle(nodes, selector);
        }

        // simple (single) selectors
        var expressions = parsed.expressions,
            i,
            currentExpression,
            ret = [];
        for (i = 0;
            (currentExpression = expressions[i]); i++) {
            if (currentExpression.length == 1) {
                var exp = currentExpression[0];

                var matchs = local.filterSingle(nodes, exp);

                ret = langx.uniq(ret.concat(matchs));
            } else {
                throw new Error("not supported selector:" + selector);
            }
        }

        return ret;

    };

    local.combine = function(elm, bit) {
        var op = bit.combinator,
            cond = bit,
            node1,
            nodes = [];

        switch (op) {
            case '>': // direct children
                nodes = children(elm, cond);
                break;
            case '+': // next sibling
                node1 = nextSibling(elm, cond, true);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '^': // first child
                node1 = firstChild(elm, cond, true);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '~': // next siblings
                nodes = nextSiblings(elm, cond);
                break;
            case '++': // next sibling and previous sibling
                var prev = previousSibling(elm, cond, true),
                    next = nextSibling(elm, cond, true);
                if (prev) {
                    nodes.push(prev);
                }
                if (next) {
                    nodes.push(next);
                }
                break;
            case '~~': // next siblings and previous siblings
                nodes = siblings(elm, cond);
                break;
            case '!': // all parent nodes up to document
                nodes = ancestors(elm, cond);
                break;
            case '!>': // direct parent (one level)
                node1 = parent(elm, cond);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '!+': // previous sibling
                nodes = previousSibling(elm, cond, true);
                break;
            case '!^': // last child
                node1 = lastChild(elm, cond, true);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '!~': // previous siblings
                nodes = previousSiblings(elm, cond);
                break;
            default:
                var divided = this.divide(bit);
                nodes = slice.call(elm.querySelectorAll(divided.nativeSelector));
                if (divided.customPseudos) {
                    for (var i = divided.customPseudos.length - 1; i >= 0; i--) {
                        nodes = filter.call(nodes, function(item, idx) {
                            return local.check(item, {
                                pseudos: [divided.customPseudos[i]]
                            }, idx, nodes, false)
                        });

                        nodes = filter.call(nodes, function(item, idx) {
                            return local.check(item, {
                                pseudos: [divided.customPseudos[i]]
                            }, idx, nodes, true)
                        });
                    }
                }
                break;

        }
        return nodes;
    }

    local.query = function(node, selector, single) {


        var parsed = this.Slick.parse(selector);

        var
            founds = [],
            currentExpression, currentBit,
            expressions = parsed.expressions;

        for (var i = 0;
            (currentExpression = expressions[i]); i++) {
            var currentItems = [node],
                found;
            for (var j = 0;
                (currentBit = currentExpression[j]); j++) {
                found = langx.map(currentItems, function(item, i) {
                    return local.combine(item, currentBit)
                });
                if (found) {
                    currentItems = found;
                }
            }
            if (found) {
                founds = founds.concat(found);
            }
        }

        return founds;
    }

    /*
     * Get the nearest ancestor of the specified element,optional matched by a selector.
     * @param {HTMLElement} node
     * @param {String Optional } selector
     * @param {Object} root
     */
    function ancestor(node, selector, root) {
        var rootIsSelector = root && langx.isString(root);
        while (node = node.parentElement) {
            if (matches(node, selector)) {
                return node;
            }
            if (root) {
                if (rootIsSelector) {
                    if (matches(node, root)) {
                        break;
                    }
                } else if (node == root) {
                    break;
                }
            }
        }
        return null;
    }

    /*
     * Get the ancestors of the specitied element , optionally filtered by a selector.
     * @param {HTMLElement} node
     * @param {String Optional } selector
     * @param {Object} root
     */
    function ancestors(node, selector, root) {
        var ret = [],
            rootIsSelector = root && langx.isString(root);
        while ((node = node.parentElement) && (node.nodeType !== 9)) {
            if (root) {
                if (rootIsSelector) {
                    if (matches(node, root)) {
                        break;
                    }
                } else if (langx.isArrayLike(root)) {
                    if (langx.inArray(node,root)>-1) {
                        break;
                    }
                } else if (node == root) {
                    break;
                }
            }
            if (!selector || matches(node, selector)) {
              ret.push(node); 
            }
        }

        //if (selector) {
        //    ret = local.filter(ret, selector);
        //}
        return ret;
    }


    /*
     * Returns a element by its ID.
     * @param {string} id
     */
    function byId(id, doc) {
        doc = doc || noder.doc();
        return doc.getElementById(id);
    }

    /*
     * Get the children of the specified element , optionally filtered by a selector.
     * @param {string} node
     * @param {String optionlly} selector
     */
    function children(node, selector) {
        var childNodes = node.childNodes,
            ret = [];
        for (var i = 0; i < childNodes.length; i++) {
            var node = childNodes[i];
            if (node.nodeType == 1) {
                ret.push(node);
            }
        }
        if (selector) {
            ret = local.filter(ret, selector);
        }
        return ret;
    }



    /**
     * Gets nth child of elm, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
     * and non-draggable elements
     * @param  {HTMLElement} elm       The parent element
     * @param  {Number} idx      The index of the child
     * @param  {Object} options       Parent's options
     * @return {HTMLElement}          The child at index idx, or null if not found
     */
    function childAt(elm, idx, options) {
        var currentChild = 0,
            children = elm.children;

        options = langx.mixin({
            ignoreHidden : true,
            excluding : null,
            closesting : null
        },options);

        for(var i=0;i < children.length;i++) {
            var child = children[i];
            if (options.ignoreHidden && styler.css(child) === "none") {
                continue;
            }
            if (options.excluding && options.excluding.includes(child)) {
                continue;
            }

            if (options.closesting &&  !closest(child, options.closesting, elm, false)) {
                continue;
            }

            if (currentChild === idx) {
                return child;
            }
            currentChild++;
        }
        return null;
    }



    //function closest(node, selector) {
    //    while (node && !(matches(node, selector))) {
    //        node = node.parentElement;
    //    }
    //   return node;
    //}


    function closest(/**HTMLElement*/elm, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
        if (elm) {
            ctx = ctx || document;

            do {
                if (
                    selector != null &&
                    (
                        selector[0] === '>' ?
                        elm.parentElement === ctx && matches(elm, selector) :
                        matches(elm, selector)
                    ) ||
                    includeCTX && elm === ctx
                ) {
                    return elm;
                }

                if (elm === ctx) break;
                /* jshint boss:true */
            } while (elm = parent(elm));
        }

        return null;
    }
    /*
     * Get the decendant of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function descendants(elm, selector) {
        // Selector
        try {
            return slice.call(elm.querySelectorAll(selector));
        } catch (matchError) {
            //console.log(matchError);
        }
        return local.query(elm, selector);
    }

    /*
     * Get the nearest decendent of the specified element,optional matched by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function descendant(elm, selector) {
        // Selector
        try {
            return elm.querySelector(selector);
        } catch (matchError) {
            //console.log(matchError);
        }
        var nodes = local.query(elm, selector);
        if (nodes.length > 0) {
            return nodes[0];
        } else {
            return null;
        }
    }

    /*
     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function find(elm, selector) {
        if (!selector) {
            selector = elm;
            elm = document.body;
        }
        if (matches(elm, selector)) {
            return elm;
        } else {
            return descendant(elm, selector);
        }
    }

    /*
     * Get the findAll of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function findAll(elm, selector) {
        if (!selector) {
            selector = elm;
            elm = document.body;
        }
        return descendants(elm, selector);
    }

    /*
     * Get the first child of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {String} first
     */
    function firstChild(elm, selector, first) {
        var childNodes = elm.childNodes,
            node = childNodes[0];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (first) {
                    break;
                }
            }
            node = node.nextSibling;
        }

        return null;
    }


    /**
     * Returns the index of an element within its parent for a selected set of
     * elements
     * @param  {HTMLElement} el
     * @param  {selector} selector
     * @return {number}
     */
    function index(el, selector) {
        var index = 0;

        if (!el || !el.parentNode) {
            return -1;
        }

        while (el && (el = el.previousElementSibling)) {
            if (langx.isString(selector)) {
                if (matches(el, selector)) {
                    index++;
                }
            } else if (langx.isFunction(selector)) {
                if (selector(el)) {
                    index++;
                }
            }
            index++;
        }

        return index;
    }    

    /*
     * Get the last child of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {String } last
     */
    function lastChild(elm, selector, last) {
        var childNodes = elm.childNodes,
            node = childNodes[childNodes.length - 1];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (last) {
                    break;
                }
            }
            node = node.previousSibling;
        }

        return null;
    }

    /*
     * Check the specified element against a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function matches(elm, selector) {
        if (!selector || !elm || elm.nodeType !== 1) {
            return false
        }

        if (langx.isString(selector)) {
            try {
                return nativeMatchesSelector.call(elm, selector.replace(/\[([^=]+)=\s*([^'"\]]+?)\s*\]/g, '[$1="$2"]'));
            } catch (matchError) {
                //console.log(matchError);
            }
            return local.match(elm, selector);
        } else if (langx.isArrayLike(selector)) {
            return langx.inArray(elm, selector) > -1;
        } else if (langx.isPlainObject(selector)) {
            return local.check(elm, selector);
        } else {
            return elm === selector;
        }

    }

    /*
     * Get the nearest next sibing of the specitied element , optional matched by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {Boolean Optional} adjacent
     */
    function nextSibling(elm, selector, adjacent) {
        var node = elm.nextSibling;
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (adjacent) {
                    break;
                }
            }
            node = node.nextSibling;
        }
        return null;
    }

    /*
     * Get the next siblings of the specified element , optional filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function nextSiblings(elm, selector) {
        var node = elm.nextSibling,
            ret = [];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    ret.push(node);
                }
            }
            node = node.nextSibling;
        }
        return ret;
    }

    /*
     * Get the parent element of the specified element. if a selector is provided, it retrieves the parent element only if it matches that selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function parent(elm, selector) {
        var node = (elm.host && elm !== document && elm.host.nodeType) ? elm.host : elm.parentElement;

        if (node && (!selector || matches(node, selector))) {
            return node;
        }

        return null;
    }

    /*
     * Get hte nearest previous sibling of the specified element ,optional matched by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {Boolean Optional } adjacent
     */
    function previousSibling(elm, selector, adjacent) {
        var node = elm.previousSibling;
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (adjacent) {
                    break;
                }
            }
            node = node.previousSibling;
        }
        return null;
    }

    /*
     * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function previousSiblings(elm, selector) {
        var node = elm.previousSibling,
            ret = [];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    ret.push(node);
                }
            }
            node = node.previousSibling;
        }
        return ret;
    }

    /*
     * Selects all sibling elements that follow after the “prev” element, have the same parent, and match the filtering “siblings” selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function siblings(elm, selector) {
        var node = elm.parentElement.firstChild,
            ret = [];
        while (node) {
            if (node.nodeType == 1 && node !== elm) {
                if (!selector || matches(node, selector)) {
                    ret.push(node);
                }
            }
            node = node.nextSibling;
        }
        return ret;
    }


    function scrollableParent(el, includeSelf) {
        // skip to window
        if (!el || !el.getBoundingClientRect) {
            return noder.scrollingElement();
        }

        var elem = el;
        var gotSelf = false;
        do {
            // we don't need to get elem css if it isn't even overflowing in the first place (performance)
            if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
                var elemCSS = styler.css(elem);
                if (
                    elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') ||
                    elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')
                ) {
                    if (!elem || !elem.getBoundingClientRect || elem === document.body) {
                        return noder.scrollingElement();
                    } 
                    if (gotSelf || includeSelf) {
                        return elem;
                    }
                    gotSelf = true;
                }
            }
        /* jshint boss:true */
        } while (elem = elem.parentNode);

        return noder.scrollingElement();
    }


    var finder = function() {
        return finder;
    };

    langx.mixin(finder, {

        ancestor: ancestor,

        ancestors: ancestors,

        byId: byId,

        childAt: childAt,

        children: children,

        closest: closest,

        descendant: descendant,

        descendants: descendants,

        find: find,

        findAll: findAll,

        firstChild: firstChild,

        index,

        lastChild: lastChild,

        matches: matches,

        nextSibling: nextSibling,

        nextSiblings: nextSiblings,

        parent: parent,

        previousSibling,

        previousSiblings,

        pseudos: local.pseudos,

        scrollableParent,

        siblings: siblings
    });

    return skylark.attach("domx.finder", finder);
});
define('skylark-domx-finder/main',[
	"./finder"
],function(finder){

	return finder;
});
define('skylark-domx-finder', ['skylark-domx-finder/main'], function (main) { return main; });

define('skylark-domx-geom/geom',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-styler"
], function(skylark, langx, noder, styler) {
  'use strict'

    var rootNodeRE = /^(?:body|html)$/i,
        px = langx.toPixel,
        offsetParent = noder.offsetParent,
        cachedScrollbarWidth;

    function scrollbarWidth() {
        if (cachedScrollbarWidth !== undefined) {
            return cachedScrollbarWidth;
        }
        var w1, w2,
            div = noder.createFragment("<div style=" +
                "'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>" +
                "<div style='height:300px;width:auto;'></div></div>")[0],
            innerDiv = div.childNodes[0];

        noder.append(document.body, div);

        w1 = innerDiv.offsetWidth;
        styler.css(div, "overflow", "scroll");

        w2 = innerDiv.offsetWidth;

        if (w1 === w2) {
            w2 = div[0].clientWidth;
        }

        noder.remove(div);

        return (cachedScrollbarWidth = w1 - w2);
    }


    function hasScrollbar() {
        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);
    }

    /*
     * Get the widths of each border of the specified element.
     * @param {HTMLElement} elm
     */
    function borderExtents(elm) {
        if (noder.isWindow(elm)) {
            return {
                left : 0,
                top : 0,
                right : 0,
                bottom : 0
            }
        }        var s = getComputedStyle(elm);
        return {
            left: px(s.borderLeftWidth, elm),
            top: px(s.borderTopWidth, elm),
            right: px(s.borderRightWidth, elm),
            bottom: px(s.borderBottomWidth, elm)
        }
    }

    //viewport coordinate
    /*
     * Get or set the viewport position of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function boundingPosition(elm, coords) {
        if (coords === undefined) {
            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();
        } else {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                parentOffset = boundingPosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            relativePosition(elm, {
                top: coords.top - parentOffset.top - mex.top - pbex.top + (scrollTop(parent) || 0),
                left: coords.left - parentOffset.left - mex.left - pbex.left + (scrollLeft(parent) || 0)
            });
            return this;
        }
    }

    /*
     * Get or set the viewport rect of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function boundingRect(elm, coords) {
        if (coords === undefined) {
            if (elm == window || elm == document.documentElement || elm == document.body){
                return {
                    top : 0,
                    left : 0,
                    bottom : window.innerHeight,
                    right : window.innerWidth,
                    height : window.innerHeight,
                    width : window.innerWidth
                };
            } else if (elm.getBoundingClientRect) {
                return elm.getBoundingClientRect();
            }
        } else {
            boundingPosition(elm, coords);
            size(elm, coords);
            return this;
        }
    }

    /*
     * Get or set the height of the specified element client box.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function clientHeight(elm, value) {
        if (value == undefined) {
            return clientSize(elm).height;
        } else {
            return clientSize(elm, {
                height: value
            });
        }
    }

    /*
     * Get or set the size of the specified element client box.
     * @param {HTMLElement} elm
     * @param {PlainObject} dimension
     */
    function clientSize(elm, dimension) {
        if (dimension == undefined) {
            return {
                width: elm.clientWidth,
                height: elm.clientHeight
            }
        } else {
            var isBorderBox = (styler.css(elm, "box-sizing") === "border-box"),
                props = {
                    width: dimension.width,
                    height: dimension.height
                };
            if (!isBorderBox) {
                var pex = paddingExtents(elm);

                if (props.width !== undefined) {
                    props.width = props.width - pex.left - pex.right;
                }

                if (props.height !== undefined) {
                    props.height = props.height - pex.top - pex.bottom;
                }
            } else {
                var bex = borderExtents(elm);

                if (props.width !== undefined) {
                    props.width = props.width + bex.left + bex.right;
                }

                if (props.height !== undefined) {
                    props.height = props.height + bex.top + bex.bottom;
                }

            }
            styler.css(elm, props);
            return this;
        }
        return {
            width: elm.clientWidth,
            height: elm.clientHeight
        };
    }

    /*
     * Get or set the width of the specified element client box.
     * @param {HTMLElement} elm
     * @param {PlainObject} dimension
     */
    function clientWidth(elm, value) {
        if (value == undefined) {
            return clientSize(elm).width;
        } else {
            clientSize(elm, {
                width: value
            });
            return this;
        }
    }

    /*
     * Get the rect of the specified element content box.
     * @param {HTMLElement} elm
     */
    function contentRect(elm) {
        var cs = clientSize(elm),
            pex = paddingExtents(elm);


        //// On Opera, offsetLeft includes the parent's border
        //if(has("opera")){
        //    pe.l += be.l;
        //    pe.t += be.t;
        //}
        return {
            left: pex.left,
            top: pex.top,
            width: cs.width - pex.left - pex.right,
            height: cs.height - pex.top - pex.bottom
        };
    }

    /*
     * Get the document size.
     * @param {HTMLDocument} doc
     */
    function getDocumentSize(doc) {
        var documentElement = doc.documentElement,
            body = doc.body,
            max = Math.max,
            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),
            clientWidth = max(documentElement.clientWidth, body.clientWidth),
            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),
            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),
            clientHeight = max(documentElement.clientHeight, body.clientHeight),
            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);

        return {
            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,
            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight
        };
    }

    /*
     * Get the document size.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function height(elm, value) {
        if (value == undefined) {
            return size(elm).height;
        } else {
            size(elm, {
                height: value
            });
            return this;
        }
    }



    function inview(elm, cushion) {
        function calibrate(coords, cushion) {
            var o = {};
            cushion = +cushion || 0;
            o.width = (o.right = coords.right + cushion) - (o.left = coords.left - cushion);
            o.height = (o.bottom = coords.bottom + cushion) - (o.top = coords.top - cushion);
            return o;
        }

        var r = calibrate(boundingRect(elm), cushion),
            vsize = viewportSize();

        return !!r && r.bottom >= 0 && r.right >= 0 && r.top <= vsize.height && r.left <= vsize.width;
    }


    /*
     * Get the widths of each margin of the specified element.
     * @param {HTMLElement} elm
     */
    function marginExtents(elm) {
        if (noder.isWindow(elm)) {
            return {
                left : 0,
                top : 0,
                right : 0,
                bottom : 0
            }
        }
        var s = getComputedStyle(elm);
        return {
            left: px(s.marginLeft),
            top: px(s.marginTop),
            right: px(s.marginRight),
            bottom: px(s.marginBottom),
        }
    }


    function marginRect(elm) {
        var obj = relativeRect(elm),
            me = marginExtents(elm);

        return {
            left: obj.left,
            top: obj.top,
            width: obj.width + me.left + me.right,
            height: obj.height + me.top + me.bottom
        };
    }


    function marginSize(elm) {
        var obj = size(elm),
            me = marginExtents(elm);

        return {
            width: obj.width + me.left + me.right,
            height: obj.height + me.top + me.bottom
        };
    }

    /*
     * Get the widths of each padding of the specified element.
     * @param {HTMLElement} elm
     */
    function paddingExtents(elm) {
        if (noder.isWindow(elm)) {
            return {
                left : 0,
                top : 0,
                right : 0,
                bottom : 0
            }
        }
        var s = getComputedStyle(elm);
        return {
            left: px(s.paddingLeft),
            top: px(s.paddingTop),
            right: px(s.paddingRight),
            bottom: px(s.paddingBottom),
        }
    }

    /*
     * Get or set the document position of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    //coordinate to the document
    function pagePosition(elm, coords) {
        if (coords === undefined) {
            var obj = elm.getBoundingClientRect(),
                w = elm.ownerDocument.defaultView;
            return {
                left: obj.left + w.pageXOffset,
                top: obj.top + w.pageYOffset
            }
        } else {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                parentOffset = pagePosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            relativePosition(elm, {
                top: coords.top - parentOffset.top - mex.top - pbex.top,
                left: coords.left - parentOffset.left - mex.left - pbex.left
            });
            return this;
        }
    }

    /*
     * Get or set the document rect of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function pageRect(elm, coords) {
        if (coords === undefined) {
            var obj = elm.getBoundingClientRect(),
                w = elm.ownerDocument.defaultView;
            return {
                left: obj.left + w.pageXOffset,
                top: obj.top + w.pageYOffset,
                width: Math.round(obj.width),
                height: Math.round(obj.height)
            }
        } else {
            pagePosition(elm, coords);
            size(elm, coords);
            return this;
        }
    }

    /*
     * Get or set the position of the specified element border box , relative to parent element.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    // coordinate relative to it's parent
    function relativePosition(elm, coords) {
        if (coords == undefined) {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                offset = boundingPosition(elm),
                parentOffset = boundingPosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - pbex.top - mex.top,
                left: offset.left - parentOffset.left - pbex.left - mex.left
            }
        } else {
            var // Get *real* offsetParent
                parent = offsetParent(elm);

            var props = {
                top: coords.top,
                left: coords.left
            };

            /*
            if (langx.isDefined(props.top)) {
                props.top = props.top + (scrollTop(parent) || 0);
            }

            if (langx.isDefined(props.left)) {
                props.left = props.left + (scrollLeft(parent) || 0);
            } 
            */ 

            if (styler.css(elm, "position") == "static") {
                props['position'] = "relative";
            }


            styler.css(elm, props);
            return this;
        }
    }

    /*
     * Get or set the rect of the specified element border box , relatived to parent element.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function relativeRect(elm, coords) {
        if (coords === undefined) {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                offset = boundingRect(elm),
                parentOffset = boundingPosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - pbex.top, // - mex.top,
                left: offset.left - parentOffset.left - pbex.left, // - mex.left,
                width: offset.width,
                height: offset.height
            }
        } else {
            relativePosition(elm, coords);
            size(elm, coords);
            return this;
        }
    }
    /*
     * Scroll the specified element into view.
     * @param {HTMLElement} elm
     * @param {} align
     */
    function scrollIntoView(elm, align) {
        function getOffset(elm, rootElm) {
            var x, y, parent = elm;

            x = y = 0;
            while (parent && parent != rootElm && parent.nodeType) {
                x += parent.offsetLeft || 0;
                y += parent.offsetTop || 0;
                parent = parent.offsetParent;
            }

            return { x: x, y: y };
        }

        var parentElm = elm.parentNode;
        var x, y, width, height, parentWidth, parentHeight;
        var pos = getOffset(elm, parentElm);

        x = pos.x;
        y = pos.y;
        width = elm.offsetWidth;
        height = elm.offsetHeight;
        parentWidth = parentElm.clientWidth;
        parentHeight = parentElm.clientHeight;

        if (align == "end") {
            x -= parentWidth - width;
            y -= parentHeight - height;
        } else if (align == "center") {
            x -= (parentWidth / 2) - (width / 2);
            y -= (parentHeight / 2) - (height / 2);
        }

        parentElm.scrollLeft = x;
        parentElm.scrollTop = y;

        return this;
    }
    /*
     * Get or set the current horizontal position of the scroll bar for the specified element.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function scrollLeft(elm, value) {
        if (elm.nodeType === 9) {
            elm = elm.defaultView;
        } else if (elm == document.body) {
            elm = document.scrollingElement  || document.documentElement;
        }
        var hasScrollLeft = "scrollLeft" in elm;
        if (value === undefined) {
            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset
        } else {
            if (hasScrollLeft) {
                elm.scrollLeft = value;
            } else {
                elm.scrollTo(value, elm.scrollY);
            }
            return this;
        }
    }
    /*
     * Get or the current vertical position of the scroll bar for the specified element.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function scrollTop(elm, value) {
        if (elm.nodeType === 9) {
            elm = elm.defaultView;
        } else if (elm == document.body) {
            elm = document.scrollingElement  || document.documentElement;
        }

        var hasScrollTop = "scrollTop" in elm;

        if (value === undefined) {
            return hasScrollTop ? elm.scrollTop : elm.pageYOffset
        } else {
            if (hasScrollTop) {
                elm.scrollTop = value;
            } else {
                elm.scrollTo(elm.scrollX, value);
            }
            return this;
        }
    }

    function scrollBy(elm, x, y) {
        elm.scrollLeft += x;
        elm.scrollTop += y;
    }


    /*
     * Get or set the size of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject}dimension
     */
    function size(elm, dimension) {
        if (dimension == undefined) {
            if (langx.isWindow(elm)) {
                return {
                    width: elm.innerWidth,
                    height: elm.innerHeight
                }

            } else if (langx.isDocument(elm)) {
                return getDocumentSize(document);
            } else {
                return {
                    width: elm.offsetWidth,
                    height: elm.offsetHeight
                }
            }
        } else {
            var isBorderBox = (styler.css(elm, "box-sizing") === "border-box"),
                props = {
                    width: dimension.width,
                    height: dimension.height
                };
            if (!isBorderBox) {
                var pex = paddingExtents(elm),
                    bex = borderExtents(elm);

                if (props.width !== undefined && props.width !== "" && props.width !== null) {
                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;
                }

                if (props.height !== undefined && props.height !== "" && props.height !== null) {
                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;
                }
            }
            styler.css(elm, props);
            return this;
        }
    }


    function viewportSize(win) {
        win = win || window;

        return boundingRect(win);
    }

    /*
     * Get or set the size of the specified element border box.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function width(elm, value) {
        if (value == undefined) {
            return size(elm).width;
        } else {
            size(elm, {
                width: value
            });
            return this;
        }
    }

    function testAxis(elm) {
       
        var top = elm.offsetTop;
        var left = elm.offsetLeft;
        var width = elm.offsetWidth;
        var height = elm.offsetHeight;

        while(elm.offsetParent) {
            elm = elm.offsetParent;
            top += elm.offsetTop;
            left += elm.offsetLeft;
        }

        var result = {x: 0, y: 0};

        //Over the top of the window
        if(top < window.pageYOffset) {
            result.y = top - window.pageYOffset;
        }
        //Bellow the window
        else if((top + height) > (window.pageYOffset + window.innerHeight))
        {
            result.y = (top + height) - (window.pageYOffset + window.innerHeight);
        }

        //Left to the window
        if(left < window.pageXOffset) {
            result.x = left - window.pageXOffset;
        }
        //Right to the window
        else if((left + width) > (window.pageXOffset + window.innerWidth))
        {
            result.x = (left + width) - (window.pageXOffset + window.innerWidth);
        }

        return result;
    };    

    function geom() {
        return geom;
    }

    langx.mixin(geom, {
        borderExtents: borderExtents,
        //viewport coordinate
        boundingPosition: boundingPosition,

        boundingRect: boundingRect,

        clientHeight: clientHeight,

        clientSize: clientSize,

        clientWidth: clientWidth,

        contentRect: contentRect,

        getDocumentSize: getDocumentSize,

        hasScrollbar,

        height: height,

        inview,

        marginExtents: marginExtents,

        marginRect: marginRect,

        marginSize: marginSize,

        offsetParent: offsetParent,

        paddingExtents: paddingExtents,

        //coordinate to the document
        pagePosition: pagePosition,

        pageRect: pageRect,

        // coordinate relative to it's parent
        relativePosition: relativePosition,

        relativeRect: relativeRect,

        scrollbarWidth: scrollbarWidth,

        scrollIntoView: scrollIntoView,

        scrollLeft: scrollLeft,

        scrollTop: scrollTop,

        scrollBy,
            
        size: size,

        testAxis,

        viewportSize,

        width: width
    });



    return skylark.attach("domx.geom", geom);
});
define('skylark-domx-query/query',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-finder"
], function(skylark, langx, noder, finder) {
    var some = Array.prototype.some,
        push = Array.prototype.push,
        every = Array.prototype.every,
        concat = Array.prototype.concat,
        slice = Array.prototype.slice,
        map = Array.prototype.map,
        filter = Array.prototype.filter,
        forEach = Array.prototype.forEach,
        indexOf = Array.prototype.indexOf,
        sort = Array.prototype.sort,
        isQ;

    var rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;

    var funcArg = langx.funcArg,
        isArrayLike = langx.isArrayLike,
        isString = langx.isString,
        uniq = langx.uniq,
        isFunction = langx.isFunction;

    var type = langx.type,
        isArray = langx.isArray,

        isWindow = langx.isWindow,

        isDocument = langx.isDocument,

        isObject = langx.isObject,

        isPlainObject = langx.isPlainObject,

        compact = langx.compact,

        flatten = langx.flatten,

        camelCase = langx.camelCase,

        dasherize = langx.dasherize,
        children = finder.children;

    function wrapper_node_operation(func, context, oldValueFunc) {
        return function(html) {
            var argType, nodes = langx.map(arguments, function(arg) {
                argType = type(arg)
                return argType == "function" || argType == "object" || argType == "array" || arg == null ?
                    arg : noder.createFragment(arg)
            });
            if (nodes.length < 1) {
                return this
            }
            this.each(function(idx) {
                func.apply(context, [this, nodes, idx > 0]);
            });
            return this;
        }
    }

    function wrapper_map(func, context) {
        return function() {
            var self = this,
                params = slice.call(arguments);
            var result = langx.map(self, function(elem, idx) {
                return func.apply(context, [elem].concat(params));
            });
            return query(uniq(result));
        }
    }

    function wrapper_selector(func, context, last) {
        return function(selector) {
            var self = this,
                params = slice.call(arguments);
            var result = this.map(function(idx, elem) {
                // if (elem.nodeType == 1) {
                if (elem.querySelector) {
                    return func.apply(context, last ? [elem] : [elem, selector]);
                } else {
                    return [];
                }
            });
            if (last && selector) {
                return result.filter(selector);
            } else {
                return result;
            }
        }
    }

    function wrapper_selector_until(func, context, last) {
        return function(util, selector) {
            var self = this,
                params = slice.call(arguments);
            //if (selector === undefined) { //TODO : needs confirm?
            //    selector = util;
            //    util = undefined;
            //}
            var result = this.map(function(idx, elem) {
                // if (elem.nodeType == 1) { // TODO
                //if (elem.querySelector) {
                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);
                //} else {
                //    return [];
                //}
            });
            if (last && selector) {
                return result.filter(selector);
            } else {
                return result;
            }
        }
    }


    function wrapper_every_act(func, context) {
        return function() {
            var self = this,
                params = slice.call(arguments);
            this.each(function(idx,node) {
                func.apply(context, [this].concat(params));
            });
            return self;
        }
    }

    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {
        return function(arg1) {
            var self = this,
                params = slice.call(arguments);
            forEach.call(self, function(elem, idx) {
                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));
                func.apply(context, [elem, newArg1].concat(params.slice(1)));
            });
            return self;
        }
    }

    function wrapper_some_chk(func, context) {
        return function() {
            var self = this,
                params = slice.call(arguments);
            return some.call(self, function(elem) {
                return func.apply(context, [elem].concat(params));
            });
        }
    }

    function wrapper_name_value(func, context, oldValueFunc) {
        return function(name, value) {
            var self = this;

            if (langx.isPlainObject(name) || langx.isDefined(value)) {
                forEach.call(self, function(elem, idx) {
                    var newValue;
                    if (oldValueFunc) {
                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));
                    } else {
                        newValue = value
                    }
                    func.apply(context, [elem,name,newValue]);
                });
                return self;
            } else {
                if (self[0]) {
                    return func.apply(context, [self[0], name]);
                }
            }

        }
    }

    function wrapper_value(func, context, oldValueFunc) {
        return function(value) {
            var self = this;

            if (langx.isDefined(value)) {
                forEach.call(self, function(elem, idx) {
                    var newValue;
                    if (oldValueFunc) {
                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));
                    } else {
                        newValue = value
                    }
                    func.apply(context, [elem, newValue]);
                });
                return self;
            } else {
                if (self[0]) {
                    return func.apply(context, [self[0]]);
                }
            }

        }
    }


    var NodeList = langx.klass({
        klassName: "SkNodeList",
        init: function(selector, context) {
            var self = this,
                match, nodes, node, props;

            if (selector) {
                self.context = context = context || noder.doc();

                if (isString(selector)) {
                    // a html string or a css selector is expected
                    self.selector = selector;

                    if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                        match = [null, selector, null];
                    } else {
                        match = rquickExpr.exec(selector);
                    }

                    if (match) {
                        if (match[1]) {
                            // if selector is html
                            nodes = noder.createFragment(selector);

                            if (langx.isPlainObject(context)) {
                                props = context;
                            }

                        } else {
                            node = finder.byId(match[2], noder.ownerDoc(context));

                            if (node) {
                                // if selector is id
                                nodes = [node];
                            }

                        }
                    } else {
                        // if selector is css selector
                        if (langx.isString(context)) {
                            context = finder.find(context);
                        }

                        nodes = finder.descendants(context, selector);
                    }
                } else {
                    if (!noder.isWindow(selector) && isArrayLike(selector)) {
                        // a dom node array is expected
                        nodes = selector;
                    } else {
                        // a dom node is expected
                        nodes = [selector];
                    }
                    //self.add(selector, false);
                }
            }


            if (nodes) {

                push.apply(self, nodes);

                if (props) {
                    for ( var name  in props ) {
                        // Properties of context are called as methods if possible
                        if ( langx.isFunction( this[ name ] ) ) {
                            this[ name ]( props[ name ] );
                        } else {
                            this.attr( name, props[ name ] );
                        }
                    }
                }
            }

            return self;
        }
    });

    var query = (function() {
        isQ = function(object) {
            return object instanceof NodeList;
        }
        init = function(selector, context) {
            return new NodeList(selector, context);
        }

        var $ = function(selector, context) {
            if (isFunction(selector)) {
                $.ready(function() {
                    selector($);
                });
                return rootQuery;
            } else if (isQ(selector)) {
                return selector;
            } else {
                if (context && isQ(context) && isString(selector)) {
                    return context.find(selector);
                }
                return init(selector, context);
            }
        },rootQuery = $(document);

        $.fn = NodeList.prototype;
        langx.mixin($.fn, {
            // `map` and `slice` in the jQuery API work differently
            // from their array counterparts
            length : 0,

            map: function(fn) {
                return $(uniq(langx.map(this, function(el, i) {
                    return fn.call(el, i, el)
                })));
            },

            slice: function() {
                return $(slice.apply(this, arguments))
            },

            forEach: function() {
                return forEach.apply(this,arguments);
            },

            get: function(idx) {
                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]
            },

            indexOf: function() {
                return indexOf.apply(this,arguments);
            },

            sort : function() {
                return sort.apply(this,arguments);
            },

            toArray: function() {
                return slice.call(this);
            },

            size: function() {
                return this.length
            },

            //remove: wrapper_every_act(noder.remove, noder),
            remove : function(selector) {
                if (selector) {
                    return this.find(selector).remove();
                }
                this.each(function(i,node){
                    noder.remove(node);
                });
                return this;
            },

            each: function(callback) {
                langx.each(this, callback);
                return this;
            },

            filter: function(selector) {
                if (isFunction(selector)) return this.not(this.not(selector))
                return $(filter.call(this, function(element) {
                    return finder.matches(element, selector)
                }))
            },

            add: function(selector, context) {
                return $(uniq(this.toArray().concat($(selector, context).toArray())));
            },

            is: function(selector) {
                if (this.length > 0) {
                    var self = this;
                    if (langx.isString(selector)) {
                        return some.call(self,function(elem) {
                            return finder.matches(elem, selector);
                        });
                    } else if (langx.isArrayLike(selector)) {
                       return some.call(self,function(elem) {
                            return langx.inArray(elem, selector) > -1;
                        });
                    } else if (langx.isHtmlNode(selector)) {
                       return some.call(self,function(elem) {
                            return elem ==  selector;
                        });
                    }
                }
                return false;
            },
            
            not: function(selector) {
                var nodes = []
                if (isFunction(selector) && selector.call !== undefined)
                    this.each(function(idx,node) {
                        if (!selector.call(this, idx,node)) nodes.push(this)
                    })
                else {
                    var excludes = typeof selector == 'string' ? this.filter(selector) :
                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)
                    this.forEach(function(el) {
                        if (excludes.indexOf(el) < 0) nodes.push(el)
                    })
                }
                return $(nodes)
            },

            has: function(selector) {
                return this.filter(function() {
                    return isObject(selector) ?
                        noder.contains(this, selector) :
                        $(this).find(selector).size()
                })
            },

            eq: function(idx) {
                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);
            },

            first: function() {
                return this.eq(0);
            },

            last: function() {
                return this.eq(-1);
            },

            find: wrapper_selector(finder.descendants, finder),

            closest: wrapper_selector(finder.closest, finder),
            /*
                        closest: function(selector, context) {
                            var node = this[0],
                                collection = false
                            if (typeof selector == 'object') collection = $(selector)
                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))
                                node = node !== context && !isDocument(node) && node.parentNode
                            return $(node)
                        },
            */


            parents: wrapper_selector(finder.ancestors, finder),

            parentsUntil: wrapper_selector_until(finder.ancestors, finder),


            parent: wrapper_selector(finder.parent, finder),

            children: wrapper_selector(finder.children, finder),

            contents: wrapper_map(noder.contents, noder),

            empty: wrapper_every_act(noder.empty, noder),

            html: wrapper_value(noder.html, noder),

            // `pluck` is borrowed from Prototype.js
            pluck: function(property) {
                return langx.map(this, function(el) {
                    return el[property]
                })
            },

            pushStack : function(elms) {
                var ret = $(elms);
                ret.prevObject = this;
                return ret;
            },
            
            replaceWith: function(newContent) {
                return this.before(newContent).remove();
            },

            wrap: function(html) {
                /*
                var func = isFunction(structure)
                if (this[0] && !func)
                    var dom = $(structure).get(0),
                        clone = dom.parentNode || this.length > 1

                return this.each(function(index,node) {
                    $(this).wrapAll(
                        func ? structure.call(this, index,node) :
                        clone ? dom.cloneNode(true) : dom
                    )
                })
                */
                var htmlIsFunction = typeof html === "function";

                return this.each( function( i ) {
                    $( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
                } );                
            },

            wrapAll: function(html) {
                /*
                if (this[0]) {
                    $(this[0]).before(wrappingElement = $(wrappingElement));
                    var children;
                    // drill down to the inmost element
                    while ((children = wrappingElement.children()).length) {
                        wrappingElement = children.first();
                    }
                    $(wrappingElement).append(this);
                }
                return this
                */
                var wrap;

                if ( this[ 0 ] ) {
                    if ( typeof html === "function" ) {
                        html = html.call( this[ 0 ] );
                    }

                    // The elements to wrap the target around
                    wrap = $( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

                    if ( this[ 0 ].parentNode ) {
                        wrap.insertBefore( this[ 0 ] );
                    }

                    wrap.map( function() {
                        var elem = this;

                        while ( elem.firstElementChild ) {
                            elem = elem.firstElementChild;
                        }

                        return elem;
                    } ).append( this );
                }

                return this;

            },

            wrapInner: function(html) {
                /*
                var func = isFunction(wrappingElement)
                return this.each(function(index,node) {
                    var self = $(this),
                        contents = self.contents(),
                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement
                    contents.length ? contents.wrapAll(dom) : self.append(dom)
                })
                */
                if ( typeof html === "function" ) {
                    return this.each( function( i ) {
                        $( this ).wrapInner( html.call( this, i ) );
                    } );
                }

                return this.each( function() {
                    var self = $( this ),
                        contents = self.contents();

                    if ( contents.length ) {
                        contents.wrapAll( html );

                    } else {
                        self.append( html );
                    }
                } );

            },

            unwrap: function(selector) {
                /*
                if (this.parent().children().length === 0) {
                    // remove dom without text
                    this.parent(selector).not("body").each(function() {
                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));
                    });
                } else {
                    this.parent().each(function() {
                        $(this).replaceWith($(this).children())
                    });
                }
                return this
                */
                this.parent(selector).not("body").each( function() {
                    $(this).replaceWith(this.childNodes);
                });
                return this;

            },

            clone: function() {
                return this.map(function() {
                    return this.cloneNode(true)
                })
            },


            toggle: function(setting) {
                return this.each(function() {
                    var el = $(this);
                    (setting === undefined ? el.css("display") == "none" : setting) ? el.show(): el.hide()
                })
            },

            prev: function(selector) {
                return $(this.pluck('previousElementSibling')).filter(selector || '*')
            },

            prevAll: wrapper_selector(finder.previousSiblings, finder),

            next: function(selector) {
                return $(this.pluck('nextElementSibling')).filter(selector || '*')
            },

            nextAll: wrapper_selector(finder.nextSiblings, finder),

            siblings: wrapper_selector(finder.siblings, finder),

            index: function(elem) {
                if (elem) {
                    return this.indexOf($(elem)[0]);
                } else {
                    return this.parent().children().indexOf(this[0]);
                }
            }
        });

        // for now
        $.fn.detach = $.fn.remove;

        $.fn.hover = function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        };


        var traverseNode = noder.traverse;


        $.fn.after = wrapper_node_operation(noder.after, noder);

        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);

        $.fn.before = wrapper_node_operation(noder.before, noder);

        $.fn.append = wrapper_node_operation(noder.append, noder);


        langx.each( {
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
        }, function( name, original ) {
            $.fn[ name ] = function( selector ) {
                var elems,
                    ret = [],
                    insert = $( selector ),
                    last = insert.length - 1,
                    i = 0;

                for ( ; i <= last; i++ ) {
                    elems = i === last ? this : this.clone( true );
                    $( insert[ i ] )[ original ]( elems );

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // .get() because push.apply(_, arraylike) throws on ancient WebKit
                    push.apply( ret, elems.get() );
                }

                return this.pushStack( ret );
            };
        } );

/*
        $.fn.insertAfter = function(html) {
            $(html).after(this);
            return this;
        };

        $.fn.insertBefore = function(html) {
            $(html).before(this);
            return this;
        };

        $.fn.appendTo = function(html) {
            $(html).append(this);
            return this;
        };

        $.fn.prependTo = function(html) {
            $(html).prepend(this);
            return this;
        };

        $.fn.replaceAll = function(selector) {
            $(selector).replaceWith(this);
            return this;
        };
*/
        return $;
    })();

    (function($) {
        $.fn.scrollParent = function( includeHidden ) {
            var position = this.css( "position" ),
                excludeStaticParent = position === "absolute",
                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                scrollParent = this.parents().filter( function() {
                    var parent = $( this );
                    if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
                        return false;
                    }
                    return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
                        parent.css( "overflow-x" ) );
                } ).eq( 0 );

            return position === "fixed" || !scrollParent.length ?
                $( this[ 0 ].ownerDocument || document ) :
                scrollParent;
        };

    })(query);


    (function($) {
        $.fn.end = function() {
            return this.prevObject || $()
        }

        $.fn.andSelf = function() {
            return this.add(this.prevObject || $())
        }

        $.fn.addBack = function(selector) {
            if (this.prevObject) {
                if (selector) {
                    return this.add(this.prevObject.filter(selector));
                } else {
                    return this.add(this.prevObject);
                }
            } else {
                return this;
            }
        }

        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {
            var fn = $.fn[property]
            $.fn[property] = function() {
                var ret = fn.apply(this, arguments)
                ret.prevObject = this
                return ret
            }
        })
    })(query);


    (function($) {
        $.fn.query = $.fn.find;

        $.fn.place = function(refNode, position) {
            // summary:
            //      places elements of this node list relative to the first element matched
            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`
            // queryOrNode:
            //      may be a string representing any valid CSS3 selector or a DOM node.
            //      In the selector case, only the first matching element will be used
            //      for relative positioning.
            // position:
            //      can be one of:
            //
            //      -   "last" (default)
            //      -   "first"
            //      -   "before"
            //      -   "after"
            //      -   "only"
            //      -   "replace"
            //
            //      or an offset in the childNodes
            if (langx.isString(refNode)) {
                refNode = finder.descendant(refNode);
            } else if (isQ(refNode)) {
                refNode = refNode[0];
            }
            return this.each(function(i, node) {
                switch (position) {
                    case "before":
                        noder.before(refNode, node);
                        break;
                    case "after":
                        noder.after(refNode, node);
                        break;
                    case "replace":
                        noder.replace(refNode, node);
                        break;
                    case "only":
                        noder.empty(refNode);
                        noder.append(refNode, node);
                        break;
                    case "first":
                        noder.prepend(refNode, node);
                        break;
                        // else fallthrough...
                    default: // aka: last
                        noder.append(refNode, node);
                }
            });
        };

        $.fn.addContent = function(content, position) {
            if (content.template) {
                content = langx.substitute(content.template, content);
            }
            return this.append(content);
        };



        $.fn.disableSelection = ( function() {
            var eventType = "onselectstart" in document.createElement( "div" ) ?
                "selectstart" :
                "mousedown";

            return function() {
                return this.on( eventType + ".ui-disableSelection", function( event ) {
                    event.preventDefault();
                } );
            };
        } )();

        $.fn.enableSelection = function() {
            return this.off( ".ui-disableSelection" );
        };

        $.fn.reflow = function() {
            return noder.reflow(this[0]);
        };

        $.fn.isBlockNode = function() {
            return noder.isBlockNode(this[0]);
        };
       

    })(query);

    query.fn.plugin = function(name,options) {
        var args = slice.call( arguments, 1 ),
            self = this,
            returnValue = this;

        this.each(function(){
            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));
        });
        return returnValue;
    };


    query.wraps = {
        wrapper_node_operation,
        wrapper_map,
        wrapper_value,
        wrapper_selector,
        wrapper_some_chk,
        wrapper_selector_until,
        wrapper_every_act_firstArgFunc,
        wrapper_every_act,
        wrapper_name_value

    };

    return skylark.attach("domx.query", query);

});
define('skylark-domx-query/main',[
	"./query",
	"skylark-domx-styler"
],function($,styler){

    $.fn.style = $.wraps.wrapper_name_value(styler.css, styler);

    $.fn.css = $.wraps.wrapper_name_value(styler.css, styler);

    //hasClass(name)
    $.fn.hasClass = $.wraps.wrapper_some_chk(styler.hasClass, styler);

    //addClass(name)
    $.fn.addClass = $.wraps.wrapper_every_act_firstArgFunc(styler.addClass, styler, styler.className);

    //removeClass(name)
    $.fn.removeClass = $.wraps.wrapper_every_act_firstArgFunc(styler.removeClass, styler, styler.className);

    //toogleClass(name,when)
    $.fn.toggleClass = $.wraps.wrapper_every_act_firstArgFunc(styler.toggleClass, styler, styler.className);

    $.fn.replaceClass = function(newClass, oldClass) {
        this.removeClass(oldClass);
        this.addClass(newClass);
        return this;
    };

    $.fn.replaceClass = function(newClass, oldClass) {
        this.removeClass(oldClass);
        this.addClass(newClass);
        return this;
    };
        

	return $;
});
define('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });

define('skylark-domx-velm/velm',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-finder",
    "skylark-domx-query"
], function(skylark, langx, noder, finder, $) {
    var map = Array.prototype.map,
        slice = Array.prototype.slice;
    /*
     * VisualElement is a skylark class type wrapping a visule dom node,
     * provides a number of prototype methods and supports chain calls.
     */
    var VisualElement = langx.klass({
        klassName: "VisualElement",

        "_construct": function(node) {
            if (langx.isString(node)) {
                node = langx.trim(node);
                if (node.charAt(0) === "<") {
                    //html
                    node = noder.createFragment(node)[0];
                } else {
                    // id
                    node = document.getElementById(node);
                }
            }
            this._elm = node;
        }
    });

    VisualElement.prototype.$ = VisualElement.prototype.query = function(selector) {
        return $(selector,this._elm);
    };

    VisualElement.prototype.elm = function() {
        return this._elm;
    };

    /*
     * the VisualElement object wrapping document.body
     */
    var root = new VisualElement(document.body),
        velm = function(node) {
            if (node) {
                return new VisualElement(node);
            } else {
                return root;
            }
        };
    /*
     * Extend VisualElement prototype with wrapping the specified methods.
     * @param {ArrayLike} fn
     * @param {Object} context
     */
    function _delegator(fn, context) {
        return function() {
            var self = this,
                elem = self._elm,
                ret = fn.apply(context, [elem].concat(slice.call(arguments)));

            if (ret) {
                if (ret === context) {
                    return self;
                } else {
                    if (ret instanceof HTMLElement) {
                        ret = new VisualElement(ret);
                    } else if (langx.isArrayLike(ret)) {
                        ret = map.call(ret, function(el) {
                            if (el instanceof HTMLElement) {
                                return new VisualElement(el);
                            } else {
                                return el;
                            }
                        })
                    }
                }
            }
            return ret;
        };
    }

    langx.mixin(velm, {
        batch: function(nodes, action, args) {
            nodes.forEach(function(node) {
                var elm = (node instanceof VisualElement) ? node : velm(node);
                elm[action].apply(elm, args);
            });

            return this;
        },

        root: new VisualElement(document.body),

        VisualElement: VisualElement,

        partial: function(name, fn) {
            var props = {};

            props[name] = fn;

            VisualElement.partial(props);
        },

        delegate: function(names, context,matching) {
            var props = {};

            names.forEach(function(name) {
                var matchedName = name;
                if (matching && matching[name]) {
                    matchedName = matching[name];
                } 
                props[name] = _delegator(context[matchedName], context);
            });

            VisualElement.partial(props);
        }
    });

    // from ./finder
    velm.delegate([
        "ancestor",
        "ancestors",
        "children",
        "descendant",
        "find",
        "findAll",
        "firstChild",
        "lastChild",
        "matches",
        "nextSibling",
        "nextSiblings",
        "parent",
        "previousSibling",
        "previousSiblings",
        "siblings"
    ], finder);

    /*
     * find a dom element matched by the specified selector.
     * @param {String} selector
     */
    velm.find = function(selector) {
        if (selector === "body") {
            return this.root;
        } else {
            return this.root.descendant(selector);
        }
    };


    // from ./noder
    velm.delegate([
        "after",
        "append",
        "before",
        "clone",
        "contains",
        "contents",
        "empty",
        "html",
        "isChildOf",
        "isDocument",
        "isInDocument",
        "isWindow",
        "ownerDoc",
        "prepend",
        "remove",
        "removeChild",
        "replace",
        "reverse",
        "throb",
        "traverse",
        "wrapper",
        "wrapperInner",
        "unwrap"
    ], noder);


    return skylark.attach("domx.velm", velm);
});
define('skylark-domx-velm/main',[
	"./velm",
	"skylark-domx-styler"
],function(velm,styler){
    // from ./styler
    velm.delegate([
        "addClass",
        "className",
        "css",
        "hasClass",
        "hide",
        "isInvisible",
        "removeClass",
        "show",
        "toggleClass"
    ], styler);

    // properties

    var properties = [ 'position', 'left', 'top', 'right', 'bottom', 'width', 'height', 'border', 'borderLeft',
    'borderTop', 'borderRight', 'borderBottom', 'borderColor', 'display', 'overflow', 'margin', 'marginLeft', 'marginTop', 'marginRight', 'marginBottom', 'padding', 'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom', 'color',
    'background', 'backgroundColor', 'opacity', 'fontSize', 'fontWeight', 'textAlign', 'textDecoration', 'textTransform', 'cursor', 'zIndex' ];

    properties.forEach( function ( property ) {

        var method = property;

        velm.VisualElement.prototype[method ] = function (value) {

            this.css( property, value );

            return this;

        };

    });

	return velm;
});
define('skylark-domx-velm', ['skylark-domx-velm/main'], function (main) { return main; });

define('skylark-domx-geom/posit',[
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-styler",
    "./geom"
],function(langx,noder,styler,geom){
  'use strict'

    var max = Math.max,
        abs = Math.abs,
        rhorizontal = /left|center|right/,
        rvertical = /top|center|bottom/,
        roffset = /[\+\-]\d+(\.[\d]+)?%?/,
        rposition = /^\w+/,
        rpercent = /%$/;

    function getOffsets( offsets, width, height ) {
        return [
            parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
            parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
        ];
    }

    function parseCss( element, property ) {
        return parseInt( styler.css( element, property ), 10 ) || 0;
    }

    function getDimensions( raw ) {
        if ( raw.nodeType === 9 ) {
            return {
                size: size(raw),
                offset: { top: 0, left: 0 }
            };
        }
        if ( noder.isWindow( raw ) ) {
            return {
                size: geom.size(raw),
                offset: { 
                    top: geom.scrollTop(raw), 
                    left: geom.scrollLeft(raw) 
                }
            };
        }
        if ( raw.preventDefault ) {
            return {
                size : {
                    width: 0,
                    height: 0
                },
                offset: { 
                    top: raw.pageY, 
                    left: raw.pageX 
                }
            };
        }
        return {
            size: geom.size(raw),
            offset: geom.pagePosition(raw)
        };
    }

    function getScrollInfo( within ) {
        var overflowX = within.isWindow || within.isDocument ? "" :
                styler.css(within.element,"overflow-x" ),
            overflowY = within.isWindow || within.isDocument ? "" :
                styler.css(within.element,"overflow-y" ),
            hasOverflowX = overflowX === "scroll" ||
                ( overflowX === "auto" && within.width < geom.scrollWidth(within.element) ),
            hasOverflowY = overflowY === "scroll" ||
                ( overflowY === "auto" && within.height < geom.scrollHeight(within.element));
        return {
            width: hasOverflowY ? geom.scrollbarWidth() : 0,
            height: hasOverflowX ? geom.scrollbarWidth() : 0
        };
    }

    function getWithinInfo( element ) {
        var withinElement = element || window,
            isWindow = noder.isWindow( withinElement),
            isDocument = !!withinElement && withinElement.nodeType === 9,
            hasOffset = !isWindow && !isDocument,
            msize = geom.marginSize(withinElement);
        return {
            element: withinElement,
            isWindow: isWindow,
            isDocument: isDocument,
            offset: hasOffset ? geom.pagePosition(element) : { left: 0, top: 0 },
            scrollLeft: geom.scrollLeft(withinElement),
            scrollTop: geom.scrollTop(withinElement),
            width: msize.width,
            height: msize.height
        };
    }

    function posit(elm,options ) {
        // Make a copy, we don't want to modify arguments
        options = langx.extend( {}, options );

        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
            target = options.of,
            within = getWithinInfo( options.within ),
            scrollInfo = getScrollInfo( within ),
            collision = ( options.collision || "flip" ).split( " " ),
            offsets = {};

        dimensions = getDimensions( target );
        if ( target.preventDefault ) {

            // Force left top to allow flipping
            options.at = "left top";
        }
        targetWidth = dimensions.size.width;
        targetHeight = dimensions.size.height;
        targetOffset = dimensions.offset;

        // Clone to reuse original targetOffset later
        basePosition = langx.extend( {}, targetOffset );

        // Force my and at to have valid horizontal and vertical positions
        // if a value is missing or invalid, it will be converted to center
        langx.each( [ "my", "at" ], function() {
            var pos = ( options[ this ] || "" ).split( " " ),
                horizontalOffset,
                verticalOffset;

            if ( pos.length === 1 ) {
                pos = rhorizontal.test( pos[ 0 ] ) ?
                    pos.concat( [ "center" ] ) :
                    rvertical.test( pos[ 0 ] ) ?
                        [ "center" ].concat( pos ) :
                        [ "center", "center" ];
            }
            pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
            pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

            // Calculate offsets
            horizontalOffset = roffset.exec( pos[ 0 ] );
            verticalOffset = roffset.exec( pos[ 1 ] );
            offsets[ this ] = [
                horizontalOffset ? horizontalOffset[ 0 ] : 0,
                verticalOffset ? verticalOffset[ 0 ] : 0
            ];

            // Reduce to just the positions without the offsets
            options[ this ] = [
                rposition.exec( pos[ 0 ] )[ 0 ],
                rposition.exec( pos[ 1 ] )[ 0 ]
            ];
        } );

        // Normalize collision option
        if ( collision.length === 1 ) {
            collision[ 1 ] = collision[ 0 ];
        }

        if ( options.at[ 0 ] === "right" ) {
            basePosition.left += targetWidth;
        } else if ( options.at[ 0 ] === "center" ) {
            basePosition.left += targetWidth / 2;
        }

        if ( options.at[ 1 ] === "bottom" ) {
            basePosition.top += targetHeight;
        } else if ( options.at[ 1 ] === "center" ) {
            basePosition.top += targetHeight / 2;
        }

        atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
        basePosition.left += atOffset[ 0 ];
        basePosition.top += atOffset[ 1 ];

        return ( function(elem) {
            var collisionPosition, using,
                msize = geom.marginSize(elem),
                elemWidth = msize.width,
                elemHeight = msize.height,
                marginLeft = parseCss( elem, "marginLeft" ),
                marginTop = parseCss( elem, "marginTop" ),
                collisionWidth = elemWidth + marginLeft + parseCss( elem, "marginRight" ) +
                    scrollInfo.width,
                collisionHeight = elemHeight + marginTop + parseCss( elem, "marginBottom" ) +
                    scrollInfo.height,
                position = langx.extend( {}, basePosition ),
                myOffset = getOffsets( offsets.my, msize.width, msize.height);

            if ( options.my[ 0 ] === "right" ) {
                position.left -= elemWidth;
            } else if ( options.my[ 0 ] === "center" ) {
                position.left -= elemWidth / 2;
            }

            if ( options.my[ 1 ] === "bottom" ) {
                position.top -= elemHeight;
            } else if ( options.my[ 1 ] === "center" ) {
                position.top -= elemHeight / 2;
            }

            position.left += myOffset[ 0 ];
            position.top += myOffset[ 1 ];

            collisionPosition = {
                marginLeft: marginLeft,
                marginTop: marginTop
            };

            langx.each( [ "left", "top" ], function( i, dir ) {
                if ( positions[ collision[ i ] ] ) {
                    positions[ collision[ i ] ][ dir ]( position, {
                        targetWidth: targetWidth,
                        targetHeight: targetHeight,
                        elemWidth: elemWidth,
                        elemHeight: elemHeight,
                        collisionPosition: collisionPosition,
                        collisionWidth: collisionWidth,
                        collisionHeight: collisionHeight,
                        offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
                        my: options.my,
                        at: options.at,
                        within: within,
                        elem: elem
                    } );
                }
            } );

            if ( options.using ) {

                // Adds feedback as second argument to using callback, if present
                using = function( props ) {
                    var left = targetOffset.left - position.left,
                        right = left + targetWidth - elemWidth,
                        top = targetOffset.top - position.top,
                        bottom = top + targetHeight - elemHeight,
                        feedback = {
                            target: {
                                element: target,
                                left: targetOffset.left,
                                top: targetOffset.top,
                                width: targetWidth,
                                height: targetHeight
                            },
                            element: {
                                element: elem,
                                left: position.left,
                                top: position.top,
                                width: elemWidth,
                                height: elemHeight
                            },
                            horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                            vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                        };
                    if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
                        feedback.horizontal = "center";
                    }
                    if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
                        feedback.vertical = "middle";
                    }
                    if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
                        feedback.important = "horizontal";
                    } else {
                        feedback.important = "vertical";
                    }
                    options.using.call( this, props, feedback );
                };
            }

            geom.pagePosition(elem, langx.extend( position, { using: using } ));
        })(elm);
    }

    var positions = {
        fit: {
            left: function( position, data ) {
                var within = data.within,
                    withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                    outerWidth = within.width,
                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                    overLeft = withinOffset - collisionPosLeft,
                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                    newOverRight;

                // Element is wider than within
                if ( data.collisionWidth > outerWidth ) {

                    // Element is initially over the left side of within
                    if ( overLeft > 0 && overRight <= 0 ) {
                        newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
                            withinOffset;
                        position.left += overLeft - newOverRight;

                    // Element is initially over right side of within
                    } else if ( overRight > 0 && overLeft <= 0 ) {
                        position.left = withinOffset;

                    // Element is initially over both left and right sides of within
                    } else {
                        if ( overLeft > overRight ) {
                            position.left = withinOffset + outerWidth - data.collisionWidth;
                        } else {
                            position.left = withinOffset;
                        }
                    }

                // Too far left -> align with left edge
                } else if ( overLeft > 0 ) {
                    position.left += overLeft;

                // Too far right -> align with right edge
                } else if ( overRight > 0 ) {
                    position.left -= overRight;

                // Adjust based on position and margin
                } else {
                    position.left = max( position.left - collisionPosLeft, position.left );
                }
            },
            top: function( position, data ) {
                var within = data.within,
                    withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                    outerHeight = data.within.height,
                    collisionPosTop = position.top - data.collisionPosition.marginTop,
                    overTop = withinOffset - collisionPosTop,
                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                    newOverBottom;

                // Element is taller than within
                if ( data.collisionHeight > outerHeight ) {

                    // Element is initially over the top of within
                    if ( overTop > 0 && overBottom <= 0 ) {
                        newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
                            withinOffset;
                        position.top += overTop - newOverBottom;

                    // Element is initially over bottom of within
                    } else if ( overBottom > 0 && overTop <= 0 ) {
                        position.top = withinOffset;

                    // Element is initially over both top and bottom of within
                    } else {
                        if ( overTop > overBottom ) {
                            position.top = withinOffset + outerHeight - data.collisionHeight;
                        } else {
                            position.top = withinOffset;
                        }
                    }

                // Too far up -> align with top
                } else if ( overTop > 0 ) {
                    position.top += overTop;

                // Too far down -> align with bottom edge
                } else if ( overBottom > 0 ) {
                    position.top -= overBottom;

                // Adjust based on position and margin
                } else {
                    position.top = max( position.top - collisionPosTop, position.top );
                }
            }
        },
        flip: {
            left: function( position, data ) {
                var within = data.within,
                    withinOffset = within.offset.left + within.scrollLeft,
                    outerWidth = within.width,
                    offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                    overLeft = collisionPosLeft - offsetLeft,
                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                    myOffset = data.my[ 0 ] === "left" ?
                        -data.elemWidth :
                        data.my[ 0 ] === "right" ?
                            data.elemWidth :
                            0,
                    atOffset = data.at[ 0 ] === "left" ?
                        data.targetWidth :
                        data.at[ 0 ] === "right" ?
                            -data.targetWidth :
                            0,
                    offset = -2 * data.offset[ 0 ],
                    newOverRight,
                    newOverLeft;

                if ( overLeft < 0 ) {
                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
                        outerWidth - withinOffset;
                    if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
                        position.left += myOffset + atOffset + offset;
                    }
                } else if ( overRight > 0 ) {
                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
                        atOffset + offset - offsetLeft;
                    if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
                        position.left += myOffset + atOffset + offset;
                    }
                }
            },
            top: function( position, data ) {
                var within = data.within,
                    withinOffset = within.offset.top + within.scrollTop,
                    outerHeight = within.height,
                    offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                    collisionPosTop = position.top - data.collisionPosition.marginTop,
                    overTop = collisionPosTop - offsetTop,
                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                    top = data.my[ 1 ] === "top",
                    myOffset = top ?
                        -data.elemHeight :
                        data.my[ 1 ] === "bottom" ?
                            data.elemHeight :
                            0,
                    atOffset = data.at[ 1 ] === "top" ?
                        data.targetHeight :
                        data.at[ 1 ] === "bottom" ?
                            -data.targetHeight :
                            0,
                    offset = -2 * data.offset[ 1 ],
                    newOverTop,
                    newOverBottom;
                if ( overTop < 0 ) {
                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
                        outerHeight - withinOffset;
                    if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
                        position.top += myOffset + atOffset + offset;
                    }
                } else if ( overBottom > 0 ) {
                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
                        offset - offsetTop;
                    if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
                        position.top += myOffset + atOffset + offset;
                    }
                }
            }
        },
        flipfit: {
            left: function() {
                positions.flip.left.apply( this, arguments );
                positions.fit.left.apply( this, arguments );
            },
            top: function() {
                positions.flip.top.apply( this, arguments );
                positions.fit.top.apply( this, arguments );
            }
        }
    };

    return geom.posit = posit;
});
define('skylark-domx-geom/scroll-to-top',[
    "skylark-langx",
    "skylark-domx-styler",
    "./geom"
],function(langx,styler,geom) {
    /*   
     * Set the vertical position of the scroll bar for an element.
     * @param {Object} elm  
     * @param {Number or String} pos
     * @param {Number or String} speed
     * @param {Function} callback
     */
    function scrollToTop(elm, pos, speed, callback) {
        var scrollFrom = parseInt(elm.scrollTop),
            i = 0,
            runEvery = 5, // run every 5ms
            freq = speed * 1000 / runEvery,
            scrollTo = parseInt(pos);

        var interval = setInterval(function() {
            i++;

            if (i <= freq) elm.scrollTop = (scrollTo - scrollFrom) / freq * i + scrollFrom;

            if (i >= freq + 1) {
                clearInterval(interval);
                if (callback) langx.debounce(callback, 1000)();
            }
        }, runEvery);

        return this;
    }

    return geom.scrollToTop = scrollToTop;
});
define('skylark-domx-geom/main',[
    "skylark-langx/langx",
    "./geom",
    "skylark-domx-velm",
    "skylark-domx-query",
    "./posit",
    "./scroll-to-top"
],function(langx,geom,velm,$){
   // from ./geom
    velm.delegate([
        "borderExtents",
        "boundingPosition",
        "boundingRect",
        "clientHeight",
        "clientSize",
        "clientWidth",
        "contentRect",
        "height",
        "marginExtents",
        "marginRect",
        "marginSize",
        "offsetParent",
        "paddingExtents",
        "pagePosition",
        "pageRect",
        "relativePosition",
        "relativeRect",
        "scrollIntoView",
        "scrollLeft",
        "scrollTop",
        "pageSize",
        "width"
    ], geom,{
        "pageSize" : "size"
    });

    $.fn.offset = $.wraps.wrapper_value(geom.pagePosition, geom, geom.pagePosition);

    $.fn.scrollTop = $.wraps.wrapper_value(geom.scrollTop, geom);

    $.fn.scrollLeft = $.wraps.wrapper_value(geom.scrollLeft, geom);

    $.fn.position =  function(options) {
        if (!this.length) {
            return this;
        }

        if (options) {
            if (options.of && options.of.length) {
                options = langx.clone(options);
                options.of = options.of[0];
            }
            return this.each( function() {
                geom.posit(this,options);
            });
        } else {
            var elem = this[0];

            return geom.relativePosition(elem);

        }             
    };

    $.fn.offsetParent = $.wraps.wrapper_map(geom.offsetParent, geom);


    $.fn.pageSize = $.wraps.wrapper_value(geom.size, geom);

    $.fn.width = $.wraps.wrapper_value(geom.width, geom, geom.width);

    $.fn.height = $.wraps.wrapper_value(geom.height, geom, geom.height);

    $.fn.clientSize = $.wraps.wrapper_value(geom.clientSize, geom.clientSize);
    
    ['width', 'height'].forEach(function(dimension) {
        var offset, Dimension = dimension.replace(/./, function(m) {
            return m[0].toUpperCase()
        });

        $.fn['outer' + Dimension] = function(margin, value) {
            if (arguments.length) {
                if (typeof margin !== 'boolean') {
                    value = margin;
                    margin = false;
                }
            } else {
                margin = false;
                value = undefined;
            }

            if (value === undefined) {
                var el = this[0];
                if (!el) {
                    return undefined;
                }
                var cb = geom.size(el);
                if (margin) {
                    var me = geom.marginExtents(el);
                    cb.width = cb.width + me.left + me.right;
                    cb.height = cb.height + me.top + me.bottom;
                }
                return dimension === "width" ? cb.width : cb.height;
            } else {
                return this.each(function(idx, el) {
                    var mb = {};
                    var me = geom.marginExtents(el);
                    if (dimension === "width") {
                        mb.width = value;
                        if (margin) {
                            mb.width = mb.width - me.left - me.right
                        }
                    } else {
                        mb.height = value;
                        if (margin) {
                            mb.height = mb.height - me.top - me.bottom;
                        }
                    }
                    geom.size(el, mb);
                })

            }
        };
    })

    $.fn.innerWidth = $.wraps.wrapper_value(geom.clientWidth, geom, geom.clientWidth);

    $.fn.innerHeight = $.wraps.wrapper_value(geom.clientHeight, geom, geom.clientHeight);

    return geom;
});
define('skylark-domx-geom', ['skylark-domx-geom/main'], function (main) { return main; });

define('skylark-domx-data/data',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-finder",
    "skylark-domx-noder"
], function(skylark, langx, finder,noder) {
    var map = Array.prototype.map,
        filter = Array.prototype.filter,
        camelCase = langx.camelCase,
        deserializeValue = langx.deserializeValue,

        capitalRE = /([A-Z])/g,
        propMap = {
            'tabindex': 'tabIndex',
            'readonly': 'readOnly',
            'for': 'htmlFor',
            'class': 'className',
            'maxlength': 'maxLength',
            'cellspacing': 'cellSpacing',
            'cellpadding': 'cellPadding',
            'rowspan': 'rowSpan',
            'colspan': 'colSpan',
            'usemap': 'useMap',
            'frameborder': 'frameBorder',
            'contenteditable': 'contentEditable'
        };

    // Strip and collapse whitespace according to HTML spec
    function stripAndCollapse( value ) {
      var tokens = value.match( /[^\x20\t\r\n\f]+/g ) || [];
      return tokens.join( " " );
    }


    var valHooks = {
      option: {
        get: function( elem ) {
          var val = elem.getAttribute( "value" );
          return val != null ?  val :  stripAndCollapse(text( elem ) );
        }
      },
      select: {
        get: function( elem ) {
          var value, option, i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;

          if ( index < 0 ) {
            i = max;

          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for ( ; i < max; i++ ) {
            option = options[ i ];

            if ( option.selected &&

                // Don't return options that are disabled or in a disabled optgroup
                !option.disabled &&
                ( !option.parentNode.disabled ||
                  !noder.nodeName( option.parentNode, "optgroup" ) ) ) {

              // Get the specific value for the option
              value = val(option);

              // We don't need an array for one selects
              if ( one ) {
                return value;
              }

              // Multi-Selects return an array
              values.push( value );
            }
          }

          return values;
        },

        set: function( elem, value ) {
          var optionSet, option,
            options = elem.options,
            values = langx.makeArray( value ),
            i = options.length;

          while ( i-- ) {
            option = options[ i ];

            /* eslint-disable no-cond-assign */

            if ( option.selected =
              langx.inArray( valHooks.option.get( option ), values ) > -1
            ) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if ( !optionSet ) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    };


    // Radios and checkboxes getter/setter
    langx.each( [ "radio", "checkbox" ], function() {
      valHooks[ this ] = {
        set: function( elem, value ) {
          if ( langx.isArray( value ) ) {
            return ( elem.checked = langx.inArray( val(elem), value ) > -1 );
          }
        }
      };
    });



    /*
     * Set property values
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */

    function setAttribute(elm, name, value) {
        if (value == null) {
            elm.removeAttribute(name);
        } else {
            elm.setAttribute(name, value);
        }
    }

    function aria(elm, name, value) {
        return this.attr(elm, "aria-" + name, value);
    }

    /*
     * Set property values
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */

    function attr(elm, name, value) {
        if (value === undefined) {
            if (typeof name === "object") {
                for (var attrName in name) {
                    attr(elm, attrName, name[attrName]);
                }
                return this;
            } else {
                return elm.getAttribute ? elm.getAttribute(name) : elm[name];
            }
        } else {
            elm.setAttribute ? elm.setAttribute(name, value) : elm[name] = value;
            return this;
        }
    }


    /*
     *  Read all "data-*" attributes from a node
     * @param {Object} elm  
     */

    function _attributeData(elm) {
        var store = {}
        langx.each(elm.attributes || [], function(i, attr) {
            if (attr.name.indexOf('data-') == 0) {
                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);
            }
        })
        return store;
    }

    function _store(elm, confirm) {
        var store = elm["_$_store"];
        if (!store && confirm) {
            store = elm["_$_store"] = _attributeData(elm);
        }
        return store;
    }

    function _getData(elm, name) {
        if (name === undefined) {
            return _store(elm, true);
        } else {
            var store = _store(elm);
            if (store) {
                if (name in store) {
                    return store[name];
                }
                var camelName = camelCase(name);
                if (camelName in store) {
                    return store[camelName];
                }
            }
            var attrName = 'data-' + name.replace(capitalRE, "-$1").toLowerCase()
            var value = attr(elm, attrName);
            if (!langx.isString(value)) {
              value = undefined;
            }
            return value;
        }

    }

    function _setData(elm, name, value) {
        var store = _store(elm, true);
        store[camelCase(name)] = value;
    }


    /*
     * xxx
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */
    function data(elm, name, value) {

        if (value === undefined) {
            if (typeof name === "object") {
                for (var dataAttrName in name) {
                    _setData(elm, dataAttrName, name[dataAttrName]);
                }
                return this;
            } else {
                return _getData(elm, name);
            }
        } else {
            _setData(elm, name, value);
            return this;
        }
    } 
    /*
     * Remove from the element all items that have not yet been run. 
     * @param {Object} elm  
     */

    function cleanData(elm) {
        if (elm["_$_store"]) {
            delete elm["_$_store"];
        }
    }

    /*
     * Remove a previously-stored piece of data. 
     * @param {Object} elm  
     * @param {Array} names
     */
    function removeData(elm, names) {
        if (names) {
            if (langx.isString(names)) {
                names = names.split(/\s+/);
            }
            var store = _store(elm, true);
            names.forEach(function(name) {
                delete store[name];
            });            
        } else {
            cleanData(elm);
        }
        return this;
    }

    /*
     * xxx 
     * @param {Object} elm  
     * @param {Array} names
     */
    function pluck(nodes, property) {
        return map.call(nodes, function(elm) {
            return elm[property];
        });
    }

    /*
     * Get or set the value of an property for the specified element.
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */
    function prop(elm, name, value) {
      if (value === undefined) {
          if (typeof name === "object") {
              for (var propName in name) {
                  prop(elm, propName, name[propName]);
              }
              return this;
          } 
      } 


      name = propMap[name] || name;
      if (value === undefined) {
          return elm[name];
      } else {
          elm[name] = value;
          return this;
      }
    }

    /*
     * remove Attributes  
     * @param {Object} elm  
     * @param {String} name
     */
    function removeAttr(elm, name) {
        name.split(' ').forEach(function(attr) {
            setAttribute(elm, attr);
        });
        return this;
    }


    /*
     * Remove the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.
     * @param {Object} elm  
     * @param {String} name
     */
    function removeProp(elm, name) {
        name.split(' ').forEach(function(prop) {
            delete elm[prop];
        });
        return this;
    }

    /*   
     * Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.  
     * @param {Object} elm  
     * @param {String} txt
     */
    function text(elm, txt) {
        if (txt === undefined) {
            return elm.textContent !==undefined  ? elm.textContent : elm.innerText;
        } else {
            txt = txt == null ? '' : '' + txt ;
            if (elm.textContent !==undefined ) {
              elm.textContent = txt ;
            } else {
              elm.innerText = txt ;
            }
            return this;
        }
    }

    /*   
     * Get the current value of the first element in the set of matched elements or set the value of every matched element.
     * @param {Object} elm  
     * @param {String} value
     */
    function val(elm, value) {
        var hooks = valHooks[ elm.type ] || valHooks[ elm.nodeName.toLowerCase() ];
        if (value === undefined) {
/*
            if (elm.multiple) {
                // select multiple values
                var selectedOptions = filter.call(finder.find(elm, "option"), (function(option) {
                    return option.selected;
                }));
                return pluck(selectedOptions, "value");
            } else {
                if (/input|textarea/i.test(elm.tagName)) {
                  return elm.value;
                }
                return text(elm);
            }
*/

          if ( hooks &&  "get" in hooks &&  ( ret = hooks.get( elm, "value" ) ) !== undefined ) {
            return ret;
          }

          ret = elm.value;

          // Handle most common string cases
          if ( typeof ret === "string" ) {
            return ret.replace( /\r/g, "" );
          }

          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;

        } else {
/*          
            if (/input|textarea/i.test(elm.tagName)) {
              elm.value = value;
            } else {
              text(elm,value);
            }
            return this;
*/
          // Treat null/undefined as ""; convert numbers to string
          if ( value == null ) {
            value = "";

          } else if ( typeof value === "number" ) {
            value += "";

          } else if ( langx.isArray( value ) ) {
            value = langx.map( value, function( value1 ) {
              return value1 == null ? "" : value1 + "";
            } );
          }

          // If set returns undefined, fall back to normal setting
          if ( !hooks || !( "set" in hooks ) || hooks.set( elm, value, "value" ) === undefined ) {
            elm.value = value;
          }
        }      
    }


    finder.pseudos.data = function( elem, i, match,dataName ) {
        return !!data( elem, dataName || match[3]);
    };
   

    function datax() {
        return datax;
    }

    langx.mixin(datax, {
        aria: aria,

        attr: attr,

        cleanData: cleanData,

        data: data,

        pluck: pluck,

        prop: prop,

        removeAttr: removeAttr,

        removeData: removeData,

        removeProp: removeProp,

        text: text,

        val: val,

        valHooks : valHooks
    });

    return skylark.attach("domx.data", datax);
});
define('skylark-domx-data/main',[
    "./data",
    "skylark-domx-velm",
    "skylark-domx-query"    
],function(data,velm,$){
    // from ./data
    velm.delegate([
        "attr",
        "data",
        "prop",
        "removeAttr",
        "removeData",
        "text",
        "val"
    ], data);

    $.fn.text = $.wraps.wrapper_value(data.text, data, data.text);

    $.fn.attr = $.wraps.wrapper_name_value(data.attr, data, data.attr);

    $.fn.removeAttr = $.wraps.wrapper_every_act(data.removeAttr, data);

    $.fn.prop = $.wraps.wrapper_name_value(data.prop, data, data.prop);

    $.fn.removeProp = $.wraps.wrapper_every_act(data.removeProp, data);

    $.fn.data = $.wraps.wrapper_name_value(data.data, data);

    $.fn.removeData = $.wraps.wrapper_every_act(data.removeData);

    $.fn.val = $.wraps.wrapper_value(data.val, data, data.val);


    return data;
});
define('skylark-domx-data', ['skylark-domx-data/main'], function (main) { return main; });

define('skylark-domx-eventer/eventer',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-finder",
    "skylark-domx-noder",
    "skylark-domx-data"
], function(skylark, langx, browser, finder, noder, datax) {
    var mixin = langx.mixin,
        each = langx.each,
        slice = Array.prototype.slice,
        uid = langx.uid,
        ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,
        eventMethods = {
            preventDefault: "isDefaultPrevented",
            stopImmediatePropagation: "isImmediatePropagationStopped",
            stopPropagation: "isPropagationStopped"
        },
        readyRE = /complete|loaded|interactive/;

    function compatible(event, source) {
        if (source || !event.isDefaultPrevented) {
            if (!source) {
                source = event;
            }

            langx.each(eventMethods, function(name, predicate) {
                var sourceMethod = source[name];
                event[name] = function() {
                    this[predicate] = langx.returnTrue;
                    return sourceMethod && sourceMethod.apply(source, arguments);
                }
                event[predicate] = langx.returnFalse;
            });
        }
        return event;
    }

    function parse(event) {
        if (event) {
            var segs = ("" + event).split(".");
            return {
                type: segs[0],
                ns: segs.slice(1).sort().join(" ")
            };
        } else {
            return {
                type : null,
                ns : null
            }
        }
    }

    function isHandler(callback) {
        return callback && (langx.isFunction(callback) || langx.isFunction(callback.handleEvent));
    }

    var NativeEventCtors = [
            window["CustomEvent"], // 0 default
            window["CompositionEvent"], // 1
            window["DragEvent"], // 2
            window["Event"], // 3
            window["FocusEvent"], // 4
            window["KeyboardEvent"], // 5
            window["MessageEvent"], // 6
            window["MouseEvent"], // 7
            window["MouseScrollEvent"], // 8
            window["MouseWheelEvent"], // 9
            window["MutationEvent"], // 10
            window["ProgressEvent"], // 11
            window["TextEvent"], // 12
            window["TouchEvent"], // 13
            window["UIEvent"], // 14
            window["WheelEvent"], // 15
            window["ClipboardEvent"] // 16
        ],
        NativeEvents = {
            "compositionstart": 1, // CompositionEvent
            "compositionend": 1, // CompositionEvent
            "compositionupdate": 1, // CompositionEvent

            "beforecopy": 16, // ClipboardEvent
            "beforecut": 16, // ClipboardEvent
            "beforepaste": 16, // ClipboardEvent
            "copy": 16, // ClipboardEvent
            "cut": 16, // ClipboardEvent
            "paste": 16, // ClipboardEvent

            "drag": 2, // DragEvent
            "dragend": 2, // DragEvent
            "dragenter": 2, // DragEvent
            "dragexit": 2, // DragEvent
            "dragleave": 2, // DragEvent
            "dragover": 2, // DragEvent
            "dragstart": 2, // DragEvent
            "drop": 2, // DragEvent

            "abort": 3, // Event
            "change": 3, // Event
            "error": 3, // Event
            "selectionchange": 3, // Event
            "submit": 3, // Event
            "reset": 3, // Event
            'fullscreenchange':3,
            'fullscreenerror':3,

/*
            'disablepictureinpicturechanged':3,
            'ended':3,
            'enterpictureinpicture':3,
            'durationchange':3,
            'leavepictureinpicture':3,
            'loadstart' : 3,
            'loadedmetadata':3,
            'pause' : 3,
            'play':3,
            'posterchange':3,
            'ratechange':3,
            'seeking' : 3,
            'sourceset':3,
            'suspend':3,
            'textdata':3,
            'texttrackchange':3,
            'timeupdate':3,
            'volumechange':3,
            'waiting' : 3,
*/


            "focus": 4, // FocusEvent
            "blur": 4, // FocusEvent
            "focusin": 4, // FocusEvent
            "focusout": 4, // FocusEvent

            "keydown": 5, // KeyboardEvent
            "keypress": 5, // KeyboardEvent
            "keyup": 5, // KeyboardEvent

            "message": 6, // MessageEvent

            "click": 7, // MouseEvent
            "contextmenu": 7, // MouseEvent
            "dblclick": 7, // MouseEvent
            "mousedown": 7, // MouseEvent
            "mouseup": 7, // MouseEvent
            "mousemove": 7, // MouseEvent
            "mouseover": 7, // MouseEvent
            "mouseout": 7, // MouseEvent
            "mouseenter": 7, // MouseEvent
            "mouseleave": 7, // MouseEvent


            "progress" : 11, //ProgressEvent

            "textInput": 12, // TextEvent

            "tap": 13,
            "touchstart": 13, // TouchEvent
            "touchmove": 13, // TouchEvent
            "touchend": 13, // TouchEvent

            "load": 14, // UIEvent
            "resize": 14, // UIEvent
            "select": 14, // UIEvent
            "scroll": 14, // UIEvent
            "unload": 14, // UIEvent,

            "wheel": 15, // WheelEvent



        };

    //create a custom dom event
    var createEvent = (function() {

        function getEventCtor(type) {
            var idx = NativeEvents[type];
            if (!idx) {
                idx = 0;
            }
            return NativeEventCtors[idx];
        }

        return function(type, props) {
            //create a custom dom event

            if (langx.isString(type)) {
                props = props || {};
            } else {
                props = type || {};
                type = props.type || "";
            }
            var parsed = parse(type);
            type = parsed.type;

            props = langx.mixin({
                bubbles: true,
                cancelable: true
            }, props);

            if (parsed.ns) {
                props.namespace = parsed.ns;
            }

            var ctor = getEventCtor(type),
                e = new ctor(type, props);

            langx.safeMixin(e, props);

            return compatible(e);
        };
    })();

    function createProxy(src, props) {
        var key,
            proxy = {
                originalEvent: src
            };
        for (key in src) {
            if (key !== "keyIdentifier" && !ignoreProperties.test(key) && src[key] !== undefined) {
                proxy[key] = src[key];
            }
        }
        if (props) {
            langx.mixin(proxy, props);
        }
        return compatible(proxy, src);
    }

    var
        specialEvents = {},
        focusinSupported = "onfocusin" in window,
        focus = { focus: "focusin", blur: "focusout" },
        hover = { mouseenter: "mouseover", mouseleave: "mouseout" },
        realEvent = function(type) {
            return hover[type] || (focusinSupported && focus[type]) || type;
        },
        handlers = {},
        EventBindings = langx.klass({
            init: function(target, event) {
                this._target = target;
                this._event = event;
                this._bindings = [];
            },

            add: function(fn, options) {
                var bindings = this._bindings,
                    binding = {
                        fn: fn,
                        options: langx.mixin({}, options)
                    };

                bindings.push(binding);

                var self = this;
                if (!self._listener) {
                    self._listener = function(domEvt) {
                        var elm = this,
                            e = createProxy(domEvt),
                            args = domEvt._args,
                            bindings = self._bindings,
                            ns = e.namespace;

                        if (langx.isDefined(args)) {
                            args = [e].concat(args);
                        } else {
                            args = [e];
                        }

                        e.type = self._event; // convert realEvent to listened event

                        langx.each(bindings, function(idx, binding) {
                            var match = elm;
                            if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {
                                return false;
                            }
                            var fn = binding.fn,
                                options = binding.options || {},
                                selector = options.selector,
                                one = options.one,
                                data = options.data;

                            if (ns && ns != options.ns && options.ns.indexOf(ns) === -1) {
                                return;
                            }
                            if (selector) {
                                match = finder.closest(e.target, selector);
                                if (match && match !== elm) {
                                    langx.mixin(e, {
                                        currentTarget: match,
                                        liveFired: elm
                                    });
                                } else {
                                    return;
                                }
                            }

                            var originalEvent = self._event;
                            if (originalEvent in hover) {
                                var related = e.relatedTarget;
                                if (related && (related === match || noder.contains(match, related))) {
                                    return;
                                }
                            }

                            if (langx.isDefined(data)) {
                                e.data = data;
                            }

                            if (one) {
                                self.remove(fn, options);
                            }

                            var result ;
                            if (fn.handleEvent) {
                                result = fn.handleEvent.apply(fn,args);
                            } else {
                                if (options.ctx) {
                                    result = fn.apply(options.ctx, args);                                   
                                } else {
                                    result = fn.apply(match, args);                                   
                                }
                            }

                            if (result === false) {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        });;
                    };

                    var event = self._event;
                    /*
                                        if (event in hover) {
                                            var l = self._listener;
                                            self._listener = function(e) {
                                                var related = e.relatedTarget;
                                                if (!related || (related !== this && !noder.contains(this, related))) {
                                                    return l.apply(this, arguments);
                                                }
                                            }
                                        }
                    */

                    if (self._target.addEventListener) {
                        self._target.addEventListener(realEvent(event), self._listener, false);
                    } else {
                        console.warn("invalid eventer object", self._target);
                    }
                }

            },
            remove: function(fn, options) {
                options = langx.mixin({}, options);

                function matcherFor(ns) {
                    return new RegExp("(?:^| )" + ns.replace(" ", " .* ?") + "(?: |$)");
                }
                var matcher;
                if (options.ns) {
                    matcher = matcherFor(options.ns);
                }

                this._bindings = this._bindings.filter(function(binding) {
                    var removing = (!fn || fn === binding.fn) &&
                        (!matcher || matcher.test(binding.options.ns)) &&
                        (!options.selector || options.selector == binding.options.selector);

                    return !removing;
                });
                if (this._bindings.length == 0) {
                    if (this._target.removeEventListener) {
                        this._target.removeEventListener(realEvent(this._event), this._listener, false);
                    }
                    this._listener = null;
                }
            }
        }),
        EventsHandler = langx.klass({
            init: function(elm) {
                this._target = elm;
                this._handler = {};
            },

            // add a event listener
            // selector Optional
            register: function(event, callback, options) {
                // Seperate the event from the namespace
                var parsed = parse(event),
                    event = parsed.type,
                    specialEvent = specialEvents[event],
                    bindingEvent = specialEvent && (specialEvent.bindType || specialEvent.bindEventName);

                var events = this._handler;

                // Check if there is already a handler for this event
                if (events[event] === undefined) {
                    events[event] = new EventBindings(this._target, bindingEvent || event);
                }

                // Register the new callback function
                events[event].add(callback, langx.mixin({
                    ns: parsed.ns
                }, options)); // options:{selector:xxx}
            },

            // remove a event listener
            unregister: function(event, fn, options) {
                // Check for parameter validtiy
                var events = this._handler,
                    parsed = parse(event);
                event = parsed.type;

                if (event) {
                    var listener = events[event];

                    if (listener) {
                        listener.remove(fn, langx.mixin({
                            ns: parsed.ns
                        }, options));
                    }
                } else {
                    //remove all events
                    for (event in events) {
                        var listener = events[event];
                        listener.remove(fn, langx.mixin({
                            ns: parsed.ns
                        }, options));
                    }
                }
            }
        }),

        findHandler = function(elm) {
            var id = uid(elm),
                handler = handlers[id];
            if (!handler) {
                handler = handlers[id] = new EventsHandler(elm);
            }
            return handler;
        };


    /*   
     * Remove all event handlers from the specified element.
     * @param {HTMLElement} elm  
     */
    function clear(elm) {
        var handler = findHandler(elm);

        handler.unregister();

        return this;
    }

    var focusedQueue = [],
        focuser = langx.loop(function(){
            for (var i = 0; i<focusedQueue.length; i++) {
                trigger(focusedQueue[i],"focused");
            }
            focusedQueue = [];
        });

    focuser.start();


    function focused(elm) {
        if (!focusedQueue.includes(elm)) {
            focusedQueue.push(elm)
        }
    }

    /*   
     * Remove an event handler for one or more events from the specified element.
     * @param {HTMLElement} elm  
     * @param {String} events
     * @param {String　Optional } selector
     * @param {Function} callback
     */
    function off(elm, events, selector, callback) {
        var $this = this
        if (langx.isPlainObject(events)) {
            langx.each(events, function(type, fn) {
                off(elm, type, selector, fn);
            })
            return $this;
        }

        if (!langx.isString(selector) && !isHandler(callback) && callback !== false) {
            callback = selector;
            selector = undefined;
        }

        if (callback === false) {
            callback = langx.returnFalse;
        }

        if (typeof events == "string") {
            if (events.indexOf(",") > -1) {
                events = events.split(",");
            } else {
                events = events.split(/\s/);
            }
        }

        var handler = findHandler(elm);

        if (events) events.forEach(function(event) {

            handler.unregister(event, callback, {
                selector: selector,
            });
        });
        return this;
    }

    /*   
     * Attach an event handler function for one or more events to the selected elements.
     * @param {HTMLElement} elm  
     * @param {String} events
     * @param {String　Optional} selector
     * @param {Anything Optional} data
     * @param {Function} callback
     * @param {Boolean　Optional} one
     */
    function on(elm, events, selector, data, callback, ctx,one) {

        var autoRemove, delegator;
        if (langx.isPlainObject(events)) {
            langx.each(events, function(type, fn) {
                on(elm, type, selector, data, fn, one);
            });
            return this;
        }

        if (!langx.isString(selector) && !isHandler(callback)) {
            one = ctx;
            ctx = callback;
            callback = data;
            data = selector;
            selector = undefined;
        }

        if (isHandler(data)) {
            one = ctx;
            ctx = callback;
            callback = data;
            data = undefined;
        }

        if (langx.isBoolean(ctx)) {
            one = ctx;
            ctx = undefined;
        }
        if (callback === false) {
            callback = langx.returnFalse;
        }

        if (typeof events == "string") {
            if (events.indexOf(",") > -1) {
                events = events.split(",");
            } else {
                events = events.split(/\s/);
            }
        }

        var handler = findHandler(elm);

        events.forEach(function(event) {
            if (event == "ready") {
                return ready(callback);
            }
            handler.register(event, callback, {
                data: data,
                selector: selector,
                ctx : ctx,
                one: !!one
            });
        });
        return this;
    }

    /*   
     * Attach a handler to an event for the elements. The handler is executed at most once per 
     * @param {HTMLElement} elm  
     * @param {String} event
     * @param {String　Optional} selector
     * @param {Anything Optional} data
     * @param {Function} callback
     */
    function one(...args) {
        on(...args, true);

        return this;
    }

    /*   
     * Prevents propagation and clobbers the default action of the passed event. The same as calling event.preventDefault() and event.stopPropagation(). 
     * @param {String} event
     */
    function stop(event) {
        if (window.document.all) {
            event.keyCode = 0;
        }
        if (event.preventDefault) {
            event.preventDefault();
            event.stopPropagation();
        }
        return this;
    }
    /*   
     * Execute all handlers and behaviors attached to the matched elements for the given event  
     * @param {String} evented
     * @param {String} type
     * @param {Array or PlainObject } args
     */
    function trigger(evented, type, args) {
        var e;
        if (type instanceof Event) {
            e = type;
        } else {
            e = createEvent(type, args);
        }
        e._args = args;

        var fn = (evented.dispatchEvent || evented.trigger);
        if (fn) {
            fn.call(evented, e);
        } else {
            console.warn("The evented parameter is not a eventable object");
        }

        return this;
    }
    /*   
     * Specify a function to execute when the DOM is fully loaded.  
     * @param {Function} callback
     */
    function ready(callback) {
        // need to check if document.body exists for IE as that browser reports
        // document ready when it hasn't yet created the body elm
        if (readyRE.test(document.readyState) && document.body) {
            langx.defer(callback);
        } else {
            document.addEventListener('DOMContentLoaded', callback, false);
        }

        return this;
    }

    var resizedQueue = [],
        resizer = langx.loop(function(){
            for (var i = 0; i<resizedQueue.length; i++) {
                trigger(resizedQueue[i],"resized");
            }
            resizedQueue = [];
        });

    resizer.start();


    function resized(elm) {
        if (!resizedQueue.includes(elm)) {
            resizedQueue.push(elm)
        }
    }


    var keyCodeLookup = {
        "backspace": 8,
        "comma": 188,
        "delete": 46,
        "down": 40,
        "end": 35,
        "enter": 13,
        "escape": 27,
        "home": 36,
        "left": 37,
        "page_down": 34,
        "page_up": 33,
        "period": 190,
        "right": 39,
        "space": 32,
        "tab": 9,
        "up": 38
    };
    //example:
    //shortcuts(elm).add("CTRL+ALT+SHIFT+X",function(){console.log("test!")});
    function shortcuts(elm) {

        var registry = datax.data(elm, "shortcuts");
        if (!registry) {
            registry = {};
            datax.data(elm, "shortcuts", registry);
            var run = function(shortcut, event) {
                var n = event.metaKey || event.ctrlKey;
                if (shortcut.ctrl == n && shortcut.alt == event.altKey && shortcut.shift == event.shiftKey) {
                    if (event.keyCode == shortcut.keyCode || event.charCode && event.charCode == shortcut.charCode) {
                        event.preventDefault();
                        if ("keydown" == event.type) {
                            shortcut.fn(event);
                        }
                        return true;
                    }
                }
            };
            on(elm, "keyup keypress keydown", function(event) {
                if (!(/INPUT|TEXTAREA/.test(event.target.nodeName))) {
                    for (var key in registry) {
                        run(registry[key], event);
                    }
                }
            });

        }

        return {
            add: function(pattern, fn) {
                var shortcutKeys;
                if (pattern.indexOf(",") > -1) {
                    shortcutKeys = pattern.toLowerCase().split(",");
                } else {
                    shortcutKeys = pattern.toLowerCase().split(" ");
                }
                shortcutKeys.forEach(function(shortcutKey) {
                    var setting = {
                        fn: fn,
                        alt: false,
                        ctrl: false,
                        shift: false
                    };
                    shortcutKey.split("+").forEach(function(key) {
                        switch (key) {
                            case "alt":
                            case "ctrl":
                            case "shift":
                                setting[key] = true;
                                break;
                            default:
                                setting.charCode = key.charCodeAt(0);
                                setting.keyCode = keyCodeLookup[key] || key.toUpperCase().charCodeAt(0);
                        }
                    });
                    var regKey = (setting.ctrl ? "ctrl" : "") + "," + (setting.alt ? "alt" : "") + "," + (setting.shift ? "shift" : "") + "," + setting.keyCode;
                    registry[regKey] = setting;
                })
            }

        };

    }

    if (browser.support.transition) {
        specialEvents.transitionEnd = {
//          handle: function (e) {
//            if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
//          },
          bindType: browser.support.transition.end,
          delegateType: browser.support.transition.end
        }        
    }

    function isNativeEvent(events) {
        if (langx.isString(events)) {
            return !!NativeEvents[events];
        } else if (langx.isArray(events)) {
            for (var i=0; i<events.length; i++) {
                if (NativeEvents[events]) {
                    return false;
                }
            }
            return events.length > 0;
        }
    }


    function eventer() {
        return eventer;
    }

    langx.mixin(eventer, {
        NativeEvents : NativeEvents,
        
        clear,
        
        create: createEvent,

        focused,

        keys: keyCodeLookup,

        isNativeEvent,

        off: off,

        on: on,

        one: one,

        proxy: createProxy,

        ready: ready,

        resized,
        
        shortcuts: shortcuts,

        special: specialEvents,

        stop: stop,

        trigger: trigger

    });

    each(NativeEvents,function(name){
        eventer[name] = function(elm,selector,data,callback) {
            if (arguments.length>1) {
                return this.on(elm,name,selector,data,callback);
            } else {
                if (name == "focus") {
                    if (elm.focus) {
                        elm.focus();
                    }
                } else if (name == "blur") {
                    if (elm.blur) {
                        elm.blur();
                    }
                } else if (name == "click") {
                    if (elm.click) {
                        elm.click();
                    }
                } else {
                    this.trigger(elm,name);
                }

                return this;
            }
        };
    });

    return skylark.attach("domx.eventer",eventer);
});
define('skylark-domx-eventer/main',[
    "skylark-langx/langx",
    "./eventer",
    "skylark-domx-velm",
    "skylark-domx-query"        
],function(langx,eventer,velm,$){

    var delegateMethodNames = [
        "off",
        "on",
        "one",
        "trigger"
    ];

    langx.each(eventer.NativeEvents,function(name){
        delegateMethodNames.push(name);
    });

    // from ./eventer
    velm.delegate(delegateMethodNames, eventer);

    langx.each(delegateMethodNames,function(i,name){
        $.fn[name] = $.wraps.wrapper_every_act(eventer[name],eventer);
    });


    /*
    $.fn.on = $.wraps.wrapper_every_act(eventer.on, eventer);

    $.fn.off = $.wraps.wrapper_every_act(eventer.off, eventer);

    $.fn.trigger = $.wraps.wrapper_every_act(eventer.trigger, eventer);

    ('focusin focusout focus blur load resize scroll unload click dblclick ' +
        'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
        'change select keydown keypress keyup error transitionEnd').split(' ').forEach(function(event) {
        $.fn[event] = $.wraps.wrapper_every_act(eventer[event],eventer);
    });

    $.fn.one = function(event, selector, data, callback) {
        if (!langx.isString(selector) && !langx.isFunction(callback)) {
            callback = data;
            data = selector;
            selector = null;
        }

        if (langx.isFunction(data)) {
            callback = data;
            data = null;
        }

        return this.on(event, selector, data, callback, 1)
    }; 
    */

    $.ready = eventer.ready;

    return eventer;
});
define('skylark-domx-eventer', ['skylark-domx-eventer/main'], function (main) { return main; });

define('skylark-domx-plugins-base/plugins',[
    "skylark-langx-ns"
], function(skylark) {
    "use strict";

    var pluginKlasses = {},
        shortcuts = {};


    return  skylark.attach("domx.plugins",{
        pluginKlasses,
        shortcuts
    });
});
define('skylark-langx-events/Emitter',[
  "skylark-langx-types",
  "skylark-langx-objects",
  "skylark-langx-arrays",
  "skylark-langx-klass",
  "./events",
  "./event",
  "./listener"
],function(types,objects,arrays,klass,events,Event,Listener){
    var slice = Array.prototype.slice,
        compact = arrays.compact,
        isDefined = types.isDefined,
        isPlainObject = types.isPlainObject,
        isFunction = types.isFunction,
        isString = types.isString,
        isEmptyObject = types.isEmptyObject,
        mixin = objects.mixin,
        safeMixin = objects.safeMixin;

    function parse(event) {
        var segs = ("" + event).split(".");
        return {
            name: segs[0],
            ns: segs.slice(1).join(" ")
        };
    }

    
    var queues  = new Map();


    var Emitter = Listener.inherit({
        _prepareArgs : function(e,args) {
            if (isDefined(args)) {
                args = [e].concat(args);
            } else {
                args = [e];
            }
            return args;
        },

        on: function(events, selector, data, callback, ctx, /*used internally*/ one) {
            var self = this,
                _hub = this._hub || (this._hub = {});

            if (isPlainObject(events)) {
                ctx = callback;
                each(events, function(type, fn) {
                    self.on(type, selector, data, fn, ctx, one);
                });
                return this;
            }

            if (!isString(selector) && !isFunction(callback)) {
                ctx = callback;
                callback = data;
                data = selector;
                selector = undefined;
            }

            if (isFunction(data)) {
                ctx = callback;
                callback = data;
                data = null;
            }

            if (!callback ) {
                throw new Error("No callback function");
            } else if (!isFunction(callback)) {
                throw new Error("The callback  is not afunction");
            }

            if (isString(events)) {
                events = events.split(/\s/)
            }

            events.forEach(function(event) {
                var parsed = parse(event),
                    name = parsed.name,
                    ns = parsed.ns;

                (_hub[name] || (_hub[name] = [])).push({
                    fn: callback,
                    selector: selector,
                    data: data,
                    ctx: ctx,
                    ns : ns,
                    one: one
                });
            });

            return this;
        },

        one: function(events, selector, data, callback, ctx) {
            return this.on(events, selector, data, callback, ctx, 1);
        },

        emit: function(e /*,argument list*/ ) {
            if (!this._hub) {
                return this;
            }

            var self = this;

            if (isString(e)) {
                e = new Event(e); //new CustomEvent(e);
            }

            Object.defineProperty(e,"target",{
                value : this
            });

            var args = slice.call(arguments, 1);

            args = this._prepareArgs(e,args);

            [e.type || e.name, "all"].forEach(function(eventName) {
                var parsed = parse(eventName),
                    name = parsed.name,
                    ns = parsed.ns;

                var listeners = self._hub[name];
                if (!listeners) {
                    return;
                }

                var len = listeners.length,
                    reCompact = false;

                for (var i = 0; i < len; i++) {
                    if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {
                        return this;
                    }
                    var listener = listeners[i];
                    if (ns && (!listener.ns ||  !listener.ns.startsWith(ns))) {
                        continue;
                    }

                    if (listener.data) {
                        e.data = mixin({}, listener.data, e.data);
                    }
                    if (args.length == 2 && isPlainObject(args[1])) {
                        e.data = e.data || {};
                        mixin(e.data,args[1]);
                    }

                    listener.fn.apply(listener.ctx, args);
                    if (listener.one) {
                        listeners[i] = null;
                        reCompact = true;
                    }
                }

                if (reCompact) {
                    self._hub[eventName] = compact(listeners);
                }

            });
            return this;
        },

        queueEmit : function (event) {
            const type = event.type || event;
            let map = queues.get(this);
            if (!map) {
                map = new Map();
                queues.set(this, map);
            }
            const oldTimeout = map.get(type);
            map.delete(type);
            window.clearTimeout(oldTimeout);
            const timeout = window.setTimeout(() => {
                if (map.size === 0) {
                    map = null;
                    queues.delete(this);
                }
                this.trigger(event);
            }, 0);
            map.set(type, timeout);
        },

        listened: function(event) {
            var evtArr = ((this._hub || (this._events = {}))[event] || []);
            return evtArr.length > 0;
        },

        off: function(events, callback) {
            if (!events) {
              this._hub = null;
              return;
            }
            var _hub = this._hub || (this._hub = {});
            if (isString(events)) {
                events = events.split(/\s/)
            }

            events.forEach(function(event) {
                var parsed = parse(event),
                    name = parsed.name,
                    ns = parsed.ns;

                var evts = _hub[name];

                if (evts) {
                    var liveEvents = [];

                    if (callback || ns) {
                        for (var i = 0, len = evts.length; i < len; i++) {
                            
                            if (callback && evts[i].fn !== callback && evts[i].fn._ !== callback) {
                                liveEvents.push(evts[i]);
                                continue;
                            } 

                            if (ns && (!evts[i].ns || evts[i].ns.indexOf(ns)!=0)) {
                                liveEvents.push(evts[i]);
                                continue;
                            }
                        }
                    }

                    if (liveEvents.length) {
                        _hub[name] = liveEvents;
                    } else {
                        delete _hub[name];
                    }

                }
            });

            return this;
        },

        trigger  : function() {
            return this.emit.apply(this,arguments);
        },

        queueTrigger : function (event) {
            return this.queueEmit.apply(this,arguments);
        }

    });


    return events.Emitter = Emitter;

});
define('skylark-domx-fx/fx',[
    "skylark-langx/skylark",
    "skylark-langx/langx"
], function(skylark,langx) {

    function fx() {
        return fx;
    }

    langx.mixin(fx, {
        off: false,
        speeds: {
            normal: 400,
            fast: 200,
            slow: 600
        }
    });

    return skylark.attach("domx.fx", fx);
});
define('skylark-domx-transits/transits',[
    "skylark-langx/skylark",
    "skylark-langx/langx"
], function(skylark,langx) {

    function transits() {
        return transits;
    }

    langx.mixin(transits, {
        off: false,
        speeds: {
            normal: 400,
            fast: 200,
            slow: 600
        }
    });

    return skylark.attach("domx.transits", transits);
});
define('skylark-domx-transits/transit',[
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-noder",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "skylark-domx-eventer",
    "./transits"
], function(langx, browser, noder, geom, styler, eventer,transits) {

    var transitionProperty,
        transitionDuration,
        transitionTiming,
        transitionDelay,

        transitionEnd = browser.normalizeCssEvent('TransitionEnd'),

        supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,
        transform = browser.css3PropPrefix + "transform",
        cssReset = {};

    cssReset[transitionProperty = browser.normalizeCssProperty("transition-property")] =
        cssReset[transitionDuration = browser.normalizeCssProperty("transition-duration")] =
        cssReset[transitionDelay = browser.normalizeCssProperty("transition-delay")] =
        cssReset[transitionTiming = browser.normalizeCssProperty("transition-timing-function")] = "";

    /*   
     * Perform a custom animation of a set of CSS properties.
     * @param {Object} elm  
     * @param {Number or String} properties
     * @param {String} ease
     * @param {Number or String} duration
     * @param {Function} callback
     * @param {Number or String} delay
     */
    function transit(elm, properties, duration, ease, callback, delay) {
        var key,
            cssValues = {},
            cssProperties = [],
            transforms = "",
            that = this,
            endEvent,
            wrappedCallback,
            fired = false,
            hasScrollTop = false,
            resetClipAuto = false;

        if (langx.isPlainObject(duration)) {
            ease = duration.easing;
            callback = duration.complete;
            delay = duration.delay;
            duration = duration.duration;
        }

        if (langx.isString(duration)) {
            duration = transits.speeds[duration];
        }
        if (duration === undefined) {
            duration = transits.speeds.normal;
        }
        duration = duration / 1000;
        if (transits.off) {
            duration = 0;
        }

        if (langx.isFunction(ease)) {
            callback = ease;
            eace = "swing";
        } else {
            ease = ease || "swing";
        }

        if (delay) {
            delay = delay / 1000;
        } else {
            delay = 0;
        }

        // CSS transitions
        for (key in properties) {
            var v = properties[key];
            if (supportedTransforms.test(key)) {
                transforms += key + "(" + v + ") ";
            } else {
                if (key === "scrollTop") {
                    hasScrollTop = true;
                }
                if (key == "clip" && langx.isPlainObject(v)) {
                    cssValues[key] = "rect(" + v.top+"px,"+ v.right +"px,"+ v.bottom +"px,"+ v.left+"px)";
                    if (styler.css(elm,"clip") == "auto") {
                        var size = geom.size(elm);
                        styler.css(elm,"clip","rect("+"0px,"+ size.width +"px,"+ size.height +"px,"+"0px)");  
                        resetClipAuto = true;
                    }

                } else {
                    cssValues[key] = v;
                }
                cssProperties.push(langx.dasherize(key));
            }
        }
        endEvent = transitionEnd;

        if (transforms) {
            cssValues[transform] = transforms;
            cssProperties.push(transform);
        }

        if (duration > 0) {
            cssValues[transitionProperty] = cssProperties.join(", ");
            cssValues[transitionDuration] = duration + "s";
            cssValues[transitionDelay] = delay + "s";
            cssValues[transitionTiming] = ease;
        }

        wrappedCallback = function(event) {
            fired = true;
            if (event) {
                if (event.target !== event.currentTarget) {
                    return // makes sure the event didn't bubble from "below"
                }
                eventer.off(event.target, endEvent, wrappedCallback)
            } else {
                eventer.off(elm, endEvent, wrappedCallback) // triggered by setTimeout
            }
            styler.css(elm, cssReset);
            if (resetClipAuto) {
 //               styler.css(elm,"clip","auto");
            }
            callback && callback.call(this);
        };

        if (duration > 0) {
            eventer.on(elm, endEvent, wrappedCallback);
            // transitionEnd is not always firing on older Android phones
            // so make sure it gets fired
            langx.debounce(function() {
                if (fired) {
                    return;
                }
                wrappedCallback.call(that);
            }, ((duration + delay) * 1000) + 25)();
        }

        // trigger page reflow so new elements can transit
        elm.clientLeft;

        styler.css(elm, cssValues);

        if (duration <= 0) {
            langx.debounce(function() {
                if (fired) {
                    return;
                }
                wrappedCallback.call(that);
            }, 0)();
        }

        if (hasScrollTop) {
            geom.scrollToTop(elm, properties["scrollTop"], duration, callback);
        }

        return this;
    }

    return transits.transit = transit;

});
define('skylark-domx-animates/animates',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-browser"
], function(skylark,langx,browser) {

    function animates() {
        return animates;
    }

    langx.mixin(animates, {
        off: false,
        speeds: {
            normal: 400,
            fast: 200,
            slow: 600
        },
        animationName : browser.normalizeCssProperty("animation-name"),
        animationDuration : browser.normalizeCssProperty("animation-duration"),
        animationDelay : browser.normalizeCssProperty("animation-delay"),
        animationTiming : browser.normalizeCssProperty("animation-timing-function"),
        animationEnd : browser.normalizeCssEvent('AnimationEnd'),

        animateBaseClass : "animated"
    });

    return skylark.attach("domx.animates", animates);
});
define('skylark-domx-animates/animation',[
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-noder",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "skylark-domx-eventer",
    "./animates"
], function(langx, browser, noder, geom, styler, eventer,animates) {

    var animationName = animates.animationName,
        animationDuration = animates.animationDuration,
        animationTiming = animates.animationTiming,
        animationDelay = animates.animationDelay,

        animationEnd = animates.animationEnd,

        cssReset = {};


    cssReset[animationName] =
        cssReset[animationDuration] =
        cssReset[animationDelay] =
        cssReset[animationTiming] = "";

    /*   
     * Perform a custom animation.
     * @param {Object} elm  
     * @param {String} name
     * @param {String} ease
     * @param {Number or String} duration
     * @param {Function} callback
     * @param {Number or String} delay
     */
    function animation(elm, name, duration, ease, callback, delay) {
        var cssValues = {};
        if (langx.isPlainObject(duration)) {
            ease = duration.easing;
            callback = duration.complete;
            delay = duration.delay;
            duration = duration.duration;
        }

        if (langx.isString(duration)) {
            duration = animates.speeds[duration];
        }
        if (duration === undefined) {
            duration = animates.speeds.normal;
        }
        duration = duration / 1000;

        if (langx.isFunction(ease)) {
            callback = ease;
            eace = "swing";
        } else {
            ease = ease || "swing";
        }

        if (delay) {
            delay = delay / 1000;
        } else {
            delay = 0;
        }
        // keyframe animation
        cssValues[animationName] = name;
        cssValues[animationDuration] = duration + "s";
        cssValues[animationTiming] = ease;


        if (duration > 0) {
            eventer.on(elm, animationEnd, callback);
        }

        // trigger page reflow so new elements can animate
        elm.clientLeft;

        styler.css(elm, cssValues);

        return this;
    }

    return animates.animation = animation;

});
define('skylark-domx-fx/animate',[
    "skylark-langx/langx",
    "skylark-domx-transits/transit",
    "skylark-domx-animates/animation",
    "./fx"
], function(langx, transit,animation,fx) {

    /*   
     * Perform a custom animation of a set of CSS properties.
     * @param {Object} elm  
     * @param {Number or String} properties
     * @param {String} ease
     * @param {Number or String} duration
     * @param {Function} callback
     * @param {Number or String} delay
     */
    function animate(elm, properties, duration, ease, callback, delay) {
        if (langx.isString(properties)) {
            return animation(elm,properties,duration,ease,callback,delay);
        } else {
            return transit(elm,properties,duration,ease,callback,delay);
        }

    }

    return fx.animate = animate;

});
define('skylark-domx-transits/bounce',[
    "skylark-langx/langx",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "./transits",
    "./transit"
],function(langx,geom,styler,transits,transit) {

    function bounce(elm, options, done ) {
        var upAnim, downAnim, refValue,
            // Defaults:
            mode = options.mode,
            hide = mode === "hide",
            show = mode === "show",
            direction = options.direction || "up",
            start,
            distance = options.distance,
            times = options.times || 5,

            // Number of internal animations
            anims = times * 2 + ( show || hide ? 1 : 0 ),
            speed = options.duration / anims,
            easing = options.easing,

            // Utility:
            ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
            motion = ( direction === "up" || direction === "left" ),
            i = 0;

        //createPlaceholder(elm);

        var Deferred = langx.Deferred;
        var funcs = [];

        refValue = styler.css(elm,ref );

        // Default distance for the BIGGEST bounce is the outer Distance / 3
        if ( !distance ) {
            var msize = geom.size(elm);
            distance = (ref === "top" ? msize.height : msize.width) / 3;
        }

        start = geom.relativePosition(elm)[ref];

        if ( show ) {
            downAnim = { opacity: 1 };
            downAnim[ ref ] = refValue;

            // If we are showing, force opacity 0 and set the initial position
            // then do the "first" animation
            styler.css(elm, "opacity", 0 );
            styler.css(elm, ref, start + (motion ? -distance * 2 : distance * 2 ));

            funcs.push(doAnimate(elm,downAnim, speed, easing));
        }

        // Start at the smallest distance if we are hiding
        if ( hide ) {
            distance = distance / Math.pow( 2, times - 1 );
        }

        downAnim = {};
        downAnim[ ref ] = refValue;


        function doAnimate(elm,properties, duration, easing) {
            return function() {
                var d = new Deferred();

                transit(elm,properties, duration, easing ,function(){
                    d.resolve();
                });
                return d.promise;

            }
        }

        // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
        for ( ; i < times; i++ ) {
            upAnim = {};
            upAnim[ ref ] = start + ( motion ? -distance : distance) ;

            funcs.push(doAnimate(elm,upAnim, speed, easing));

            funcs.push(doAnimate(elm,downAnim, speed, easing));

            distance = hide ? distance * 2 : distance / 2;
        }

        // Last Bounce when Hiding
        if ( hide ) {
            upAnim = { opacity: 0 };
            upAnim[ ref ] = start + ( motion ? -1 * distance : distance) ;

            funcs.push(doAnimate(elm,upAnim, speed, easing ));
        }

        funcs.push(done);
        funcs.reduce(function(prev, curr, index, array) {
            return prev.then(curr);
        }, Deferred.resolve());

        return this;
    } 

    return transits.bounce = bounce;
});
define('skylark-domx-transits/emulate-transition-end',[
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-eventer",
    "./transits"
],function(langx,browser,eventer,transits) {
    
    function emulateTransitionEnd(elm,duration) {
        var called = false;
        eventer.one(elm,'transitionEnd', function () { 
            called = true;
        })
        var callback = function () { 
            if (!called) {
                eventer.trigger(elm,browser.support.transition.end) 
            }
        };
        setTimeout(callback, duration);
        
        return this;
    } 



    return transits.emulateTransitionEnd = emulateTransitionEnd;
});
define('skylark-domx-transits/show',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./transit"
],function(langx,styler,transits,transit) {
    /*   
     * Display an element.
     * @param {Object} elm  
     * @param {String} speed
     * @param {Function} callback
     */
    function show(elm, speed, callback) {
        styler.show(elm);
        if (speed) {
            if (!callback && langx.isFunction(speed)) {
                callback = speed;
                speed = "normal";
            }
            styler.css(elm, "opacity", 0)
            transit(elm, { opacity: 1, scale: "1,1" }, speed, callback);
        }
        return this;
    }

    return transits.show = show;
});
define('skylark-domx-transits/hide',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./transit"
],function(langx,styler,transits,transit) {
    /*   
     * Hide an element.
     * @param {Object} elm  
     * @param {String} speed
     * @param {Function} callback
     */
    function hide(elm, speed, callback) {
        if (speed) {
            if (!callback && langx.isFunction(speed)) {
                callback = speed;
                speed = "normal";
            }
            transit(elm, { opacity: 0, scale: "0,0" }, speed, function() {
                styler.hide(elm);
                if (callback) {
                    callback.call(elm);
                }
            });
        } else {
            styler.hide(elm);
        }
        return this;
    }

    return transits.hide = hide;
});
define('skylark-domx-transits/explode',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "skylark-domx-geom",
    "skylark-domx-noder",
    "skylark-domx-query",
    "./transits",
    "./transit",
    "./show",
    "./hide"
],function(langx,styler,geom,noder,$,transits,transit,show,hide) {

    function explode( elm,options, done ) {

		// Show and then visibility:hidden the element before calculating offset
		styler.show(elm);
		styler.css(elm, "visibility", "hidden" );

		var i, j, left, top, mx, my,
			rows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,
			cells = rows,
			mode = options.mode,
			show = mode === "show",
			offset = geom.pagePosition(elm),

			// Width and height of a piece
			size = geom.marginSize(elm),
			width = Math.ceil( size.width / cells ),
			height = Math.ceil( size.height / rows ),
			pieces = [];

		// Children transit complete:
		function childComplete() {
			pieces.push( this );
			if ( pieces.length === rows * cells ) {
				animComplete();
			}
		}

		// Clone the element for each row and cell.
		for ( var i = 0; i < rows; i++ ) { // ===>
			top = offset.top + i * height;
			my = i - ( rows - 1 ) / 2;

			for ( j = 0; j < cells; j++ ) { // |||
				left = offset.left + j * width;
				mx = j - ( cells - 1 ) / 2;

				// Create a clone of the now hidden main element that will be absolute positioned
				// within a wrapper div off the -left and -top equal to size of our pieces
				$(elm)
					.clone()
					.appendTo( "body" )
					.wrap( "<div></div>" )
					.css( {
						position: "absolute",
						visibility: "visible",
						left: -j * width,
						top: -i * height
					} )

					// Select the wrapper - make it overflow: hidden and absolute positioned based on
					// where the original was located +left and +top equal to the size of pieces
					.parent()
						.addClass( options.explodeClass || "ui-effects-explode" )
						.css( {
							position: "absolute",
							overflow: "hidden",
							width: width,
							height: height,
							left: left + ( show ? mx * width : 0 ),
							top: top + ( show ? my * height : 0 ),
							opacity: show ? 0 : 1
						} )
						.transit( {
							left: left + ( show ? 0 : mx * width ),
							top: top + ( show ? 0 : my * height ),
							opacity: show ? 1 : 0
						}, options.duration || 500, options.easing, childComplete );
			}
		}

		function animComplete() {
			styler.css(elm, {
				visibility: "visible"
			} );
			$( pieces ).remove();
			done();
		}

		return this;
	}


	return transits.explode = explode;
});

define('skylark-domx-transits/fade',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./transit"
],function(langx,styler,transits,transit) {
    /*   
     * Adjust the opacity of an element.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {Number or String} opacity
     * @param {String} easing
     * @param {Function} callback
     */
    function fade(elm, opacity,options, callback) {
        if (langx.isFunction(options)) {
            callback = options;
            options = {};
        }
        options = options || {};
        
        transit(elm, { opacity: opacity }, options.duration, options.easing, callback);
        return this;
    }


    return transits.fade = fade;
});
define('skylark-domx-transits/fade-in',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./fade"
],function(langx,styler,transits,fadeTo) {
    /*   
     * Display an element by fading them to opaque.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {String} easing
     * @param {Function} callback
     */
    function fadeIn(elm, options, callback) {
        var target = styler.css(elm, "opacity");
        if (target > 0) {
            styler.css(elm, "opacity", 0);
        } else {
            target = 1;
        }
        styler.show(elm);

        fadeTo(elm,  target,options, callback);

        return this;
    }


    return transits.fadeIn = fadeIn;
});
define('skylark-domx-transits/fade-out',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./fade"
],function(langx,styler,transits,fadeTo) {
    /*   
     * Hide an element by fading them to transparent.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {String} easing
     * @param {Function} callback
     */
    function fadeOut(elm, options, callback) {

        function complete() {
            styler.css(elm,"opacity",opacity);
            styler.hide(elm);
            if (callback) {
                callback.call(elm);
            }
        }

        fadeTo(elm, 0,options,callback);

        return this;
    }

    return transits.fadeOut = fadeOut;
});
define('skylark-domx-transits/fade-toggle',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./fade-in",
    "./fade-out"
],function(langx,styler,transits,fadeIn,fadeOut) {

    /*   
     * Display or hide an element by animating its opacity.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {String} ceasing
     * @param {Function} callback
     */
    function fadeToggle(elm, speed, easing, callback) {
        if (styler.isInvisible(elm)) {
            fadeIn(elm, speed, easing, callback);
        } else {
            fadeOut(elm, speed, easing, callback);
        }
        return this;
    }


    return transits.fadeToggle = fadeToggle;
});
define('skylark-domx-transits/pulsate',[
    "skylark-langx/langx",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "./transits",
    "./transit"
],function(langx,geom,styler,transits,transit) {

	function pulsate(elm, options, done ) {
		var 
			mode = options.mode,
			show = mode === "show" || !mode,
			hide = mode === "hide",
			showhide = show || hide,

			// Showing or hiding leaves off the "last" animation
			anims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
			duration = options.duration / anims,
			animateTo = 0,
			i = 1;

		if ( show || styler.isInvisible(elm) ) {
			styler.css(elm, "opacity", 0 );
			styler.show(elm);
			animateTo = 1;
		}

		// Anims - 1 opacity "toggles"

		var Deferred = langx.Deferred;
		var funcs = [];

		function doAnimate(elm,properties, duration, ease) {
			return function() {
				var d = new Deferred();

				transit( elm,properties, duration, ease ,function(){
					d.resolve();
				});
				return d.promise;

			}
		}


		for ( ; i < anims; i++ ) {
			funcs.push(doAnimate(elm,{ opacity: animateTo }, duration, options.easing ));
			animateTo = 1 - animateTo;
		}

	    funcs.push(doAnimate(elm,{ opacity: animateTo }, duration, options.easing ));

		funcs.push(done);
		funcs.reduce(function(prev, curr, index, array) {
	  		return prev.then(curr);
		}, Deferred.resolve());

		return this;

	}

	return transits.pulsate = pulsate;

});

define('skylark-domx-transits/shake',[
    "skylark-langx/langx",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "./transits",
    "./transit"
],function(langx,geom,styler,transits,transit) {
	function shake(elm, options, done ) {

		var i = 1,
			direction = options.direction || "left",
			distance = options.distance || 20,
			times = options.times || 3,
			anims = times * 2 + 1,
			speed = Math.round( options.duration / anims ),
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			positiveMotion = ( direction === "up" || direction === "left" ),
			animation0 = {},
			animation = {},
			animation1 = {},
			animation2 = {};

		var Deferred = langx.Deferred;
			start = geom.relativePosition(elm)[ref],
			funcs = [];

		function doAnimate(elm,properties, duration, ease) {
			return function() {
				var d = new Deferred();

				transit(elm, properties, duration, ease ,function(){
					d.resolve();
				});
				return d.promise;
			}
		}

		// Animation
		animation0[ ref ] = start;
		animation[ ref ] = start + ( positiveMotion ? -1 : 1 ) * distance;
		animation1[ ref ] = animation[ ref ] + ( positiveMotion ? 1 : -1 ) * distance * 2;
		animation2[ ref ] = animation1[ ref ] + ( positiveMotion ? -1 : 1 ) * distance * 2;

		// Animate
	    funcs.push(doAnimate(elm,animation, speed, options.easing ));

		// Shakes
		for ( ; i < times; i++ ) {
		    funcs.push(doAnimate(elm,animation1, speed, options.easing ));
		    funcs.push(doAnimate(elm,animation2, speed, options.easing ));
		}

	    funcs.push(doAnimate(elm,animation0, speed /2 , options.easing ));

		funcs.push(done);
		funcs.reduce(function(prev, curr, index, array) {
	  		return prev.then(curr);
		}, Deferred.resolve());

		return this;
	}

	return transits.shake = shake;

});

define('skylark-domx-transits/slide',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./transit"
],function(langx,styler,transits,transit) {

    function slide(elm,options,callback ) {
    	if (langx.isFunction(options)) {
    		callback = options;
    		options = {};
    	}
    	options = options || {};
		var direction = options.direction || "down",
			isHide = ( direction === "up" || direction === "left" ),
			isVert = ( direction === "up" || direction === "down" ),
			duration = options.duration || transits.speeds.normal;


        // get the element position to restore it then
        var position = styler.css(elm, 'position');

        if (isHide) {
            // active the function only if the element is visible
        	if (styler.isInvisible(elm)) {
        		return this;
        	}
        } else {
	        // show element if it is hidden
	        styler.show(elm);        	
	        // place it so it displays as usually but hidden
	        styler.css(elm, {
	            position: 'absolute',
	            visibility: 'hidden'
	        });
        }



        if (isVert) { // up--down
	        // get naturally height, margin, padding
	        var marginTop = styler.css(elm, 'margin-top');
	        var marginBottom = styler.css(elm, 'margin-bottom');
	        var paddingTop = styler.css(elm, 'padding-top');
	        var paddingBottom = styler.css(elm, 'padding-bottom');
	        var height = styler.css(elm, 'height');

	        if (isHide) {  	// slideup
	            // set initial css for animation
	            styler.css(elm, {
	                visibility: 'visible',
	                overflow: 'hidden',
	                height: height,
	                marginTop: marginTop,
	                marginBottom: marginBottom,
	                paddingTop: paddingTop,
	                paddingBottom: paddingBottom
	            });

	            // transit element height, margin and padding to zero
	            transit(elm, {
	                height: 0,
	                marginTop: 0,
	                marginBottom: 0,
	                paddingTop: 0,
	                paddingBottom: 0
	            }, {
	                // callback : restore the element position, height, margin and padding to original values
	                duration: duration,
	                queue: false,
	                complete: function() {
	                    styler.hide(elm);
	                    styler.css(elm, {
	                        visibility: 'visible',
	                        overflow: 'hidden',
	                        height: height,
	                        marginTop: marginTop,
	                        marginBottom: marginBottom,
	                        paddingTop: paddingTop,
	                        paddingBottom: paddingBottom
	                    });
	                    if (callback) {
	                        callback.apply(elm);
	                    }
	                }
	            });
	        } else {     	// slidedown
		        // set initial css for animation
		        styler.css(elm, {
		            position: position,
		            visibility: 'visible',
		            overflow: 'hidden',
		            height: 0,
		            marginTop: 0,
		            marginBottom: 0,
		            paddingTop: 0,
		            paddingBottom: 0
		        });

		        // transit to gotten height, margin and padding
		        transit(elm, {
		            height: height,
		            marginTop: marginTop,
		            marginBottom: marginBottom,
		            paddingTop: paddingTop,
		            paddingBottom: paddingBottom
		        }, {
		            duration: duration,
		            complete: function() {
		                if (callback) {
		                    callback.apply(elm);
		                }
		            }
		        });

	        }

        } else { // left--right
	        // get naturally height, margin, padding
	        var marginLeft = styler.css(elm, 'margin-left');
	        var marginRight = styler.css(elm, 'margin-right');
	        var paddingLeft = styler.css(elm, 'padding-left');
	        var paddingRight = styler.css(elm, 'padding-right');
	        var width = styler.css(elm, 'width');

	        if (isHide) {  	// slideleft
	            // set initial css for animation
	            styler.css(elm, {
	                visibility: 'visible',
	                overflow: 'hidden',
	                width: width,
	                marginLeft: marginLeft,
	                marginRight: marginRight,
	                paddingLeft: paddingLeft,
	                paddingRight: paddingRight
	            });

	            // transit element height, margin and padding to zero
	            transit(elm, {
	                width: 0,
	                marginLeft: 0,
	                marginRight: 0,
	                paddingLeft: 0,
	                paddingRight: 0
	            }, {
	                // callback : restore the element position, height, margin and padding to original values
	                duration: duration,
	                queue: false,
	                complete: function() {
	                    styler.hide(elm);
	                    styler.css(elm, {
	                        visibility: 'visible',
	                        overflow: 'hidden',
	                        width: width,
	                        marginLeft: marginLeft,
	                        marginRight: marginRight,
	                        paddingLeft: paddingLeft,
	                        paddingRight: paddingRight
	                    });
	                    if (callback) {
	                        callback.apply(elm);
	                    }
	                }
	            });
	        } else {     	// slideright
		        // set initial css for animation
		        styler.css(elm, {
		            position: position,
		            visibility: 'visible',
		            overflow: 'hidden',
		            width: 0,
		            marginLeft: 0,
		            marginRight: 0,
		            paddingLeft: 0,
		            paddingRight: 0
		        });

		        // transit to gotten width, margin and padding
		        transit(elm, {
		            width: width,
		            marginLeft: marginLeft,
		            marginRight: marginRight,
		            paddingLeft: paddingLeft,
		            paddingRight: paddingRight
		        }, {
		            duration: duration,
		            complete: function() {
		                if (callback) {
		                    callback.apply(elm);
		                }
		            }
		        });

	        }       	
        }

        return this;
    }

    return transits.slide = slide;

});

define('skylark-domx-transits/slide-down',[
    "./transits",
    "./slide"
],function(transits,slide) {
    /*   
     * Display an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideDown(elm, duration, callback) {
        return slide(elm,{
            direction : "down",
            duration : duration
        },callback);
    }

    return transits.slideDown = slideDown;
});
define('skylark-domx-transits/slide-up',[
    "./transits",
    "./slide"
],function(transits,slide) {
    /*   
     * Hide an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideUp(elm, duration, callback) {
        return slide(elm,{
            direction : "up",
            duration : duration
        },callback);
    }



    return transits.slideUp = slideUp;
});
define('skylark-domx-transits/slide-toggle',[
    "skylark-langx/langx",
    "skylark-domx-geom",
    "./transits",
    "./slide-down",
    "./slide-up"
],function(langx,geom,transits,slideDown,slideUp) {

    /*   
     * Display or hide an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideToggle(elm, duration, callback) {

        // if the element is hidden, slideDown !
        if (geom.height(elm) == 0) {
            slideDown(elm, duration, callback);
        }
        // if the element is visible, slideUp !
        else {
            slideUp(elm, duration, callback);
        }
        return this;
    }

    return transits.slideToggle = slideToggle;
});
define('skylark-domx-transits/throb',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "skylark-domx-noder",
    "./transits",
    "./transit"
],function(langx,styler,noder,transits,transit) {

    
    /*   
     * Replace an old node with the specified node.
     * @param {HTMLElement} elm
     * @param {Node} params
     */
    function throb(elm, params) {
        params = params || {};

        var self = this,
            text = params.text,
            style = params.style,
            time = params.time,
            callback = params.callback,
            timer,

            throbber = noder.createElement("div", {
                "class": params.className || "throbber"
            }),
            //_overlay = overlay(throbber, {
            //    "class": 'overlay fade'
            //}),
            remove = function() {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                if (throbber) {
                    noder.remove(throbber);
                    throbber = null;
                }
            },
            update = function(params) {
                if (params && params.text && throbber) {
                    textNode.nodeValue = params.text;
                }
            };

        if (params.style) {
            styler.css(throbber,params.style);
        }

        //throb = noder.createElement("div", {
        //   "class": params.throb && params.throb.className || "throb"
        //}),
        //textNode = noder.createTextNode(text || ""),
 
        var content = params.content ||  '<span class="throb"></span>';

        //throb.appendChild(textNode);
        //throbber.appendChild(throb);

        noder.html(throbber,content);
        
        elm.appendChild(throbber);

        var end = function() {
            remove();
            if (callback) callback();
        };
        if (time) {
            timer = setTimeout(end, time);
        }

        return {
            throbber : throbber,
            remove: remove,
            update: update
        };
    }

    return transits.throb = throb;
});
define('skylark-domx-transits/toggle',[
    "skylark-langx/langx",
    "skylark-domx-styler",
    "./transits",
    "./show",
    "./hide"
],function(langx,styler,transits,show,hide) {
    /*   
     * Display or hide an element.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {Function} callbacke
     */
    function toggle(elm, speed, callback) {
        if (styler.isInvisible(elm)) {
            show(elm, speed, callback);
        } else {
            hide(elm, speed, callback);
        }
        return this;
    }

    return transits.toggle = toggle;
});
define('skylark-domx-transits/main',[
	"./transits",
	"skylark-domx-velm",
	"skylark-domx-query",
    "./transit",
    "./bounce",
    "./emulate-transition-end",
    "./explode",
    "./fade-in",
    "./fade-out",
    "./fade",
    "./fade-toggle",
    "./hide",
    "./pulsate",
    "./shake",
    "./show",
    "./slide",
    "./slide-down",
    "./slide-toggle",
    "./slide-up",
    "./throb",
    "./toggle"
],function(transits,velm,$){
    // from ./transits
    velm.delegate([
        "transit",
        "emulateTransitionEnd",
        "fadeIn",
        "fadeOut",
        "fade",
        "fadeToggle",
        "hide",
        "scrollToTop",
        "slideDown",
        "slideToggle",
        "slideUp",
        "show",
        "toggle"
    ], transits);

    $.fn.hide =  $.wraps.wrapper_every_act(transits.hide, transits);

    $.fn.transit = $.wraps.wrapper_every_act(transits.transit, transits);
    $.fn.emulateTransitionEnd = $.wraps.wrapper_every_act(transits.emulateTransitionEnd, transits);

    $.fn.show = $.wraps.wrapper_every_act(transits.show, transits);
    $.fn.hide = $.wraps.wrapper_every_act(transits.hide, transits);
    $.fn.toogle = $.wraps.wrapper_every_act(transits.toogle, transits);
    $.fn.fadeTo = $.wraps.wrapper_every_act(transits.fadeTo, transits);
    $.fn.fadeIn = $.wraps.wrapper_every_act(transits.fadeIn, transits);
    $.fn.fadeOut = $.wraps.wrapper_every_act(transits.fadeOut, transits);
    $.fn.fadeToggle = $.wraps.wrapper_every_act(transits.fadeToggle, transits);

    $.fn.slideDown = $.wraps.wrapper_every_act(transits.slideDown, transits);
    $.fn.slideToggle = $.wraps.wrapper_every_act(transits.slideToggle, transits);
    $.fn.slideUp = $.wraps.wrapper_every_act(transits.slideUp, transits);

	return transits;
});
define('skylark-domx-transits', ['skylark-domx-transits/main'], function (main) { return main; });

define('skylark-domx-fx/bounce',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {
    return fx.bounce = transits.bounce;
});
define('skylark-domx-fx/emulateTransitionEnd',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {
    return fx.emulateTransitionEnd = transits.emulateTransitionEnd;
});
define('skylark-domx-fx/explode',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {
	return fx.explode = transits.explode;
});

define('skylark-domx-fx/fadeIn',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    return fx.fadeIn = transits.fadeIn;
});
define('skylark-domx-fx/fadeOut',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    return fx.fadeOut = transits.fadeOut;
});
define('skylark-domx-fx/fade',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    return fx.fade = transits.fade;
});
define('skylark-domx-fx/fadeToggle',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    return fx.fadeToggle = transits.fadeToggle;
});
define('skylark-domx-fx/hide',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    return fx.hide = transits.hide;
});
define('skylark-domx-fx/pulsate',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

	return fx.pulsate = transits.pulsate;

});

define('skylark-domx-fx/shake',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

	return fx.shake = transits.shake;

});

define('skylark-domx-fx/show',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    return fx.show = transits.show;
});
define('skylark-domx-fx/slide',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    function slide(elm,options,callback ) {
    	if (langx.isFunction(options)) {
    		callback = options;
    		options = {};
    	}
    	options = options || {};
		var direction = options.direction || "down",
			isHide = ( direction === "up" || direction === "left" ),
			isVert = ( direction === "up" || direction === "down" ),
			duration = options.duration || fx.speeds.normal;


        // get the element position to restore it then
        var position = styler.css(elm, 'position');

        if (isHide) {
            // active the function only if the element is visible
        	if (styler.isInvisible(elm)) {
        		return this;
        	}
        } else {
	        // show element if it is hidden
	        styler.show(elm);        	
	        // place it so it displays as usually but hidden
	        styler.css(elm, {
	            position: 'absolute',
	            visibility: 'hidden'
	        });
        }



        if (isVert) { // up--down
	        // get naturally height, margin, padding
	        var marginTop = styler.css(elm, 'margin-top');
	        var marginBottom = styler.css(elm, 'margin-bottom');
	        var paddingTop = styler.css(elm, 'padding-top');
	        var paddingBottom = styler.css(elm, 'padding-bottom');
	        var height = styler.css(elm, 'height');

	        if (isHide) {  	// slideup
	            // set initial css for animation
	            styler.css(elm, {
	                visibility: 'visible',
	                overflow: 'hidden',
	                height: height,
	                marginTop: marginTop,
	                marginBottom: marginBottom,
	                paddingTop: paddingTop,
	                paddingBottom: paddingBottom
	            });

	            // animate element height, margin and padding to zero
	            animate(elm, {
	                height: 0,
	                marginTop: 0,
	                marginBottom: 0,
	                paddingTop: 0,
	                paddingBottom: 0
	            }, {
	                // callback : restore the element position, height, margin and padding to original values
	                duration: duration,
	                queue: false,
	                complete: function() {
	                    styler.hide(elm);
	                    styler.css(elm, {
	                        visibility: 'visible',
	                        overflow: 'hidden',
	                        height: height,
	                        marginTop: marginTop,
	                        marginBottom: marginBottom,
	                        paddingTop: paddingTop,
	                        paddingBottom: paddingBottom
	                    });
	                    if (callback) {
	                        callback.apply(elm);
	                    }
	                }
	            });
	        } else {     	// slidedown
		        // set initial css for animation
		        styler.css(elm, {
		            position: position,
		            visibility: 'visible',
		            overflow: 'hidden',
		            height: 0,
		            marginTop: 0,
		            marginBottom: 0,
		            paddingTop: 0,
		            paddingBottom: 0
		        });

		        // animate to gotten height, margin and padding
		        animate(elm, {
		            height: height,
		            marginTop: marginTop,
		            marginBottom: marginBottom,
		            paddingTop: paddingTop,
		            paddingBottom: paddingBottom
		        }, {
		            duration: duration,
		            complete: function() {
		                if (callback) {
		                    callback.apply(elm);
		                }
		            }
		        });

	        }

        } else { // left--right
	        // get naturally height, margin, padding
	        var marginLeft = styler.css(elm, 'margin-left');
	        var marginRight = styler.css(elm, 'margin-right');
	        var paddingLeft = styler.css(elm, 'padding-left');
	        var paddingRight = styler.css(elm, 'padding-right');
	        var width = styler.css(elm, 'width');

	        if (isHide) {  	// slideleft
	            // set initial css for animation
	            styler.css(elm, {
	                visibility: 'visible',
	                overflow: 'hidden',
	                width: width,
	                marginLeft: marginLeft,
	                marginRight: marginRight,
	                paddingLeft: paddingLeft,
	                paddingRight: paddingRight
	            });

	            // animate element height, margin and padding to zero
	            animate(elm, {
	                width: 0,
	                marginLeft: 0,
	                marginRight: 0,
	                paddingLeft: 0,
	                paddingRight: 0
	            }, {
	                // callback : restore the element position, height, margin and padding to original values
	                duration: duration,
	                queue: false,
	                complete: function() {
	                    styler.hide(elm);
	                    styler.css(elm, {
	                        visibility: 'visible',
	                        overflow: 'hidden',
	                        width: width,
	                        marginLeft: marginLeft,
	                        marginRight: marginRight,
	                        paddingLeft: paddingLeft,
	                        paddingRight: paddingRight
	                    });
	                    if (callback) {
	                        callback.apply(elm);
	                    }
	                }
	            });
	        } else {     	// slideright
		        // set initial css for animation
		        styler.css(elm, {
		            position: position,
		            visibility: 'visible',
		            overflow: 'hidden',
		            width: 0,
		            marginLeft: 0,
		            marginRight: 0,
		            paddingLeft: 0,
		            paddingRight: 0
		        });

		        // animate to gotten width, margin and padding
		        animate(elm, {
		            width: width,
		            marginLeft: marginLeft,
		            marginRight: marginRight,
		            paddingLeft: paddingLeft,
		            paddingRight: paddingRight
		        }, {
		            duration: duration,
		            complete: function() {
		                if (callback) {
		                    callback.apply(elm);
		                }
		            }
		        });

	        }       	
        }

        return this;
    }

    return fx.slide = slide;

});

define('skylark-domx-fx/slideDown',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {
    /*   
     * Display an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideDown(elm, duration, callback) {
        return slide(elm,{
            direction : "down",
            duration : duration
        },callback);
    }

    return fx.slideDown = slideDown;
});
define('skylark-domx-fx/slideToggle',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {

    /*   
     * Display or hide an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideToggle(elm, duration, callback) {

        // if the element is hidden, slideDown !
        if (geom.height(elm) == 0) {
            slideDown(elm, duration, callback);
        }
        // if the element is visible, slideUp !
        else {
            slideUp(elm, duration, callback);
        }
        return this;
    }

    return fx.slideToggle = slideToggle;
});
define('skylark-domx-fx/slideUp',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {
    /*   
     * Hide an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideUp(elm, duration, callback) {
        return slide(elm,{
            direction : "up",
            duration : duration
        },callback);
    }



    return fx.slideUp = slideUp;
});
define('skylark-domx-fx/throb',[
    "skylark-domx-noder",
    "./fx"
],function(noder,fx) {
    
    return fx.throb = noder.throb;
});
define('skylark-domx-fx/toggle',[
    "skylark-domx-transits",
    "./fx"
],function(transits,fx) {
    /*   
     * Display or hide an element.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {Function} callbacke
     */
    function toggle(elm, speed, callback) {
        if (styler.isInvisible(elm)) {
            show(elm, speed, callback);
        } else {
            hide(elm, speed, callback);
        }
        return this;
    }

    return fx.toggle = toggle;
});
define('skylark-domx-fx/main',[
	"./fx",
    "./animate",
    "./bounce",
    "./emulateTransitionEnd",
    "./explode",
    "./fadeIn",
    "./fadeOut",
    "./fade",
    "./fadeToggle",
    "./hide",
    "./pulsate",
    "./shake",
    "./show",
    "./slide",
    "./slideDown",
    "./slideToggle",
    "./slideUp",
    "./throb",
    "./toggle"
],function(fx){

	return fx;
});
define('skylark-domx-fx', ['skylark-domx-fx/main'], function (main) { return main; });

define('skylark-domx-plugins-base/plugin',[
    "skylark-langx-ns",
    "skylark-langx-types",
    "skylark-langx-objects",
    "skylark-langx-funcs",
    "skylark-langx-events/Emitter",
    "skylark-domx-noder",
    "skylark-domx-data",
    "skylark-domx-eventer",
    "skylark-domx-finder",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "skylark-domx-fx",
    "skylark-domx-query",
    "skylark-domx-velm",
    "./plugins"
], function(
    skylark,
    types,
    objects,
    funcs,
    Emitter, 
    noder, 
    datax, 
    eventer, 
    finder, 
    geom, 
    styler, 
    fx, 
    $, 
    elmx,
    plugins
) {
    "use strict";

    var slice = Array.prototype.slice,
        concat = Array.prototype.concat;

    function parentClass(ctor){
        if (ctor.hasOwnProperty("superclass")) {
            return ctor.superclass;
        }

        return Object.getPrototypeOf(ctor);
    }

 
    var Plugin =   Emitter.inherit({
        klassName: "Plugin",

        _construct : function(elm,options) {
           this._elm = elm;
           this._initOptions(options);
        },

        _initOptions : function(options) {
          var ctor = this.constructor,
              cache = ctor.cache = (ctor.hasOwnProperty("cache") ? ctor.cache : {}),
              defaults = cache.defaults;
          if (!defaults) {
            var  ctors = [];
            do {
              ctors.unshift(ctor);
              if (ctor === Plugin) {
                break;
              }
              ctor = parentClass(ctor);
            } while (ctor);

            defaults = cache.defaults = {};
            for (var i=0;i<ctors.length;i++) {
              ctor = ctors[i];
              if (ctor.prototype.hasOwnProperty("options")) {
                objects.mixin(defaults,ctor.prototype.options,true);
              }
              if (ctor.hasOwnProperty("options")) {
                objects.mixin(defaults,ctor.options,true);
              }
            }
          }
          Object.defineProperty(this,"options",{
            value :objects.mixin({},defaults,options,true)
          });

          //return this.options = langx.mixin({},defaults,options);
          return this.options;
        },


        destroy: function() {

            this._destroy();

            // remove all event lisener
            this.unlistenTo();
            // remove data 
            datax.removeData(this._elm,this.pluginName );
        },

        _destroy: funcs.noop,

        _delay: function( handler, delay ) {
            function handlerProxy() {
                return ( typeof handler === "string" ? instance[ handler ] : handler )
                    .apply( instance, arguments );
            }
            var instance = this;
            return setTimeout( handlerProxy, delay || 0 );
        },

        elmx : function(elm) {
            if (elm) {
                return elmx(elm);
            }
            if (!this._velm) {
                this._velm = elmx(this._elm);
            }
            return this._velm;
        },

        $ : function(elm) {
            if (elm) {
                return $(elm,this._elm);
            }
            if (!this._$elm) {
                this._$elm = $(this._elm);
            }            
            return this._$elm;
        },

        option: function( key, value ) {
            var options = key;
            var parts;
            var curOption;
            var i;

            if ( arguments.length === 0 ) {

                // Don't return a reference to the internal hash
                return objects.mixin( {}, this.options );
            }

            if ( typeof key === "string" ) {

                // Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                options = {};
                parts = key.split( "." );
                key = parts.shift();
                if ( parts.length ) {
                    curOption = options[ key ] = objects.mixin( {}, this.options[ key ] );
                    for ( i = 0; i < parts.length - 1; i++ ) {
                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
                        curOption = curOption[ parts[ i ] ];
                    }
                    key = parts.pop();
                    if ( arguments.length === 1 ) {
                        return curOption[ key ] === undefined ? null : curOption[ key ];
                    }
                    curOption[ key ] = value;
                } else {
                    if ( arguments.length === 1 ) {
                        return this.options[ key ] === undefined ? null : this.options[ key ];
                    }
                    options[ key ] = value;
                }
            }

            this._setOptions( options );

            return this;
        },

        _setOptions: function( options ) {
            var key;

            for ( key in options ) {
                this._setOption( key, options[ key ] );
            }

            return this;
        },

        _setOption: function( key, value ) {

            this.options[ key ] = value;

            return this;
        },

        getUID : function (prefix) {
            prefix = prefix || "plugin";
            do prefix += ~~(Math.random() * 1000000)
            while (document.getElementById(prefix))
            return prefix;
        },

        elm : function() {
            return this._elm;
        }

    });


    return  plugins.Plugin = Plugin;
});
define('skylark-domx-plugins-base/instantiate',[
    "skylark-domx-data",
    "./plugins",
    "./plugin"
], function(
    datax, 
    plugins,
    Plugin
) {
    "use strict";

    var pluginKlasses = plugins.pluginKlasses;

    /*
     * Create or get or destory a plugin instance assocated with the element.
     */
    function instantiate(elm,pluginName,options) {
        var pair = pluginName.split(":"),
            instanceDataName = pair[1];
        pluginName = pair[0];

        if (!instanceDataName) {
            instanceDataName = pluginName;
        }

        var pluginInstance = datax.data( elm, instanceDataName );

        if (options === "instance") {
            return pluginInstance;
        } else if (options === "destroy") {
            if (!pluginInstance) {
                throw new Error ("The plugin instance is not existed");
            }
            pluginInstance.destroy();
            //datax.removeData( elm, pluginName);
            pluginInstance = undefined;
        } else {
            if (!pluginInstance) {
                if (options !== undefined && typeof options !== "object") {
                    throw new Error ("The options must be a plain object");
                }
                var pluginKlass = pluginKlasses[pluginName]; 
                pluginInstance = new pluginKlass(elm,options);
                datax.data( elm, instanceDataName,pluginInstance );
            } else if (options) {
                pluginInstance.reset(options);
            }
        }

        return pluginInstance;
    }

    Plugin.instantiate = function(elm,options) {
        return instantiate(elm,this.prototype.pluginName,options);
    };

    return  plugins.instantiate = instantiate;
});
define('skylark-domx-plugins-base/shortcutter',[
    "skylark-langx-types",
    "./plugins",
    "./instantiate"
], function(
    types,
    plugins,
    instantiate
) {
    "use strict";

    var slice = Array.prototype.slice;

    function shortcutter(pluginName,extfn) {
       /*
        * Create or get or destory a plugin instance assocated with the element,
        * and also you can execute the plugin method directory;
        */
        return function (elm,options) {
            var  plugin = instantiate(elm, pluginName,"instance");
            if ( options === "instance" ) {
              return plugin || null;
            }

            if (!plugin) {
                plugin = instantiate(elm, pluginName,typeof options == 'object' && options || {});
                if (typeof options != "string") {
                  return this;
                }
            } 
            if (options) {
                var args = slice.call(arguments,1); //2
                if (extfn) {
                    return extfn.apply(plugin,args);
                } else {
                    if (typeof options == 'string') {
                        var methodName = options;

                        if ( !plugin ) {
                            throw new Error( "cannot call methods on " + pluginName +
                                " prior to initialization; " +
                                "attempted to call method '" + methodName + "'" );
                        }

                        if ( !types.isFunction( plugin[ methodName ] ) || methodName.charAt( 0 ) === "_" ) {
                            throw new Error( "no such method '" + methodName + "' for " + pluginName +
                                " plugin instance" );
                        }

                        args = slice.call(args,1); //remove method name

                        var ret = plugin[methodName].apply(plugin,args);
                        if (ret == plugin) {
                          ret = undefined;
                        }

                        return ret;
                    }                
                }                
            }

        }

    }


    return  plugins.shortcutter = shortcutter;
});
define('skylark-domx-plugins-base/register',[
    "skylark-langx-types",
    "skylark-domx-query",
    "skylark-domx-velm",
    "./plugins",
    "./shortcutter"
], function(
    types,
    $, 
    elmx,
    plugins,
    shortcutter
) {
    "use strict";

    var slice = Array.prototype.slice,
        pluginKlasses = plugins.pluginKlasses,
        shortcuts = plugins.shortcuts;

    /*
     * Register a plugin type
     */
    function register( pluginKlass,shortcutName,instanceDataName,extfn) {
        var pluginName = pluginKlass.prototype.pluginName;
        
        pluginKlasses[pluginName] = pluginKlass;

        if (shortcutName) {
            if (instanceDataName && types.isFunction(instanceDataName)) {
                extfn = instanceDataName;
                instanceDataName = null;
            } 
            if (instanceDataName) {
                pluginName = pluginName + ":" + instanceDataName;
            }

            var shortcut = shortcuts[shortcutName] = shortcutter(pluginName,extfn);
                
            $.fn[shortcutName] = function(options) {
                var returnValue = this;

                if ( !this.length && options === "instance" ) {
                  returnValue = undefined;
                } else {
                  var args = slice.call(arguments);
                  this.each(function () {
                    var args2 = slice.call(args);
                    args2.unshift(this);
                    var  ret  = shortcut.apply(undefined,args2);
                    if (ret !== undefined) {
                        returnValue = ret;
                    }
                  });
                }

                return returnValue;
            };

            elmx.partial(shortcutName,function(options) {
                var  ret  = shortcut(this._elm,options);
                if (ret === undefined) {
                    ret = this;
                }
                return ret;
            });

        }
    }

    return  plugins.register = register;
});
define('skylark-domx-plugins-base/main',[
    "skylark-domx-query",
    "skylark-domx-velm",
	"./plugins",
	"./instantiate",
	"./plugin",
	"./register",
	"./shortcutter"
],function($,elmx,plugins,instantiate,Plugin,register,shortcutter){
    "use strict";

    var slice = Array.prototype.slice;

    $.fn.plugin = function(name,options) {
        var args = slice.call( arguments, 1 ),
            self = this,
            returnValue ;

        this.each(function(){
            returnValue = instantiate.apply(self,[this,name].concat(args));
        });
        return returnValue;
    };

    elmx.partial("plugin",function(name,options) {
        var args = slice.call( arguments, 1 );
        return instantiate.apply(this,[this._elm,name].concat(args));
    }); 

	return plugins;
});
define('skylark-domx-plugins-base', ['skylark-domx-plugins-base/main'], function (main) { return main; });

define('skylark-domx-plugins-dnd/dnd',[
    "skylark-domx-plugins-base/plugins"
], function(plugins) {

	return plugins.dnd = {};
});


define('skylark-domx-plugins-scrolls/scrolls',[
    "skylark-domx-plugins-base/plugins"
],function (plugins) {
    'use strict';

    return plugins.scrolls = {};

});
define('skylark-domx-plugins-scrolls/auto-scroll',[
  "skylark-langx",
  "skylark-domx-browser",
  "skylark-domx-eventer",
  "skylark-domx-noder",
  "skylark-domx-finder",
  "skylark-domx-geom",
  "skylark-domx-styler",
  "skylark-domx-query",
  "skylark-domx-plugins-base",
  "./scrolls"
],function(langx,browser,eventer,noder,finder,geom,styler,$,plugins,scrolls){

  'use strict';

	// INFINITE SCROLL CONSTRUCTOR AND PROTOTYPE

  var AutoScroll = plugins.Plugin.inherit({
        klassName: "AutoScroll",

        pluginName : "lark.scrolls.autoscroll",

        options : {
			scrollSensitivity: 30,
			scrollSpeed: 10,
			bubbleScroll: true
        },

        _construct : function(rootEl,options) {
	        this.overrided(rootEl,options);
    		this.autoScrolls = [];


			this._autoScroll = langx.debounce( (x,y) => {
				///var _this = rootEl ? rootEl[expando] : window,
				var	options = this.options,
					sens = options.scrollSensitivity,
					speed = options.scrollSpeed,

					winScroller = noder.scrollingElement();

				this.scrollEl = finder.scrollableParent(rootEl, true);


				var layersOut = 0;
				var currentParent = this.scrollEl;
				var autoScrolls = this.autoScrolls;
				do {
					var	el = currentParent,
						rect = geom.boundingRect(el),

						top = rect.top,
						bottom = rect.bottom,
						left = rect.left,
						right = rect.right,

						width = rect.width,
						height = rect.height,

						scrollWidth,
						scrollHeight,

						css,

						vx,
						vy,

						canScrollX,
						canScrollY,

						scrollPosX,
						scrollPosY;


					scrollWidth = el.scrollWidth;
					scrollHeight = el.scrollHeight;

					css = styler.css(el);

					scrollPosX = el.scrollLeft;
					scrollPosY = el.scrollTop;

					if (el === winScroller) {
						canScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll' || css.overflowX === 'visible');
						canScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll' || css.overflowY === 'visible');
					} else {
						canScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll');
						canScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll');
					}

					vx = canScrollX && (Math.abs(right - x) <= sens && (scrollPosX + width) < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);

					vy = canScrollY && (Math.abs(bottom - y) <= sens && (scrollPosY + height) < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);


					if (!autoScrolls[layersOut]) {
						for (var i = 0; i <= layersOut; i++) {
							if (!autoScrolls[i]) {
								autoScrolls[i] = {};
							}
						}
					}

					if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
						autoScrolls[layersOut].el = el;
						autoScrolls[layersOut].vx = vx;
						autoScrolls[layersOut].vy = vy;

						clearInterval(autoScrolls[layersOut].pid);

						if (el && (vx != 0 || vy != 0)) {
							this.scrollThisInstance = true;
							/* jshint loopfunc:true */
							autoScrolls[layersOut].pid = setInterval((function () {
								var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
								var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
								geom.scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
							}).bind({layer: layersOut}), 24);
						}
					}
					layersOut++;
				} while (options.bubbleScroll && currentParent !== winScroller && (currentParent = finder.scrollableParent(currentParent, false)));
			}, 30);
		},

		destroy: function () {
			this._clearAutoScrolls();
            this._cancelThrottle();
			this._nulling();
		},


		handle : function(x,y) {
			this._throttleTimeout = this._autoScroll(x,y);
		},

		_clearAutoScrolls : function () {
			this.autoScrolls.forEach(function(autoScroll) {
				clearInterval(autoScroll.pid);
			});
			this.autoScrolls = [];
		},

		_cancelThrottle : function () {
			//clearTimeout(_throttleTimeout);
			//_throttleTimeout = void 0;
			if (this._throttleTimeout && this._throttleTimeout.cancel) {
				this._throttleTimeout.cancel();
				this._throttleTimeout = void 0;
			}
		},

	
		_nulling : function () {

			
			this.pointerElemChangedInterval = null;
			this.lastPointerElemX = null;
			this.lastPointerElemY = null;

			this.scrollEl =
			this.scrollParentEl =
			this.autoScrolls.length = null;

		}

  });


  plugins.register(AutoScroll);

  return scrolls.AutoScroll = AutoScroll;	
});

define('skylark-domx-plugins-dnd/fallback/data-transfer',[],function(){
    'use strict';

    /**
     * Object used to hold the data that is being dragged during drag and drop operations.
     *
     * It may hold one or more data items of different types. For more information about
     * drag and drop operations and data transfer objects, see
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer">HTML Drag and Drop API</a>.
     *
     * This object is created automatically by the @see:DragDropTouch singleton and is
     * accessible through the @see:dataTransfer property of all drag events.
     */

    function DataTransfer() {
        this._dropEffect = 'move';
        this._effectAllowed = 'all';
        this._data = {};
    }
    Object.defineProperty(DataTransfer.prototype, "dropEffect", {
        /**
         * Gets or sets the type of drag-and-drop operation currently selected.
         * The value must be 'none',  'copy',  'link', or 'move'.
         */
        get: function () {
            return this._dropEffect;
        },
        set: function (value) {
            this._dropEffect = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTransfer.prototype, "effectAllowed", {
        /**
         * Gets or sets the types of operations that are possible.
         * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',
         * 'linkMove', 'move', 'all' or 'uninitialized'.
         */
        get: function () {
            return this._effectAllowed;
        },
        set: function (value) {
            this._effectAllowed = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTransfer.prototype, "types", {
        /**
         * Gets an array of strings giving the formats that were set in the @see:dragstart event.
         */
        get: function () {
            return Object.keys(this._data);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes the data associated with a given type.
     *
     * The type argument is optional. If the type is empty or not specified, the data
     * associated with all types is removed. If data for the specified type does not exist,
     * or the data transfer contains no data, this method will have no effect.
     *
     * @param type Type of data to remove.
     */
    DataTransfer.prototype.clearData = function (type) {
        if (type != null) {
            delete this._data[type];
        }
        else {
            this._data = null;
        }
    };
    /**
     * Retrieves the data for a given type, or an empty string if data for that type does
     * not exist or the data transfer contains no data.
     *
     * @param type Type of data to retrieve.
     */
    DataTransfer.prototype.getData = function (type) {
        return this._data[type] || '';
    };
    /**
     * Set the data for a given type.
     *
     * For a list of recommended drag types, please see
     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.
     *
     * @param type Type of data to add.
     * @param value Data to add.
     */
    DataTransfer.prototype.setData = function (type, value) {
        this._data[type] = value;
    };
    /**
     * Set the image to be used for dragging if a custom one is desired.
     *
     * @param img An image element to use as the drag feedback image.
     * @param offsetX The horizontal offset within the image.
     * @param offsetY The vertical offset within the image.
     */
    DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {
        this._imgCustom = img;
        this._imgOffset = { x: offsetX, y: offsetY };
    };

    return DataTransfer;
});
define('skylark-domx-plugins-dnd/fallback/moused-drag-drop',[
    "skylark-langx",
    "skylark-domx-noder",
    "skylark-domx-query",
    "skylark-domx-eventer",
    "skylark-domx-styler",
    "skylark-domx-finder",
    "skylark-domx-plugins-scrolls/auto-scroll",
    "./data-transfer"
],function(
    langx,
    noder,
    $,
    eventer,
    styler,
    finder,
    AutoScroll,
    DataTransfer
){
    'use strict';

    var MousedDragDrop = langx.Emitter.inherit({
        /**
         * Initializes the single instance of the @see:MousedDragDrop class.
         */
        _construct : function(dnd,dragSource,ptDown) {
            this.dnd = dnd;
            this._dragSource  =dragSource;
            this._ptDown = ptDown;


            this._lastClick = 0;
            this._isDragEnabled = true;
            this._dataTransfer = new DataTransfer();



            var $doc = $(document);

            this.listenTo($doc,"mousemove",this._onMouseMove);
            this.listenTo($doc,"mouseup",this._onMouseUp);

        },

        _onMouseMove : function (e) {
            if (this._shouldCancelPressHoldMove(e)) {
              this._reset();
              return;
            }
            if (this._shouldHandleMove(e) || this._shouldHandlePressHoldMove(e)) {
                var target = this._getTarget(e);

                // start dragging
                if (this._dragSource && !this._img && this._shouldStartDragging(e)) {
                    this._dispatchEvent(e, 'dragstart', this._dragSource);
                    this._createImage(e);
                    this._dispatchEvent(e, 'dragenter', target);
                }
                // continue dragging
                if (this._img) {
                    this._lastTouch = e;
                    e.preventDefault(); // prevent scrolling
                    if (target != this._lastTarget) {
                        this._dispatchEvent(this._lastTouch, 'dragleave', this._lastTarget);
                        this._dispatchEvent(e, 'dragenter', target);
                        this._lastTarget = target;
                    }
                    this._moveImage(e);
                    this._isDropZone = this._dispatchEvent(e, 'dragover', target);
                }

                this._handleAutoScroll(e);

            }
        },

        _onMouseUp : function (e) {
            if (this._shouldHandle(e)) {
                // finish dragging
                this._destroyImage();
                if (this._dragSource) {
                    if (e.type.indexOf('cancel') < 0 && this._isDropZone) {
                        this._dispatchEvent(this._lastTouch, 'drop', this._lastTarget);
                    }
                    this._dispatchEvent(this._lastTouch, 'dragend', this._dragSource);
                }
            }
            this.destroy();
        },

        // ** utilities
        // ignore events that have been handled or that involve more than one touch
        _shouldHandle : function (e) {
            return e &&
                !e.defaultPrevented ;
        },

        // use regular condition outside of press & hold mode
        _shouldHandleMove : function (e) {
          return !MousedDragDrop._ISPRESSHOLDMODE && this._shouldHandle(e);
        },

        // allow to handle moves that involve many touches for press & hold
        _shouldHandlePressHoldMove : function (e) {
          return MousedDragDrop._ISPRESSHOLDMODE &&  this._isDragEnabled ;
        },

        // reset data if user drags without pressing & holding
        _shouldCancelPressHoldMove : function (e) {
          return MousedDragDrop._ISPRESSHOLDMODE && !this._isDragEnabled &&
              this._getDelta(e) > MousedDragDrop._PRESSHOLDMARGIN;
        },

        // start dragging when specified delta is detected
        _shouldStartDragging : function (e) {
            var delta = this._getDelta(e);
            return delta > MousedDragDrop._THRESHOLD ||
                (MousedDragDrop._ISPRESSHOLDMODE && delta >= MousedDragDrop._PRESSHOLDTHRESHOLD);
        },

        // clear all members
        _reset : function () {
            this._destroyImage();
            this._dragSource = null;
            this._lastTouch = null;
            this._lastTarget = null;
            this._ptDown = null;
            this._isDragEnabled = false;
            this._isDropZone = false;
            this._dataTransfer = null;
            clearInterval(this._pressHoldInterval);


            if (this.pointerElemChangedInterval){
                clearInterval(this.pointerElemChangedInterval); 
                this.pointerElemChangedInterval = null
            } 
            if (this.autoscroller) {
                this.autoscroller.destroy();
                this.autoscroller = null;               
            }
        },

        // get point for a touch event
        _getPoint : function (e, page) {
             return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };
        },

        // get distance between the current touch event and the first one
        _getDelta : function (e) {
            if (MousedDragDrop._ISPRESSHOLDMODE && !this._ptDown) { return 0; }
            var p = this._getPoint(e);
            return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);
        },

        // get the element at a given touch event
        _getTarget : function (e) {
            var pt = this._getPoint(e), el = document.elementFromPoint(pt.x, pt.y);
            while (el && getComputedStyle(el).pointerEvents == 'none') {
                el = el.parentElement;
            }
            return el;
        },

        // create drag image from source element
        _createImage : function (e) {
            // just in case...
            if (this._img) {
                this._destroyImage();
            }
            // create drag image from custom element or drag source
            this._imgCustom = this._dataTransfer._imgCustom;
            this._imgOffset = this._dataTransfer._imgOffset;

            var src = this._imgCustom || this._dragSource;
            this._img = src.cloneNode(true);
            this._copyStyle(src, this._img);
            this._img.style.top = this._img.style.left = '-9999px';
            // if creating from drag source, apply offset and opacity
            if (!this._imgCustom) {
                var rc = src.getBoundingClientRect(), 
                    pt = this._getPoint(e);

                this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };
                this._img.style.opacity = MousedDragDrop._OPACITY.toString();
            }
            // add image to document
            this._moveImage(e);
            document.body.appendChild(this._img);
        },

        // dispose of drag image element
        _destroyImage : function () {
            if (this._img) {
                noder.remove(this._img);
            }
            this._img = null;
            this._imgCustom = null;
        },

        // move the drag image element
        _moveImage : function (e) {
            var _this = this;
            langx.defer(function () {
                if (_this._img) {
                    var pt = _this._getPoint(e, true);
                    styler.css(_this._img,{
                        position : 'absolute',
                        pointerEvents : 'none',
                        zIndex : '999999',
                        left : Math.round(pt.x - _this._imgOffset.x) + 'px',
                        top : Math.round(pt.y - _this._imgOffset.y) + 'px'
                    });
                }
            });
        },

        // copy properties from an object to another
        _copyProps : function (dst, src, props) {
            for (var i = 0; i < props.length; i++) {
                var p = props[i];
                dst[p] = src[p];
            }
        },

        _copyStyle : function (src, dst) {
            // remove potentially troublesome attributes
            MousedDragDrop._rmvAtts.forEach(function (att) {
                dst.removeAttribute(att);
            });
            // copy canvas content
            if (src instanceof HTMLCanvasElement) {
                var cSrc = src, cDst = dst;
                cDst.width = cSrc.width;
                cDst.height = cSrc.height;
                cDst.getContext('2d').drawImage(cSrc, 0, 0);
            }
            // copy style (without transitions)
            var cs = getComputedStyle(src);
            for (var i = 0; i < cs.length; i++) {
                var key = cs[i];
                if (key.indexOf('transition') < 0) {
                    dst.style[key] = cs[key];
                }
            }
            dst.style.pointerEvents = 'none';
            // and repeat for all children
            for (var i = 0; i < src.children.length; i++) {
                this._copyStyle(src.children[i], dst.children[i]);
            }
        },

        _dispatchEvent : function (e, type, target) {
            if (e && target) {
                var evt = document.createEvent('Event'), t = e.touches ? e.touches[0] : e;
                evt.initEvent(type, true, true);
                evt.button = 0;
                evt.which = evt.buttons = 1;
                this._copyProps(evt, e, MousedDragDrop._kbdProps);
                this._copyProps(evt, t, MousedDragDrop._ptProps);
                evt.dataTransfer = this._dataTransfer;
                target.dispatchEvent(evt);
                return evt.defaultPrevented;
            }
            return false;
        },

        // gets an element's closest draggable ancestor
        _closestDraggable : function (e) {
            for (; e; e = e.parentElement) {
                if (e.hasAttribute('data-draggable')) {
                    return e;
                }
            }
            return null;
        },

        _handleAutoScroll: function(evt) {
            var dnd = this.dnd;

            var x = evt.clientX,
                y = evt.clientY,

                elem = document.elementFromPoint(x, y);


            // Listener for pointer element change
            ////var ogElemScroller = finder.scrollableParent(elem, true);
            if (
                (
                    !this.pointerElemChangedInterval ||
                    x !== this.lastPointerElemX ||
                    y !== this.lastPointerElemY
                )
            ) {

                if (this.pointerElemChangedInterval){
                    clearInterval(this.pointerElemChangedInterval); 
                } 
                // Detect for pointer elem change, emulating native DnD behaviour
                var ogElemScroller = null ;
                this.pointerElemChangedInterval = setInterval(function() {
                    // could also check if scroll direction on newElem changes due to parent autoscrolling
                    var newElem = finder.scrollableParent(document.elementFromPoint(x, y), true);
                    if (newElem !== ogElemScroller) {
                        ogElemScroller = newElem;
                        if (this.autoscroller) {
                            this.autoscroller.destroy();
                            this.autoscroller = null;
                        }
                        this.autoscroller = new AutoScroll(ogElemScroller,dnd.dragging.options);
                        this.autoscroller.handle(x,y);
                    }
                }, 10);
                this.lastPointerElemX = x;
                this.lastPointerElemY = y;
            }
        },


        destroy : function() {
            this.unlistenTo();
            this._reset();
        }
    });

    // constants
    MousedDragDrop._THRESHOLD = 5; // pixels to move before drag starts
    MousedDragDrop._OPACITY = 0.5; // drag image opacity
    MousedDragDrop._DBLCLICK = 500; // max ms between clicks in a double click
    MousedDragDrop._CTXMENU = 900; // ms to hold before raising 'contextmenu' event
    MousedDragDrop._ISPRESSHOLDMODE = false; // decides of press & hold mode presence
    MousedDragDrop._PRESSHOLDAWAIT = 400; // ms to wait before press & hold is detected
    MousedDragDrop._PRESSHOLDMARGIN = 25; // pixels that finger might shiver while pressing
    MousedDragDrop._PRESSHOLDTHRESHOLD = 0; // pixels to move before drag starts
    // copy styles/attributes from drag source to drag image element
    MousedDragDrop._rmvAtts = 'id,class,style,draggable'.split(',');
    // synthesize and dispatch an event
    // returns true if the event has been handled (e.preventDefault == true)
    MousedDragDrop._kbdProps = 'altKey,ctrlKey,metaKey,shiftKey'.split(',');
    MousedDragDrop._ptProps = 'pageX,pageY,clientX,clientY,screenX,screenY'.split(',');	

    return MousedDragDrop
});
define('skylark-domx-plugins-dnd/manager',[
    "skylark-langx/langx",
    "skylark-langx-hoster/is-mobile",
    "skylark-domx-noder",
    "skylark-domx-data",
    "skylark-domx-finder",
    "skylark-domx-geom",
    "skylark-domx-eventer",
    "skylark-domx-styler",
    "./dnd",
    "./fallback/moused-drag-drop"
], function(langx, isMobile,noder, datax, finder, geom, eventer, styler,dnd,MousedDragDrop) {
    var on = eventer.on,
        off = eventer.off,
        attr = datax.attr,
        removeAttr = datax.removeAttr,
        offset = geom.pagePosition,
        addClass = styler.addClass,
        height = geom.height;


        // This will not pass for IE9, because IE9 DnD only works on anchors
    var  supportDraggable = ('draggable' in document.createElement('div')) && !isMobile.apple.device; //TODO move to xxx


    var Manager = dnd.Manager = langx.Evented.inherit({
        klassName: "Manager",

        init: function() {

        },

        prepare: function(draggable,event) {
            var e = eventer.create("preparing", {
                dragSource: draggable.dragSource,
                dragHandle: draggable.dragHandle,
                originalEvent : event
            });
            draggable.trigger(e);
            draggable.dragSource = e.dragSource;
            draggable.dragHandle = e.dragHandle;


            if (draggable.dragSource) {
                this.useNativeDnd =  draggable.options.forceFallback ? false : supportDraggable;  
                this.dragging = draggable;

                datax.data(draggable.dragSource, "draggable", true);
                if (this.useNativeDnd) {
                    datax.attr(draggable.dragSource, "draggable", 'true');
                } else {
                    this._fallbacker = new MousedDragDrop(this,draggable.dragSource,draggable.startPos);
                }

                try {
                    if (document.selection) {
                       document.selection.empty();
                    } else {
                        window.getSelection().removeAllRanges();
                    }
                } catch (err) {
                }
            }
        },

        start: function(draggable, event) {
            datax.data(draggable.dragSource, "draggable", false);
            if (this.useNativeDnd) {
                datax.attr(draggable.dragSource, "draggable", 'false');
            }

            var p = geom.pagePosition(draggable.dragSource);
            this.draggingOffsetX = parseInt(event.pageX - p.left);
            this.draggingOffsetY = parseInt(event.pageY - p.top)

            var e = eventer.create("started", {
                elm: draggable.elm,
                dragSource: draggable.dragSource,
                dragHandle: draggable.dragHandle,
                ghost: null,

                originalEvent : event,

                transfer: {}
            });

            draggable.trigger(e);


            this.dragging = draggable;

            if (draggable.draggingClass) {
                styler.addClass(draggable.dragSource, draggable.draggingClass);
            }

            this.draggingGhost = e.ghost;
            if (!this.draggingGhost) {
                this.draggingGhost = draggable.dragSource;
            }

            this.draggingTransfer = e.transfer;
            if (this.draggingTransfer) {

                langx.each(this.draggingTransfer, function(key, value) {
                    event.dataTransfer.setData(key, value);
                });
            }

            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);

            ///event.dataTransfer.effectAllowed = "copyMove";

            var e1 = eventer.create("dndStarted", {
                elm: e.elm,
                dragSource: e.dragSource,
                dragHandle: e.dragHandle,
                ghost: e.ghost,
                transfer: e.transfer,
                dragging : this.dragging
            });

            this.trigger(e1);
        },

        over: function() {

        },

        end: function(dropped) {
            var dragging = this.dragging;
            if (dragging) {
                if (dragging.draggingClass) {
                    styler.removeClass(dragging.dragSource, dragging.draggingClass);
                }
            }

            var e2 = eventer.create("ended", {
                originalEvent : e
            });

            this.dragging.trigger(e2);


            var e = eventer.create("dndEnded", {});
            this.trigger(e);


            this.dragging = null;
            this.draggingTransfer = null;
            this.draggingGhost = null;
            this.draggingOffsetX = null;
            this.draggingOffsetY = null;
        }
    });

    var manager = new Manager();


    return manager;
});
define('skylark-domx-plugins-dnd/draggable',[
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-data",
    "skylark-domx-finder",
    "skylark-domx-geom",
    "skylark-domx-eventer",
    "skylark-domx-styler",
    "skylark-devices-points/touch",
    "skylark-domx-plugins-base",
    "./dnd",
    "./manager"
], function(langx, noder, datax, finder, geom, eventer, styler, touch, plugins, dnd,manager) {
    var on = eventer.on,
        off = eventer.off,
        attr = datax.attr,
        removeAttr = datax.removeAttr,
        offset = geom.pagePosition,
        addClass = styler.addClass,
        height = geom.height;



    var Draggable = plugins.Plugin.inherit({
        klassName: "Draggable",
        
        pluginName : "lark.dnd.draggable",

        options : {
            draggingClass : "dragging",
            forceFallback : false
        },

        _construct: function(elm, options) {
            this.overrided(elm,options);

            var self = this,
                options = this.options;

            self.draggingClass = options.draggingClass;

            ["preparing", "started", "ended", "moving"].forEach(function(eventName) {
                if (langx.isFunction(options[eventName])) {
                    self.on(eventName, options[eventName]);
                }
            });

            touch.mousy(elm);

            eventer.on(elm, {
                "mousedown": function(e) {
                    var options = self.options;
                    if (options.handle) {
                        if (langx.isFunction(options.handle)) {
                            self.dragHandle = options.handle(e.target,self._elm);
                        } else {
                            self.dragHandle = finder.closest(e.target, options.handle,self._elm);
                        }
                        if (!self.dragHandle) {
                            return;
                        }
                    }
                    if (options.source) {
                        if (langx.isFunction(options.source)) {
                            self.dragSource =  options.source(e.target, self._elm);                            
                        } else {
                            self.dragSource = finder.closest(e.target, options.source,self._elm);                            
                        }
                    } else {
                        self.dragSource = self._elm;
                    }

                    self.startPos = {
                        x : e.clientX,
                        y : e.clientY
                    };

                    manager.prepare(self,e);

                },

                "mouseup": function(e) {
                    ///if (self.dragSource) {
                    ///    //datax.attr(self.dragSource, "draggable", 'false');
                    ///    self.dragSource = null;
                    ///    self.dragHandle = null;
                    ///}
                },

                "dragstart": function(e) {
                    if (manager.dragging !== self) {
                        return;
                    }
                    manager.start(self, e);
                },

                "dragend": function(e) {
                    if (manager.dragging !== self) {
                        return;
                    }
                    eventer.stop(e);

                    if (!manager.dragging) {
                        return;
                    }

                    manager.end(false);
                }
            });

        }

    });

    plugins.register(Draggable,"draggable");

    return dnd.Draggable = Draggable;
});
define('skylark-domx-plugins-dnd/droppable',[
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-data",
    "skylark-domx-finder",
    "skylark-domx-geom",
    "skylark-domx-eventer",
    "skylark-domx-styler",
    "skylark-domx-plugins-base",
    "./dnd",
    "./manager"
], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {
    var on = eventer.on,
        off = eventer.off,
        attr = datax.attr,
        removeAttr = datax.removeAttr,
        offset = geom.pagePosition,
        addClass = styler.addClass,
        height = geom.height;


    var Droppable = plugins.Plugin.inherit({
        klassName: "Droppable",

        pluginName : "lark.dnd.droppable",

        options : {
            draggingClass : "dragging"
        },

        _construct: function(elm, options) {
            this.overrided(elm,options);

            var self = this,
                options = self.options,
                draggingClass = options.draggingClass,
                hoverClass,
                activeClass,
                acceptable = true;

            ["started", "entered", "leaved", "dropped", "overing"].forEach(function(eventName) {
                if (langx.isFunction(options[eventName])) {
                    self.on(eventName, options[eventName]);
                }
            });

            eventer.on(elm, {
                "dragover": function(e) {
                    e.stopPropagation()

                    if (!acceptable) {
                        return
                    }

                    var e2 = eventer.create("overing", {
                        originalEvent : e,
                        overElm: e.target,
                        transfer: manager.draggingTransfer,
                        acceptable: true
                    });
                    self.trigger(e2);

                    if (e2.acceptable) {
                        e.preventDefault() // allow drop

                        ///e.dataTransfer.dropEffect = "copyMove";
                    }

                },

                "dragenter": function(e) {
                    var options = self.options,
                        elm = self._elm;

                    var e2 = eventer.create("entered", {
                        originalEvent : e,
                        transfer: manager.draggingTransfer
                    });

                    self.trigger(e2);

                    e.stopPropagation()

                    if (hoverClass && acceptable) {
                        styler.addClass(elm, hoverClass)
                    }
                },

                "dragleave": function(e) {
                    var options = self.options,
                        elm = self._elm;
                    if (!acceptable) return false

                    var e2 = eventer.create("leaved", {
                        originalEvent : e,
                        transfer: manager.draggingTransfer
                    });

                    self.trigger(e2);

                    e.stopPropagation()

                    if (hoverClass && acceptable) {
                        styler.removeClass(elm, hoverClass);
                    }
                },

                "drop": function(e) {
                    var options = self.options,
                        elm = self._elm;

                    eventer.stop(e); // stops the browser from redirecting.

                    if (!manager.dragging) return

                    // manager.dragging.elm.removeClass('dragging');

                    if (hoverClass && acceptable) {
                        styler.addClass(elm, hoverClass)
                    }

                    var e2 = eventer.create("dropped", {
                        originalEvent : e,
                        transfer: manager.draggingTransfer
                    });

                    self.trigger(e2);

                    manager.end(true)
                }
            });

            manager.on("dndStarted", function(e) {
                var e2 = eventer.create("started", {
                    transfer: manager.draggingTransfer,
                    acceptable: false,
                    dragging : e.dragging 
                });

                self.trigger(e2);

                acceptable = e2.acceptable;
                hoverClass = e2.hoverClass;
                activeClass = e2.activeClass;

                if (activeClass && acceptable) {
                    styler.addClass(elm, activeClass);
                }

            }).on("dndEnded", function(e) {
                var e2 = eventer.create("ended", {
                    transfer: manager.draggingTransfer,
                    acceptable: false
                });

                self.trigger(e2);

                if (hoverClass && acceptable) {
                    styler.removeClass(elm, hoverClass);
                }
                if (activeClass && acceptable) {
                    styler.removeClass(elm, activeClass);
                }

                acceptable = false;
                activeClass = null;
                hoverClass = null;
            });

        }
    });

    plugins.register(Droppable,"droppable");

    return dnd.Droppable = Droppable;
});
define('skylark-langx-emitter/Emitter',[
    "skylark-langx-events"
],function(events){
    return events.Emitter;
});
define('skylark-dragula/_helpers',[
  "skylark-langx/skylark",
  "skylark-devices-points/mouse",
  "skylark-devices-points/touch",
  "skylark-domx-noder",
  "skylark-domx-finder",
  "skylark-domx-geom",
  "skylark-domx-eventer",
  "skylark-domx-styler"
],function(
  skylark,
  mouse,
  touch,
  noder,
  finder,
  geom,
  eventer,
  styler
 ){
    'use strict';

    function touchy (el, op, type, fn) {
      if (op == "add") {
        eventer.on(el,type,fn);
      } else {
        eventer.off(el,type,fn);
      }

      if (!el.touchInited) {
        el.touchInited = true;   
        touch.mousy(el);     
      }
    }

    function whichMouseButton (e) {
    
      if (e.touches !== void 0) { return e.touches.length; }
      if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261
      if (e.buttons !== void 0) { return e.buttons; }
      var button = e.button;
      if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
        return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);
      }

    }


    
    function getRectWidth (rect) { 
      return rect.width || (rect.right - rect.left); 
    }
    function getRectHeight (rect) { 
      return rect.height || (rect.bottom - rect.top); 
    }


    function getEventHost (e) {
      // on touchend event, we have to use `e.changedTouches`
      // see http://stackoverflow.com/questions/7192563/touchend-event-properties
      // see https://github.com/bevacqua/dragula/issues/34
      if (e.targetTouches && e.targetTouches.length) {
        return e.targetTouches[0];
      }
      if (e.changedTouches && e.changedTouches.length) {
        return e.changedTouches[0];
      }
      return e;
    }

    function getCoord (coord, e) {
      var host = getEventHost(e);
      var missMap = {
        pageX: 'clientX', // IE8
        pageY: 'clientY' // IE8
      };
      if (coord in missMap && !(coord in host) && missMap[coord] in host) {
        coord = missMap[coord];
      }
      return host[coord];
    }

    return {
    	touchy,
    	whichMouseButton,
    	getRectWidth,
    	getRectHeight,
    	getEventHost,
    	getCoord
    };
});
define('skylark-dragula/_drake',[
  "skylark-langx/skylark",
  "skylark-langx-emitter/Emitter",
  "skylark-devices-points/mouse",
  "skylark-devices-points/touch",
  "skylark-domx-noder",
  "skylark-domx-finder",
  "skylark-domx-geom",
  "skylark-domx-eventer",
  "skylark-domx-styler",
  "./_helpers"
],function(
  skylark,
  Emitter,
  mouse,
  touch,
  noder,
  finder,
  geom,
  eventer,
  styler,
  helpers
){
    'use strict';


    var Drake = Emitter.inherit({
        _source : null,   // source container
        _item : null,     // item being dragged
        _initialSibling : null, // reference sibling when grabbed
        _currentSibling : null, // reference sibling now
        _renderTimer : null, // timer for setTimeout renderMirrorImage
        _copy : null, // item used for copying
        _lastDropTarget : null, // last container item was over

        _prepareArgs : function(e,args) {
            return args;
        },
        init : function(options) {
            this.containers = options.containers;
            this.destroy = options.destroy;
            this.options = options;
            this.dragging = false;

        },

        isContainer : function(el) {
            return this.containers.indexOf(el) !== -1 || this.options.isContainer(el);
        },
   
        isCopy : function  (item, container) {
            var o = this.options;
            return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
        },


        findDropTarget : function  (clientX, clientY) {
            var elementBehindCursor  = noder.fromPoint(clientX, clientY),
                target = elementBehindCursor,
                self = this;

            while (target && !accepted()) {
              target = finder.parent(target);
            }

            return target;

            function accepted () {
              var droppable = self.isContainer(target);
              if (droppable === false) {
                return false;
              }

              var immediate = self.getImmediateChild(target, elementBehindCursor);
              var reference = self.getReference(target, immediate, clientX, clientY);
              var initial = self.isInitialPlacement(target, reference);
              if (initial) {
                return true; // should always be able to drop it right back where it was
              }
              return self.options.accepts(self._item, target, self._source, reference);
            }
        },

        isInitialPlacement : function  (target, s) {
            var sibling;
            if (s !== void 0) {
              sibling = s;
            ///} else if (_mirror) {
            ///  sibling = _currentSibling;
            } else {
              sibling = finder.nextSibling(this._copy || this._item);
            }
            return target === this._source && sibling === this._initialSibling;
        },

        getReference : function(dropTarget, target, x, y) {
            var o = this.options;

            var horizontal = o.direction === 'horizontal';

            if (target !== dropTarget) {
                return inside();
            }  else {
                return  outside();
            }

            return reference;

            function outside () { // slower, but able to figure out any position
              var len = dropTarget.children.length;

              for (let i = 0; i < len; i++) {
                let el = dropTarget.children[i];
                //rect = el.getBoundingClientRect();
                let rect = geom.boundingRect(el);
                if (horizontal && (rect.left + rect.width / 2) > x) { return el; }
                if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }
              }
              return null;
            }


            function inside () { // faster, but only available if dropped inside a child element
              
              //var rect = target.getBoundingClientRect();
              var  rect = geom.boundingRect(target);
              if (horizontal) {
                return resolve(x > rect.left + helpers.getRectWidth(rect) / 2);
              }
              return resolve(y > rect.top + helpers.getRectHeight(rect) / 2);
              
            }

            function resolve (after) {
              return after ? finder.nextSibling(target) : target;
            }
        },


        getImmediateChild :   function(dropTarget, target) {
            var immediate = target;
            while (immediate !== dropTarget && finder.parent(immediate) !== dropTarget) {
              immediate = finder.parent(immediate);
            }
            if (immediate === noder.root()) {
              return null;
            }
            return immediate;
        },

        canStart : function (item) {
            ///if (drake.dragging && _mirror) {
            if (this.dragging) {
              return;
            }
            if (this.isContainer(item)) {
              return; // don't drag container itself
            }

            if (this.options.ignoreInputTextSelection) {
                ///var clientX = getCoord('clientX', e);
                ///var clientY = getCoord('clientY', e);
                /////var elementBehindCursor = doc.elementFromPoint(clientX, clientY);
                ///var elementBehindCursor = noder.fromPoint(clientX,clientY);
                ///if (noder.isInput(elementBehindCursor)) {
                if (noder.isInput(item)){
                    return;
                }
            }


            var handle = item;
            var o = this.options;
            while (finder.parent(item) && this.isContainer(finder.parent(item)) === false) {
              if (o.invalid(item, handle)) {
                return;
              }
              item = finder.parent(item); // drag target should be a top element
              if (!item) {
                return;
              }
            }
            var source = finder.parent(item);
            if (!source) {
              return;
            }
            if (o.invalid(item, handle)) {
              return;
            }

            var movable = o.moves(item, source, handle, finder.nextSibling(item));
            if (!movable) {
              return;
            }

            return {
              item: item,
              source: source
            };
        },

        canMove : function  (item) {
            return !! this.canStart(item);
        },

        manualStart : function (item) {
            var context = this.canStart(item);
            if (context) {
                this.start(context);
            }
        },

        start : function(context) {
            if (this.isCopy(context.item, context.source)) {
              this._copy = context.item.cloneNode(true);
              this.emit('cloned', this._copy, context.item, 'copy');
            }

            this._source = context.source;
            this._item = context.item;
            this._initialSibling = this._currentSibling = finder.nextSibling(context.item);

            this.dragging = true;
            this.emit('drag', this._item, this._source);
        },

        over : function(clientX,clientY) {
            var o = this.options,
                item = this._copy || this._item,
                self = this;


            var elementBehindCursor = noder.fromPoint( clientX, clientY);
            var dropTarget = this.findDropTarget(clientX, clientY);
            var changed = dropTarget !== null && dropTarget !== this._lastDropTarget;
            if (changed || dropTarget === null) {
              out();
              this._lastDropTarget = dropTarget;
              over();
            }
            var parent = finder.parent(item);
            if (dropTarget === this._source && this._copy && !o.copySortSource) {
              if (parent) {
                parent.removeChild(item);
              }
              return;
            }

            var reference;
            var immediate = this.getImmediateChild(dropTarget, elementBehindCursor);
            if (immediate !== null) {
              reference = this.getReference(dropTarget, immediate, clientX, clientY);
            } else if (o.revertOnSpill === true && !this._copy) {
              reference = this._initialSibling;
              dropTarget = this._source;
            } else {
              if (this._copy && parent) {
                parent.removeChild(item);
              }
              return;
            }
            if (
              (reference === null && changed) ||
              reference !== item &&
              reference !== finder.nextSibling(item)
            ) {
              this._currentSibling = reference;
              dropTarget.insertBefore(item, reference);
              this.emit('shadow', item, dropTarget, this._source);
            }

            
            function moved (type) { 
                self.emit(type, item, self._lastDropTarget, self._source); 
            }
            
            function over () { 
                if (changed) { 
                    moved('over'); 
                } 
            }
            
            function out () { 
                if (self._lastDropTarget) { 
                    moved('out'); 
                } 
            }
        },

        end : function() {
            if (!this.dragging) {
              return;
            }
            var item = this._copy || this._item;
            this.drop(item, finder.parent(item));
        },

        drop : function(item, target) {
            var parent = finder.parent(item);
            if (this._copy && this.options.copySortSource && target === this._source) {
              parent.removeChild(this._item);
            }
            if (this.isInitialPlacement(target)) {
              this.emit('cancel', item, this._source, this._source);
            } else {
              this.emit('drop', item, target, this._source, this._currentSibling);
            }
            this.cleanup();
        },

        remove : function () {
            if (!this.dragging) {
              return;
            }
            var item = this._copy || this._item;
            var parent = finder.parent(item);
            if (parent) {
              parent.removeChild(item);
            }
            this.emit(_copy ? 'cancel' : 'remove', item, parent, this._source);
            this.cleanup();
        },

        cancel : function  (revert) {
            if (!this.dragging) {
              return;
            }
            var o = this.options;

            var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
            var item = this._copy || this._item;
            var parent = finder.parent(item);
            var initial = this.isInitialPlacement(parent);
            if (initial === false && reverts) {
              if (this._copy) {
                if (parent) {
                  parent.removeChild(this._copy);
                }
              } else {
                this._source.insertBefore(item, this._initialSibling);
              }
            }
            if (initial || reverts) {
              this.emit('cancel', item, this._source, this._source);
            } else {
              this.emit('drop', item, parent, this._source, this._currentSibling);
            }
            this.cleanup();
        },

        cleanup : function  () {
            var item = this._copy || this._item;
            ///ungrab();
            ///removeMirrorImage();
            if (item) {
              styler.removeClass(item, 'gu-transit');
            }
            if (this._renderTimer) {
              clearTimeout(_renderTimer);
            }
            this.dragging = false;
            if (this._lastDropTarget) {
              this.emit('out', item, this._lastDropTarget, this._source);
            }
            this.emit('dragend', item);

            this._source = 
            this._item = 
            this._copy = 
            this._initialSibling = 
            this._currentSibling = 
            this._renderTimer = 
            this._lastDropTarget = null;
        }


    });

    
    return Drake;
});
define('skylark-dragula/dragula',[
  "skylark-langx/skylark",
  "skylark-devices-points/mouse",
  "skylark-devices-points/touch",
  "skylark-domx-noder",
  "skylark-domx-finder",
  "skylark-domx-geom",
  "skylark-domx-eventer",
  "skylark-domx-styler",
  "skylark-domx-plugins-dnd/draggable",
  "skylark-domx-plugins-dnd/droppable",
  "./_drake"
],function(
  skylark,
  mouse,
  touch,
  noder,
  finder,
  geom,
  eventer,
  styler,
  DndDraggable,
  DndDroppable,
  Drake
){

    'use strict';


    function dragula (initialContainers, options) {
      var len = arguments.length;
      if (len === 1 && Array.isArray(initialContainers) === false) {
        options = initialContainers;
        initialContainers = [];
      }

      var o = options || {};
      if (o.moves === void 0) { o.moves = always; }
      if (o.accepts === void 0) { o.accepts = always; }
      if (o.invalid === void 0) { o.invalid = invalidTarget; }
      if (o.containers === void 0) { o.containers = initialContainers || []; }
      if (o.isContainer === void 0) { o.isContainer = never; }
      if (o.copy === void 0) { o.copy = false; }
      if (o.copySortSource === void 0) { o.copySortSource = false; }
      if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }
      if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }
      if (o.direction === void 0) { o.direction = 'vertical'; }
      if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }
      if (o.mirrorContainer === void 0) { o.mirrorContainer = noder.body(); }

      o.destroy = destroy;
      var drake = new Drake(o);

      if (o.removeOnSpill === true) {
        drake.on('over', spillOver).on('out', spillOut);
      }



      ///var listener = listen(drake,o);
      ///listener.events();



      var _context;

      drake.draggable = new  DndDraggable(noder.body(),{
            ///source : options.items,
            ///handle : options.handle,
            ///draggingClass : options.draggingClass,
            preparing : function(e) {
                _context = drake.canStart(e.originalEvent.target);
                if (_context) {
                  e.dragSource = _context.item;
                } else {
                  e.dragSource = null;
                }
            },
            started :function(e) {
                e.ghost = e.dragSource;
                drake.start(_context);

            },
            ended : function(e) {
               drake.end();
               _context = null;              
            },
            drake
        });

        
        drake.droppable = new DndDroppable(noder.body(),{
            started: function(e) {
                if (e.dragging === drake.draggable) {
                  e.acceptable = true;
                  e.activeClass = "active";
                  e.hoverClass = "over";                 
                }
            },
            overing : function(e) {
              drake.over(e.originalEvent.clientX,e.originalEvent.clientY);
            },
            dropped : function(e) {
              //drake.end();
            },
            drake

        });
      return drake;

   

      function destroy () {
        ///listener.events(true);
        ///listener.release({});
      }

      function never () { 
        return false; 
      }
      function always () { 
        return true; 
      }

      function invalidTarget () {
        return false;
      }


      function spillOver (el) {
        styler.removeClass(el, 'gu-hide');
      }

      function spillOut (el) {
        if (drake.dragging) { styler.addClass(el, 'gu-hide'); }
      }

    }



    return skylark.attach("intg.dragula",dragula);

});

define('skylark-dragula/main',[
	"./dragula"
],function(dragula){
	return dragula;
});
define('skylark-dragula', ['skylark-dragula/main'], function (main) { return main; });

define('skylark-formio/components/_classes/nestedarray/NestedArrayComponent',[
    'skylark-lodash',
    '../component/Component',
    '../nesteddata/NestedDataComponent'
], function (_, Component, NestedDataComponent) {
    'use strict';
    'use strict';
    return class NestedArrayComponent extends NestedDataComponent {
        componentContext(component) {
            return this.iteratableRows[component.rowIndex].data;
        }
        get iteratableRows() {
            throw new Error('Getter #iteratableRows() is not implemented');
        }
        get rowIndex() {
            return super.rowIndex;
        }
        set rowIndex(value) {
            this._rowIndex = value;
        }
        checkData(data, flags, row) {
            data = data || this.rootValue;
            flags = flags || {};
            row = row || this.data;
            return this.checkRows('checkData', data, flags, Component.prototype.checkData.call(this, data, flags, row));
        }
        checkRows(method, data, opts, defaultValue) {
            return this.iteratableRows.reduce((valid, row) => this.checkRow(method, data, opts, row.data, row.components) && valid, defaultValue);
        }
        checkRow(method, data, opts, row, components) {
            return _.reduce(components, (valid, component) => component[method](data, opts, row) && valid, true);
        }
        hasAddButton() {
            const maxLength = _.get(this.component, 'validate.maxLength');
            const conditionalAddButton = _.get(this.component, 'conditionalAddButton');
            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && !this.options.preview && (!maxLength || this.iteratableRows.length < maxLength) && (!conditionalAddButton || this.evaluate(conditionalAddButton, { value: this.dataValue }, 'show'));
        }
    };
});
define('skylark-formio/components/datagrid/DataGrid',[
    'skylark-lodash',
    'skylark-dragula',
    '../_classes/nestedarray/NestedArrayComponent',
    '../../utils/utils'
], function (_, dragula, NestedArrayComponent, a) {
    'use strict';
    return class DataGridComponent extends NestedArrayComponent {
        static schema(...extend) {
            return NestedArrayComponent.schema({
                label: 'Data Grid',
                key: 'dataGrid',
                type: 'datagrid',
                clearOnHide: true,
                input: true,
                tree: true,
                components: []
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Data Grid',
                icon: 'th',
                group: 'data',
                documentation: 'http://help.form.io/userguide/#datagrid',
                weight: 30,
                schema: DataGridComponent.schema()
            };
        }
        constructor(...args) {
            super(...args);
            this.type = 'datagrid';
        }
        init() {
            this.components = this.components || [];
            this.rows = [];
            this.createRows(true);
            this.visibleColumns = {};
            this.checkColumns();
        }
        get dataValue() {
            const dataValue = super.dataValue;
            if (!dataValue || !Array.isArray(dataValue)) {
                return this.emptyValue;
            }
            return dataValue;
        }
        set dataValue(value) {
            super.dataValue = value;
        }
        get defaultSchema() {
            return DataGridComponent.schema();
        }
        get emptyValue() {
            return [{}];
        }
        get addAnotherPosition() {
            return _.get(this.component, 'addAnotherPosition', 'bottom');
        }
        get minLength() {
            if (this.hasRowGroups()) {
                return _.sum(this.getGroupSizes());
            } else {
                return _.get(this.component, 'validate.minLength', 0);
            }
        }
        get defaultValue() {
            const value = super.defaultValue;
            let defaultValue;
            if (Array.isArray(value)) {
                defaultValue = value;
            } else if (value && typeof value === 'object') {
                defaultValue = [value];
            } else {
                defaultValue = this.emptyValue;
            }
            for (let dIndex = defaultValue.length; dIndex < this.minLength; dIndex++) {
                defaultValue.push({});
            }
            return defaultValue;
        }
        set disabled(disabled) {
            super.disabled = disabled;
            _.each(this.refs[`${ this.datagridKey }-addRow`], button => {
                button.disabled = disabled;
            });
            _.each(this.refs[`${ this.datagridKey }-removeRow`], button => {
                button.disabled = disabled;
            });
        }
        get disabled() {
            return super.disabled;
        }
        get datagridKey() {
            return `datagrid-${ this.key }`;
        }
        get allowReorder() {
            return !this.options.readOnly && _.get(this.component, 'reorder', false);
        }
        get iteratableRows() {
            return this.rows.map((row, index) => ({
                components: row,
                data: this.dataValue[index]
            }));
        }
        getRowChunks(groups, rows) {
            const [, chunks] = groups.reduce(([startIndex, acc], size) => {
                const endIndex = startIndex + size;
                return [
                    endIndex,
                    [
                        ...acc,
                        [
                            startIndex,
                            endIndex
                        ]
                    ]
                ];
            }, [
                0,
                []
            ]);
            return chunks.map(range => _.slice(rows, ...range));
        }
        getGroups() {
            const groups = _.get(this.component, 'rowGroups', []);
            const sizes = _.map(groups, 'numberOfRows').slice(0, -1);
            const indexes = sizes.reduce((groupIndexes, size) => {
                const last = groupIndexes[groupIndexes.length - 1];
                return groupIndexes.concat(last + size);
            }, [0]);
            return groups.reduce((gidxs, group, idx) => {
                return {
                    ...gidxs,
                    [indexes[idx]]: group
                };
            }, {});
        }
        getGroupSizes() {
            return _.map(_.get(this.component, 'rowGroups', []), 'numberOfRows');
        }
        hasRowGroups() {
            return _.get(this, 'component.enableRowGroups', false) && !this.builderMode;
        }
        totalRowsNumber(groups) {
            return _.sum(_.map(groups, 'numberOfRows'));
        }
        setStaticValue(n) {
            this.dataValue = _.range(n).map(() => ({}));
        }
        hasExtraColumn() {
            return this.hasRemoveButtons() || this.canAddColumn;
        }
        hasRemoveButtons() {
            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && this.dataValue.length > _.get(this.component, 'validate.minLength', 0);
        }
        hasTopSubmit() {
            return this.hasAddButton() && [
                'top',
                'both'
            ].includes(this.addAnotherPosition);
        }
        hasBottomSubmit() {
            return this.hasAddButton() && [
                'bottom',
                'both'
            ].includes(this.addAnotherPosition);
        }
        get canAddColumn() {
            return this.builderMode;
        }
        render() {
            const columns = this.getColumns();
            return super.render(this.renderTemplate('datagrid', {
                rows: this.getRows(),
                columns: columns,
                groups: this.hasRowGroups() ? this.getGroups() : [],
                visibleColumns: this.visibleColumns,
                hasToggle: _.get(this, 'component.groupToggle', false),
                hasHeader: this.hasHeader(),
                hasExtraColumn: this.hasExtraColumn(),
                hasAddButton: this.hasAddButton(),
                hasRemoveButtons: this.hasRemoveButtons(),
                hasTopSubmit: this.hasTopSubmit(),
                hasBottomSubmit: this.hasBottomSubmit(),
                hasGroups: this.hasRowGroups(),
                numColumns: columns.length + (this.hasExtraColumn() ? 1 : 0),
                datagridKey: this.datagridKey,
                allowReorder: this.allowReorder,
                builder: this.builderMode,
                canAddColumn: this.canAddColumn,
                placeholder: this.renderTemplate('builderPlaceholder', { position: this.componentComponents.length })
            }));
        }
        getRows() {
            return this.rows.map(row => {
                const components = {};
                _.each(row, (col, key) => {
                    components[key] = col.render();
                });
                return components;
            });
        }
        getColumns() {
            return this.component.components.filter(comp => {
                return !this.visibleColumns.hasOwnProperty(comp.key) || this.visibleColumns[comp.key];
            });
        }
        hasHeader() {
            return this.component.components.reduce((hasHeader, col) => {
                return hasHeader || (col.label || col.title) && !col.hideLabel;
            }, false);
        }
        attach(element) {
            this.loadRefs(element, {
                [`${ this.datagridKey }-row`]: 'multiple',
                [`${ this.datagridKey }-tbody`]: 'single',
                [`${ this.datagridKey }-addRow`]: 'multiple',
                [`${ this.datagridKey }-removeRow`]: 'multiple',
                [`${ this.datagridKey }-group-header`]: 'multiple',
                [this.datagridKey]: 'multiple'
            });
            if (this.allowReorder) {
                this.refs[`${ this.datagridKey }-row`].forEach((row, index) => {
                    row.dragInfo = { index };
                });
                this.dragula = dragula([this.refs[`${ this.datagridKey }-tbody`]], { moves: (_draggedElement, _oldParent, clickedElement) => clickedElement.classList.contains('formio-drag-button') }).on('drop', this.onReorder.bind(this));
            }
            this.refs[`${ this.datagridKey }-addRow`].forEach(addButton => {
                this.addEventListener(addButton, 'click', this.addRow.bind(this));
            });
            this.refs[`${ this.datagridKey }-removeRow`].forEach((removeButton, index) => {
                this.addEventListener(removeButton, 'click', this.removeRow.bind(this, index));
            });
            if (this.hasRowGroups()) {
                this.refs.chunks = this.getRowChunks(this.getGroupSizes(), this.refs[`${ this.datagridKey }-row`]);
                this.refs[`${ this.datagridKey }-group-header`].forEach((header, index) => {
                    this.addEventListener(header, 'click', () => this.toggleGroup(header, index));
                });
            }
            const columns = this.getColumns();
            const rowLength = columns.length;
            this.rows.forEach((row, rowIndex) => {
                let columnIndex = 0;
                columns.forEach(col => {
                    this.attachComponents(this.refs[this.datagridKey][rowIndex * rowLength + columnIndex], [this.rows[rowIndex][col.key]], this.component.components);
                    columnIndex++;
                });
            });
            return super.attach(element);
        }
        onReorder(element, _target, _source, sibling) {
            if (!element.dragInfo || sibling && !sibling.dragInfo) {
                console.warn('There is no Drag Info available for either dragged or sibling element');
                return;
            }
            const oldPosition = element.dragInfo.index;
            const newPosition = sibling ? sibling.dragInfo.index : this.dataValue.length;
            const movedBelow = newPosition > oldPosition;
            const dataValue = a.fastCloneDeep(this.dataValue);
            const draggedRowData = dataValue[oldPosition];
            dataValue.splice(newPosition, 0, draggedRowData);
            dataValue.splice(movedBelow ? oldPosition : oldPosition + 1, 1);
            this.setValue(dataValue);
            this.redraw();
        }
        addRow() {
            const index = this.rows.length;
            if (this.dataValue.length === index) {
                this.dataValue.push({});
            }
            this.rows[index] = this.createRowComponents(this.dataValue[index], index);
            this.checkConditions();
            this.redraw();
        }
        removeRow(index) {
            this.splice(index);
            const [row] = this.rows.splice(index, 1);
            _.each(row, component => this.removeComponent(component));
            this.redraw();
        }
        getRowValues() {
            return this.dataValue;
        }
        createRows(init) {
            let added = false;
            const rowValues = this.getRowValues();
            rowValues.forEach((row, index) => {
                if (this.rows[index]) {
                    _.each(this.rows[index], component => component.data = row);
                } else {
                    this.rows[index] = this.createRowComponents(row, index);
                    added = true;
                }
            });
            this.rows.splice(rowValues.length);
            if (!init && added) {
                this.redraw();
            }
            return added;
        }
        createRowComponents(row, rowIndex) {
            const components = {};
            this.component.components.map((col, colIndex) => {
                const options = _.clone(this.options);
                options.name += `[${ rowIndex }]`;
                options.row = `${ rowIndex }-${ colIndex }`;
                const component = this.createComponent(col, options, row);
                component.parentDisabled = !!this.disabled;
                if (component.path && col.key) {
                    component.path = component.path.replace(new RegExp(`\\.${ col.key }$`), `[${ rowIndex }].${ col.key }`);
                }
                component.rowIndex = rowIndex;
                component.inDataGrid = true;
                components[col.key] = component;
            });
            return components;
        }
        checkValidity(data, dirty, row) {
            data = data || this.rootValue;
            row = row || this.data;
            if (!this.checkCondition(row, data)) {
                this.setCustomValidity('');
                return true;
            }
            if (!this.checkComponentValidity(data, dirty, row)) {
                return false;
            }
            return this.checkRows('checkValidity', data, dirty, true);
        }
        checkColumns(data, flags = {}) {
            data = data || this.rootValue;
            let show = false;
            if (!this.rows || !this.rows.length) {
                return {
                    rebuild: false,
                    show: false
                };
            }
            if (this.builderMode) {
                return {
                    rebuild: false,
                    show: true
                };
            }
            const visibility = {};
            const dataValue = this.dataValue;
            this.rows.forEach((row, rowIndex) => {
                _.each(row, (col, key) => {
                    if (col && typeof col.checkConditions === 'function') {
                        visibility[key] = !!visibility[key] || col.checkConditions(data, flags, dataValue[rowIndex]) && col.type !== 'hidden';
                    }
                });
            });
            const rebuild = !_.isEqual(visibility, this.visibleColumns);
            _.each(visibility, col => {
                show |= col;
            });
            this.visibleColumns = visibility;
            return {
                rebuild,
                show
            };
        }
        checkComponentConditions(data, flags, row) {
            if (!super.checkComponentConditions(data, flags, row)) {
                return false;
            }
            const {rebuild, show} = this.checkColumns(data, flags);
            if (rebuild) {
                this.redraw();
            }
            return show;
        }
        setValue(value, flags = {}) {
            if (!value) {
                this.dataValue = this.defaultValue;
                this.createRows();
                return false;
            }
            if (!Array.isArray(value)) {
                if (typeof value === 'object') {
                    value = [value];
                } else {
                    this.createRows();
                    value = [{}];
                }
            }
            if (value && !value.length) {
                value.push({});
            }
            const changed = this.hasChanged(value, this.dataValue);
            this.dataValue = value;
            this.createRows();
            this.rows.forEach((row, rowIndex) => {
                if (value.length <= rowIndex) {
                    return;
                }
                _.each(row, col => {
                    col.rowIndex = rowIndex;
                    this.setNestedValue(col, value[rowIndex], flags);
                });
            });
            this.updateOnChange(flags, changed);
            return changed;
        }
        restoreComponentsContext() {
            this.rows.forEach((row, index) => _.forIn(row, component => component.data = this.dataValue[index]));
        }
        getComponent(path, fn) {
            path = Array.isArray(path) ? path : [path];
            const [key, ...remainingPath] = path;
            let result = [];
            if (!_.isString(key)) {
                return result;
            }
            this.everyComponent((component, components) => {
                if (component.component.key === key) {
                    let comp = component;
                    if (remainingPath.length > 0 && 'getComponent' in component) {
                        comp = component.getComponent(remainingPath, fn);
                    } else if (fn) {
                        fn(component, components);
                    }
                    result = result.concat(comp);
                }
            });
            return result.length > 0 ? result : null;
        }
        toggleGroup(element, index) {
            element.classList.toggle('collapsed');
            _.each(this.refs.chunks[index], row => {
                row.classList.toggle('hidden');
            });
        }
    };
});
define('skylark-formio/components/datamap/DataMap',[
    '../_classes/component/Component',
    '../datagrid/DataGrid',
    'skylark-lodash',
    '../../vendors/eventemitter2/EventEmitter2',
    '../../utils/utils'
], function (Component, DataGridComponent, _, EventEmitter, a) {
    'use strict';
    return class DataMapComponent extends DataGridComponent {
        static schema(...extend) {
            return Component.schema({
                label: 'Data Map',
                key: 'dataMap',
                type: 'datamap',
                clearOnHide: true,
                addAnother: 'Add Another',
                disableAddingRemovingRows: false,
                keyBeforeValue: true,
                valueComponent: {
                    type: 'textfield',
                    key: 'value',
                    label: 'Value',
                    input: true
                },
                input: true,
                validate: {
                    maxLength: 0,
                    minLength: 0
                }
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Data Map',
                icon: 'th-list',
                group: 'data',
                documentation: 'http://help.form.io/userguide/#datamap',
                weight: 20,
                schema: DataMapComponent.schema()
            };
        }
        get schema() {
            const schema = super.schema;
            if (this.components && this.components.length > 0) {
                schema.valueComponent = this.components[this.components.length - 1].schema;
            }
            return _.omit(schema, 'components');
        }
        constructor(component, options, data) {
            super(component, options, data);
            this.type = 'datamap';
        }
        init() {
            this.components = [];
            this.rows = [];
            this.createRows();
            this.visibleColumns = {
                key: true,
                [this.valueKey]: true
            };
            this.component.valueComponent.hideLabel = true;
        }
        get defaultSchema() {
            return DataMapComponent.schema();
        }
        get emptyValue() {
            return {};
        }
        get dataValue() {
            if (!this.key || !this.visible && this.component.clearOnHide) {
                return this.emptyValue;
            }
            if (!this.hasValue()) {
                this.dataValue = this.emptyValue;
            }
            return _.get(this.data, this.key);
        }
        set dataValue(value) {
            super.dataValue = value;
        }
        get defaultValue() {
            const value = super.defaultValue;
            if (Array.isArray(value)) {
                return value[0];
            }
            return this.emptyValue;
        }
        get keySchema() {
            return {
                type: 'textfield',
                input: true,
                hideLabel: true,
                label: this.component.keyLabel || 'Key',
                key: '__key'
            };
        }
        get valueKey() {
            return this.component.valueComponent.key;
        }
        getRowValues() {
            const dataValue = this.dataValue;
            if (this.builderMode) {
                return [dataValue];
            }
            if (_.isEmpty(dataValue)) {
                return [];
            }
            return Object.keys(dataValue).map(() => dataValue);
        }
        hasHeader() {
            return true;
        }
        hasRemoveButtons() {
            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode;
        }
        getColumns() {
            const keySchema = Object.assign({}, this.keySchema);
            const valueSchema = Object.assign({}, this.component.valueComponent);
            keySchema.hideLabel = false;
            valueSchema.hideLabel = false;
            return this.component.keyBeforeValue ? [
                keySchema,
                valueSchema
            ] : [
                valueSchema,
                keySchema
            ];
        }
        getRowKey(rowIndex) {
            const keys = Object.keys(this.dataValue);
            if (!keys[rowIndex]) {
                keys[rowIndex] = a.uniqueKey(this.dataValue, 'key');
            }
            return keys[rowIndex];
        }
        createRowComponents(row, rowIndex) {
            let key = this.getRowKey(rowIndex);
            const options = _.clone(this.options);
            options.events = new EventEmitter({
                wildcard: false,
                maxListeners: 0
            });
            options.name += `[${ rowIndex }]`;
            options.row = `${ rowIndex }`;
            const components = {};
            components['__key'] = this.createComponent(this.keySchema, options, { __key: key });
            components['__key'].on('componentChange', event => {
                const dataValue = this.dataValue;
                const newKey = a.uniqueKey(dataValue, event.value);
                dataValue[newKey] = dataValue[key];
                delete dataValue[key];
                components[this.valueKey].component.key = newKey;
                key = newKey;
            });
            const valueComponent = _.clone(this.component.valueComponent);
            valueComponent.key = key;
            components[this.valueKey] = this.createComponent(valueComponent, this.options, this.dataValue);
            return components;
        }
        get canAddColumn() {
            return false;
        }
        addChildComponent(component) {
            this.component.valueComponent = component;
        }
        saveChildComponent(component) {
            this.component.valueComponent = component;
        }
        removeChildComponent() {
            const defaultSchema = DataMapComponent.schema();
            this.component.valueComponent = defaultSchema.valueComponent;
        }
        addRow() {
            const index = this.rows.length;
            this.rows[index] = this.createRowComponents(this.dataValue, index);
            this.redraw();
            this.triggerChange();
        }
        removeRow(index) {
            const keys = Object.keys(this.dataValue);
            if (keys[index]) {
                delete this.dataValue[keys[index]];
            }
            this.rows.splice(index, 1);
            this.redraw();
            this.triggerChange();
        }
        setValue(value, flags = {}) {
            const changed = this.hasChanged(value, this.dataValue);
            this.dataValue = value;
            this.createRows();
            this.updateOnChange(flags, changed);
            return changed;
        }
        checkColumns() {
            return {
                rebuild: false,
                show: true
            };
        }
    };
});
define('skylark-formio/utils/index',['./utils'], function (FormioUtils) {
    'use strict';
    if (typeof global === 'object') {
        global.FormioUtils = FormioUtils;
    }
    return FormioUtils;
});
define('skylark-formio/components/datetime/DateTime',[
    'skylark-lodash',
    'skylark-moment',
    '../_classes/input/Input',
    '../../utils/index',
    '../../widgets/index'
], function (_, moment, Input, FormioUtils, Widgets) {
    'use strict';
    return class DateTimeComponent extends Input {
        static schema(...extend) {
            return Input.schema({
                type: 'datetime',
                label: 'Date / Time',
                key: 'dateTime',
                format: 'yyyy-MM-dd hh:mm a',
                useLocaleSettings: false,
                allowInput: true,
                enableDate: true,
                enableTime: true,
                defaultValue: '',
                defaultDate: '',
                displayInTimezone: 'viewer',
                timezone: '',
                datepickerMode: 'day',
                datePicker: {
                    showWeeks: true,
                    startingDay: 0,
                    initDate: '',
                    minMode: 'day',
                    maxMode: 'year',
                    yearRows: 4,
                    yearColumns: 5,
                    minDate: null,
                    maxDate: null
                },
                timePicker: {
                    hourStep: 1,
                    minuteStep: 1,
                    showMeridian: true,
                    readonlyInput: false,
                    mousewheel: true,
                    arrowkeys: true
                },
                customOptions: {}
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Date / Time',
                group: 'advanced',
                icon: 'calendar',
                documentation: 'http://help.form.io/userguide/#datetime',
                weight: 40,
                schema: DateTimeComponent.schema()
            };
        }
        constructor(component, options, data) {
            super(component, options, data);
            const timezone = this.component.timezone || this.options.timezone;
            const time24hr = !_.get(this.component, 'timePicker.showMeridian', true);
            if (!this.component.enableDate) {
                this.component.format = this.component.format.replace(/yyyy-MM-dd /g, '');
            }
            if (!this.component.enableTime) {
                this.component.format = this.component.format.replace(/ hh:mm a$/g, '');
            } else if (time24hr) {
                this.component.format = this.component.format.replace(/hh:mm a$/g, 'HH:mm');
            } else {
                this.component.format = this.component.format.replace(/HH:mm$/g, 'hh:mm a');
            }
            let customOptions = this.component.customOptions || {};
            if (typeof customOptions === 'string') {
                try {
                    customOptions = JSON.parse(customOptions);
                } catch (err) {
                    console.warn(err.message);
                    customOptions = {};
                }
            }
            this.component.widget = {
                type: 'calendar',
                timezone,
                displayInTimezone: _.get(this.component, 'displayInTimezone', 'viewer'),
                submissionTimezone: this.submissionTimezone,
                language: this.options.language,
                useLocaleSettings: _.get(this.component, 'useLocaleSettings', false),
                allowInput: _.get(this.component, 'allowInput', true),
                mode: this.component.multiple ? 'multiple' : 'single',
                enableTime: _.get(this.component, 'enableTime', true),
                noCalendar: !_.get(this.component, 'enableDate', true),
                format: this.component.format,
                hourIncrement: _.get(this.component, 'timePicker.hourStep', 1),
                minuteIncrement: _.get(this.component, 'timePicker.minuteStep', 5),
                time_24hr: time24hr,
                readOnly: this.options.readOnly,
                minDate: _.get(this.component, 'datePicker.minDate'),
                disabledDates: _.get(this.component, 'datePicker.disable'),
                disableWeekends: _.get(this.component, 'datePicker.disableWeekends'),
                disableWeekdays: _.get(this.component, 'datePicker.disableWeekdays'),
                disableFunction: _.get(this.component, 'datePicker.disableFunction'),
                maxDate: _.get(this.component, 'datePicker.maxDate'),
                ...customOptions
            };
            this.validators.push('date');
        }
        performInputMapping(input) {
            if (input.widget && input.widget.settings) {
                input.widget.settings.submissionTimezone = this.submissionTimezone;
            }
            return input;
        }
        get widget() {
            const widget = this.component.widget ? new Widgets[this.component.widget.type](this.component.widget, this.component) : null;
            return widget;
        }
        get defaultSchema() {
            return DateTimeComponent.schema();
        }
        get defaultValue() {
            let defaultValue = super.defaultValue;
            if (!defaultValue && this.component.defaultDate) {
                defaultValue = FormioUtils.getDateSetting(this.component.defaultDate);
                defaultValue = defaultValue ? defaultValue.toISOString() : '';
            }
            return defaultValue;
        }
        get emptyValue() {
            return '';
        }
        isEmpty(value = this.dataValue) {
            if (value && value.toString() === 'Invalid Date') {
                return true;
            }
            return super.isEmpty(value);
        }
        formatValue(input) {
            const result = moment.utc(input).toISOString();
            return result === 'Invalid date' ? input : result;
        }
        isEqual(valueA, valueB = this.dataValue) {
            const format = FormioUtils.convertFormatToMoment(this.component.format);
            return this.isEmpty(valueA) && this.isEmpty(valueB) || moment.utc(valueA).format(format) === moment.utc(valueB).format(format);
        }
        createWrapper() {
            return false;
        }
        checkValidity(data, dirty, rowData) {
            if (this.refs.input) {
                this.refs.input.forEach(input => {
                    if (input.widget && input.widget.enteredDate) {
                        dirty = true;
                    }
                });
            }
            return super.checkValidity(data, dirty, rowData);
        }
        focus() {
            if (this.refs.input && this.refs.input[0]) {
                const sibling = this.refs.input[0].nextSibling;
                if (sibling) {
                    sibling.focus();
                }
            }
        }
    };
});
define('skylark-formio/components/day/Day',[
    'skylark-lodash',
    '../_classes/field/Field',
    '../../utils/utils'
], function (_, Field, a) {
    'use strict';
    return class DayComponent extends Field {
        static schema(...extend) {
            return Field.schema({
                type: 'day',
                label: 'Day',
                key: 'day',
                fields: {
                    day: {
                        type: 'number',
                        placeholder: '',
                        required: false
                    },
                    month: {
                        type: 'select',
                        placeholder: '',
                        required: false
                    },
                    year: {
                        type: 'number',
                        placeholder: '',
                        required: false
                    }
                },
                dayFirst: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Day',
                group: 'advanced',
                icon: 'calendar',
                documentation: 'http://help.form.io/userguide/#day',
                weight: 50,
                schema: DayComponent.schema()
            };
        }
        get emptyValue() {
            return '00/00/0000';
        }
        get valueMask() {
            return /^\d{2}\/\d{2}\/\d{4}$/;
        }
        get dayRequired() {
            return this.showDay && _.get(this.component, 'fields.day.required', false);
        }
        get showDay() {
            return !_.get(this.component, 'fields.day.hide', false);
        }
        get monthRequired() {
            return this.showMonth && _.get(this.component, 'fields.month.required', false);
        }
        get showMonth() {
            return !_.get(this.component, 'fields.month.hide', false);
        }
        get yearRequired() {
            return this.showYear && _.get(this.component, 'fields.year.required', false);
        }
        get showYear() {
            return !_.get(this.component, 'fields.year.hide', false);
        }
        get defaultSchema() {
            return DayComponent.schema();
        }
        get inputInfo() {
            const info = super.elementInfo();
            info.type = 'input';
            info.attr.type = 'hidden';
            info.changeEvent = 'input';
            return info;
        }
        inputDefinition(name) {
            let min, max;
            if (name === 'day') {
                min = 1;
                max = 31;
            }
            if (name === 'month') {
                min = 1;
                max = 12;
            }
            if (name === 'year') {
                min = _.get(this.component, 'fields.year.minYear', 1900) || 1900;
                max = _.get(this.component, 'fields.year.maxYear', 2030) || 1900;
            }
            return {
                type: 'input',
                ref: name,
                attr: {
                    id: `${ this.component.key }-${ name }`,
                    class: `form-control ${ this.transform('class', `formio-day-component-${ name }`) }`,
                    type: this.component.fields[name].type === 'select' ? 'select' : 'number',
                    placeholder: this.component.fields[name].placeholder,
                    step: 1,
                    min,
                    max
                }
            };
        }
        selectDefinition(name) {
            return {
                multiple: false,
                ref: name,
                widget: 'html5',
                attr: {
                    id: `${ this.component.key }-${ name }`,
                    class: 'form-control',
                    name,
                    lang: this.options.language
                }
            };
        }
        get days() {
            if (this._days) {
                return this._days;
            }
            this._days = [{
                    value: '',
                    label: _.get(this.component, 'fields.day.placeholder', '')
                }];
            for (let x = 1; x <= 31; x++) {
                this._days.push({
                    value: x,
                    label: x.toString()
                });
            }
            return this._days;
        }
        get months() {
            if (this._months) {
                return this._months;
            }
            this._months = [
                {
                    value: '',
                    label: _.get(this.component, 'fields.month.placeholder') || (this.hideInputLabels ? this.t('Month') : '')
                },
                {
                    value: 1,
                    label: 'January'
                },
                {
                    value: 2,
                    label: 'February'
                },
                {
                    value: 3,
                    label: 'March'
                },
                {
                    value: 4,
                    label: 'April'
                },
                {
                    value: 5,
                    label: 'May'
                },
                {
                    value: 6,
                    label: 'June'
                },
                {
                    value: 7,
                    label: 'July'
                },
                {
                    value: 8,
                    label: 'August'
                },
                {
                    value: 9,
                    label: 'September'
                },
                {
                    value: 10,
                    label: 'October'
                },
                {
                    value: 11,
                    label: 'November'
                },
                {
                    value: 12,
                    label: 'December'
                }
            ];
            return this._months;
        }
        get years() {
            if (this._years) {
                return this._years;
            }
            this._years = [{
                    value: '',
                    label: _.get(this.component, 'fields.year.placeholder', '')
                }];
            const minYears = _.get(this.component, 'fields.year.minYear', 1900) || 1900;
            const maxYears = _.get(this.component, 'fields.year.maxYear', 2030) || 2030;
            for (let x = minYears; x <= maxYears; x++) {
                this._years.push({
                    value: x,
                    label: x.toString()
                });
            }
            return this._years;
        }
        setErrorClasses(elements, dirty, hasError) {
            super.setErrorClasses(elements, dirty, hasError);
            super.setErrorClasses([
                this.refs.day,
                this.refs.month,
                this.refs.year
            ], dirty, hasError);
        }
        removeInputError(elements) {
            super.removeInputError([
                this.refs.day,
                this.refs.month,
                this.refs.year
            ]);
            super.removeInputError(elements);
        }
        init() {
            super.init();
            this.validators = this.validators.concat([
                'day',
                'maxDate',
                'minDate',
                'minYear',
                'maxYear'
            ]);
            const minYear = this.component.fields.year.minYear;
            const maxYear = this.component.fields.year.maxYear;
            this.component.maxYear = maxYear;
            this.component.minYear = minYear;
            const dateFormatInfo = a.getLocaleDateFormatInfo(this.options.language);
            this.dayFirst = this.component.useLocaleSettings ? dateFormatInfo.dayFirst : this.component.dayFirst;
        }
        render() {
            return super.render(this.renderTemplate('day', {
                dayFirst: this.dayFirst,
                showDay: this.showDay,
                showMonth: this.showMonth,
                showYear: this.showYear,
                day: this.renderField('day'),
                month: this.renderField('month'),
                year: this.renderField('year')
            }));
        }
        renderField(name) {
            if (this.component.fields[name].type === 'select') {
                return this.renderTemplate('select', {
                    input: this.selectDefinition(name),
                    selectOptions: this[`${ name }s`].reduce((html, option) => html + this.renderTemplate('selectOption', {
                        option,
                        selected: false,
                        attrs: {}
                    }), '')
                });
            } else {
                return this.renderTemplate('input', { input: this.inputDefinition(name) });
            }
        }
        attach(element) {
            this.loadRefs(element, {
                day: 'single',
                month: 'single',
                year: 'single',
                input: 'multiple'
            });
            const superAttach = super.attach(element);
            if (this.shouldDisabled) {
                this.setDisabled(this.refs.day, true);
                this.setDisabled(this.refs.month, true);
                this.setDisabled(this.refs.year, true);
                if (this.refs.input) {
                    this.refs.input.forEach(input => this.setDisabled(input, true));
                }
            } else {
                this.addEventListener(this.refs.day, 'input', () => this.updateValue(null, { modified: true }));
                this.addEventListener(this.refs.month, 'input', () => {
                    const maxDay = this.refs.year ? parseInt(new Date(this.refs.year.value, this.refs.month.value, 0).getDate(), 10) : '';
                    const day = this.getFieldValue('day');
                    if (!this.component.fields.day.hide && maxDay) {
                        this.refs.day.max = maxDay;
                    }
                    if (maxDay && day > maxDay) {
                        this.refs.day.value = this.refs.day.max;
                    }
                    this.updateValue(null, { modified: true });
                });
                this.addEventListener(this.refs.year, 'input', () => this.updateValue(null, { modified: true }));
                this.addEventListener(this.refs.input, this.info.changeEvent, () => this.updateValue(null, { modified: true }));
            }
            this.setValue(this.dataValue);
            return superAttach;
        }
        validateRequired(setting, value) {
            const {day, month, year} = this.parts;
            if (this.dayRequired && !day) {
                return false;
            }
            if (this.monthRequired && !month) {
                return false;
            }
            if (this.yearRequired && !year) {
                return false;
            }
            if (!a.boolValue(setting)) {
                return true;
            }
            return !this.isEmpty(value);
        }
        set disabled(disabled) {
            super.disabled = disabled;
            if (!this.refs.year || !this.refs.month || !this.refs.day) {
                return;
            }
            if (disabled) {
                this.refs.year.setAttribute('disabled', 'disabled');
                this.refs.month.setAttribute('disabled', 'disabled');
                this.refs.day.setAttribute('disabled', 'disabled');
            } else {
                this.refs.year.removeAttribute('disabled');
                this.refs.month.removeAttribute('disabled');
                this.refs.day.removeAttribute('disabled');
            }
        }
        normalizeValue(value) {
            if (!value || this.valueMask.test(value)) {
                return value;
            }
            const dateParts = [];
            const valueParts = value.split('/');
            const getNextPart = (shouldTake, defaultValue) => dateParts.push(shouldTake ? valueParts.shift() : defaultValue);
            if (this.dayFirst) {
                getNextPart(this.showDay, '00');
            }
            getNextPart(this.showMonth, '00');
            if (!this.dayFirst) {
                getNextPart(this.showDay, '00');
            }
            getNextPart(this.showYear, '0000');
            return dateParts.join('/');
        }
        setValueAt(index, value) {
            if (!value || value === 'Invalid date') {
                return null;
            }
            const parts = value.split('/');
            let day;
            if (this.component.dayFirst) {
                day = parts.shift();
            }
            const month = parts.shift();
            if (!this.component.dayFirst) {
                day = parts.shift();
            }
            const year = parts.shift();
            if (this.refs.day && this.showDay) {
                this.refs.day.value = day === '00' ? '' : parseInt(day, 10);
            }
            if (this.refs.month && this.showMonth) {
                this.refs.month.value = month === '00' ? '' : parseInt(month, 10);
            }
            if (this.refs.year && this.showYear) {
                this.refs.year.value = year === '0000' ? '' : parseInt(year, 10);
            }
        }
        getFieldValue(name) {
            const parts = this.dataValue ? this.dataValue.split('/') : [];
            let val = 0;
            switch (name) {
            case 'month':
                val = parts[this.dayFirst ? 1 : 0];
                break;
            case 'day':
                val = parts[this.dayFirst ? 0 : 1];
                break;
            case 'year':
                val = parts[2];
                break;
            }
            val = parseInt(val, 10);
            return !_.isNaN(val) && _.isNumber(val) ? val : 0;
        }
        get parts() {
            return {
                day: this.getFieldValue('day'),
                month: this.getFieldValue('month'),
                year: this.getFieldValue('year')
            };
        }
        get format() {
            let format = '';
            if (this.component.dayFirst && this.showDay) {
                format += 'D/';
            }
            if (this.showMonth) {
                format += 'M/';
            }
            if (!this.component.dayFirst && this.showDay) {
                format += 'D/';
            }
            if (this.showYear) {
                format += 'YYYY';
                return format;
            } else {
                return format.length ? format.substring(0, format.length - 1) : format;
            }
        }
        getDate(value) {
            let defaults = [], day, month, year;
            const [DAY, MONTH, YEAR] = this.component.dayFirst ? [
                0,
                1,
                2
            ] : [
                1,
                0,
                2
            ];
            const defaultValue = value || this.component.defaultValue;
            if (defaultValue) {
                defaults = defaultValue.split('/').map(x => parseInt(x, 10));
            }
            if (this.showDay && this.refs.day) {
                day = parseInt(this.refs.day.value, 10);
            }
            if (day === undefined || _.isNaN(day)) {
                day = defaults[DAY] && !_.isNaN(defaults[DAY]) ? defaults[DAY] : 0;
            }
            if (this.showMonth && this.refs.month) {
                month = parseInt(this.refs.month.value, 10);
            }
            if (month === undefined || _.isNaN(month)) {
                month = defaults[MONTH] && !_.isNaN(defaults[MONTH]) ? defaults[MONTH] : 0;
            }
            if (this.showYear && this.refs.year) {
                year = parseInt(this.refs.year.value);
            }
            if (year === undefined || _.isNaN(year)) {
                year = defaults[YEAR] && !_.isNaN(defaults[YEAR]) ? defaults[YEAR] : 0;
            }
            let result;
            if (!day && !month && !year) {
                return null;
            }
            day = this.showDay ? day.toString().padStart(2, 0) : '';
            month = this.showMonth ? month.toString().padStart(2, 0) : '';
            year = this.showYear ? year.toString().padStart(4, 0) : '';
            if (this.component.dayFirst) {
                result = `${ day }${ this.showDay && this.showMonth || this.showDay && this.showYear ? '/' : '' }${ month }${ this.showMonth && this.showYear ? '/' : '' }${ year }`;
            } else {
                result = `${ month }${ this.showDay && this.showMonth || this.showMonth && this.showYear ? '/' : '' }${ day }${ this.showDay && this.showYear ? '/' : '' }${ year }`;
            }
            return result;
        }
        get date() {
            return this.getDate();
        }
        normalizeMinMaxDates() {
            return [
                this.component.minDate,
                this.component.maxDate
            ].map(date => date ? date.split('-').reverse().join('/') : date);
        }
        get validationValue() {
            [this.component.minDate, this.component.maxDate] = this.dayFirst ? this.normalizeMinMaxDates() : [
                this.component.minDate,
                this.component.maxDate
            ];
            return this.dataValue;
        }
        getValue() {
            const result = super.getValue();
            return !result ? this.dataValue : result;
        }
        getValueAt(index) {
            const date = this.date;
            if (date) {
                this.refs.input[index].value = date;
                return this.refs.input[index].value;
            } else {
                this.refs.input[index].value = '';
                return null;
            }
        }
        getValueAsString(value) {
            return this.getDate(value) || '';
        }
        focus() {
            if (this.dayFirst && this.showDay || !this.dayFirst && !this.showMonth && this.showDay) {
                this.refs.day.focus();
            } else if (this.dayFirst && !this.showDay && this.showMonth || !this.dayFirst && this.showMonth) {
                this.refs.month.focus();
            } else if (!this.showDay && !this.showDay && this.showYear) {
                this.refs.year.focus();
            }
        }
        isPartialDay(value) {
            if (!value) {
                return false;
            }
            const [DAY, MONTH, YEAR] = this.component.dayFirst ? [
                0,
                1,
                2
            ] : [
                1,
                0,
                2
            ];
            const values = value.split('/');
            return values[DAY] === '00' || values[MONTH] === '00' || values[YEAR] === '0000';
        }
    };
});
define('skylark-formio/components/editgrid/templates/row.ejs',[],function() {
return   `<div class="row">
  {% ctx.util.eachComponent(ctx.components, function(component) { %}
    {% if (!component.hasOwnProperty('tableView') || component.tableView) { %}
      <div class="col-sm-2">
        {{ ctx.getView(component, ctx.row[component.key]) }}
      </div>
    {% } %}
  {% }) %}
  {% if (!ctx.self.options.readOnly) { %}
    <div class="col-sm-2">
      <div class="btn-group pull-right">
        <button class="btn btn-default btn-light btn-sm editRow"><i class="{{ ctx.iconClass('edit') }}"></i></button>
        <button class="btn btn-danger btn-sm removeRow"><i class="{{ ctx.iconClass('trash') }}"></i></button>
      </div>
    </div>
  {% } %}
</div>` ;
});

define('skylark-formio/components/editgrid/templates/header.ejs',[],function() {
return `<div class="row">
  {% ctx.util.eachComponent(ctx.components, function(component) { %}
    {% if (!component.hasOwnProperty('tableView') || component.tableView) { %}
      <div class="col-sm-2">{{ component.label }}</div>
    {% } %}
  {% }) %}
</div>` ;
});

define('skylark-formio/components/editgrid/templates/index',[
    './row.ejs',
    './header.ejs'
], function (row, header) {
    'use strict';
    return {
        row,
        header
    };
});
define('skylark-formio/components/editgrid/EditGrid',[
    'skylark-lodash',
//    'fast-deep-equal',
    '../_classes/nestedarray/NestedArrayComponent',
    '../_classes/component/Component',
    '../../utils/utils',
    './templates/index'
], function (_,  NestedArrayComponent, Component, a, templates) {
    'use strict';

    var equal = _.isEqual;
    
    const EditRowState = {
        New: 'new',
        Editing: 'editing',
        Saved: 'saved',
        Removed: 'removed'
    };
    return class EditGridComponent extends NestedArrayComponent {
        static schema(...extend) {
            return NestedArrayComponent.schema({
                type: 'editgrid',
                label: 'Edit Grid',
                key: 'editGrid',
                clearOnHide: true,
                input: true,
                tree: true,
                removeRow: 'Cancel',
                defaultOpen: false,
                openWhenEmpty: false,
                components: [],
                inlineEdit: false,
                templates: {
                    header: EditGridComponent.defaultHeaderTemplate,
                    row: EditGridComponent.defaultRowTemplate,
                    footer: ''
                }
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Edit Grid',
                icon: 'tasks',
                group: 'data',
                documentation: 'http://help.form.io/userguide/#editgrid',
                weight: 30,
                schema: EditGridComponent.schema()
            };
        }
        static get defaultHeaderTemplate() {
            return `<div class="row">
  {% util.eachComponent(components, function(component) { %}
    <div class="col-sm-2">{{ component.label }}</div>
  {% }) %}
</div>`;
        }
        static get defaultRowTemplate() {
            return `<div class="row">
  {% util.eachComponent(components, function(component) { %}
    <div class="col-sm-2">
      {{ getView(component, row[component.key]) }}
    </div>
  {% }) %}
  {% if (!instance.options.readOnly && !instance.originalComponent.disabled) { %}
    <div class="col-sm-2">
      <div class="btn-group pull-right">
        <button class="btn btn-default btn-light btn-sm editRow"><i class="{{ iconClass('edit') }}"></i></button>
        {% if (!instance.hasRemoveButtons || instance.hasRemoveButtons()) { %}
          <button class="btn btn-danger btn-sm removeRow"><i class="{{ iconClass('trash') }}"></i></button>
        {% } %}
      </div>
    </div>
  {% } %}
</div>`;
        }
        get defaultSchema() {
            return EditGridComponent.schema();
        }
        get emptyValue() {
            return [];
        }
        get editgridKey() {
            return `editgrid-${ this.key }`;
        }
        get rowRef() {
            return `${ this.editgridKey }-row`;
        }
        get rowElements() {
            return this.refs[this.rowRef];
        }
        get addRowRef() {
            return `${ this.editgridKey }-addRow`;
        }
        get addRowElements() {
            return this.refs[this.addRowRef];
        }
        get saveRowRef() {
            return `${ this.editgridKey }-saveRow`;
        }
        get saveRowElements() {
            return this.refs[this.saveRowRef];
        }
        get cancelRowRef() {
            return `${ this.editgridKey }-cancelRow`;
        }
        get cancelRowElements() {
            return this.refs[this.cancelRowRef];
        }
        get inlineEditMode() {
            return this.component.inlineEdit;
        }
        get saveEditMode() {
            return !this.inlineEditMode;
        }
        get minLength() {
            return _.get(this.component, 'validate.minLength', 0);
        }
        get data() {
            return this._data;
        }
        set data(value) {
            this._data = value;
            const data = this.dataValue;
            (this.editRows || []).forEach((row, index) => {
                const rowData = data[index];
                row.data = rowData;
                row.components.forEach(component => {
                    component.data = rowData;
                });
            });
        }
        get iteratableRows() {
            return this.editRows;
        }
        constructor(...args) {
            super(...args);
            this.type = 'editgrid';
        }
        hasRemoveButtons() {
            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && this.dataValue.length > _.get(this.component, 'validate.minLength', 0);
        }
        init() {
            if (this.builderMode) {
                this.editRows = [];
                return super.init();
            }
            this.components = this.components || [];
            const dataValue = this.dataValue || [];
            const openWhenEmpty = !dataValue.length && this.component.openWhenEmpty;
            if (openWhenEmpty) {
                const dataObj = {};
                this.editRows = [{
                        components: this.createRowComponents(dataObj, 0),
                        data: dataObj,
                        state: EditRowState.New,
                        backup: null,
                        error: null
                    }];
                if (this.inlineEditMode) {
                    this.dataValue.push(dataObj);
                }
            } else {
                this.editRows = dataValue.map((row, rowIndex) => ({
                    components: this.createRowComponents(row, rowIndex),
                    data: row,
                    state: EditRowState.Saved,
                    backup: null,
                    error: null
                }));
            }
            this.checkData();
        }
        isOpen(editRow) {
            return [
                EditRowState.New,
                EditRowState.Editing
            ].includes(editRow.state);
        }
        render(children) {
            if (this.builderMode) {
                return super.render();
            }
            const dataValue = this.dataValue || [];
            const headerTemplate = a.Evaluator.noeval ? templates.header : _.get(this.component, 'templates.header');
            return super.render(children || this.renderTemplate('editgrid', {
                ref: {
                    row: this.rowRef,
                    addRow: this.addRowRef,
                    saveRow: this.saveRowRef,
                    cancelRow: this.cancelRowRef
                },
                header: this.renderString(headerTemplate, {
                    components: this.component.components,
                    value: dataValue
                }),
                footer: this.renderString(_.get(this.component, 'templates.footer'), {
                    components: this.component.components,
                    value: dataValue
                }),
                rows: this.editRows.map(this.renderRow.bind(this)),
                openRows: this.editRows.map(row => this.isOpen(row)),
                errors: this.editRows.map(row => row.error),
                hasAddButton: this.hasAddButton(),
                hasRemoveButtons: this.hasRemoveButtons()
            }));
        }
        attach(element) {
            if (this.builderMode) {
                return super.attach(element);
            }
            this.loadRefs(element, {
                [this.addRowRef]: 'multiple',
                [this.saveRowRef]: 'multiple',
                [this.cancelRowRef]: 'multiple',
                [this.rowRef]: 'multiple'
            });
            this.addRowElements.forEach(addButton => {
                this.addEventListener(addButton, 'click', () => this.addRow());
            });
            let openRowCount = 0;
            this.rowElements.forEach((row, rowIndex) => {
                const editRow = this.editRows[rowIndex];
                if (this.isOpen(editRow)) {
                    this.attachComponents(row, editRow.components);
                    this.addEventListener(this.saveRowElements[openRowCount], 'click', () => this.saveRow(rowIndex));
                    this.addEventListener(this.cancelRowElements[openRowCount], 'click', () => this.cancelRow(rowIndex));
                    openRowCount++;
                } else {
                    [
                        {
                            className: 'removeRow',
                            event: 'click',
                            action: () => this.removeRow(rowIndex)
                        },
                        {
                            className: 'editRow',
                            event: 'click',
                            action: () => this.editRow(rowIndex)
                        }
                    ].forEach(({className, event, action}) => {
                        const elements = row.getElementsByClassName(className);
                        Array.prototype.forEach.call(elements, element => {
                            this.addEventListener(element, event, action);
                        });
                    });
                }
            });
            if (openRowCount) {
                this.addClass(this.refs.component, `formio-component-${ this.component.type }-row-open`);
            } else {
                this.removeClass(this.refs.component, `formio-component-${ this.component.type }-row-open`);
            }
            return super.attach(element);
        }
        clearOnHide(show) {
            super.clearOnHide(show);
            if (this.component.clearOnHide && !this.visible) {
                if (!this.editRows) {
                    return;
                }
                this.removeAllRows();
            }
        }
        renderRow(row, rowIndex) {
            const dataValue = this.dataValue || [];
            if (this.isOpen(row)) {
                return this.renderComponents(row.components);
            } else {
                const flattenedComponents = this.flattenComponents(rowIndex);
                const rowTemplate = a.Evaluator.noeval ? templates.row : _.get(this.component, 'templates.row', EditGridComponent.defaultRowTemplate);
                return this.renderString(rowTemplate, {
                    row: dataValue[rowIndex] || {},
                    data: this.data,
                    rowIndex,
                    components: this.component.components,
                    flattenedComponents,
                    getView: (component, data) => {
                        const instance = flattenedComponents[component.key];
                        let view = instance ? instance.getView(data) : '';
                        if (instance && instance.widget && view !== '--- PROTECTED ---') {
                            if (_.isArray(view)) {
                                view = view.map(value => instance.widget.getValueAsString(value));
                            } else {
                                view = instance.widget.getValueAsString(view);
                            }
                        }
                        return view;
                    }
                });
            }
        }
        everyComponent(fn, rowIndex) {
            const components = this.getComponents(rowIndex);
            _.each(components, (component, index) => {
                if (fn(component, components, index) === false) {
                    return false;
                }
                if (typeof component.everyComponent === 'function') {
                    if (component.everyComponent(fn) === false) {
                        return false;
                    }
                }
            });
        }
        flattenComponents(rowIndex) {
            const result = {};
            this.everyComponent(component => {
                result[component.component.flattenAs || component.key] = component;
            }, rowIndex);
            return result;
        }
        getComponents(rowIndex) {
            this.editRows = this.editRows || [];
            return this.builderMode ? super.getComponents() : _.isNumber(rowIndex) ? this.editRows[rowIndex].components || [] : this.editRows.reduce((result, row) => result.concat(row.components || []), []);
        }
        destroyComponents(rowIndex) {
            if (this.builderMode) {
                return super.destroyComponents();
            }
            const components = this.getComponents(rowIndex).slice();
            components.forEach(comp => comp.destroy());
        }
        addRow() {
            if (this.options.readOnly) {
                return;
            }
            const dataObj = {};
            const rowIndex = this.editRows.length;
            const editRow = {
                components: this.createRowComponents(dataObj, rowIndex),
                data: dataObj,
                state: EditRowState.New,
                backup: null,
                error: null
            };
            this.editRows.push(editRow);
            if (this.inlineEditMode) {
                this.dataValue.push(dataObj);
                this.triggerChange();
            }
            this.emit('editGridAddRow', {
                component: this.component,
                row: editRow
            });
            this.checkRow('checkData', null, {}, editRow.data, editRow.components);
            if (this.component.modal) {
                this.addRowModal(rowIndex);
            } else {
                this.redraw();
            }
            return editRow;
        }
        addRowModal(rowIndex) {
            const modalContent = this.ce('div');
            const editRow = this.editRows[rowIndex];
            const {components} = editRow;
            modalContent.innerHTML = this.renderComponents(components);
            const dialog = this.component.modal ? this.createModal(modalContent) : undefined;
            dialog.refs.dialogContents.appendChild(this.ce('button', {
                class: 'btn btn-primary',
                onClick: () => {
                    if (this.validateRow(editRow, true)) {
                        dialog.close();
                        this.saveRow(rowIndex);
                    }
                }
            }, this.component.saveRow || 'Save'));
            this.attachComponents(modalContent, components);
        }
        editRow(rowIndex) {
            const editRow = this.editRows[rowIndex];
            editRow.state = EditRowState.Editing;
            const dataSnapshot = a.fastCloneDeep(editRow.data);
            if (this.inlineEditMode) {
                editRow.backup = dataSnapshot;
            } else {
                editRow.backup = editRow.data;
                editRow.data = dataSnapshot;
                this.restoreRowContext(editRow);
            }
            if (this.component.modal) {
                this.addRowModal(rowIndex);
            } else {
                this.redraw();
            }
        }
        clearErrors(rowIndex) {
            const editRow = this.editRows[rowIndex];
            if (editRow && Array.isArray(editRow.components)) {
                editRow.components.forEach(comp => {
                    comp.setPristine(true);
                    comp.setCustomValidity('');
                });
            }
        }
        cancelRow(rowIndex) {
            if (this.options.readOnly) {
                return;
            }
            const editRow = this.editRows[rowIndex];
            switch (editRow.state) {
            case EditRowState.New: {
                    editRow.state = EditRowState.Removed;
                    this.clearErrors(rowIndex);
                    this.destroyComponents(rowIndex);
                    if (this.inlineEditMode) {
                        this.splice(rowIndex);
                    }
                    this.editRows.splice(rowIndex, 1);
                    break;
                }
            case EditRowState.Editing: {
                    editRow.state = EditRowState.Saved;
                    if (this.inlineEditMode) {
                        this.dataValue[rowIndex] = editRow.backup;
                    }
                    editRow.data = editRow.backup;
                    editRow.backup = null;
                    this.restoreRowContext(editRow);
                    this.clearErrors(rowIndex);
                    break;
                }
            }
            this.checkValidity(null, true);
            this.redraw();
        }
        saveRow(rowIndex) {
            if (this.options.readOnly) {
                return;
            }
            const editRow = this.editRows[rowIndex];
            if (!this.validateRow(editRow, true)) {
                return false;
            }
            if (this.saveEditMode) {
                const dataValue = this.dataValue || [];
                switch (editRow.state) {
                case EditRowState.New: {
                        const newIndex = dataValue.length;
                        dataValue.push(editRow.data);
                        if (rowIndex !== newIndex) {
                            this.editRows.splice(rowIndex, 1);
                            this.editRows.splice(newIndex, 0, editRow);
                        }
                        break;
                    }
                case EditRowState.Editing: {
                        dataValue[rowIndex] = editRow.data;
                        break;
                    }
                }
            }
            editRow.state = EditRowState.Saved;
            editRow.backup = null;
            this.updateValue();
            this.triggerChange();
            this.checkValidity(null, true);
            this.redraw();
            return true;
        }
        updateComponentsRowIndex(components, rowIndex) {
            components.forEach((component, colIndex) => {
                component.rowIndex = rowIndex;
                component.row = `${ rowIndex }-${ colIndex }`;
            });
        }
        updateRowsComponents(rowIndex) {
            this.editRows.slice(rowIndex).forEach((row, index) => {
                this.updateComponentsRowIndex(row.components, index);
            });
        }
        removeRow(rowIndex) {
            if (this.options.readOnly) {
                return;
            }
            const editRow = this.editRows[rowIndex];
            editRow.state = EditRowState.Removed;
            this.destroyComponents(rowIndex);
            this.splice(rowIndex);
            this.editRows.splice(rowIndex, 1);
            this.updateRowsComponents(rowIndex);
            this.updateValue();
            this.triggerChange();
            this.checkValidity(null, true);
            this.checkData();
            this.redraw();
        }
        removeAllRows() {
            if (this.options.readOnly) {
                return;
            }
            const editRows = this.editRows || [];
            const rowIndex = editRows.length - 1;
            for (let index = rowIndex; index >= 0; index--) {
                this.removeRow(index);
            }
        }
        createRowComponents(row, rowIndex) {
            return this.component.components.map((col, colIndex) => {
                const column = _.clone(col);
                const options = _.clone(this.options);
                options.name += `[${ rowIndex }]`;
                options.row = `${ rowIndex }-${ colIndex }`;
                options.onChange = (flags, changed, modified) => {
                    const editRow = this.editRows[rowIndex];
                    if (this.inlineEditMode) {
                        this.triggerRootChange(flags, changed, modified);
                    } else if (editRow) {
                        this.checkRow('checkData', null, { changed }, editRow.data, editRow.components);
                    }
                };
                const comp = this.createComponent(_.assign({}, column, { row: options.row }), options, row);
                comp.rowIndex = rowIndex;
                if (comp.path && column.key) {
                    comp.path = comp.path.replace(new RegExp(`\\.${ column.key }$`), `[${ rowIndex }].${ column.key }`);
                }
                return comp;
            });
        }
        validateRow(editRow, dirty) {
            let valid = true;
            if (editRow.state === EditRowState.Editing || dirty) {
                editRow.components.forEach(comp => {
                    comp.setPristine(!dirty);
                    valid &= comp.checkValidity(null, dirty, editRow.data);
                });
            }
            if (this.component.validate && this.component.validate.row) {
                valid = this.evaluate(this.component.validate.row, {
                    valid,
                    row: editRow.data
                }, 'valid', true);
                if (valid.toString() !== 'true') {
                    editRow.error = valid;
                    valid = false;
                } else {
                    editRow.error = null;
                }
                if (valid === null) {
                    valid = `Invalid row validation for ${ this.key }`;
                }
            }
            return !!valid;
        }
        checkValidity(data, dirty, row) {
            data = data || this.rootValue;
            row = row || this.data;
            if (!this.checkCondition(row, data)) {
                this.setCustomValidity('');
                return true;
            }
            return this.checkComponentValidity(data, dirty, row);
        }
        checkComponentValidity(data, dirty, row) {
            if (!super.checkComponentValidity(data, dirty, row)) {
                return false;
            }
            let rowsValid = true;
            let rowsEditing = false;
            this.editRows.forEach(editRow => {
                const rowValid = this.validateRow(editRow, dirty);
                rowsValid &= rowValid;
                rowsEditing |= dirty && this.isOpen(editRow);
            });
            if (!rowsValid) {
                this.setCustomValidity('Please correct rows before proceeding.', dirty);
                return false;
            } else if (rowsEditing && this.saveEditMode) {
                this.setCustomValidity('Please save all rows before proceeding.', dirty);
                return false;
            }
            const message = this.invalid || this.invalidMessage(data, dirty);
            this.setCustomValidity(message, dirty);
            return true;
        }
        get defaultValue() {
            const value = super.defaultValue;
            const defaultValue = Array.isArray(value) ? value : [];
            _.times(this.minLength - defaultValue.length, () => defaultValue.push({}));
            return defaultValue;
        }
        setValue(value, flags = {}) {
            if (equal(this.defaultValue, value)) {
                return false;
            }
            if (!value) {
                this.dataValue = this.defaultValue;
                return false;
            }
            if (!Array.isArray(value)) {
                if (typeof value === 'object') {
                    value = [value];
                } else {
                    return false;
                }
            }
            const changed = this.hasChanged(value, this.dataValue);
            this.dataValue = value;
            this.dataValue.forEach((row, rowIndex) => {
                let editRow = this.editRows[rowIndex];
                if (editRow) {
                    editRow.data = row;
                    this.restoreRowContext(editRow, flags);
                    editRow.state = EditRowState.Saved;
                    editRow.backup = null;
                    editRow.error = null;
                } else {
                    editRow = this.editRows[rowIndex] = {
                        components: this.createRowComponents(row, rowIndex),
                        data: row,
                        state: EditRowState.Saved,
                        backup: null,
                        error: null
                    };
                    this.checkRow('checkData', null, {}, editRow.data, editRow.components);
                }
            });
            this.updateOnChange(flags, changed);
            if (changed) {
                this.redraw();
            }
            return changed;
        }
        restoreRowContext(editRow, flags = {}) {
            editRow.components.forEach(component => {
                component.data = editRow.data;
                this.setNestedValue(component, editRow.data, flags);
            });
        }
    };
    EditGridComponent.prototype.hasChanged = Component.prototype.hasChanged;
});
define('skylark-formio/components/textfield/TextField',[
    '../_classes/input/Input',
    '../../vendors/vanilla-text-mask/conformToMask',
    '../../utils/utils'
], function (Input, conformToMask, FormioUtils) {
    'use strict';
    return class TextFieldComponent extends Input {
        static schema(...extend) {
            return Input.schema({
                label: 'Text Field',
                key: 'textField',
                type: 'textfield',
                mask: false,
                inputType: 'text',
                inputFormat: 'plain',
                inputMask: '',
                tableView: true,
                validate: {
                    minLength: '',
                    maxLength: '',
                    pattern: ''
                }
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Text Field',
                icon: 'terminal',
                group: 'basic',
                documentation: 'http://help.form.io/userguide/#textfield',
                weight: 0,
                schema: TextFieldComponent.schema()
            };
        }
        get defaultSchema() {
            return TextFieldComponent.schema();
        }
        get inputInfo() {
            const info = super.inputInfo;
            info.type = 'input';
            if (this.component.hasOwnProperty('spellcheck')) {
                info.attr.spellcheck = this.component.spellcheck;
            }
            if (this.component.mask) {
                info.attr.type = 'password';
            } else {
                info.attr.type = this.component.inputType === 'password' ? 'password' : 'text';
            }
            info.changeEvent = 'input';
            return info;
        }
        get emptyValue() {
            return '';
        }
        maskValue(value, flags = {}) {
            if (!value || typeof value !== 'object') {
                value = {
                    value,
                    maskName: this.component.inputMasks[0].label
                };
            }
            if (!value.value) {
                const defaultValue = flags.noDefault ? this.emptyValue : this.defaultValue;
                value.value = Array.isArray(defaultValue) ? defaultValue[0] : defaultValue;
            }
            return value;
        }
        normalizeValue(value, flags = {}) {
            if (!this.isMultipleMasksField) {
                return super.normalizeValue(value);
            }
            if (Array.isArray(value)) {
                return super.normalizeValue(value.map(val => this.maskValue(val, flags)));
            }
            return super.normalizeValue(this.maskValue(value, flags));
        }
        setValueAt(index, value, flags = {}) {
            if (!this.isMultipleMasksField) {
                return super.setValueAt(index, value, flags);
            }
            value = this.maskValue(value, flags);
            const textValue = value.value || '';
            const textInput = this.refs.mask ? this.refs.mask[index] : null;
            const maskInput = this.refs.select ? this.refs.select[index] : null;
            const mask = this.getMaskPattern(value.maskName);
            if (textInput && maskInput && mask) {
                textInput.value = conformToMask(textValue, FormioUtils.getInputMask(mask)).conformedValue;
                maskInput.value = value.maskName;
            } else {
                return super.setValueAt(index, textValue, flags);
            }
        }
        getValueAt(index) {
            if (!this.isMultipleMasksField) {
                return super.getValueAt(index);
            }
            const textInput = this.refs.mask ? this.refs.mask[index] : null;
            const maskInput = this.refs.select ? this.refs.select[index] : null;
            return {
                value: textInput ? textInput.value : undefined,
                maskName: maskInput ? maskInput.value : undefined
            };
        }
        isEmpty(value = this.dataValue) {
            if (!this.isMultipleMasksField) {
                return super.isEmpty((value || '').toString().trim());
            }
            return super.isEmpty(value) || (this.component.multiple ? value.length === 0 : !value.maskName || !value.value);
        }
    };
});
define('skylark-formio/components/email/Email',['../textfield/TextField'], function (TextFieldComponent) {
    'use strict';
    return class EmailComponent extends TextFieldComponent {
        static schema(...extend) {
            return TextFieldComponent.schema({
                type: 'email',
                label: 'Email',
                key: 'email',
                inputType: 'email',
                kickbox: { enabled: false }
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Email',
                group: 'advanced',
                icon: 'at',
                documentation: 'http://help.form.io/userguide/#email',
                weight: 10,
                schema: EmailComponent.schema()
            };
        }
        init() {
            super.init();
            this.validators.push('email');
        }
        get defaultSchema() {
            return EmailComponent.schema();
        }
        get inputInfo() {
            const info = super.inputInfo;
            info.attr.type = this.component.mask ? 'password' : 'email';
            return info;
        }
    };
});
define('skylark-formio/components/fieldset/Fieldset',['../_classes/nested/NestedComponent'], function (NestedComponent) {
    'use strict';
    return class FieldsetComponent extends NestedComponent {
        static schema(...extend) {
            return NestedComponent.schema({
                label: 'Field Set',
                key: 'fieldSet',
                type: 'fieldset',
                legend: '',
                components: [],
                input: false,
                persistent: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Field Set',
                icon: 'th-large',
                group: 'layout',
                documentation: 'http://help.form.io/userguide/#fieldset',
                weight: 20,
                schema: FieldsetComponent.schema()
            };
        }
        get defaultSchema() {
            return FieldsetComponent.schema();
        }
        get className() {
            return `form-group ${ super.className }`;
        }
        get templateName() {
            return 'fieldset';
        }
        constructor(...args) {
            super(...args);
            this.noField = true;
        }
    };
});
//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage
// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime
// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.
// v4 adds AMD/UMD, commonJS, and plain browser support
// v4.1 adds url download capability via solo URL argument (same domain/CORS only)
// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors
// https://github.com/rndme/download

define('skylark-formio/vendors/downloadjs/download',[],function() {


	return function download(data, strFileName, strMimeType) {

		var self = window, // this script is only for browsers anyway...
			defaultMime = "application/octet-stream", // this default mime also triggers iframe downloads
			mimeType = strMimeType || defaultMime,
			payload = data,
			url = !strFileName && !strMimeType && payload,
			anchor = document.createElement("a"),
			toString = function(a){return String(a);},
			myBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),
			fileName = strFileName || "download",
			blob,
			reader;
			myBlob= myBlob.call ? myBlob.bind(self) : Blob ;
	  
		if(String(this)==="true"){ //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
			payload=[payload, mimeType];
			mimeType=payload[0];
			payload=payload[1];
		}


		if(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument
			fileName = url.split("/").pop().split("?")[0];
			anchor.href = url; // assign href prop to temp anchor
		  	if(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:
        		var ajax=new XMLHttpRequest();
        		ajax.open( "GET", url, true);
        		ajax.responseType = 'blob';
        		ajax.onload= function(e){ 
				  download(e.target.response, fileName, defaultMime);
				};
        		setTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:
			    return ajax;
			} // end if valid url?
		} // end if url?


		//go ahead and download dataURLs right away
		if(/^data:([\w+-]+\/[\w+.-]+)?[,;]/.test(payload)){
		
			if(payload.length > (1024*1024*1.999) && myBlob !== toString ){
				payload=dataUrlToBlob(payload);
				mimeType=payload.type || defaultMime;
			}else{			
				return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
					navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :
					saver(payload) ; // everyone else can save dataURLs un-processed
			}
			
		}else{//not data url, is it a string with special needs?
			if(/([\x80-\xff])/.test(payload)){			  
				var i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;
				for(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);
			 	payload=new myBlob([tempUiArr], {type: mimeType});
			}		  
		}
		blob = payload instanceof myBlob ?
			payload :
			new myBlob([payload], {type: mimeType}) ;


		function dataUrlToBlob(strUrl) {
			var parts= strUrl.split(/[:;,]/),
			type= parts[1],
			decoder= parts[2] == "base64" ? atob : decodeURIComponent,
			binData= decoder( parts.pop() ),
			mx= binData.length,
			i= 0,
			uiArr= new Uint8Array(mx);

			for(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);

			return new myBlob([uiArr], {type: type});
		 }

		function saver(url, winMode){

			if ('download' in anchor) { //html5 A[download]
				anchor.href = url;
				anchor.setAttribute("download", fileName);
				anchor.className = "download-js-link";
				anchor.innerHTML = "downloading...";
				anchor.style.display = "none";
				document.body.appendChild(anchor);
				setTimeout(function() {
					anchor.click();
					document.body.removeChild(anchor);
					if(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}
				}, 66);
				return true;
			}

			// handle non-a[download] safari as best we can:
			if(/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
				if(/^data:/.test(url))	url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
				if(!window.open(url)){ // popup blocked, offer direct download:
					if(confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")){ location.href=url; }
				}
				return true;
			}

			//do iframe dataURL download (old ch+FF):
			var f = document.createElement("iframe");
			document.body.appendChild(f);

			if(!winMode && /^data:/.test(url)){ // force a mime that will download:
				url="data:"+url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
			}
			f.src=url;
			setTimeout(function(){ document.body.removeChild(f); }, 333);

		}//end saver




		if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
			return navigator.msSaveBlob(blob, fileName);
		}

		if(self.URL){ // simple fast and modern way using Blob and URL:
			saver(self.URL.createObjectURL(blob), true);
		}else{
			// handle non-Blob()+non-URL browsers:
			if(typeof blob === "string" || blob.constructor===toString ){
				try{
					return saver( "data:" +  mimeType   + ";base64,"  +  self.btoa(blob)  );
				}catch(y){
					return saver( "data:" +  mimeType   + "," + encodeURIComponent(blob)  );
				}
			}

			// Blob but not URL support:
			reader=new FileReader();
			reader.onload=function(e){
				saver(this.result);
			};
			reader.readAsDataURL(blob);
		}
		return true;
	}; /* end download() */
});

define('skylark-formio/components/file/File',[
    '../_classes/field/Field',
    '../../utils/utils',
    '../../vendors/downloadjs/download',
    'skylark-lodash',
    '../../Formio',
    '../../vendors/getify/npo'
], function (Field, utils, download, _, Formio, NativePromise) {
    'use strict';
    let Camera;
    let webViewCamera = navigator.camera || Camera;
    if (!HTMLCanvasElement.prototype.toBlob) {
        Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
            value: function (callback, type, quality) {
                var canvas = this;
                setTimeout(function () {
                    var binStr = atob(canvas.toDataURL(type, quality).split(',')[1]), len = binStr.length, arr = new Uint8Array(len);
                    for (var i = 0; i < len; i++) {
                        arr[i] = binStr.charCodeAt(i);
                    }
                    callback(new Blob([arr], { type: type || 'image/png' }));
                });
            }
        });
    }
    return class FileComponent extends Field {
        static schema(...extend) {
            return Field.schema({
                type: 'file',
                label: 'Upload',
                key: 'file',
                image: false,
                privateDownload: false,
                imageSize: '200',
                filePattern: '*',
                fileMinSize: '0KB',
                fileMaxSize: '1GB',
                uploadOnly: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'File',
                group: 'premium',
                icon: 'file',
                documentation: 'http://help.form.io/userguide/#file',
                weight: 100,
                schema: FileComponent.schema()
            };
        }
        init() {
            super.init();
            webViewCamera = navigator.camera || Camera;
            const fileReaderSupported = typeof FileReader !== 'undefined';
            const formDataSupported = Boolean(window.FormData);
            const progressSupported = window.XMLHttpRequest ? 'upload' in new XMLHttpRequest() : false;
            this.support = {
                filereader: fileReaderSupported,
                formdata: formDataSupported,
                hasWarning: !fileReaderSupported || !formDataSupported || !progressSupported,
                progress: progressSupported
            };
            this.filesReady = new NativePromise((resolve, reject) => {
                this.filesReadyResolve = resolve;
                this.filesReadyReject = reject;
            });
            this.cameraMode = false;
            this.statuses = [];
        }
        get dataReady() {
            return this.filesReady;
        }
        get defaultSchema() {
            return FileComponent.schema();
        }
        loadImage(fileInfo) {
            return this.fileService.downloadFile(fileInfo).then(result => result.url);
        }
        get emptyValue() {
            return [];
        }
        getValueAsString(value) {
            if (_.isArray(value)) {
                return _.map(value, 'originalName').join(', ');
            }
            return _.get(value, 'originalName', '');
        }
        getValue() {
            return this.dataValue;
        }
        get defaultValue() {
            const value = super.defaultValue;
            return Array.isArray(value) ? value : [];
        }
        get hasTypes() {
            return this.component.fileTypes && Array.isArray(this.component.fileTypes) && this.component.fileTypes.length !== 0 && (this.component.fileTypes[0].label !== '' || this.component.fileTypes[0].value !== '');
        }
        get fileService() {
            if (this.options.fileService) {
                return this.options.fileService;
            }
            if (this.options.formio) {
                return this.options.formio;
            }
            if (this.root && this.root.formio) {
                return this.root.formio;
            }
            const formio = new Formio();
            if (this.root && this.root._form && this.root._form._id) {
                formio.formUrl = `${ formio.projectUrl }/form/${ this.root._form._id }`;
            }
            return formio;
        }
        render() {
            return super.render(this.renderTemplate('file', {
                fileSize: this.fileSize,
                files: this.dataValue || [],
                statuses: this.statuses,
                disabled: this.disabled,
                support: this.support
            }));
        }
        getVideoStream(constraints) {
            return navigator.mediaDevices.getUserMedia({
                video: {
                    width: {
                        min: 640,
                        ideal: 1920
                    },
                    height: {
                        min: 360,
                        ideal: 1080
                    },
                    aspectRatio: { ideal: 16 / 9 },
                    ...constraints
                },
                audio: false
            });
        }
        stopVideoStream(videoStream) {
            videoStream.getVideoTracks().forEach(track => track.stop());
        }
        getFrame(videoPlayer) {
            return new NativePromise(resolve => {
                const canvas = document.createElement('canvas');
                canvas.height = videoPlayer.videoHeight;
                canvas.width = videoPlayer.videoWidth;
                const context = canvas.getContext('2d');
                context.drawImage(videoPlayer, 0, 0);
                canvas.toBlob(resolve);
            });
        }
        startVideo() {
            this.getVideoStream().then(stream => {
                this.videoStream = stream;
                const {videoPlayer} = this.refs;
                if (!videoPlayer) {
                    console.warn('Video player not found in template.');
                    this.cameraMode = false;
                    this.redraw();
                    return;
                }
                videoPlayer.srcObject = stream;
                const width = parseInt(this.component.webcamSize) || 320;
                videoPlayer.setAttribute('width', width);
                videoPlayer.play();
            }).catch(err => {
                console.error(err);
                this.cameraMode = false;
                this.redraw();
            });
        }
        stopVideo() {
            if (this.videoStream) {
                this.stopVideoStream(this.videoStream);
                this.videoStream = null;
            }
        }
        takePicture() {
            const {videoPlayer} = this.refs;
            if (!videoPlayer) {
                console.warn('Video player not found in template.');
                this.cameraMode = false;
                this.redraw();
                return;
            }
            this.getFrame(videoPlayer).then(frame => {
                frame.name = `photo-${ Date.now() }.png`;
                this.upload([frame]);
                this.cameraMode = false;
                this.redraw();
            });
        }
        browseFiles(attrs = {}) {
            return new NativePromise(resolve => {
                const fileInput = this.ce('input', {
                    type: 'file',
                    style: 'height: 0; width: 0; visibility: hidden;',
                    tabindex: '-1',
                    ...attrs
                });
                document.body.appendChild(fileInput);
                fileInput.addEventListener('change', () => {
                    resolve(fileInput.files);
                    document.body.removeChild(fileInput);
                }, true);
                if (typeof fileInput.trigger === 'function') {
                    fileInput.trigger('click');
                } else {
                    fileInput.click();
                }
            });
        }
        set cameraMode(value) {
            this._cameraMode = value;
            if (value) {
                this.startVideo();
            } else {
                this.stopVideo();
            }
        }
        get cameraMode() {
            return this._cameraMode;
        }
        get useWebViewCamera() {
            return this.imageUpload && webViewCamera;
        }
        get imageUpload() {
            return Boolean(this.component.image);
        }
        get browseOptions() {
            const options = {};
            if (this.component.multiple) {
                options.multiple = true;
            }
            if (this.imageUpload) {
                options.accept = 'image/*';
            }
            return options;
        }
        deleteFile(fileInfo) {
            if (fileInfo && this.component.storage === 'url') {
                const fileService = this.fileService;
                if (fileService && typeof fileService.deleteFile === 'function') {
                    fileService.deleteFile(fileInfo);
                } else {
                    const formio = this.options.formio || this.root && this.root.formio;
                    if (formio) {
                        formio.makeRequest('', fileInfo.url, 'delete');
                    }
                }
            }
        }
        attach(element) {
            this.loadRefs(element, {
                fileDrop: 'single',
                fileBrowse: 'single',
                galleryButton: 'single',
                cameraButton: 'single',
                takePictureButton: 'single',
                toggleCameraMode: 'single',
                videoPlayer: 'single',
                fileLink: 'multiple',
                removeLink: 'multiple',
                fileStatusRemove: 'multiple',
                fileImage: 'multiple',
                fileType: 'multiple'
            });
            this.refs.input = [];
            const superAttach = super.attach(element);
            if (this.refs.fileDrop) {
                const element = this;
                this.addEventListener(this.refs.fileDrop, 'dragover', function (event) {
                    this.className = 'fileSelector fileDragOver';
                    event.preventDefault();
                });
                this.addEventListener(this.refs.fileDrop, 'dragleave', function (event) {
                    this.className = 'fileSelector';
                    event.preventDefault();
                });
                this.addEventListener(this.refs.fileDrop, 'drop', function (event) {
                    this.className = 'fileSelector';
                    event.preventDefault();
                    element.upload(event.dataTransfer.files);
                    return false;
                });
            }
            if (this.refs.fileBrowse) {
                this.addEventListener(this.refs.fileBrowse, 'click', event => {
                    event.preventDefault();
                    this.browseFiles(this.browseOptions).then(files => {
                        this.upload(files);
                    });
                });
            }
            this.refs.fileLink.forEach((fileLink, index) => {
                this.addEventListener(fileLink, 'click', event => {
                    event.preventDefault();
                    this.getFile(this.dataValue[index]);
                });
            });
            this.refs.removeLink.forEach((removeLink, index) => {
                this.addEventListener(removeLink, 'click', event => {
                    const fileInfo = this.dataValue[index];
                    this.deleteFile(fileInfo);
                    event.preventDefault();
                    this.splice(index);
                    this.redraw();
                });
            });
            this.refs.fileStatusRemove.forEach((fileStatusRemove, index) => {
                this.addEventListener(fileStatusRemove, 'click', event => {
                    event.preventDefault();
                    this.statuses.splice(index, 1);
                    this.redraw();
                });
            });
            if (this.refs.galleryButton && webViewCamera) {
                this.addEventListener(this.refs.galleryButton, 'click', event => {
                    event.preventDefault();
                    webViewCamera.getPicture(success => {
                        window.resolveLocalFileSystemURL(success, fileEntry => {
                            fileEntry.file(file => {
                                this.upload([file]);
                            });
                        });
                    }, err => {
                        console.error(err);
                    }, { sourceType: webViewCamera.PictureSourceType.PHOTOLIBRARY });
                });
            }
            if (this.refs.cameraButton && webViewCamera) {
                this.addEventListener(this.refs.cameraButton, 'click', event => {
                    event.preventDefault();
                    webViewCamera.getPicture(success => {
                        window.resolveLocalFileSystemURL(success, fileEntry => {
                            fileEntry.file(file => {
                                this.upload([file]);
                            });
                        });
                    }, err => {
                        console.error(err);
                    }, {
                        sourceType: webViewCamera.PictureSourceType.CAMERA,
                        encodingType: webViewCamera.EncodingType.PNG,
                        mediaType: webViewCamera.MediaType.PICTURE,
                        saveToPhotoAlbum: true,
                        correctOrientation: false
                    });
                });
            }
            if (this.refs.takePictureButton) {
                this.addEventListener(this.refs.takePictureButton, 'click', event => {
                    event.preventDefault();
                    this.takePicture();
                });
            }
            if (this.refs.toggleCameraMode) {
                this.addEventListener(this.refs.toggleCameraMode, 'click', event => {
                    event.preventDefault();
                    this.cameraMode = !this.cameraMode;
                    this.redraw();
                });
            }
            this.refs.fileType.forEach((fileType, index) => {
                this.dataValue[index].fileType = this.component.fileTypes[0].label;
                this.addEventListener(fileType, 'change', event => {
                    event.preventDefault();
                    const fileType = this.component.fileTypes.find(typeObj => typeObj.value === event.target.value);
                    this.dataValue[index].fileType = fileType.label;
                });
            });
            const fileService = this.fileService;
            if (fileService) {
                const loadingImages = [];
                this.refs.fileImage.forEach((image, index) => {
                    loadingImages.push(this.loadImage(this.dataValue[index]).then(url => image.src = url));
                });
                if (loadingImages.length) {
                    NativePromise.all(loadingImages).then(() => {
                        this.filesReadyResolve();
                    }).catch(() => this.filesReadyReject());
                }
            }
            return superAttach;
        }
        fileSize(a, b, c, d, e) {
            return `${ (b = Math, c = b.log, d = 1024, e = c(a) / c(d) | 0, a / b.pow(d, e)).toFixed(2) } ${ e ? `${ 'kMGTPEZY'[--e] }B` : 'Bytes' }`;
        }
        globStringToRegex(str) {
            let regexp = '', excludes = [];
            if (str.length > 2 && str[0] === '/' && str[str.length - 1] === '/') {
                regexp = str.substring(1, str.length - 1);
            } else {
                const split = str.split(',');
                if (split.length > 1) {
                    for (let i = 0; i < split.length; i++) {
                        const r = this.globStringToRegex(split[i]);
                        if (r.regexp) {
                            regexp += `(${ r.regexp })`;
                            if (i < split.length - 1) {
                                regexp += '|';
                            }
                        } else {
                            excludes = excludes.concat(r.excludes);
                        }
                    }
                } else {
                    if (str.startsWith('!')) {
                        excludes.push(`^((?!${ this.globStringToRegex(str.substring(1)).regexp }).)*$`);
                    } else {
                        if (str.startsWith('.')) {
                            str = `*${ str }`;
                        }
                        regexp = `^${ str.replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]', 'g'), '\\$&') }$`;
                        regexp = regexp.replace(/\\\*/g, '.*').replace(/\\\?/g, '.');
                    }
                }
            }
            return {
                regexp,
                excludes
            };
        }
        translateScalars(str) {
            if (typeof str === 'string') {
                if (str.search(/kb/i) === str.length - 2) {
                    return parseFloat(str.substring(0, str.length - 2) * 1024);
                }
                if (str.search(/mb/i) === str.length - 2) {
                    return parseFloat(str.substring(0, str.length - 2) * 1024 * 1024);
                }
                if (str.search(/gb/i) === str.length - 2) {
                    return parseFloat(str.substring(0, str.length - 2) * 1024 * 1024 * 1024);
                }
                if (str.search(/b/i) === str.length - 1) {
                    return parseFloat(str.substring(0, str.length - 1));
                }
                if (str.search(/s/i) === str.length - 1) {
                    return parseFloat(str.substring(0, str.length - 1));
                }
                if (str.search(/m/i) === str.length - 1) {
                    return parseFloat(str.substring(0, str.length - 1) * 60);
                }
                if (str.search(/h/i) === str.length - 1) {
                    return parseFloat(str.substring(0, str.length - 1) * 3600);
                }
            }
            return str;
        }
        validatePattern(file, val) {
            if (!val) {
                return true;
            }
            const pattern = this.globStringToRegex(val);
            let valid = true;
            if (pattern.regexp && pattern.regexp.length) {
                const regexp = new RegExp(pattern.regexp, 'i');
                valid = !_.isNil(file.type) && regexp.test(file.type) || !_.isNil(file.name) && regexp.test(file.name);
            }
            valid = pattern.excludes.reduce((result, excludePattern) => {
                const exclude = new RegExp(excludePattern, 'i');
                return result && (_.isNil(file.type) || !exclude.test(file.type)) && (_.isNil(file.name) || !exclude.test(file.name));
            }, valid);
            return valid;
        }
        validateMinSize(file, val) {
            return file.size + 0.1 >= this.translateScalars(val);
        }
        validateMaxSize(file, val) {
            return file.size - 0.1 <= this.translateScalars(val);
        }
        upload(files) {
            if (!this.component.multiple) {
                files = Array.prototype.slice.call(files, 0, 1);
            }
            if (this.component.storage && files && files.length) {
                Array.prototype.forEach.call(files, file => {
                    const fileName = utils.uniqueName(file.name, this.component.fileNameTemplate, this.evalContext());
                    const fileUpload = {
                        originalName: file.name,
                        name: fileName,
                        size: file.size,
                        status: 'info',
                        message: this.t('Starting upload')
                    };
                    if (this.component.filePattern && !this.validatePattern(file, this.component.filePattern)) {
                        fileUpload.status = 'error';
                        fileUpload.message = this.t('File is the wrong type; it must be {{ pattern }}', { pattern: this.component.filePattern });
                    }
                    if (this.component.fileMinSize && !this.validateMinSize(file, this.component.fileMinSize)) {
                        fileUpload.status = 'error';
                        fileUpload.message = this.t('File is too small; it must be at least {{ size }}', { size: this.component.fileMinSize });
                    }
                    if (this.component.fileMaxSize && !this.validateMaxSize(file, this.component.fileMaxSize)) {
                        fileUpload.status = 'error';
                        fileUpload.message = this.t('File is too big; it must be at most {{ size }}', { size: this.component.fileMaxSize });
                    }
                    const dir = this.interpolate(this.component.dir || '');
                    const {fileService} = this;
                    if (!fileService) {
                        fileUpload.status = 'error';
                        fileUpload.message = this.t('File Service not provided.');
                    }
                    this.statuses.push(fileUpload);
                    this.redraw();
                    if (fileUpload.status !== 'error') {
                        if (this.component.privateDownload) {
                            file.private = true;
                        }
                        const {storage, options = {}} = this.component;
                        const url = this.interpolate(this.component.url);
                        const fileKey = this.component.fileKey || 'file';
                        fileService.uploadFile(storage, file, fileName, dir, evt => {
                            fileUpload.status = 'progress';
                            fileUpload.progress = parseInt(100 * evt.loaded / evt.total);
                            delete fileUpload.message;
                            this.redraw();
                        }, url, options, fileKey).then(fileInfo => {
                            const index = this.statuses.indexOf(fileUpload);
                            if (index !== -1) {
                                this.statuses.splice(index, 1);
                            }
                            fileInfo.originalName = file.name;
                            if (!this.hasValue()) {
                                this.dataValue = [];
                            }
                            this.dataValue.push(fileInfo);
                            this.redraw();
                            this.triggerChange();
                        }).catch(response => {
                            fileUpload.status = 'error';
                            fileUpload.message = response;
                            delete fileUpload.progress;
                            this.redraw();
                        });
                    }
                });
            }
        }
        getFile(fileInfo) {
            const {
                options = {}
            } = this.component;
            const {fileService} = this;
            if (!fileService) {
                return alert('File Service not provided');
            }
            if (this.component.privateDownload) {
                fileInfo.private = true;
            }
            fileService.downloadFile(fileInfo, options).then(file => {
                if (file) {
                    if ([
                            'base64',
                            'indexeddb'
                        ].includes(file.storage)) {
                        download(file.url, file.originalName || file.name, file.type);
                    } else {
                        window.open(file.url, '_blank');
                    }
                }
            }).catch(response => {
                alert(response);
            });
        }
        focus() {
            if (this.refs.fileBrowse) {
                this.refs.fileBrowse.focus();
            }
        }
    };
});
define('skylark-formio/i18n',[],function () {
    'use strict';
    return {
        lng: 'en',
        resources: {
            en: {
                translation: {
                    complete: 'Submission Complete',
                    error: 'Please fix the following errors before submitting.',
                    submitError: 'Please check the form and correct all errors before submitting.',
                    required: '{{field}} is required',
                    unique: '{{field}} must be unique',
                    array: '{{field}} must be an array',
                    array_nonempty: '{{field}} must be a non-empty array',
                    nonarray: '{{field}} must not be an array',
                    select: '{{field}} contains an invalid selection',
                    pattern: '{{field}} does not match the pattern {{pattern}}',
                    minLength: '{{field}} must have at least {{length}} characters.',
                    maxLength: '{{field}} must have no more than {{length}} characters.',
                    minWords: '{{field}} must have at least {{length}} words.',
                    maxWords: '{{field}} must have no more than {{length}} words.',
                    min: '{{field}} cannot be less than {{min}}.',
                    max: '{{field}} cannot be greater than {{max}}.',
                    maxDate: '{{field}} should not contain date after {{- maxDate}}',
                    minDate: '{{field}} should not contain date before {{- minDate}}',
                    maxYear: '{{field}} should not contain year greater than {{maxYear}}',
                    minYear: '{{field}} should not contain year less than {{minYear}}',
                    invalid_email: '{{field}} must be a valid email.',
                    invalid_url: '{{field}} must be a valid url.',
                    invalid_regex: '{{field}} does not match the pattern {{regex}}.',
                    invalid_date: '{{field}} is not a valid date.',
                    invalid_day: '{{field}} is not a valid day.',
                    mask: '{{field}} does not match the mask.',
                    stripe: '{{stripe}}',
                    month: 'Month',
                    day: 'Day',
                    year: 'Year',
                    january: 'January',
                    february: 'February',
                    march: 'March',
                    april: 'April',
                    may: 'May',
                    june: 'June',
                    july: 'July',
                    august: 'August',
                    september: 'September',
                    october: 'October',
                    november: 'November',
                    december: 'December',
                    next: 'Next',
                    previous: 'Previous',
                    cancel: 'Cancel',
                    submit: 'Submit Form'
                }
            }
        }
    };
});
define('skylark-formio/Webform',[
    'skylark-lodash',
    'skylark-moment',
    './EventEmitter',
    'skylark-i18next',
    './Formio',
    './vendors/getify/npo',
    './components/Components',
    './components/_classes/nesteddata/NestedDataComponent',
    './utils/utils',
    './utils/formUtils',
    "./i18n"
], function (_, moment, EventEmitter, i18next, Formio, NativePromise, Components, NestedDataComponent, utils, formUtils,i18n) {
    'use strict';
    Formio.forms = {};
    Formio.registerComponent = Components.setComponent;
    function getIconSet(icons) {
        if (icons === 'fontawesome') {
            return 'fa';
        }
        return icons || '';
    }
    function getOptions(options) {
        options = _.defaults(options, {
            submitOnEnter: false,
            iconset: getIconSet(options && options.icons ? options.icons : Formio.icons),
            i18next,
            saveDraft: false,
            alwaysDirty: false,
            saveDraftThrottle: 5000
        });
        if (!options.events) {
            options.events = new EventEmitter({
                wildcard: false,
                maxListeners: 0
            });
        }
        return options;
    }
    class Webform extends NestedDataComponent {
        constructor() {
            let element, options;
            if (arguments[0] instanceof HTMLElement || arguments[1]) {
                element = arguments[0];
                options = arguments[1];
            } else {
                options = arguments[0];
            }
            super(null, getOptions(options));
            this.element = element;
            Formio.forms[this.id] = this;
            if (this.options.baseUrl) {
                Formio.setBaseUrl(this.options.baseUrl);
            }
            //let i18n = require('./i18n').default;
            if (options && options.i18n && !options.i18nReady) {
                if (options.i18n.resources) {
                    i18n = options.i18n;
                } else {
                    _.each(options.i18n, (lang, code) => {
                        if (code === 'options') {
                            _.merge(i18n, lang);
                        } else if (!i18n.resources[code]) {
                            i18n.resources[code] = { translation: lang };
                        } else {
                            _.assign(i18n.resources[code].translation, lang);
                        }
                    });
                }
                options.i18n = i18n;
                options.i18nReady = true;
            }
            if (options && options.i18n) {
                this.options.i18n = options.i18n;
            } else {
                this.options.i18n = i18n;
            }
            if (this.options.language) {
                this.options.i18n.lng = this.options.language;
            }
            this.type = 'form';
            this._src = '';
            this._loading = false;
            this._form = {};
            this.draftEnabled = false;
            this.savingDraft = true;
            if (this.options.saveDraftThrottle) {
                this.triggerSaveDraft = _.throttle(this.saveDraft.bind(this), this.options.saveDraftThrottle);
            } else {
                this.triggerSaveDraft = this.saveDraft.bind(this);
            }
            this.customErrors = [];
            this.nosubmit = false;
            this.submitted = false;
            this.submitting = false;
            this.formio = null;
            this.loader = null;
            this.alert = null;
            this.onSubmission = null;
            this.submissionSet = false;
            this.formReady = new NativePromise((resolve, reject) => {
                this.formReadyResolve = resolve;
                this.formReadyReject = reject;
            });
            this.submissionReady = new NativePromise((resolve, reject) => {
                this.submissionReadyResolve = resolve;
                this.submissionReadyReject = reject;
            });
            this.shortcuts = [];
            this.localize().then(() => {
                this.language = this.options.language;
            });
            if (this.options.saveDraft && Formio.events) {
                Formio.events.on('formio.user', user => {
                    this.formReady.then(() => {
                        if (!this.submissionSet) {
                            this.restoreDraft(user._id);
                        }
                    });
                });
            }
            this.component.clearOnHide = false;
            this.root = this;
        }
        set language(lang) {
            return new NativePromise((resolve, reject) => {
                this.options.language = lang;
                if (i18next.language === lang) {
                    return resolve();
                }
                try {
                    i18next.changeLanguage(lang, err => {
                        if (err) {
                            return reject(err);
                        }
                        this.redraw();
                        this.emit('languageChanged');
                        resolve();
                    });
                } catch (err) {
                    return reject(err);
                }
            });
        }
        addLanguage(code, lang, active = false) {
            i18next.addResourceBundle(code, 'translation', lang, true, true);
            if (active) {
                this.language = code;
            }
        }
        localize() {
            if (i18next.initialized) {
                return NativePromise.resolve(i18next);
            }
            i18next.initialized = true;
            return new NativePromise((resolve, reject) => {
                try {
                    i18next.init(this.options.i18n, err => {
                        this.options.language = i18next.language.split(';')[0];
                        if (err) {
                            return reject(err);
                        }
                        resolve(i18next);
                    });
                } catch (err) {
                    return reject(err);
                }
            });
        }
        keyboardCatchableElement(element) {
            if (element.nodeName === 'TEXTAREA') {
                return false;
            }
            if (element.nodeName === 'INPUT') {
                return [
                    'text',
                    'email',
                    'password'
                ].indexOf(element.type) === -1;
            }
            return true;
        }
        executeShortcuts(event) {
            const {target} = event;
            if (!this.keyboardCatchableElement(target)) {
                return;
            }
            const ctrl = event.ctrlKey || event.metaKey;
            const keyCode = event.keyCode;
            let char = '';
            if (65 <= keyCode && keyCode <= 90) {
                char = String.fromCharCode(keyCode);
            } else if (keyCode === 13) {
                char = 'Enter';
            } else if (keyCode === 27) {
                char = 'Esc';
            }
            _.each(this.shortcuts, shortcut => {
                if (shortcut.ctrl && !ctrl) {
                    return;
                }
                if (shortcut.shortcut === char) {
                    shortcut.element.click();
                    event.preventDefault();
                }
            });
        }
        addShortcut(element, shortcut) {
            if (!shortcut || !/^([A-Z]|Enter|Esc)$/i.test(shortcut)) {
                return;
            }
            shortcut = _.capitalize(shortcut);
            if (shortcut === 'Enter' || shortcut === 'Esc') {
                if (element.tagName !== 'BUTTON') {
                    return;
                }
                this.shortcuts.push({
                    shortcut,
                    element
                });
            } else {
                this.shortcuts.push({
                    ctrl: true,
                    shortcut,
                    element
                });
            }
        }
        removeShortcut(element, shortcut) {
            if (!shortcut || !/^([A-Z]|Enter|Esc)$/i.test(shortcut)) {
                return;
            }
            _.remove(this.shortcuts, {
                shortcut,
                element
            });
        }
        get src() {
            return this._src;
        }
        loadSubmission() {
            this.loadingSubmission = true;
            if (this.formio.submissionId) {
                this.onSubmission = this.formio.loadSubmission().then(submission => this.setSubmission(submission), err => this.submissionReadyReject(err)).catch(err => this.submissionReadyReject(err));
            } else {
                this.submissionReadyResolve();
            }
            return this.submissionReady;
        }
        setSrc(value, options) {
            if (this.setUrl(value, options)) {
                this.nosubmit = false;
                return this.formio.loadForm({ params: { live: 1 } }).then(form => {
                    const setForm = this.setForm(form);
                    this.loadSubmission();
                    return setForm;
                }).catch(err => {
                    console.warn(err);
                    this.formReadyReject(err);
                });
            }
            return NativePromise.resolve();
        }
        set src(value) {
            this.setSrc(value);
        }
        get url() {
            return this._src;
        }
        setUrl(value, options) {
            if (!value || typeof value !== 'string' || value === this._src) {
                return false;
            }
            this._src = value;
            this.nosubmit = true;
            this.formio = this.options.formio = new Formio(value, options);
            if (this.type === 'form') {
                this.options.src = value;
            }
            return true;
        }
        set url(value) {
            this.setUrl(value);
        }
        get ready() {
            return this.formReady.then(() => {
                return super.ready.then(() => {
                    return this.loadingSubmission ? this.submissionReady : true;
                });
            });
        }
        get loading() {
            return this._loading;
        }
        set loading(loading) {
            if (this._loading !== loading) {
                this._loading = loading;
                if (!this.loader && loading) {
                    this.loader = this.ce('div', { class: 'loader-wrapper' });
                    const spinner = this.ce('div', { class: 'loader text-center' });
                    this.loader.appendChild(spinner);
                }
                if (this.loader) {
                    try {
                        if (loading) {
                            this.prependTo(this.loader, this.wrapper);
                        } else {
                            this.removeChildFrom(this.loader, this.wrapper);
                        }
                    } catch (err) {
                    }
                }
            }
        }
        setForm(form) {
            this._form = form;
            if (form && form.settings && form.settings.components) {
                this.options.components = form.settings.components;
            }
            if (form && form.module) {
                let formModule = null;
                if (typeof form.module === 'string') {
                    try {
                        formModule = this.evaluate(`return ${ form.module }`);
                    } catch (err) {
                        console.warn(err);
                    }
                } else {
                    formModule = form.module;
                }
                if (formModule) {
                    Formio.use(formModule);
                    if (formModule.options && formModule.options.form) {
                        this.options = Object.assign(this.options, formModule.options.form);
                    }
                }
            }
            this.initialized = false;
            const rebuild = this.rebuild() || NativePromise.resolve();
            return rebuild.then(() => {
                this.emit('formLoad', form);
                this.triggerRecaptcha();
                setTimeout(() => {
                    this.onChange();
                    this.formReadyResolve();
                }, 0);
                return this.formReady;
            });
        }
        get form() {
            if (!this._form) {
                this._form = { components: [] };
            }
            return this._form;
        }
        set form(form) {
            this.setForm(form);
        }
        get submission() {
            return this.getValue();
        }
        set submission(submission) {
            this.setSubmission(submission);
        }
        setSubmission(submission, flags = {}) {
            flags = {
                ...flags,
                fromSubmission: true
            };
            return this.onSubmission = this.formReady.then(() => {
                this.submissionSet = true;
                this.triggerChange(flags);
                this.setValue(submission, flags);
                return this.submissionReadyResolve(submission);
            }, err => this.submissionReadyReject(err)).catch(err => this.submissionReadyReject(err));
        }
        saveDraft() {
            if (!this.draftEnabled) {
                return;
            }
            if (!this.formio) {
                console.warn('Cannot save draft because there is no formio instance.');
                return;
            }
            if (!Formio.getUser()) {
                console.warn('Cannot save draft unless a user is authenticated.');
                return;
            }
            const draft = this.submission;
            draft.state = 'draft';
            if (!this.savingDraft) {
                this.savingDraft = true;
                this.formio.saveSubmission(draft).then(sub => {
                    const currentSubmission = _.merge(sub, draft);
                    this.emit('saveDraft', sub);
                    if (!draft._id) {
                        this.setSubmission(currentSubmission).then(() => {
                            this.savingDraft = false;
                        });
                    } else {
                        this.savingDraft = false;
                    }
                });
            }
        }
        restoreDraft(userId) {
            if (!this.formio) {
                console.warn('Cannot restore draft because there is no formio instance.');
                return;
            }
            this.savingDraft = true;
            this.formio.loadSubmissions({
                params: {
                    state: 'draft',
                    owner: userId
                }
            }).then(submissions => {
                if (submissions.length > 0 && !this.options.skipDraftRestore) {
                    const draft = utils.fastCloneDeep(submissions[0]);
                    return this.setSubmission(draft).then(() => {
                        this.draftEnabled = true;
                        this.savingDraft = false;
                        this.emit('restoreDraft', draft);
                    });
                }
                this.draftEnabled = true;
                this.savingDraft = false;
                this.emit('restoreDraft', null);
            });
        }
        get schema() {
            const schema = utils.fastCloneDeep(_.omit(this._form, ['components']));
            schema.components = [];
            this.eachComponent(component => schema.components.push(component.schema));
            return schema;
        }
        mergeData(_this, _that) {
            _.mergeWith(_this, _that, (thisValue, thatValue) => {
                if (Array.isArray(thisValue) && Array.isArray(thatValue) && thisValue.length !== thatValue.length) {
                    return thatValue;
                }
            });
        }
        setValue(submission, flags = {}) {
            if (!submission || !submission.data) {
                submission = { data: {} };
            }
            this._submission.metadata = submission.metadata || {};
            this.editing = !!submission._id;
            if (!this.options.submissionTimezone && submission.metadata && submission.metadata.timezone) {
                this.options.submissionTimezone = submission.metadata.timezone;
            }
            const changed = super.setValue(submission.data, flags);
            if (!flags.sanitize) {
                this.mergeData(this.data, submission.data);
            }
            submission.data = this.data;
            this._submission = submission;
            return changed;
        }
        getValue() {
            if (!this._submission.data) {
                this._submission.data = {};
            }
            if (this.viewOnly) {
                return this._submission;
            }
            const submission = this._submission;
            submission.data = this.data;
            return this._submission;
        }
        init() {
            this._submission = this._submission || { data: {} };
            if (this.components && this.components.length) {
                this.destroyComponents();
                this.components = [];
            }
            if (this.component) {
                this.component.components = this.form ? this.form.components : [];
            } else {
                this.component = this.form;
            }
            this.component.type = 'form';
            this.component.input = false;
            this.addComponents();
            this.on('submitButton', options => {
                this.submit(false, options).catch(e => e !== false && console.log(e));
            }, true);
            this.on('checkValidity', data => this.checkValidity(data, true, data), true);
            this.on('requestUrl', args => this.submitUrl(args.url, args.headers), true);
            this.on('resetForm', () => this.resetValue(), true);
            this.on('deleteSubmission', () => this.deleteSubmission(), true);
            this.on('refreshData', () => this.updateValue(), true);
            this.executeFormController();
            return this.formReady;
        }
        executeFormController() {
            if (!this.form || !this.form.controller || (!this.visible || this.component.hidden) && this.component.clearOnHide && !this.rootPristine) {
                return false;
            }
            this.formReady.then(() => {
                this.evaluate(this.form.controller, { components: this.components });
            });
        }
        destroy() {
            this.off('submitButton');
            this.off('checkValidity');
            this.off('requestUrl');
            this.off('resetForm');
            this.off('deleteSubmission');
            this.off('refreshData');
            return super.destroy();
        }
        build(element) {
            if (element || this.element) {
                return this.ready.then(() => {
                    element = element || this.element;
                    super.build(element);
                });
            }
            return this.ready;
        }
        getClassName() {
            return 'formio-form';
        }
        render() {
            return super.render(this.renderTemplate('webform', {
                classes: this.getClassName(),
                children: this.renderComponents()
            }), this.builderMode ? 'builder' : 'form', true);
        }
        redraw() {
            if (!this.element) {
                return NativePromise.resolve();
            }
            this.clear();
            this.setContent(this.element, this.render());
            return this.attach(this.element);
        }
        attach(element) {
            this.element = element;
            this.loadRefs(element, { webform: 'single' });
            const childPromise = this.attachComponents(this.refs.webform);
            this.addEventListener(this.element, 'keydown', this.executeShortcuts);
            this.currentForm = this;
            return childPromise.then(() => {
                this.emit('render');
                return this.setValue(this._submission, { noUpdateEvent: true });
            });
        }
        hasRequiredFields() {
            let result = false;
            formUtils.eachComponent(this.form.components, component => {
                if (component.validate.required) {
                    result = true;
                    return true;
                }
            }, true);
            return result;
        }
        resetValue() {
            _.each(this.getComponents(), comp => comp.resetValue());
            this.setPristine(true);
        }
        setAlert(type, message) {
            if (!type && this.submitted) {
                if (this.alert) {
                    if (this.refs.errorRef && this.refs.errorRef.length) {
                        this.refs.errorRef.forEach(el => {
                            this.removeEventListener(el, 'click');
                            this.removeEventListener(el, 'keypress');
                        });
                    }
                    this.removeChild(this.alert);
                    this.alert = null;
                }
                return;
            }
            if (this.options.noAlerts) {
                if (!message) {
                    this.emit('error', false);
                }
                return;
            }
            if (this.alert) {
                try {
                    if (this.refs.errorRef && this.refs.errorRef.length) {
                        this.refs.errorRef.forEach(el => {
                            this.removeEventListener(el, 'click');
                            this.removeEventListener(el, 'keypress');
                        });
                    }
                    this.removeChild(this.alert);
                    this.alert = null;
                } catch (err) {
                }
            }
            if (message) {
                this.alert = this.ce('div', {
                    id: `error-list-${ this.id }`,
                    class: `alert alert-${ type }`,
                    role: 'alert'
                });
                if (message instanceof HTMLElement) {
                    this.appendTo(message, this.alert);
                } else {
                    this.setContent(this.alert, message);
                }
            }
            if (!this.alert) {
                return;
            }
            this.loadRefs(this.alert, { errorRef: 'multiple' });
            if (this.refs.errorRef && this.refs.errorRef.length) {
                this.refs.errorRef.forEach(el => {
                    this.addEventListener(el, 'click', e => {
                        const key = e.currentTarget.dataset.componentKey;
                        this.focusOnComponent(key);
                    });
                    this.addEventListener(el, 'keypress', e => {
                        if (e.keyCode === 13) {
                            const key = e.currentTarget.dataset.componentKey;
                            this.focusOnComponent(key);
                        }
                    });
                });
            }
            this.prepend(this.alert);
        }
        focusOnComponent(key) {
            if (key) {
                const component = this.getComponent(key);
                if (component) {
                    component.focus();
                }
            }
        }
        showErrors(error, triggerEvent) {
            this.loading = false;
            let errors = this.errors;
            if (error) {
                if (Array.isArray(error)) {
                    errors = errors.concat(error);
                } else {
                    errors.push(error);
                }
            } else {
                errors = super.errors;
            }
            errors = errors.concat(this.customErrors);
            if (!errors.length) {
                this.setAlert(false);
                return;
            }
            errors.forEach(err => {
                const {
                    components = []
                } = err;
                if (err.component) {
                    components.push(err.component);
                }
                if (err.path) {
                    components.push(err.path);
                }
                components.forEach(path => {
                    const component = this.getComponent(path, _.identity);
                    const components = _.compact(Array.isArray(component) ? component : [component]);
                    components.forEach(component => component.setCustomValidity(err.message, true));
                });
            });
            const message = document.createDocumentFragment();
            const p = this.ce('p');
            this.setContent(p, this.t('error'));
            const ul = this.ce('ul');
            errors.forEach(err => {
                if (err) {
                    const createListItem = message => {
                        const params = {
                            ref: 'errorRef',
                            tabIndex: 0,
                            'aria-label': `${ message }. Click to navigate to the field with following error.`
                        };
                        const li = this.ce('li', params);
                        this.setContent(li, message);
                        if (err.component && err.component.key) {
                            li.dataset.componentKey = err.component.key;
                        }
                        this.appendTo(li, ul);
                    };
                    if (err.messages && err.messages.length) {
                        err.messages.forEach(({message}) => createListItem(`${ this.t(err.component.label) }. ${ message }`));
                    } else if (err) {
                        const message = _.isObject(err) ? err.message || '' : err;
                        createListItem(message);
                    }
                }
            });
            p.appendChild(ul);
            message.appendChild(p);
            this.setAlert('danger', message);
            if (triggerEvent) {
                this.emit('error', errors);
            }
            return errors;
        }
        onSubmit(submission, saved) {
            this.loading = false;
            this.submitting = false;
            this.setPristine(true);
            this.setValue(utils.fastCloneDeep(submission), {
                noValidate: true,
                noCheck: true
            });
            this.setAlert('success', `<p>${ this.t('complete') }</p>`);
            this.emit('submit', submission);
            if (saved) {
                this.emit('submitDone', submission);
            }
            return submission;
        }
        onSubmissionError(error) {
            if (error) {
                if (typeof error === 'string') {
                    error = { message: error };
                }
                if ('details' in error) {
                    error = error.details;
                }
            }
            this.submitting = false;
            this.setPristine(false);
            this.emit('submitError', error);
            if (error && error.silent) {
                this.emit('change', { isValid: true });
                return false;
            }
            return this.showErrors(error, true);
        }
        onChange(flags, changed, modified) {
            flags = flags || {};
            let isChangeEventEmitted = false;
            if (changed && changed.component) {
                this.customErrors = this.customErrors.filter(err => err.component && err.component !== changed.component.key);
            }
            super.onChange(flags, true);
            const value = _.clone(this.submission);
            flags.changed = value.changed = changed;
            if (modified && this.pristine) {
                this.pristine = false;
            }
            value.isValid = this.checkData(value.data, flags);
            this.loading = false;
            if (this.submitted) {
                this.showErrors();
            }
            if (modified && this.options.saveDraft) {
                this.triggerSaveDraft();
            }
            if (!flags || !flags.noEmit) {
                this.emit('change', value, flags);
                isChangeEventEmitted = true;
            }
            if (isChangeEventEmitted && !this.initialized) {
                this.emit('initialized');
                this.initialized = true;
            }
        }
        checkData(data, flags = {}) {
            const valid = super.checkData(data, flags);
            if ((_.isEmpty(flags) || flags.noValidate) && this.submitted) {
                this.showErrors();
            }
            return valid;
        }
        deleteSubmission() {
            return this.formio.deleteSubmission().then(() => {
                this.emit('submissionDeleted', this.submission);
                this.resetValue();
            });
        }
        cancel(noconfirm) {
            const shouldReset = this.hook('beforeCancel', true);
            if (shouldReset && (noconfirm || confirm('Are you sure you want to cancel?'))) {
                this.resetValue();
                return true;
            } else {
                return false;
            }
        }
        submitForm(options = {}) {
            return new NativePromise((resolve, reject) => {
                if (this.options.readOnly) {
                    return resolve({
                        submission: this.submission,
                        saved: false
                    });
                }
                const submission = utils.fastCloneDeep(this.submission || {});
                submission.metadata = submission.metadata || {};
                _.defaults(submission.metadata, {
                    timezone: _.get(this, '_submission.metadata.timezone', utils.currentTimezone()),
                    offset: parseInt(_.get(this, '_submission.metadata.offset', moment().utcOffset()), 10),
                    referrer: document.referrer,
                    browserName: navigator.appName,
                    userAgent: navigator.userAgent,
                    pathName: window.location.pathname,
                    onLine: navigator.onLine
                });
                submission.state = options.state || 'submitted';
                const isDraft = submission.state === 'draft';
                this.hook('beforeSubmit', {
                    ...submission,
                    component: options.component
                }, err => {
                    if (err) {
                        return reject(err);
                    }
                    if (!isDraft && !submission.data) {
                        return reject('Invalid Submission');
                    }
                    if (!isDraft && !this.checkValidity(submission.data, true, submission.data)) {
                        return reject();
                    }
                    this.everyComponent(comp => {
                        const {persistent} = comp.component;
                        if (persistent === 'client-only') {
                            _.unset(submission.data, comp.path);
                        }
                    });
                    this.hook('customValidation', {
                        ...submission,
                        component: options.component
                    }, err => {
                        if (err) {
                            if (typeof err === 'string') {
                                err = { message: err };
                            }
                            err = Array.isArray(err) ? err : [err];
                            this.customErrors = err;
                            return reject();
                        }
                        this.loading = true;
                        if (this._form && this._form.action) {
                            const method = submission.data._id && this._form.action.includes(submission.data._id) ? 'PUT' : 'POST';
                            return Formio.makeStaticRequest(this._form.action, method, submission, this.formio ? this.formio.options : {}).then(result => resolve({
                                submission: result,
                                saved: true
                            })).catch(reject);
                        }
                        const submitFormio = this.formio;
                        if (this.nosubmit || !submitFormio) {
                            return resolve({
                                submission,
                                saved: false
                            });
                        }
                        const submitMethod = submitFormio.actionUrl ? 'saveAction' : 'saveSubmission';
                        submitFormio[submitMethod](submission).then(result => resolve({
                            submission: result,
                            saved: true
                        })).catch(reject);
                    });
                });
            });
        }
        executeSubmit(options) {
            this.submitted = true;
            this.submitting = true;
            return this.submitForm(options).then(({submission, saved}) => this.onSubmit(submission, saved)).catch(err => NativePromise.reject(this.onSubmissionError(err)));
        }
        submit(before, options) {
            if (!before) {
                return this.beforeSubmit(options).then(() => this.executeSubmit(options));
            } else {
                return this.executeSubmit(options);
            }
        }
        submitUrl(URL, headers) {
            if (!URL) {
                return console.warn('Missing URL argument');
            }
            const submission = this.submission || {};
            const API_URL = URL;
            const settings = {
                method: 'POST',
                headers: {}
            };
            if (headers && headers.length > 0) {
                headers.map(e => {
                    if (e.header !== '' && e.value !== '') {
                        settings.headers[e.header] = this.interpolate(e.value, submission);
                    }
                });
            }
            if (API_URL && settings) {
                try {
                    Formio.makeStaticRequest(API_URL, settings.method, submission, { headers: settings.headers }).then(() => {
                        this.emit('requestDone');
                        this.setAlert('success', '<p> Success </p>');
                    });
                } catch (e) {
                    this.showErrors(`${ e.statusText } ${ e.status }`);
                    this.emit('error', `${ e.statusText } ${ e.status }`);
                    console.error(`${ e.statusText } ${ e.status }`);
                }
            } else {
                this.emit('error', 'You should add a URL to this button.');
                this.setAlert('warning', 'You should add a URL to this button.');
                return console.warn('You should add a URL to this button.');
            }
        }
        triggerRecaptcha() {
            if (!this || !this.components) {
                return;
            }
            const recaptchaComponent = this.components.find(component => {
                return component.component.type === 'recaptcha' && component.component.eventType === 'formLoad';
            });
            if (recaptchaComponent) {
                recaptchaComponent.verify(`${ this.form.name ? this.form.name : 'form' }Load`);
            }
        }
        set nosubmit(value) {
            this._nosubmit = !!value;
            this.emit('nosubmit', this._nosubmit);
        }
        get nosubmit() {
            return this._nosubmit || false;
        }
    };
    Webform.setBaseUrl = Formio.setBaseUrl;
    Webform.setApiUrl = Formio.setApiUrl;
    Webform.setAppUrl = Formio.setAppUrl;


    return Webform;
});
define('skylark-formio/PDF',[
    './vendors/getify/npo',
    './Formio',
    './Webform',
    './utils/utils'
], function (NativePromise, Formio, Webform, a) {
    'use strict';
    class PDF extends Webform {
        constructor(element, options) {
            super(element, options);
            this.components = [];
        }
        init() {
            super.init();
            this.on('iframe-submission', submission => this.setValue(submission, { fromIframe: true }), true);
            this.on('iframe-change', submission => this.setValue(submission, { fromIframe: true }), true);
            this.on('iframe-getIframePositions', () => {
                const iframeBoundingClientRect = document.querySelector('iframe').getBoundingClientRect();
                this.postMessage({
                    name: 'iframePositions',
                    data: {
                        iframe: { top: iframeBoundingClientRect.top },
                        scrollY: window.scrollY || window.pageYOffset
                    }
                });
            });
            this.on('iframe-ready', () => this.iframeReadyResolve(), true);
        }
        render() {
            return this.renderTemplate('pdf', {
                classes: 'formio-form-pdf',
                children: this.renderComponents()
            });
        }
        redraw() {
            return super.redraw();
        }
        attach(element) {
            return super.attach(element).then(() => {
                this.loadRefs(element, {
                    submitButton: 'single',
                    zoomIn: 'single',
                    zoomOut: 'single',
                    iframeContainer: 'single'
                });
                this.iframeReady = new NativePromise((resolve, reject) => {
                    this.iframeReadyResolve = resolve;
                    this.iframeReadyReject = reject;
                });
                this.iframeElement = this.ce('iframe', {
                    src: this.getSrc(),
                    id: `iframe-${ this.id }`,
                    seamless: true,
                    class: 'formio-iframe'
                });
                this.iframeElement.formioContainer = this.component.components;
                this.iframeElement.formioComponent = this;
                this.empty(this.refs.iframeContainer);
                this.appendChild(this.refs.iframeContainer, this.iframeElement);
                this.postMessage({
                    name: 'form',
                    data: this.form
                });
                const submitButton = this.components.find(c => c.element === this.refs.submitButton);
                this.refs.submitButton.classList.toggle('hidden', !submitButton.visible);
                this.addEventListener(this.refs.submitButton, 'click', () => {
                    this.postMessage({ name: 'getErrors' });
                    return this.submit();
                });
                this.addEventListener(this.refs.zoomIn, 'click', event => {
                    event.preventDefault();
                    this.postMessage({ name: 'zoomIn' });
                });
                this.addEventListener(this.refs.zoomOut, 'click', event => {
                    event.preventDefault();
                    this.postMessage({ name: 'zoomOut' });
                });
                const form = a.fastCloneDeep(this.form);
                if (this.formio) {
                    form.projectUrl = this.formio.projectUrl;
                    form.url = this.formio.formUrl;
                    form.base = this.formio.base;
                    this.postMessage({
                        name: 'token',
                        data: this.formio.getToken()
                    });
                }
                this.emit('attach');
            });
        }
        getSubmission() {
            return new NativePromise(resolve => {
                this.once('iframe-submission', resolve);
                this.postMessage({ name: 'getSubmission' });
            });
        }
        submitForm(options = {}) {
            return this.getSubmission().then(() => super.submitForm(options));
        }
        getSrc() {
            if (!this._form || !this._form.settings || !this._form.settings.pdf) {
                return '';
            }
            let iframeSrc = `${ this._form.settings.pdf.src }.html`;
            const params = [`id=${ this.id }`];
            if (this.options.readOnly) {
                params.push('readonly=1');
            }
            if (this.options.zoom) {
                params.push(`zoom=${ this.options.zoom }`);
            }
            if (this.builderMode) {
                params.push('builder=1');
            }
            if (params.length) {
                iframeSrc += `?${ params.join('&') }`;
            }
            return iframeSrc;
        }
        setForm(form) {
            return super.setForm(form).then(() => {
                if (this.formio) {
                    form.projectUrl = this.formio.projectUrl;
                    form.url = this.formio.formUrl;
                    form.base = this.formio.base;
                    this.postMessage({
                        name: 'token',
                        data: this.formio.getToken()
                    });
                }
                this.postMessage({
                    name: 'form',
                    data: form
                });
            });
        }
        setValue(submission, flags = {}) {
            const changed = super.setValue(submission, flags);
            if (!flags || !flags.fromIframe) {
                this.once('iframe-ready', () => {
                    this.postMessage({
                        name: 'submission',
                        data: submission
                    });
                });
            }
            return changed;
        }
        setSubmission(submission) {
            submission.readOnly = !!this.options.readOnly;
            return super.setSubmission(submission).then(() => {
                if (this.formio) {
                    this.formio.getDownloadUrl().then(url => {
                        if (!url) {
                            return;
                        }
                        if (!this.downloadButton) {
                            if (this.options.primaryProject) {
                                url += `&project=${ this.options.primaryProject }`;
                            }
                            this.downloadButton = this.ce('a', {
                                href: url,
                                target: '_blank',
                                style: 'position:absolute;right:10px;top:110px;cursor:pointer;'
                            }, this.ce('img', {
                                src: require('./pdf.image'),
                                style: 'width:3em;'
                            }));
                            this.element.insertBefore(this.downloadButton, this.iframe);
                        }
                    });
                }
            });
        }
        postMessage(message) {
            if (!this.iframeReady) {
                return;
            }
            if (!message.type) {
                message.type = 'iframe-data';
            }
            this.iframeReady.then(() => {
                if (this.iframeElement && this.iframeElement.contentWindow) {
                    this.iframeElement.contentWindow.postMessage(JSON.stringify(message), '*');
                }
            });
        }
        focusOnComponent(key) {
            this.postMessage({
                name: 'focusErroredField',
                data: key
            });
        }
        clear() {
        }
        showErrors(error, triggerEvent) {
            const helpBlock = document.getElementById('submit-error');
            if (!helpBlock) {
                const p = this.ce('p', { class: 'help-block' });
                this.setContent(p, this.t('submitError'));
                p.addEventListener('click', () => {
                    window.scrollTo(0, 0);
                });
                const div = this.ce('div', {
                    id: 'submit-error',
                    class: 'has-error'
                });
                this.appendTo(p, div);
                this.appendTo(div, this.element);
            }
            if (!this.errors.length && helpBlock) {
                helpBlock.remove();
            }
            if (this.errors.length) {
                this.focusOnComponent(this.errors[0].component.key);
            }
            if (this.errors.length) {
                this.focusOnComponent(this.errors[0].component.key);
            }
            super.showErrors(error, triggerEvent);
        }
    };
    window.addEventListener('message', event => {
        let eventData = null;
        try {
            eventData = JSON.parse(event.data);
        } catch (err) {
            eventData = null;
        }
        if (eventData && eventData.name && eventData.formId && Formio.forms.hasOwnProperty(eventData.formId)) {
            Formio.forms[eventData.formId].emit(`iframe-${ eventData.name }`, eventData.data);
        }
    });


    return PDF;
});
define('skylark-formio/Wizard',[
    './vendors/getify/npo',
    'skylark-lodash',
    './Webform',
    './Formio',
    './utils/utils'
], function (NativePromise, _, Webform, Formio, a) {
    'use strict';
    class Wizard extends Webform {
        constructor() {
            let element, options;
            if (arguments[0] instanceof HTMLElement || arguments[1]) {
                element = arguments[0];
                options = arguments[1];
            } else {
                options = arguments[0];
            }
            super(element, options);
            this.pages = [];
            this.prefixComps = [];
            this.suffixComps = [];
            this.components = [];
            this.originalComponents = [];
            this.page = 0;
            this.currentNextPage = 0;
            this._seenPages = [0];
        }
        isLastPage() {
            const next = this.getNextPage();
            if (_.isNumber(next)) {
                return 0 < next && next >= this.pages.length;
            }
            return _.isNull(next);
        }
        getPages(args = {}) {
            const {
                all = false
            } = args;
            const pages = this.pages.filter(all ? _.identity : (p, index) => this._seenPages.includes(index));
            return pages;
        }
        getComponents() {
            return this.submitting ? this.getPages({ all: this.isLastPage() }) : super.getComponents();
        }
        resetValue() {
            this.getPages({ all: true }).forEach(page => page.resetValue());
            this.setPristine(true);
        }
        init() {
            this.options.buttonSettings = _.defaults(this.options.buttonSettings, {
                showPrevious: true,
                showNext: true,
                showSubmit: true,
                showCancel: !this.options.readOnly
            });
            this.options.breadcrumbSettings = _.defaults(this.options.breadcrumbSettings, { clickable: true });
            this.page = 0;
            const onReady = super.init();
            this.setComponentSchema();
            return onReady;
        }
        get wizardKey() {
            return `wizard-${ this.id }`;
        }
        get form() {
            return this.wizard;
        }
        set form(value) {
            super.form = value;
        }
        get buttons() {
            const buttons = {};
            [
                {
                    name: 'cancel',
                    method: 'cancel'
                },
                {
                    name: 'previous',
                    method: 'prevPage'
                },
                {
                    name: 'next',
                    method: 'nextPage'
                },
                {
                    name: 'submit',
                    method: 'submit'
                }
            ].forEach(button => {
                if (this.hasButton(button.name)) {
                    buttons[button.name] = button;
                }
            });
            return buttons;
        }
        get renderContext() {
            return {
                wizardKey: this.wizardKey,
                isBreadcrumbClickable: this.isBreadcrumbClickable(),
                panels: this.pages.map(page => page.component),
                buttons: this.buttons,
                currentPage: this.page
            };
        }
        render() {
            const ctx = this.renderContext;
            return this.renderTemplate('wizard', {
                ...ctx,
                className: super.getClassName(),
                wizardHeader: this.renderTemplate('wizardHeader', ctx),
                wizardNav: this.renderTemplate('wizardNav', ctx),
                components: this.renderComponents([
                    ...this.prefixComps,
                    ...this.currentPage.components,
                    ...this.suffixComps
                ])
            }, this.builderMode ? 'builder' : 'form');
        }
        redrawNavigation() {
            if (this.element) {
                let navElement = this.element.querySelector(`#${ this.wizardKey }-nav`);
                if (navElement) {
                    this.detachNav();
                    navElement.outerHTML = this.renderTemplate('wizardNav', this.renderContext);
                    navElement = this.element.querySelector(`#${ this.wizardKey }-nav`);
                    this.loadRefs(navElement, {
                        [`${ this.wizardKey }-cancel`]: 'single',
                        [`${ this.wizardKey }-previous`]: 'single',
                        [`${ this.wizardKey }-next`]: 'single',
                        [`${ this.wizardKey }-submit`]: 'single'
                    });
                    this.attachNav();
                }
            }
        }
        redrawHeader() {
            if (this.element) {
                let headerElement = this.element.querySelector(`#${ this.wizardKey }-header`);
                if (headerElement) {
                    this.detachHeader();
                    headerElement.outerHTML = this.renderTemplate('wizardHeader', this.renderContext);
                    headerElement = this.element.querySelector(`#${ this.wizardKey }-header`);
                    this.loadRefs(headerElement, { [`${ this.wizardKey }-link`]: 'multiple' });
                    this.attachHeader();
                }
            }
        }
        attach(element) {
            this.element = element;
            this.loadRefs(element, {
                [this.wizardKey]: 'single',
                [`${ this.wizardKey }-cancel`]: 'single',
                [`${ this.wizardKey }-previous`]: 'single',
                [`${ this.wizardKey }-next`]: 'single',
                [`${ this.wizardKey }-submit`]: 'single',
                [`${ this.wizardKey }-link`]: 'multiple'
            });
            const promises = this.attachComponents(this.refs[this.wizardKey], [
                ...this.prefixComps,
                ...this.currentPage.components,
                ...this.suffixComps
            ]);
            this.attachNav();
            this.attachHeader();
            return promises.then(() => this.emit('render'));
        }
        isBreadcrumbClickable() {
            return _.get(this.options, 'breadcrumbSettings.clickable', true);
        }
        attachNav() {
            _.each(this.buttons, button => {
                const buttonElement = this.refs[`${ this.wizardKey }-${ button.name }`];
                this.addEventListener(buttonElement, 'click', event => {
                    event.preventDefault();
                    buttonElement.setAttribute('disabled', 'disabled');
                    this.setLoading(buttonElement, true);
                    this[button.method]().then(() => {
                        buttonElement.removeAttribute('disabled');
                        this.setLoading(buttonElement, false);
                    }).catch(() => {
                        buttonElement.removeAttribute('disabled');
                        this.setLoading(buttonElement, false);
                    });
                });
            });
        }
        attachHeader() {
            if (this.isBreadcrumbClickable()) {
                this.refs[`${ this.wizardKey }-link`].forEach((link, index) => {
                    this.addEventListener(link, 'click', event => {
                        this.emit('wizardNavigationClicked', this.pages[index]);
                        event.preventDefault();
                        return this.setPage(index).then(() => {
                            this.emit('wizardPageSelected', this.pages[index], index);
                        });
                    });
                });
            }
        }
        detachNav() {
            _.each(this.buttons, button => {
                this.removeEventListener(this.refs[`${ this.wizardKey }-${ button.name }`], 'click');
            });
        }
        detachHeader() {
            this.refs[`${ this.wizardKey }-link`].forEach(link => {
                this.removeEventListener(link, 'click');
            });
        }
        establishPages() {
            this.pages = [];
            this.prefixComps = [];
            this.suffixComps = [];
            const visible = [];
            const currentPages = {};
            const pageOptions = _.clone(this.options);
            if (this.components && this.components.length) {
                this.components.map(page => {
                    if (page.component.type === 'panel') {
                        currentPages[page.component.key || page.component.title] = page;
                    }
                });
            }
            if (this.originalComponents) {
                this.originalComponents.forEach(item => {
                    if (item.type === 'panel') {
                        if (!item.key) {
                            item.key = item.title;
                        }
                        let page = currentPages[item.key];
                        const isVisible = a.checkCondition(item, this.data, this.data, this.component, this);
                        if (isVisible) {
                            visible.push(item);
                            if (page) {
                                this.pages.push(page);
                            }
                        }
                        if (!page && isVisible) {
                            page = this.createComponent(item, pageOptions);
                            this.pages.push(page);
                            page.eachComponent(component => {
                                component.page = this.pages.length - 1;
                            });
                        } else if (page && !isVisible) {
                            this.removeComponent(page);
                        }
                    } else if (item.type !== 'button') {
                        if (!this.pages.length) {
                            this.prefixComps.push(this.createComponent(item, pageOptions));
                        } else {
                            this.suffixComps.push(this.createComponent(item, pageOptions));
                        }
                    }
                });
            }
            return visible;
        }
        addComponents() {
            this.establishPages();
        }
        setPage(num) {
            if (num === this.page) {
                return NativePromise.resolve();
            }
            if (!this.wizard.full && num >= 0 && num < this.pages.length) {
                this.page = num;
                this.pageFieldLogic(num);
                this.getNextPage();
                if (!this._seenPages.includes(num)) {
                    this._seenPages = this._seenPages.concat(num);
                }
                this.redraw().then(() => {
                    if (!this.options.readOnly) {
                        this.checkValidity(this.submission.data, false, this.submission.data, true);
                    }
                });
                return NativePromise.resolve();
            } else if (this.wizard.full || !this.pages.length) {
                this.redraw();
                return NativePromise.resolve();
            }
            return NativePromise.reject('Page not found');
        }
        pageFieldLogic(page) {
            this.component = this.pages[page].component;
            this.originalComponent = a.fastCloneDeep(this.component);
            this.fieldLogic(this.data);
            this.disabled = this.shouldDisabled;
        }
        get currentPage() {
            return this.pages && this.pages.length >= this.page ? this.pages[this.page] : { components: [] };
        }
        getNextPage() {
            const data = this.submission.data;
            const form = this.pages[this.page].component;
            if (form) {
                const page = this.pages.length > this.page + 1 ? this.page + 1 : -1;
                if (form.nextPage) {
                    const next = this.evaluate(form.nextPage, {
                        next: page,
                        data,
                        page,
                        form
                    }, 'next');
                    if (next === null) {
                        this.currentNextPage = null;
                        return null;
                    }
                    const pageNum = parseInt(next, 10);
                    if (!isNaN(parseInt(pageNum, 10)) && isFinite(pageNum)) {
                        this.currentNextPage = pageNum;
                        return pageNum;
                    }
                    this.currentNextPage = this.getPageIndexByKey(next);
                    return this.currentNextPage;
                }
                this.currentNextPage = page;
                return page;
            }
            this.currentNextPage = null;
            return null;
        }
        getPreviousPage() {
            return this.page - 1;
        }
        beforeSubmit() {
            return NativePromise.all(this.getPages().map(page => {
                page.options.beforeSubmit = true;
                return page.beforeSubmit();
            }));
        }
        beforePage(next) {
            return new NativePromise((resolve, reject) => {
                this.hook(next ? 'beforeNext' : 'beforePrev', this.currentPage, this.submission, err => {
                    if (err) {
                        this.showErrors(err, true);
                        reject(err);
                    }
                    const form = this.currentPage;
                    if (form) {
                        form.beforePage(next).then(resolve).catch(reject);
                    } else {
                        resolve();
                    }
                });
            });
        }
        nextPage() {
            if (this.options.readOnly) {
                return this.setPage(this.getNextPage()).then(() => {
                    this.emit('nextPage', {
                        page: this.page,
                        submission: this.submission
                    });
                });
            }
            if (this.checkValidity(this.submission.data, true, this.submission.data, true)) {
                this.checkData(this.submission.data);
                return this.beforePage(true).then(() => {
                    return this.setPage(this.getNextPage()).then(() => {
                        this.emit('nextPage', {
                            page: this.page,
                            submission: this.submission
                        });
                    });
                });
            } else {
                this.currentPage.components.forEach(comp => comp.setPristine(false));
                return NativePromise.reject(this.showErrors([], true));
            }
        }
        prevPage() {
            return this.beforePage().then(() => {
                return this.setPage(this.getPreviousPage()).then(() => {
                    this.emit('prevPage', {
                        page: this.page,
                        submission: this.submission
                    });
                });
            });
        }
        cancel(noconfirm) {
            if (super.cancel(noconfirm)) {
                this.setPristine(true);
                return this.setPage(0).then(() => {
                    this.redraw();
                    return this.page;
                });
            }
            return NativePromise.resolve();
        }
        getPageIndexByKey(key) {
            let pageIndex = this.page;
            this.pages.forEach((page, index) => {
                if (page.component.key === key) {
                    pageIndex = index;
                    return false;
                }
            });
            return pageIndex;
        }
        get schema() {
            return this.wizard;
        }
        setComponentSchema() {
            const pageKeys = {};
            this.originalComponents = [];
            this.component.components.map(item => {
                if (item.type === 'panel') {
                    item.key = a.uniqueKey(pageKeys, item.key || 'panel');
                    pageKeys[item.key] = true;
                }
                this.originalComponents.push(_.clone(item));
            });
            if (!Object.keys(pageKeys).length) {
                const newPage = {
                    type: 'panel',
                    title: 'Page 1',
                    label: 'Page 1',
                    key: 'page1',
                    components: this.component.components
                };
                this.component.components = [newPage];
                this.originalComponents.push(_.clone(newPage));
            }
        }
        setForm(form) {
            if (!form) {
                return;
            }
            this.wizard = form;
            this.component.components = form.components || [];
            this.setComponentSchema();
            return super.setForm(form);
        }
        setValue(submission, flags = {}) {
            const changed = super.setValue(submission, flags);
            this.pageFieldLogic(this.page);
            return changed;
        }
        isClickable(page, index) {
            return this.page !== index && a.firstNonNil([
                _.get(page, 'breadcrumbClickable'),
                this.options.breadcrumbSettings.clickable
            ]);
        }
        hasButton(name, nextPage) {
            const currentPage = this.currentPage;
            if (name === 'previous') {
                const show = a.firstNonNil([
                    _.get(currentPage, 'buttonSettings.previous'),
                    this.options.buttonSettings.showPrevious
                ]);
                return this.getPreviousPage() > -1 && show;
            }
            nextPage = nextPage === undefined ? this.getNextPage() : nextPage;
            if (name === 'next') {
                const show = a.firstNonNil([
                    _.get(currentPage, 'buttonSettings.next'),
                    this.options.buttonSettings.showNext
                ]);
                return nextPage !== null && nextPage !== -1 && show;
            }
            if (name === 'cancel') {
                return a.firstNonNil([
                    _.get(currentPage, 'buttonSettings.cancel'),
                    this.options.buttonSettings.showCancel
                ]);
            }
            if (name === 'submit') {
                const show = a.firstNonNil([
                    _.get(currentPage, 'buttonSettings.submit'),
                    this.options.buttonSettings.showSubmit
                ]);
                return show && !this.options.readOnly && (nextPage === null || this.page === this.pages.length - 1);
            }
            return true;
        }
        pageId(page) {
            if (page.key) {
                return `${ page.key }-${ page.title }`;
            } else if (page.components && page.components.length > 0) {
                return this.pageId(page.components[0]);
            } else {
                return page.title;
            }
        }
        onChange(flags, changed, modified) {
            super.onChange(flags, changed, modified);
            if (this.alert && !this.submitted) {
                this.checkValidity(this.submission.data, false, this.submission.data, true);
                this.showErrors([], true);
            }
            const currentPanels = this.pages.map(page => page.component.key);
            const panels = this.establishPages().map(panel => panel.key);
            const currentNextPage = this.currentNextPage;
            if (!_.isEqual(panels, currentPanels)) {
                this.redrawHeader();
            }
            if (currentNextPage !== this.getNextPage()) {
                this.redrawNavigation();
            }
        }
        checkValidity(data, dirty, row, currentPageOnly) {
            if (!this.checkCondition(row, data)) {
                this.setCustomValidity('');
                return true;
            }
            const components = !currentPageOnly || this.isLastPage() ? this.getComponents() : this.currentPage.components;
            return components.reduce((check, comp) => comp.checkValidity(data, dirty, row) && check, true);
        }
        get errors() {
            if (!this.isLastPage()) {
                return this.currentPage.errors;
            }
            return super.errors;
        }
        focusOnComponent(key) {
            let pageIndex = 0;
            const [page] = this.pages.filter((page, index) => {
                if (page.getComponent(key)) {
                    pageIndex = index;
                    return true;
                }
                return false;
            });
            if (page && page !== this.currentPage) {
                return this.setPage(pageIndex).then(() => {
                    this.checkValidity(this.submission.data, true, this.submission.data);
                    this.showErrors();
                    super.focusOnComponent(key);
                });
            }
            return super.focusOnComponent(key);
        }
    };
    Wizard.setBaseUrl = Formio.setBaseUrl;
    Wizard.setApiUrl = Formio.setApiUrl;
    Wizard.setAppUrl = Formio.setAppUrl;

    return Wizard;
});
define('skylark-formio/displays/Displays',[
    'skylark-lodash',
    '../PDF',
    '../Webform',
    '../Wizard'
], function (_, pdf, webform, wizard) {
    'use strict';
    class Displays {
        static addDisplay(name, display) {
            Displays.displays[name] = display;
        }
        static addDisplays(displays) {
            Displays.displays = _.merge(Displays.displays, displays);
        }
        static getDisplay(name) {
            return Displays.displays[name];
        }
        static getDisplays() {
            return Displays.displays;
        }
    };
    Displays.displays = {
        pdf,
        webform,
        wizard
    };

    return Displays;
});
define('skylark-formio/displays/index',['./Displays'], function (Displays) {
    'use strict';
    return Displays;
});
define('skylark-formio/Form',[
    './Element',
    './Formio',
    './displays/index',
    './templates/index',
    './utils/utils',
    './vendors/getify/npo'
], function (Element, Formio, Displays, templates, FormioUtils, NativePromise) {
    'use strict';
    
    class Form extends Element {
        constructor(...args) {
            let options = args[0] instanceof HTMLElement ? args[2] : args[1];
            if (Formio.options && Formio.options.form) {
                options = Object.assign(options, Formio.options.form);
            }
            super(options);
            this.ready = new NativePromise((resolve, reject) => {
                this.readyResolve = resolve;
                this.readyReject = reject;
            });
            this.instance = null;
            if (args[0] instanceof HTMLElement) {
                this.element = args[0];
                this.options = args[2] || {};
                this.options.events = this.events;
                this.setForm(args[1]).then(() => this.readyResolve(this.instance)).catch(this.readyReject);
            } else if (args[0]) {
                this.element = null;
                this.options = args[1] || {};
                this.options.events = this.events;
                this.setForm(args[0]).then(() => this.readyResolve(this.instance)).catch(this.readyReject);
            } else {
                this.element = null;
                this.options = {};
                this.options.events = this.events;
            }
            this.display = '';
        }
        create(display) {
            if (this.options && (this.options.flatten || this.options.renderMode === 'flat')) {
                display = 'form';
            }
            this.display = display;
            if (Displays.displays[display]) {
                return new Displays.displays[display](this.element, this.options);
            } else {
                return new Displays.displays['webform'](this.element, this.options);
            }
        }
        set form(formParam) {
            return this.setForm(formParam);
        }
        errorForm(err) {
            return {
                components: [{
                        'label': 'HTML',
                        'tag': 'div',
                        'className': 'error error-message alert alert-danger ui red message',
                        'attrs': [{
                                'attr': 'role',
                                'value': 'alert'
                            }],
                        'key': 'errorMessage',
                        'type': 'htmlelement',
                        'input': false,
                        'content': typeof err === 'string' ? err : err.message
                    }]
            };
        }
        setForm(formParam) {
            let result;
            formParam = formParam || this.form;
            if (typeof formParam === 'string') {
                const formio = new Formio(formParam);
                let error;
                result = this.getSubmission(formio).catch(err => {
                    error = err;
                }).then(submission => {
                    return formio.loadForm().catch(err => {
                        error = err;
                    }).then(form => {
                        if (error) {
                            form = this.errorForm(error);
                        }
                        this.instance = this.instance || this.create(form.display);
                        this.instance.url = formParam;
                        this.instance.nosubmit = false;
                        this._form = this.instance.form = form;
                        if (submission) {
                            this.instance.submission = submission;
                        }
                        if (error) {
                            throw error;
                        }
                        return this.instance;
                    });
                });
            } else {
                this.instance = this.instance || this.create(formParam.display);
                this._form = this.instance.form = formParam;
                result = this.instance.ready;
            }
            return result.then(() => {
                this.element = this.instance.element;
                return this.instance;
            });
        }
        getSubmission(formio) {
            if (formio.submissionId) {
                return formio.loadSubmission();
            }
            return NativePromise.resolve();
        }
        get form() {
            return this._form;
        }
        setDisplay(display) {
            if (this.display === display && this.instance) {
                return NativePromise.resolve(this.instance);
            }
            this.form.display = display;
            this.instance.destroy();
            this.instance = this.create(display);
            return this.setForm(this.form);
        }
        empty() {
            if (this.element) {
                while (this.element.firstChild) {
                    this.element.removeChild(this.element.firstChild);
                }
            }
        }
        static embed(embed) {
            return new NativePromise(resolve => {
                if (!embed || !embed.src) {
                    resolve();
                }
                const id = this.id || `formio-${ Math.random().toString(36).substring(7) }`;
                const className = embed.class || 'formio-form-wrapper';
                let code = embed.styles ? `<link rel="stylesheet" href="${ embed.styles }">` : '';
                code += `<div id="${ id }" class="${ className }"></div>`;
                document.write(code);
                let attempts = 0;
                const wait = setInterval(() => {
                    attempts++;
                    const formElement = document.getElementById(id);
                    if (formElement || attempts > 10) {
                        resolve(new Form(formElement, embed.src).ready);
                        clearInterval(wait);
                    }
                }, 10);
            });
        }
        sanitize(dirty) {
            return FormioUtils.sanitize(dirty, this.options);
        }
        setContent(element, content) {
            if (element instanceof HTMLElement) {
                element.innerHTML = this.sanitize(content);
                return true;
            }
            return false;
        }
        build() {
            if (!this.instance) {
                return NativePromise.reject('Form not ready. Use form.ready promise');
            }
            if (!this.element) {
                return NativePromise.reject('No DOM element for form.');
            }
            const template = this.options && this.options.template ? this.options.template : 'bootstrap';
            const loader = templates[template].loader || templates.bootstrap.loader;
            this.setContent(this.element, loader.form);
            return this.render().then(html => {
                this.setContent(this.element, html);
                return this.attach(this.element).then(() => this.instance);
            }).then(param => {
                this.emit('build', param);
                return param;
            });
        }
        render() {
            if (!this.instance) {
                return NativePromise.reject('Form not ready. Use form.ready promise');
            }
            return NativePromise.resolve(this.instance.render()).then(param => {
                this.emit('render', param);
                return param;
            });
        }
        attach(element) {
            if (!this.instance) {
                return NativePromise.reject('Form not ready. Use form.ready promise');
            }
            this.element = element;
            return this.instance.attach(this.element).then(param => {
                this.emit('attach', param);
                return param;
            });
        }
    };
    Formio.embedForm = embed => Form.embed(embed);
    Formio.createForm = (...args) => {
        return new Form(...args).ready;
    };
    
    return Formio.Form = Form;
});
define('skylark-formio/components/form/Form',[
    'skylark-lodash',
    '../_classes/component/Component',
    '../../vendors/eventemitter2/EventEmitter2',
    '../../vendors/getify/npo',
    '../../utils/utils',
    '../../Formio',
    '../../Form'
], function (_, Component, EventEmitter, NativePromise, a, Formio, Form) {
    'use strict';
    return class FormComponent extends Component {
        static schema(...extend) {
            return Component.schema({
                label: 'Form',
                type: 'form',
                key: 'form',
                src: '',
                reference: true,
                form: '',
                path: '',
                tableView: true
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Nested Form',
                icon: 'wpforms',
                group: 'premium',
                documentation: 'http://help.form.io/userguide/#form',
                weight: 110,
                schema: FormComponent.schema()
            };
        }
        init() {
            super.init();
            this.formObj = {
                display: this.component.display,
                settings: this.component.settings,
                components: this.component.components
            };
            this.subForm = null;
            this.formSrc = '';
            if (this.component.src) {
                this.formSrc = this.component.src;
            }
            if (!this.component.src && !this.options.formio && (this.component.form || this.component.path)) {
                if (this.component.project) {
                    this.formSrc = Formio.getBaseUrl();
                    if (a.isMongoId(this.component.project)) {
                        this.formSrc += '/project';
                    }
                    this.formSrc += `/${ this.component.project }`;
                    this.options.project = this.formSrc;
                } else {
                    this.formSrc = Formio.getProjectUrl();
                    this.options.project = this.formSrc;
                }
                if (this.component.form) {
                    this.formSrc += `/form/${ this.component.form }`;
                } else if (this.component.path) {
                    this.formSrc += `/${ this.component.path }`;
                }
            }
            if (!this.formSrc && this.options.formio) {
                const rootSrc = this.options.formio.formsUrl;
                if (this.component.path) {
                    const parts = rootSrc.split('/');
                    parts.pop();
                    this.formSrc = `${ parts.join('/') }/${ this.component.path }`;
                }
                if (this.component.form) {
                    this.formSrc = `${ rootSrc }/${ this.component.form }`;
                }
            }
            if (this.component.revision || this.component.revision === 0) {
                this.formSrc += `/v/${ this.component.revision }`;
            }
        }
        get dataReady() {
            return this.subFormReady || NativePromise.resolve();
        }
        get defaultValue() {
            return this.subForm ? super.defaultValue : null;
        }
        get defaultSchema() {
            return FormComponent.schema();
        }
        get emptyValue() {
            return { data: {} };
        }
        get ready() {
            return this.subFormReady || NativePromise.resolve();
        }
        getSubOptions(options = {}) {
            if (!this.options) {
                return options;
            }
            if (this.options.base) {
                options.base = this.options.base;
            }
            if (this.options.project) {
                options.project = this.options.project;
            }
            if (this.options.readOnly) {
                options.readOnly = this.options.readOnly;
            }
            if (this.options.breadcrumbSettings) {
                options.breadcrumbSettings = this.options.breadcrumbSettings;
            }
            if (this.options.buttonSettings) {
                options.buttonSettings = _.clone(this.options.buttonSettings);
            }
            if (this.options.viewAsHtml) {
                options.viewAsHtml = this.options.viewAsHtml;
            }
            if (this.options.language) {
                options.language = this.options.language;
            }
            if (this.options.template) {
                options.template = this.options.template;
            }
            if (this.options.templates) {
                options.templates = this.options.templates;
            }
            if (this.options.renderMode) {
                options.renderMode = this.options.renderMode;
            }
            if (this.options.attachMode) {
                options.attachMode = this.options.attachMode;
            }
            if (this.options.iconset) {
                options.iconset = this.options.iconset;
            }
            options.events = this.createEmitter();
            _.set(options, 'buttonSettings.showSubmit', false);
            return options;
        }
        render() {
            if (this.builderMode) {
                return super.render(this.component.label || 'Nested form');
            }
            const subform = this.subForm ? this.subForm.render() : this.renderTemplate('loading');
            return super.render(subform);
        }
        asString(value) {
            return this.getValueAsString(value);
        }
        getValueAsString(value) {
            if (!value) {
                return 'No data provided';
            }
            if (!value.data && value._id) {
                return value._id;
            }
            if (!value.data || !Object.keys(value.data).length) {
                return 'No data provided';
            }
            return '[Complex Data]';
        }
        attach(element) {
            if (this.builderMode) {
                return super.attach(element);
            }
            return super.attach(element).then(() => this.createSubForm()).then(() => {
                this.empty(element);
                if (this.options.builder) {
                    this.setContent(element, this.ce('div', { class: 'text-muted text-center p-2' }, this.text(this.formObj.title)));
                    return;
                }
                this.setContent(element, this.render());
                if (this.subForm) {
                    this.subForm.attach(element);
                }
            });
        }
        detach() {
            if (this.subForm) {
                this.subForm.detach();
            }
            super.detach();
        }
        get currentForm() {
            return this._currentForm;
        }
        set currentForm(instance) {
            this._currentForm = instance;
            if (!this.subForm) {
                return;
            }
            this.subForm.getComponents().forEach(component => {
                component.currentForm = this;
            });
        }
        destroy() {
            if (this.subForm) {
                this.subForm.destroy();
                this.subForm = null;
                this.subFormReady = null;
            }
            super.destroy();
        }
        redraw() {
            if (this.subForm) {
                this.subForm.form = this.formObj;
            }
            return super.redraw();
        }
        everyComponent(...args) {
            if (this.subForm) {
                this.subForm.everyComponent(...args);
            }
        }
        createSubForm() {
            this.subFormReady = this.loadSubForm().then(form => {
                if (!form) {
                    return;
                }
                a.eachComponent(form.components, component => {
                    if (component.type === 'button' && (component.action === 'submit' || !component.action)) {
                        component.hidden = true;
                    }
                });
                if (this.subForm) {
                    this.subForm.destroy();
                }
                return new Form(form, this.getSubOptions()).ready.then(instance => {
                    this.subForm = instance;
                    this.subForm.currentForm = this;
                    this.subForm.parent = this;
                    this.subForm.parentVisible = this.visible;
                    this.subForm.on('change', () => {
                        if (this.subForm) {
                            this.dataValue = this.subForm.getValue();
                            this.triggerChange({ noEmit: true });
                        }
                    });
                    this.subForm.url = this.formSrc;
                    this.subForm.nosubmit = true;
                    this.subForm.root = this.root;
                    this.restoreValue();
                    return this.subForm;
                });
            });
            return this.subFormReady;
        }
        loadSubForm() {
            if (this.builderMode || this.isHidden()) {
                return NativePromise.resolve();
            }
            if (this.formObj && this.formObj.components && Array.isArray(this.formObj.components) && this.formObj.components.length) {
                if (this.root && this.root.form && this.root.form.config && !this.formObj.config) {
                    this.formObj.config = this.root.form.config;
                }
                return NativePromise.resolve(this.formObj);
            } else if (this.formSrc) {
                return new Formio(this.formSrc).loadForm({ params: { live: 1 } }).then(formObj => {
                    this.formObj = formObj;
                    return formObj;
                });
            }
            return NativePromise.resolve();
        }
        checkComponentValidity(data, dirty, row) {
            if (this.subForm) {
                return this.subForm.checkValidity(this.dataValue.data, dirty);
            }
            return super.checkComponentValidity(data, dirty, row);
        }
        checkComponentConditions(data, flags, row) {
            const visible = super.checkComponentConditions(data, flags, row);
            if (!visible) {
                return visible;
            }
            if (this.subForm && this.subForm.hasCondition()) {
                return this.subForm.checkConditions(this.dataValue.data);
            }
            return visible;
        }
        calculateValue(data, flags, row) {
            if (this.subForm) {
                return this.subForm.calculateValue(this.dataValue.data, flags);
            }
            return super.calculateValue(data, flags, row);
        }
        setPristine(pristine) {
            super.setPristine(pristine);
            if (this.subForm) {
                this.subForm.setPristine(pristine);
            }
        }
        get shouldSubmit() {
            return this.subFormReady && (!this.component.hasOwnProperty('reference') || this.component.reference) && !this.isHidden();
        }
        getSubFormData() {
            if (_.get(this.subForm, 'form.display') === 'pdf') {
                return this.subForm.getSubmission();
            } else {
                return NativePromise.resolve(this.dataValue);
            }
        }
        submitSubForm(rejectOnError) {
            if (this.shouldSubmit) {
                const subFormReady = this.subFormReady || this.createSubForm();
                return subFormReady.then(() => {
                    if (!this.subForm) {
                        return this.dataValue;
                    }
                    this.subForm.nosubmit = false;
                    return this.subForm.submitForm().then(result => {
                        this.subForm.loading = false;
                        this.dataValue = result.submission;
                        return this.dataValue;
                    }).catch(err => {
                        if (rejectOnError) {
                            this.subForm.onSubmissionError(err);
                            return NativePromise.reject(err);
                        } else {
                            return {};
                        }
                    });
                });
            }
            return this.getSubFormData();
        }
        beforePage(next) {
            return this.submitSubForm(true).then(() => super.beforePage(next));
        }
        beforeSubmit() {
            const submission = this.dataValue;
            if (submission && submission._id && submission.form) {
                this.dataValue = submission;
                return NativePromise.resolve(this.dataValue);
            }
            return this.submitSubForm(false).then(() => {
                return this.dataValue;
            }).then(() => super.beforeSubmit());
        }
        isHidden() {
            if (!this.visible) {
                return true;
            }
            return !super.checkConditions(this.rootValue);
        }
        setValue(submission, flags = {}) {
            const changed = super.setValue(submission, flags);
            if (this.subForm) {
                if (submission && submission._id && this.subForm.formio && _.isEmpty(submission.data)) {
                    const submissionUrl = `${ this.subForm.formio.formsUrl }/${ submission.form }/submission/${ submission._id }`;
                    this.subForm.setUrl(submissionUrl, this.options);
                    this.subForm.loadSubmission();
                } else {
                    this.subForm.setValue(submission, flags);
                }
            }
            return changed;
        }
        getValue() {
            if (this.subForm) {
                return this.subForm.getValue();
            }
            return this.dataValue;
        }
        get errors() {
            let errors = super.errors;
            if (this.subForm) {
                errors = errors.concat(this.subForm.errors);
            }
            return errors;
        }
        updateSubFormVisibility() {
            if (this.subForm) {
                this.subForm.parentVisible = this.visible;
            }
        }
        get visible() {
            return super.visible;
        }
        set visible(value) {
            super.visible = value;
            this.updateSubFormVisibility();
        }
        get parentVisible() {
            return super.parentVisible;
        }
        set parentVisible(value) {
            super.parentVisible = value;
            this.updateSubFormVisibility();
        }
        isInternalEvent(event) {
            switch (event) {
            case 'focus':
            case 'blur':
            case 'componentChange':
            case 'componentError':
            case 'error':
            case 'formLoad':
            case 'languageChanged':
            case 'render':
            case 'checkValidity':
            case 'initialized':
            case 'submit':
            case 'submitButton':
            case 'nosubmit':
            case 'updateComponent':
            case 'submitDone':
            case 'submissionDeleted':
            case 'requestDone':
            case 'nextPage':
            case 'prevPage':
            case 'wizardNavigationClicked':
            case 'updateWizardNav':
            case 'restoreDraft':
            case 'saveDraft':
            case 'saveComponent':
            case 'pdfUploaded':
                return true;
            default:
                return false;
            }
        }
        createEmitter() {
            const emitter = new EventEmitter({
                wildcard: false,
                maxListeners: 0
            });
            const nativeEmit = emitter.emit;
            const that = this;
            emitter.emit = function (event, ...args) {
                const eventType = event.replace(`${ that.options.namespace }.`, '');
                nativeEmit.call(this, event, ...args);
                if (!that.isInternalEvent(eventType)) {
                    that.emit(eventType, ...args);
                }
            };
            return emitter;
        }
        deleteValue() {
            super.setValue(null, {
                noUpdateEvent: true,
                noDefault: true
            });
            this.unset();
        }
    };
});
define('skylark-formio/components/hidden/Hidden',[
    '../_classes/input/Input'
], function (Input) {
    'use strict';
    return class HiddenComponent extends Input {
        static schema(...extend) {
            return Input.schema({
                type: 'hidden',
                tableView: false,
                inputType: 'hidden'
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Hidden',
                group: 'data',
                icon: 'user-secret',
                weight: 0,
                documentation: 'http://help.form.io/userguide/#hidden',
                schema: HiddenComponent.schema()
            };
        }
        get defaultSchema() {
            return HiddenComponent.schema();
        }
        get inputInfo() {
            const info = super.elementInfo();
            info.type = 'input';
            info.attr.type = 'hidden';
            info.changeEvent = 'change';
            return info;
        }
        validateMultiple() {
            return false;
        }
        labelIsHidden() {
            return true;
        }
        get emptyValue() {
            return '';
        }
        setValue(value, flags = {}) {
            return this.updateValue(value, flags);
        }
        getValue() {
            return this.dataValue;
        }
    };
});
define('skylark-formio/components/html/HTML',[
    '../_classes/component/Component',
    'skylark-lodash'
], function (Component, _) {
    'use strict';
    return class HTMLComponent extends Component {
        static schema(...extend) {
            return Component.schema({
                label: 'HTML',
                type: 'htmlelement',
                tag: 'p',
                attrs: [],
                content: '',
                input: false,
                persistent: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'HTML Element',
                group: 'layout',
                icon: 'code',
                weight: 0,
                documentation: 'http://help.form.io/userguide/#html-element-component',
                schema: HTMLComponent.schema()
            };
        }
        get defaultSchema() {
            return HTMLComponent.schema();
        }
        get content() {
            if (this.builderMode) {
                return this.component.content;
            }
            const submission = _.get(this.root, 'submission', {});
            return this.component.content ? this.interpolate(this.component.content, {
                metadata: submission.metadata || {},
                submission: submission,
                data: this.rootValue,
                row: this.data
            }) : '';
        }
        get singleTags() {
            return [
                'br',
                'img',
                'hr'
            ];
        }
        checkRefreshOn(changed) {
            super.checkRefreshOn(changed);
            if (!this.builderMode && this.component.refreshOnChange && this.element && this.conditionallyVisible(this.data, this.row)) {
                this.setContent(this.element, this.renderContent());
            }
        }
        renderContent() {
            const submission = _.get(this.root, 'submission', {});
            return this.renderTemplate('html', {
                component: this.component,
                tag: this.component.tag,
                attrs: (this.component.attrs || []).map(attr => {
                    return {
                        attr: attr.attr,
                        value: this.interpolate(attr.value, {
                            metadata: submission.metadata || {},
                            submission: submission,
                            data: this.rootValue,
                            row: this.data
                        })
                    };
                }),
                content: this.content,
                singleTags: this.singleTags
            });
        }
        render() {
            return super.render(this.renderContent());
        }
        attach(element) {
            this.loadRefs(element, { html: 'single' });
            return super.attach(element);
        }
    };
});
define('skylark-formio/components/panel/Panel',[
    '../_classes/nested/NestedComponent'
], function (NestedComponent) {
    'use strict';
    return class PanelComponent extends NestedComponent {
        static schema(...extend) {
            return NestedComponent.schema({
                label: 'Panel',
                type: 'panel',
                key: 'panel',
                title: 'Panel',
                theme: 'default',
                breadcrumb: 'default',
                components: [],
                clearOnHide: false,
                input: false,
                tableView: false,
                persistent: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Panel',
                icon: 'list-alt',
                group: 'layout',
                documentation: 'http://help.form.io/userguide/#panels',
                weight: 30,
                schema: PanelComponent.schema()
            };
        }
        get defaultSchema() {
            return PanelComponent.schema();
        }
        checkValidity(data, dirty, row) {
            if (!this.checkCondition(row, data)) {
                this.setCustomValidity('');
                return true;
            }
            return this.getComponents().reduce((check, comp) => {
                if (!comp.checkValidity(data, dirty, row) && this.collapsed) {
                    this.collapsed = false;
                }
                return comp.checkValidity(data, dirty, row) && check;
            }, super.checkValidity(data, dirty, row));
        }
        get templateName() {
            return 'panel';
        }
        constructor(...args) {
            super(...args);
            this.noField = true;
        }
    };
});
define('skylark-formio/components/password/Password',[
    '../textfield/TextField',
    'skylark-lodash'
], function (TextFieldComponent, _) {
    'use strict';
    return class PasswordComponent extends TextFieldComponent {
        static schema(...extend) {
            return TextFieldComponent.schema({
                type: 'password',
                label: 'Password',
                key: 'password',
                protected: true,
                tableView: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Password',
                icon: 'asterisk',
                group: 'basic',
                documentation: 'http://help.form.io/userguide/#password',
                weight: 40,
                schema: PasswordComponent.schema()
            };
        }
        get defaultSchema() {
            return _.omit(PasswordComponent.schema(), [
                'protected',
                'tableView'
            ]);
        }
        get inputInfo() {
            const info = super.inputInfo;
            info.attr.type = 'password';
            return info;
        }
    };
});
define('skylark-formio/components/phonenumber/PhoneNumber',[
    '../textfield/TextField'
], function (TextFieldComponent) {
    'use strict';
    return class PhoneNumberComponent extends TextFieldComponent {
        static schema(...extend) {
            return TextFieldComponent.schema({
                type: 'phoneNumber',
                label: 'Phone Number',
                key: 'phoneNumber',
                inputType: 'tel',
                inputMask: '(999) 999-9999'
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Phone Number',
                group: 'advanced',
                icon: 'phone-square',
                weight: 30,
                documentation: 'http://help.form.io/userguide/#phonenumber',
                schema: PhoneNumberComponent.schema()
            };
        }
        get defaultSchema() {
            return PhoneNumberComponent.schema();
        }
    };
});
define('skylark-formio/components/radio/Radio',[
    'skylark-lodash',
    '../_classes/field/Field'
], function (_, Field) {
    'use strict';
    return class RadioComponent extends Field {
        static schema(...extend) {
            return Field.schema({
                type: 'radio',
                inputType: 'radio',
                label: 'Radio',
                key: 'radio',
                values: [{
                        label: '',
                        value: ''
                    }],
                fieldSet: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Radio',
                group: 'basic',
                icon: 'dot-circle-o',
                weight: 80,
                documentation: 'http://help.form.io/userguide/#radio',
                schema: RadioComponent.schema()
            };
        }
        constructor(component, options, data) {
            super(component, options, data);
            this.previousValue = this.dataValue || null;
        }
        get defaultSchema() {
            return RadioComponent.schema();
        }
        get inputInfo() {
            const info = super.elementInfo();
            info.type = 'input';
            info.changeEvent = 'click';
            info.attr.class = 'form-check-input';
            info.attr.name = info.attr.name += `[${ this.id }]`;
            return info;
        }
        get emptyValue() {
            return '';
        }
        get isRadio() {
            return this.component.inputType === 'radio';
        }
        render() {
            return super.render(this.renderTemplate('radio', {
                input: this.inputInfo,
                inline: this.component.inline,
                values: this.component.values,
                value: this.dataValue,
                row: this.row
            }));
        }
        attach(element) {
            this.loadRefs(element, {
                input: 'multiple',
                wrapper: 'multiple'
            });
            this.refs.input.forEach((input, index) => {
                this.addEventListener(input, this.inputInfo.changeEvent, () => this.updateValue(null, { modified: true }));
                this.addShortcut(input, this.component.values[index].shortcut);
                if (this.isRadio) {
                    input.checked = this.dataValue === input.value;
                    this.addEventListener(input, 'keyup', event => {
                        if (event.key === ' ' && this.dataValue === input.value) {
                            event.preventDefault();
                            this.updateValue(null, { modified: true });
                        }
                    });
                }
            });
            return super.attach(element);
        }
        detach(element) {
            if (element && this.refs.input) {
                this.refs.input.forEach((input, index) => {
                    this.removeShortcut(input, this.component.values[index].shortcut);
                });
            }
        }
        getValue() {
            if (this.viewOnly || !this.refs.input || !this.refs.input.length) {
                return this.dataValue;
            }
            let value = this.dataValue;
            this.refs.input.forEach(input => {
                if (input.checked) {
                    value = input.value;
                }
            });
            return value;
        }
        getValueAsString(value) {
            if (!value) {
                return '';
            }
            if (!_.isString(value)) {
                return _.toString(value);
            }
            const option = _.find(this.component.values, v => v.value === value);
            return _.get(option, 'label', '');
        }
        setValueAt(index, value) {
            if (this.refs.input && this.refs.input[index] && value !== null && value !== undefined) {
                const inputValue = this.refs.input[index].value;
                this.refs.input[index].checked = inputValue === value.toString();
            }
        }
        updateValue(value, flags) {
            const changed = super.updateValue(value, flags);
            if (changed && this.refs.wrapper) {
                const value = this.dataValue;
                const optionSelectedClass = 'radio-selected';
                this.refs.wrapper.forEach((wrapper, index) => {
                    const input = this.refs.input[index];
                    if (input && input.value.toString() === value.toString()) {
                        this.addClass(wrapper, optionSelectedClass);
                    } else {
                        this.removeClass(wrapper, optionSelectedClass);
                    }
                });
            }
            if (!flags || !flags.modified || !this.isRadio) {
                return changed;
            }
            this.currentValue = this.dataValue;
            const shouldResetValue = !(flags && flags.noUpdateEvent) && this.previousValue === this.currentValue;
            if (shouldResetValue) {
                this.resetValue();
                this.triggerChange();
            }
            this.previousValue = this.dataValue;
            return changed;
        }
        normalizeValue(value) {
            const dataType = this.component['dataType'] || 'auto';
            switch (dataType) {
            case 'auto':
                if (!isNaN(parseFloat(value)) && isFinite(value)) {
                    value = +value;
                }
                if (value === 'true') {
                    value = true;
                }
                if (value === 'false') {
                    value = false;
                }
                break;
            case 'number':
                value = +value;
                break;
            case 'string':
                if (typeof value === 'object') {
                    value = JSON.stringify(value);
                } else {
                    value = value.toString();
                }
                break;
            case 'boolean':
                value = !(!value || value.toString() === 'false');
                break;
            }
            return super.normalizeValue(value);
        }
    };
});
define('skylark-formio/components/recaptcha/ReCaptcha',[
    '../_classes/component/Component',
    '../../Formio',
    'skylark-lodash',
    '../../vendors/getify/npo'
], function (Component, Formio, _, NativePromise) {
    'use strict';

    var _get = _.get;

    return class ReCaptchaComponent extends Component {
        static schema(...extend) {
            return Component.schema({
                type: 'recaptcha',
                key: 'recaptcha',
                label: 'reCAPTCHA'
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'reCAPTCHA',
                group: 'premium',
                icon: 'refresh',
                documentation: 'http://help.form.io/userguide/#recaptcha',
                weight: 40,
                schema: ReCaptchaComponent.schema()
            };
        }
        render() {
            if (this.builderMode) {
                return super.render('reCAPTCHA');
            } else {
                return super.render('', true);
            }
        }
        createInput() {
            if (this.builderMode) {
                this.append(this.text(this.name));
            } else {
                const siteKey = _get(this.root.form, 'settings.recaptcha.siteKey');
                if (siteKey) {
                    const recaptchaApiScriptUrl = `https://www.google.com/recaptcha/api.js?render=${ siteKey }`;
                    this.recaptchaApiReady = Formio.requireLibrary('googleRecaptcha', 'grecaptcha', recaptchaApiScriptUrl, true);
                } else {
                    console.warn('There is no Site Key specified in settings in form JSON');
                }
            }
        }
        createLabel() {
            return;
        }
        verify(actionName) {
            const siteKey = _get(this.root.form, 'settings.recaptcha.siteKey');
            if (!siteKey) {
                console.warn('There is no Site Key specified in settings in form JSON');
                return;
            }
            if (!this.recaptchaApiReady) {
                const recaptchaApiScriptUrl = `https://www.google.com/recaptcha/api.js?render=${ _get(this.root.form, 'settings.recaptcha.siteKey') }`;
                this.recaptchaApiReady = Formio.requireLibrary('googleRecaptcha', 'grecaptcha', recaptchaApiScriptUrl, true);
            }
            if (this.recaptchaApiReady) {
                this.recaptchaVerifiedPromise = new NativePromise((resolve, reject) => {
                    this.recaptchaApiReady.then(() => {
                        grecaptcha.ready(() => {
                            grecaptcha.execute(siteKey, { action: actionName }).then(token => {
                                return this.sendVerificationRequest(token);
                            }).then(verificationResult => {
                                this.setValue(verificationResult);
                                return resolve(verificationResult);
                            });
                        });
                    }).catch(() => {
                        return reject();
                    });
                });
            }
        }
        beforeSubmit() {
            if (this.recaptchaVerifiedPromise) {
                return this.recaptchaVerifiedPromise.then(() => super.beforeSubmit());
            }
            return super.beforeSubmit();
        }
        sendVerificationRequest(token) {
            return Formio.makeStaticRequest(`${ Formio.projectUrl }/recaptcha?recaptchaToken=${ token }`);
        }
        setValue(value) {
            const changed = this.hasChanged(value, this.dataValue);
            this.dataValue = value;
            return changed;
        }
        getValue() {
            return this.dataValue;
        }
    };
});
define('skylark-choices/vendors/fuse',[],function () { 
  'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function isArray(value) {
    return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);
  } // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js

  var INFINITY = 1 / 0;
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }
  function isString(value) {
    return typeof value === 'string';
  }
  function isNumber(value) {
    return typeof value === 'number';
  } // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js

  function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';
  }
  function isObject(value) {
    return _typeof(value) === 'object';
  } // Checks if `value` is object-like.

  function isObjectLike(value) {
    return isObject(value) && value !== null;
  }
  function isDefined(value) {
    return value !== undefined && value !== null;
  }
  function isBlank(value) {
    return !value.trim().length;
  } // Gets the `toStringTag` of `value`.
  // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js

  function getTag(value) {
    return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);
  }

  var EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';
  var INCORRECT_INDEX_TYPE = "Incorrect 'index' type";
  var LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = function LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key) {
    return "Invalid value for key ".concat(key);
  };
  var PATTERN_LENGTH_TOO_LARGE = function PATTERN_LENGTH_TOO_LARGE(max) {
    return "Pattern length exceeds max of ".concat(max, ".");
  };
  var MISSING_KEY_PROPERTY = function MISSING_KEY_PROPERTY(name) {
    return "Missing ".concat(name, " property in key");
  };
  var INVALID_KEY_WEIGHT_VALUE = function INVALID_KEY_WEIGHT_VALUE(key) {
    return "Property 'weight' in key '".concat(key, "' must be a positive integer");
  };

  var hasOwn = Object.prototype.hasOwnProperty;

  var KeyStore = /*#__PURE__*/function () {
    function KeyStore(keys) {
      var _this = this;

      _classCallCheck(this, KeyStore);

      this._keys = [];
      this._keyMap = {};
      var totalWeight = 0;
      keys.forEach(function (key) {
        var obj = createKey(key);
        totalWeight += obj.weight;

        _this._keys.push(obj);

        _this._keyMap[obj.id] = obj;
        totalWeight += obj.weight;
      }); // Normalize weights so that their sum is equal to 1

      this._keys.forEach(function (key) {
        key.weight /= totalWeight;
      });
    }

    _createClass(KeyStore, [{
      key: "get",
      value: function get(keyId) {
        return this._keyMap[keyId];
      }
    }, {
      key: "keys",
      value: function keys() {
        return this._keys;
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return JSON.stringify(this._keys);
      }
    }]);

    return KeyStore;
  }();
  function createKey(key) {
    var path = null;
    var id = null;
    var src = null;
    var weight = 1;

    if (isString(key) || isArray(key)) {
      src = key;
      path = createKeyPath(key);
      id = createKeyId(key);
    } else {
      if (!hasOwn.call(key, 'name')) {
        throw new Error(MISSING_KEY_PROPERTY('name'));
      }

      var name = key.name;
      src = name;

      if (hasOwn.call(key, 'weight')) {
        weight = key.weight;

        if (weight <= 0) {
          throw new Error(INVALID_KEY_WEIGHT_VALUE(name));
        }
      }

      path = createKeyPath(name);
      id = createKeyId(name);
    }

    return {
      path: path,
      id: id,
      weight: weight,
      src: src
    };
  }
  function createKeyPath(key) {
    return isArray(key) ? key : key.split('.');
  }
  function createKeyId(key) {
    return isArray(key) ? key.join('.') : key;
  }

  function get(obj, path) {
    var list = [];
    var arr = false;

    var deepGet = function deepGet(obj, path, index) {
      if (!isDefined(obj)) {
        return;
      }

      if (!path[index]) {
        // If there's no path left, we've arrived at the object we care about.
        list.push(obj);
      } else {
        var key = path[index];
        var value = obj[key];

        if (!isDefined(value)) {
          return;
        } // If we're at the last value in the path, and if it's a string/number/bool,
        // add it to the list


        if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {
          list.push(toString(value));
        } else if (isArray(value)) {
          arr = true; // Search each item in the array.

          for (var i = 0, len = value.length; i < len; i += 1) {
            deepGet(value[i], path, index + 1);
          }
        } else if (path.length) {
          // An object. Recurse further.
          deepGet(value, path, index + 1);
        }
      }
    }; // Backwards compatibility (since path used to be a string)


    deepGet(obj, isString(path) ? path.split('.') : path, 0);
    return arr ? list : list[0];
  }

  var MatchOptions = {
    // Whether the matches should be included in the result set. When `true`, each record in the result
    // set will include the indices of the matched characters.
    // These can consequently be used for highlighting purposes.
    includeMatches: false,
    // When `true`, the matching function will continue to the end of a search pattern even if
    // a perfect match has already been located in the string.
    findAllMatches: false,
    // Minimum number of characters that must be matched before a result is considered a match
    minMatchCharLength: 1
  };
  var BasicOptions = {
    // When `true`, the algorithm continues searching to the end of the input even if a perfect
    // match is found before the end of the same input.
    isCaseSensitive: false,
    // When true, the matching function will continue to the end of a search pattern even if
    includeScore: false,
    // List of properties that will be searched. This also supports nested properties.
    keys: [],
    // Whether to sort the result list, by score
    shouldSort: true,
    // Default sort function: sort by ascending score, ascending index
    sortFn: function sortFn(a, b) {
      return a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1;
    }
  };
  var FuzzyOptions = {
    // Approximately where in the text is the pattern expected to be found?
    location: 0,
    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match
    // (of both letters and location), a threshold of '1.0' would match anything.
    threshold: 0.6,
    // Determines how close the match must be to the fuzzy location (specified above).
    // An exact letter match which is 'distance' characters away from the fuzzy location
    // would score as a complete mismatch. A distance of '0' requires the match be at
    // the exact location specified, a threshold of '1000' would require a perfect match
    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.
    distance: 100
  };
  var AdvancedOptions = {
    // When `true`, it enables the use of unix-like search commands
    useExtendedSearch: false,
    // The get function to use when fetching an object's properties.
    // The default will search nested paths *ie foo.bar.baz*
    getFn: get,
    // When `true`, search will ignore `location` and `distance`, so it won't matter
    // where in the string the pattern appears.
    // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score
    ignoreLocation: false,
    // When `true`, the calculation for the relevance score (used for sorting) will
    // ignore the field-length norm.
    // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm
    ignoreFieldNorm: false
  };
  var Config = _objectSpread2({}, BasicOptions, {}, MatchOptions, {}, FuzzyOptions, {}, AdvancedOptions);

  var SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.
  // Set to 3 decimals to reduce index size.

  function norm() {
    var mantissa = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
    var cache = new Map();
    var m = Math.pow(10, mantissa);
    return {
      get: function get(value) {
        var numTokens = value.match(SPACE).length;

        if (cache.has(numTokens)) {
          return cache.get(numTokens);
        }

        var norm = 1 / Math.sqrt(numTokens); // In place of `toFixed(mantissa)`, for faster computation

        var n = parseFloat(Math.round(norm * m) / m);
        cache.set(numTokens, n);
        return n;
      },
      clear: function clear() {
        cache.clear();
      }
    };
  }

  var FuseIndex = /*#__PURE__*/function () {
    function FuseIndex() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$getFn = _ref.getFn,
          getFn = _ref$getFn === void 0 ? Config.getFn : _ref$getFn;

      _classCallCheck(this, FuseIndex);

      this.norm = norm(3);
      this.getFn = getFn;
      this.isCreated = false;
      this.setIndexRecords();
    }

    _createClass(FuseIndex, [{
      key: "setSources",
      value: function setSources() {
        var docs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        this.docs = docs;
      }
    }, {
      key: "setIndexRecords",
      value: function setIndexRecords() {
        var records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        this.records = records;
      }
    }, {
      key: "setKeys",
      value: function setKeys() {
        var _this = this;

        var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        this.keys = keys;
        this._keysMap = {};
        keys.forEach(function (key, idx) {
          _this._keysMap[key.id] = idx;
        });
      }
    }, {
      key: "create",
      value: function create() {
        var _this2 = this;

        if (this.isCreated || !this.docs.length) {
          return;
        }

        this.isCreated = true; // List is Array<String>

        if (isString(this.docs[0])) {
          this.docs.forEach(function (doc, docIndex) {
            _this2._addString(doc, docIndex);
          });
        } else {
          // List is Array<Object>
          this.docs.forEach(function (doc, docIndex) {
            _this2._addObject(doc, docIndex);
          });
        }

        this.norm.clear();
      } // Adds a doc to the end of the index

    }, {
      key: "add",
      value: function add(doc) {
        var idx = this.size();

        if (isString(doc)) {
          this._addString(doc, idx);
        } else {
          this._addObject(doc, idx);
        }
      } // Removes the doc at the specified index of the index

    }, {
      key: "removeAt",
      value: function removeAt(idx) {
        this.records.splice(idx, 1); // Change ref index of every subsquent doc

        for (var i = idx, len = this.size(); i < len; i += 1) {
          this.records[i].i -= 1;
        }
      }
    }, {
      key: "getValueForItemAtKeyId",
      value: function getValueForItemAtKeyId(item, keyId) {
        return item[this._keysMap[keyId]];
      }
    }, {
      key: "size",
      value: function size() {
        return this.records.length;
      }
    }, {
      key: "_addString",
      value: function _addString(doc, docIndex) {
        if (!isDefined(doc) || isBlank(doc)) {
          return;
        }

        var record = {
          v: doc,
          i: docIndex,
          n: this.norm.get(doc)
        };
        this.records.push(record);
      }
    }, {
      key: "_addObject",
      value: function _addObject(doc, docIndex) {
        var _this3 = this;

        var record = {
          i: docIndex,
          $: {}
        }; // Iterate over every key (i.e, path), and fetch the value at that key

        this.keys.forEach(function (key, keyIndex) {
          // console.log(key)
          var value = _this3.getFn(doc, key.path);

          if (!isDefined(value)) {
            return;
          }

          if (isArray(value)) {
            (function () {
              var subRecords = [];
              var stack = [{
                nestedArrIndex: -1,
                value: value
              }];

              while (stack.length) {
                var _stack$pop = stack.pop(),
                    nestedArrIndex = _stack$pop.nestedArrIndex,
                    _value = _stack$pop.value;

                if (!isDefined(_value)) {
                  continue;
                }

                if (isString(_value) && !isBlank(_value)) {
                  var subRecord = {
                    v: _value,
                    i: nestedArrIndex,
                    n: _this3.norm.get(_value)
                  };
                  subRecords.push(subRecord);
                } else if (isArray(_value)) {
                  _value.forEach(function (item, k) {
                    stack.push({
                      nestedArrIndex: k,
                      value: item
                    });
                  });
                }
              }

              record.$[keyIndex] = subRecords;
            })();
          } else if (!isBlank(value)) {
            var subRecord = {
              v: value,
              n: _this3.norm.get(value)
            };
            record.$[keyIndex] = subRecord;
          }
        });
        this.records.push(record);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        return {
          keys: this.keys,
          records: this.records
        };
      }
    }]);

    return FuseIndex;
  }();
  function createIndex(keys, docs) {
    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref2$getFn = _ref2.getFn,
        getFn = _ref2$getFn === void 0 ? Config.getFn : _ref2$getFn;

    var myIndex = new FuseIndex({
      getFn: getFn
    });
    myIndex.setKeys(keys.map(createKey));
    myIndex.setSources(docs);
    myIndex.create();
    return myIndex;
  }
  function parseIndex(data) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref3$getFn = _ref3.getFn,
        getFn = _ref3$getFn === void 0 ? Config.getFn : _ref3$getFn;

    var keys = data.keys,
        records = data.records;
    var myIndex = new FuseIndex({
      getFn: getFn
    });
    myIndex.setKeys(keys);
    myIndex.setIndexRecords(records);
    return myIndex;
  }

  function computeScore(pattern) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$errors = _ref.errors,
        errors = _ref$errors === void 0 ? 0 : _ref$errors,
        _ref$currentLocation = _ref.currentLocation,
        currentLocation = _ref$currentLocation === void 0 ? 0 : _ref$currentLocation,
        _ref$expectedLocation = _ref.expectedLocation,
        expectedLocation = _ref$expectedLocation === void 0 ? 0 : _ref$expectedLocation,
        _ref$distance = _ref.distance,
        distance = _ref$distance === void 0 ? Config.distance : _ref$distance,
        _ref$ignoreLocation = _ref.ignoreLocation,
        ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;

    var accuracy = errors / pattern.length;

    if (ignoreLocation) {
      return accuracy;
    }

    var proximity = Math.abs(expectedLocation - currentLocation);

    if (!distance) {
      // Dodge divide by zero error.
      return proximity ? 1.0 : accuracy;
    }

    return accuracy + proximity / distance;
  }

  function convertMaskToIndices() {
    var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Config.minMatchCharLength;
    var indices = [];
    var start = -1;
    var end = -1;
    var i = 0;

    for (var len = matchmask.length; i < len; i += 1) {
      var match = matchmask[i];

      if (match && start === -1) {
        start = i;
      } else if (!match && start !== -1) {
        end = i - 1;

        if (end - start + 1 >= minMatchCharLength) {
          indices.push([start, end]);
        }

        start = -1;
      }
    } // (i-1 - start) + 1 => i - start


    if (matchmask[i - 1] && i - start >= minMatchCharLength) {
      indices.push([start, i - 1]);
    }

    return indices;
  }

  // Machine word size
  var MAX_BITS = 32;

  function search(text, pattern, patternAlphabet) {
    var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        _ref$location = _ref.location,
        location = _ref$location === void 0 ? Config.location : _ref$location,
        _ref$distance = _ref.distance,
        distance = _ref$distance === void 0 ? Config.distance : _ref$distance,
        _ref$threshold = _ref.threshold,
        threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,
        _ref$findAllMatches = _ref.findAllMatches,
        findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,
        _ref$minMatchCharLeng = _ref.minMatchCharLength,
        minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,
        _ref$includeMatches = _ref.includeMatches,
        includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,
        _ref$ignoreLocation = _ref.ignoreLocation,
        ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;

    if (pattern.length > MAX_BITS) {
      throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));
    }

    var patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.

    var textLen = text.length; // Handle the case when location > text.length

    var expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.

    var currentThreshold = threshold; // Is there a nearby exact match? (speedup)

    var bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1
    // OR if `includeMatches` is true.

    var computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices

    var matchMask = computeMatches ? Array(textLen) : [];
    var index; // Get all exact matches, here for speed up

    while ((index = text.indexOf(pattern, bestLocation)) > -1) {
      var score = computeScore(pattern, {
        currentLocation: index,
        expectedLocation: expectedLocation,
        distance: distance,
        ignoreLocation: ignoreLocation
      });
      currentThreshold = Math.min(score, currentThreshold);
      bestLocation = index + patternLen;

      if (computeMatches) {
        var i = 0;

        while (i < patternLen) {
          matchMask[index + i] = 1;
          i += 1;
        }
      }
    } // Reset the best location


    bestLocation = -1;
    var lastBitArr = [];
    var finalScore = 1;
    var binMax = patternLen + textLen;
    var mask = 1 << patternLen - 1;

    for (var _i = 0; _i < patternLen; _i += 1) {
      // Scan for the best match; each iteration allows for one more error.
      // Run a binary search to determine how far from the match location we can stray
      // at this error level.
      var binMin = 0;
      var binMid = binMax;

      while (binMin < binMid) {
        var _score2 = computeScore(pattern, {
          errors: _i,
          currentLocation: expectedLocation + binMid,
          expectedLocation: expectedLocation,
          distance: distance,
          ignoreLocation: ignoreLocation
        });

        if (_score2 <= currentThreshold) {
          binMin = binMid;
        } else {
          binMax = binMid;
        }

        binMid = Math.floor((binMax - binMin) / 2 + binMin);
      } // Use the result from this iteration as the maximum for the next.


      binMax = binMid;
      var start = Math.max(1, expectedLocation - binMid + 1);
      var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array

      var bitArr = Array(finish + 2);
      bitArr[finish + 1] = (1 << _i) - 1;

      for (var j = finish; j >= start; j -= 1) {
        var currentLocation = j - 1;
        var charMatch = patternAlphabet[text.charAt(currentLocation)];

        if (computeMatches) {
          // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)
          matchMask[currentLocation] = +!!charMatch;
        } // First pass: exact match


        bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match

        if (_i) {
          bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];
        }

        if (bitArr[j] & mask) {
          finalScore = computeScore(pattern, {
            errors: _i,
            currentLocation: currentLocation,
            expectedLocation: expectedLocation,
            distance: distance,
            ignoreLocation: ignoreLocation
          }); // This match will almost certainly be better than any existing match.
          // But check anyway.

          if (finalScore <= currentThreshold) {
            // Indeed it is
            currentThreshold = finalScore;
            bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.

            if (bestLocation <= expectedLocation) {
              break;
            } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.


            start = Math.max(1, 2 * expectedLocation - bestLocation);
          }
        }
      } // No hope for a (better) match at greater error levels.


      var _score = computeScore(pattern, {
        errors: _i + 1,
        currentLocation: expectedLocation,
        expectedLocation: expectedLocation,
        distance: distance,
        ignoreLocation: ignoreLocation
      });

      if (_score > currentThreshold) {
        break;
      }

      lastBitArr = bitArr;
    }

    var result = {
      isMatch: bestLocation >= 0,
      // Count exact matches (those with a score of 0) to be "almost" exact
      score: Math.max(0.001, finalScore)
    };

    if (computeMatches) {
      var indices = convertMaskToIndices(matchMask, minMatchCharLength);

      if (!indices.length) {
        result.isMatch = false;
      } else if (includeMatches) {
        result.indices = indices;
      }
    }

    return result;
  }

  function createPatternAlphabet(pattern) {
    var mask = {};

    for (var i = 0, len = pattern.length; i < len; i += 1) {
      var char = pattern.charAt(i);
      mask[char] = (mask[char] || 0) | 1 << len - i - 1;
    }

    return mask;
  }

  var BitapSearch = /*#__PURE__*/function () {
    function BitapSearch(pattern) {
      var _this = this;

      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$location = _ref.location,
          location = _ref$location === void 0 ? Config.location : _ref$location,
          _ref$threshold = _ref.threshold,
          threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,
          _ref$distance = _ref.distance,
          distance = _ref$distance === void 0 ? Config.distance : _ref$distance,
          _ref$includeMatches = _ref.includeMatches,
          includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,
          _ref$findAllMatches = _ref.findAllMatches,
          findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,
          _ref$minMatchCharLeng = _ref.minMatchCharLength,
          minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,
          _ref$isCaseSensitive = _ref.isCaseSensitive,
          isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive,
          _ref$ignoreLocation = _ref.ignoreLocation,
          ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;

      _classCallCheck(this, BitapSearch);

      this.options = {
        location: location,
        threshold: threshold,
        distance: distance,
        includeMatches: includeMatches,
        findAllMatches: findAllMatches,
        minMatchCharLength: minMatchCharLength,
        isCaseSensitive: isCaseSensitive,
        ignoreLocation: ignoreLocation
      };
      this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
      this.chunks = [];

      if (!this.pattern.length) {
        return;
      }

      var addChunk = function addChunk(pattern, startIndex) {
        _this.chunks.push({
          pattern: pattern,
          alphabet: createPatternAlphabet(pattern),
          startIndex: startIndex
        });
      };

      var len = this.pattern.length;

      if (len > MAX_BITS) {
        var i = 0;
        var remainder = len % MAX_BITS;
        var end = len - remainder;

        while (i < end) {
          addChunk(this.pattern.substr(i, MAX_BITS), i);
          i += MAX_BITS;
        }

        if (remainder) {
          var startIndex = len - MAX_BITS;
          addChunk(this.pattern.substr(startIndex), startIndex);
        }
      } else {
        addChunk(this.pattern, 0);
      }
    }

    _createClass(BitapSearch, [{
      key: "searchIn",
      value: function searchIn(text) {
        var _this$options = this.options,
            isCaseSensitive = _this$options.isCaseSensitive,
            includeMatches = _this$options.includeMatches;

        if (!isCaseSensitive) {
          text = text.toLowerCase();
        } // Exact match


        if (this.pattern === text) {
          var _result = {
            isMatch: true,
            score: 0
          };

          if (includeMatches) {
            _result.indices = [[0, text.length - 1]];
          }

          return _result;
        } // Otherwise, use Bitap algorithm


        var _this$options2 = this.options,
            location = _this$options2.location,
            distance = _this$options2.distance,
            threshold = _this$options2.threshold,
            findAllMatches = _this$options2.findAllMatches,
            minMatchCharLength = _this$options2.minMatchCharLength,
            ignoreLocation = _this$options2.ignoreLocation;
        var allIndices = [];
        var totalScore = 0;
        var hasMatches = false;
        this.chunks.forEach(function (_ref2) {
          var pattern = _ref2.pattern,
              alphabet = _ref2.alphabet,
              startIndex = _ref2.startIndex;

          var _search = search(text, pattern, alphabet, {
            location: location + startIndex,
            distance: distance,
            threshold: threshold,
            findAllMatches: findAllMatches,
            minMatchCharLength: minMatchCharLength,
            includeMatches: includeMatches,
            ignoreLocation: ignoreLocation
          }),
              isMatch = _search.isMatch,
              score = _search.score,
              indices = _search.indices;

          if (isMatch) {
            hasMatches = true;
          }

          totalScore += score;

          if (isMatch && indices) {
            allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));
          }
        });
        var result = {
          isMatch: hasMatches,
          score: hasMatches ? totalScore / this.chunks.length : 1
        };

        if (hasMatches && includeMatches) {
          result.indices = allIndices;
        }

        return result;
      }
    }]);

    return BitapSearch;
  }();

  var BaseMatch = /*#__PURE__*/function () {
    function BaseMatch(pattern) {
      _classCallCheck(this, BaseMatch);

      this.pattern = pattern;
    }

    _createClass(BaseMatch, [{
      key: "search",
      value: function search()
      /*text*/
      {}
    }], [{
      key: "isMultiMatch",
      value: function isMultiMatch(pattern) {
        return getMatch(pattern, this.multiRegex);
      }
    }, {
      key: "isSingleMatch",
      value: function isSingleMatch(pattern) {
        return getMatch(pattern, this.singleRegex);
      }
    }]);

    return BaseMatch;
  }();

  function getMatch(pattern, exp) {
    var matches = pattern.match(exp);
    return matches ? matches[1] : null;
  }

  var ExactMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(ExactMatch, _BaseMatch);

    var _super = _createSuper(ExactMatch);

    function ExactMatch(pattern) {
      _classCallCheck(this, ExactMatch);

      return _super.call(this, pattern);
    }

    _createClass(ExactMatch, [{
      key: "search",
      value: function search(text) {
        var isMatch = text === this.pattern;
        return {
          isMatch: isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, this.pattern.length - 1]
        };
      }
    }], [{
      key: "type",
      get: function get() {
        return 'exact';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^="(.*)"$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^=(.*)$/;
      }
    }]);

    return ExactMatch;
  }(BaseMatch);

  var InverseExactMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(InverseExactMatch, _BaseMatch);

    var _super = _createSuper(InverseExactMatch);

    function InverseExactMatch(pattern) {
      _classCallCheck(this, InverseExactMatch);

      return _super.call(this, pattern);
    }

    _createClass(InverseExactMatch, [{
      key: "search",
      value: function search(text) {
        var index = text.indexOf(this.pattern);
        var isMatch = index === -1;
        return {
          isMatch: isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, text.length - 1]
        };
      }
    }], [{
      key: "type",
      get: function get() {
        return 'inverse-exact';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^!"(.*)"$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^!(.*)$/;
      }
    }]);

    return InverseExactMatch;
  }(BaseMatch);

  var PrefixExactMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(PrefixExactMatch, _BaseMatch);

    var _super = _createSuper(PrefixExactMatch);

    function PrefixExactMatch(pattern) {
      _classCallCheck(this, PrefixExactMatch);

      return _super.call(this, pattern);
    }

    _createClass(PrefixExactMatch, [{
      key: "search",
      value: function search(text) {
        var isMatch = text.startsWith(this.pattern);
        return {
          isMatch: isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, this.pattern.length - 1]
        };
      }
    }], [{
      key: "type",
      get: function get() {
        return 'prefix-exact';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^\^"(.*)"$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^\^(.*)$/;
      }
    }]);

    return PrefixExactMatch;
  }(BaseMatch);

  var InversePrefixExactMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(InversePrefixExactMatch, _BaseMatch);

    var _super = _createSuper(InversePrefixExactMatch);

    function InversePrefixExactMatch(pattern) {
      _classCallCheck(this, InversePrefixExactMatch);

      return _super.call(this, pattern);
    }

    _createClass(InversePrefixExactMatch, [{
      key: "search",
      value: function search(text) {
        var isMatch = !text.startsWith(this.pattern);
        return {
          isMatch: isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, text.length - 1]
        };
      }
    }], [{
      key: "type",
      get: function get() {
        return 'inverse-prefix-exact';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^!\^"(.*)"$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^!\^(.*)$/;
      }
    }]);

    return InversePrefixExactMatch;
  }(BaseMatch);

  var SuffixExactMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(SuffixExactMatch, _BaseMatch);

    var _super = _createSuper(SuffixExactMatch);

    function SuffixExactMatch(pattern) {
      _classCallCheck(this, SuffixExactMatch);

      return _super.call(this, pattern);
    }

    _createClass(SuffixExactMatch, [{
      key: "search",
      value: function search(text) {
        var isMatch = text.endsWith(this.pattern);
        return {
          isMatch: isMatch,
          score: isMatch ? 0 : 1,
          indices: [text.length - this.pattern.length, text.length - 1]
        };
      }
    }], [{
      key: "type",
      get: function get() {
        return 'suffix-exact';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^"(.*)"\$$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^(.*)\$$/;
      }
    }]);

    return SuffixExactMatch;
  }(BaseMatch);

  var InverseSuffixExactMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(InverseSuffixExactMatch, _BaseMatch);

    var _super = _createSuper(InverseSuffixExactMatch);

    function InverseSuffixExactMatch(pattern) {
      _classCallCheck(this, InverseSuffixExactMatch);

      return _super.call(this, pattern);
    }

    _createClass(InverseSuffixExactMatch, [{
      key: "search",
      value: function search(text) {
        var isMatch = !text.endsWith(this.pattern);
        return {
          isMatch: isMatch,
          score: isMatch ? 0 : 1,
          indices: [0, text.length - 1]
        };
      }
    }], [{
      key: "type",
      get: function get() {
        return 'inverse-suffix-exact';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^!"(.*)"\$$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^!(.*)\$$/;
      }
    }]);

    return InverseSuffixExactMatch;
  }(BaseMatch);

  var FuzzyMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(FuzzyMatch, _BaseMatch);

    var _super = _createSuper(FuzzyMatch);

    function FuzzyMatch(pattern) {
      var _this;

      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$location = _ref.location,
          location = _ref$location === void 0 ? Config.location : _ref$location,
          _ref$threshold = _ref.threshold,
          threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,
          _ref$distance = _ref.distance,
          distance = _ref$distance === void 0 ? Config.distance : _ref$distance,
          _ref$includeMatches = _ref.includeMatches,
          includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,
          _ref$findAllMatches = _ref.findAllMatches,
          findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,
          _ref$minMatchCharLeng = _ref.minMatchCharLength,
          minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,
          _ref$isCaseSensitive = _ref.isCaseSensitive,
          isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive,
          _ref$ignoreLocation = _ref.ignoreLocation,
          ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation;

      _classCallCheck(this, FuzzyMatch);

      _this = _super.call(this, pattern);
      _this._bitapSearch = new BitapSearch(pattern, {
        location: location,
        threshold: threshold,
        distance: distance,
        includeMatches: includeMatches,
        findAllMatches: findAllMatches,
        minMatchCharLength: minMatchCharLength,
        isCaseSensitive: isCaseSensitive,
        ignoreLocation: ignoreLocation
      });
      return _this;
    }

    _createClass(FuzzyMatch, [{
      key: "search",
      value: function search(text) {
        return this._bitapSearch.searchIn(text);
      }
    }], [{
      key: "type",
      get: function get() {
        return 'fuzzy';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^"(.*)"$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^(.*)$/;
      }
    }]);

    return FuzzyMatch;
  }(BaseMatch);

  var IncludeMatch = /*#__PURE__*/function (_BaseMatch) {
    _inherits(IncludeMatch, _BaseMatch);

    var _super = _createSuper(IncludeMatch);

    function IncludeMatch(pattern) {
      _classCallCheck(this, IncludeMatch);

      return _super.call(this, pattern);
    }

    _createClass(IncludeMatch, [{
      key: "search",
      value: function search(text) {
        var location = 0;
        var index;
        var indices = [];
        var patternLen = this.pattern.length; // Get all exact matches

        while ((index = text.indexOf(this.pattern, location)) > -1) {
          location = index + patternLen;
          indices.push([index, location - 1]);
        }

        var isMatch = !!indices.length;
        return {
          isMatch: isMatch,
          score: isMatch ? 0 : 1,
          indices: indices
        };
      }
    }], [{
      key: "type",
      get: function get() {
        return 'include';
      }
    }, {
      key: "multiRegex",
      get: function get() {
        return /^'"(.*)"$/;
      }
    }, {
      key: "singleRegex",
      get: function get() {
        return /^'(.*)$/;
      }
    }]);

    return IncludeMatch;
  }(BaseMatch);

  var searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];
  var searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together

  var SPACE_RE = / +(?=([^\"]*\"[^\"]*\")*[^\"]*$)/;
  var OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.
  // Example:
  // "^core go$ | rb$ | py$ xy$" => [["^core", "go$"], ["rb$"], ["py$", "xy$"]]

  function parseQuery(pattern) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return pattern.split(OR_TOKEN).map(function (item) {
      var query = item.trim().split(SPACE_RE).filter(function (item) {
        return item && !!item.trim();
      });
      var results = [];

      for (var i = 0, len = query.length; i < len; i += 1) {
        var queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `"hello world"`)

        var found = false;
        var idx = -1;

        while (!found && ++idx < searchersLen) {
          var searcher = searchers[idx];
          var token = searcher.isMultiMatch(queryItem);

          if (token) {
            results.push(new searcher(token, options));
            found = true;
          }
        }

        if (found) {
          continue;
        } // 2. Handle single query matches (i.e, once that are *not* quoted)


        idx = -1;

        while (++idx < searchersLen) {
          var _searcher = searchers[idx];

          var _token = _searcher.isSingleMatch(queryItem);

          if (_token) {
            results.push(new _searcher(_token, options));
            break;
          }
        }
      }

      return results;
    });
  }

  // to a singl match

  var MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);
  /**
   * Command-like searching
   * ======================
   *
   * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,
   * search in a given text.
   *
   * Search syntax:
   *
   * | Token       | Match type                 | Description                            |
   * | ----------- | -------------------------- | -------------------------------------- |
   * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |
   * | `=scheme`   | exact-match                | Items that are `scheme`                |
   * | `'python`   | include-match              | Items that include `python`            |
   * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |
   * | `^java`     | prefix-exact-match         | Items that start with `java`           |
   * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |
   * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |
   * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |
   *
   * A single pipe character acts as an OR operator. For example, the following
   * query matches entries that start with `core` and end with either`go`, `rb`,
   * or`py`.
   *
   * ```
   * ^core go$ | rb$ | py$
   * ```
   */

  var ExtendedSearch = /*#__PURE__*/function () {
    function ExtendedSearch(pattern) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$isCaseSensitive = _ref.isCaseSensitive,
          isCaseSensitive = _ref$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref$isCaseSensitive,
          _ref$includeMatches = _ref.includeMatches,
          includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,
          _ref$minMatchCharLeng = _ref.minMatchCharLength,
          minMatchCharLength = _ref$minMatchCharLeng === void 0 ? Config.minMatchCharLength : _ref$minMatchCharLeng,
          _ref$ignoreLocation = _ref.ignoreLocation,
          ignoreLocation = _ref$ignoreLocation === void 0 ? Config.ignoreLocation : _ref$ignoreLocation,
          _ref$findAllMatches = _ref.findAllMatches,
          findAllMatches = _ref$findAllMatches === void 0 ? Config.findAllMatches : _ref$findAllMatches,
          _ref$location = _ref.location,
          location = _ref$location === void 0 ? Config.location : _ref$location,
          _ref$threshold = _ref.threshold,
          threshold = _ref$threshold === void 0 ? Config.threshold : _ref$threshold,
          _ref$distance = _ref.distance,
          distance = _ref$distance === void 0 ? Config.distance : _ref$distance;

      _classCallCheck(this, ExtendedSearch);

      this.query = null;
      this.options = {
        isCaseSensitive: isCaseSensitive,
        includeMatches: includeMatches,
        minMatchCharLength: minMatchCharLength,
        findAllMatches: findAllMatches,
        ignoreLocation: ignoreLocation,
        location: location,
        threshold: threshold,
        distance: distance
      };
      this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();
      this.query = parseQuery(this.pattern, this.options);
    }

    _createClass(ExtendedSearch, [{
      key: "searchIn",
      value: function searchIn(text) {
        var query = this.query;

        if (!query) {
          return {
            isMatch: false,
            score: 1
          };
        }

        var _this$options = this.options,
            includeMatches = _this$options.includeMatches,
            isCaseSensitive = _this$options.isCaseSensitive;
        text = isCaseSensitive ? text : text.toLowerCase();
        var numMatches = 0;
        var allIndices = [];
        var totalScore = 0; // ORs

        for (var i = 0, qLen = query.length; i < qLen; i += 1) {
          var searchers = query[i]; // Reset indices

          allIndices.length = 0;
          numMatches = 0; // ANDs

          for (var j = 0, pLen = searchers.length; j < pLen; j += 1) {
            var searcher = searchers[j];

            var _searcher$search = searcher.search(text),
                isMatch = _searcher$search.isMatch,
                indices = _searcher$search.indices,
                score = _searcher$search.score;

            if (isMatch) {
              numMatches += 1;
              totalScore += score;

              if (includeMatches) {
                var type = searcher.constructor.type;

                if (MultiMatchSet.has(type)) {
                  allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));
                } else {
                  allIndices.push(indices);
                }
              }
            } else {
              totalScore = 0;
              numMatches = 0;
              allIndices.length = 0;
              break;
            }
          } // OR condition, so if TRUE, return


          if (numMatches) {
            var result = {
              isMatch: true,
              score: totalScore / numMatches
            };

            if (includeMatches) {
              result.indices = allIndices;
            }

            return result;
          }
        } // Nothing was matched


        return {
          isMatch: false,
          score: 1
        };
      }
    }], [{
      key: "condition",
      value: function condition(_, options) {
        return options.useExtendedSearch;
      }
    }]);

    return ExtendedSearch;
  }();

  var registeredSearchers = [];
  function register() {
    registeredSearchers.push.apply(registeredSearchers, arguments);
  }
  function createSearcher(pattern, options) {
    for (var i = 0, len = registeredSearchers.length; i < len; i += 1) {
      var searcherClass = registeredSearchers[i];

      if (searcherClass.condition(pattern, options)) {
        return new searcherClass(pattern, options);
      }
    }

    return new BitapSearch(pattern, options);
  }

  var LogicalOperator = {
    AND: '$and',
    OR: '$or'
  };
  var KeyType = {
    PATH: '$path',
    PATTERN: '$val'
  };

  var isExpression = function isExpression(query) {
    return !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);
  };

  var isPath = function isPath(query) {
    return !!query[KeyType.PATH];
  };

  var isLeaf = function isLeaf(query) {
    return !isArray(query) && isObject(query) && !isExpression(query);
  };

  var convertToExplicit = function convertToExplicit(query) {
    return _defineProperty({}, LogicalOperator.AND, Object.keys(query).map(function (key) {
      return _defineProperty({}, key, query[key]);
    }));
  }; // When `auto` is `true`, the parse function will infer and initialize and add
  // the appropriate `Searcher` instance


  function parse(query, options) {
    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref3$auto = _ref3.auto,
        auto = _ref3$auto === void 0 ? true : _ref3$auto;

    var next = function next(query) {
      var keys = Object.keys(query);
      var isQueryPath = isPath(query);

      if (!isQueryPath && keys.length > 1 && !isExpression(query)) {
        return next(convertToExplicit(query));
      }

      if (isLeaf(query)) {
        var key = isQueryPath ? query[KeyType.PATH] : keys[0];
        var pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];

        if (!isString(pattern)) {
          throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));
        }

        var obj = {
          keyId: createKeyId(key),
          pattern: pattern
        };

        if (auto) {
          obj.searcher = createSearcher(pattern, options);
        }

        return obj;
      }

      var node = {
        children: [],
        operator: keys[0]
      };
      keys.forEach(function (key) {
        var value = query[key];

        if (isArray(value)) {
          value.forEach(function (item) {
            node.children.push(next(item));
          });
        }
      });
      return node;
    };

    if (!isExpression(query)) {
      query = convertToExplicit(query);
    }

    return next(query);
  }

  function computeScore$1(results, _ref) {
    var _ref$ignoreFieldNorm = _ref.ignoreFieldNorm,
        ignoreFieldNorm = _ref$ignoreFieldNorm === void 0 ? Config.ignoreFieldNorm : _ref$ignoreFieldNorm;
    results.forEach(function (result) {
      var totalScore = 1;
      result.matches.forEach(function (_ref2) {
        var key = _ref2.key,
            norm = _ref2.norm,
            score = _ref2.score;
        var weight = key ? key.weight : null;
        totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));
      });
      result.score = totalScore;
    });
  }

  function transformMatches(result, data) {
    var matches = result.matches;
    data.matches = [];

    if (!isDefined(matches)) {
      return;
    }

    matches.forEach(function (match) {
      if (!isDefined(match.indices) || !match.indices.length) {
        return;
      }

      var indices = match.indices,
          value = match.value;
      var obj = {
        indices: indices,
        value: value
      };

      if (match.key) {
        obj.key = match.key.src;
      }

      if (match.idx > -1) {
        obj.refIndex = match.idx;
      }

      data.matches.push(obj);
    });
  }

  function transformScore(result, data) {
    data.score = result.score;
  }

  function format(results, docs) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$includeMatches = _ref.includeMatches,
        includeMatches = _ref$includeMatches === void 0 ? Config.includeMatches : _ref$includeMatches,
        _ref$includeScore = _ref.includeScore,
        includeScore = _ref$includeScore === void 0 ? Config.includeScore : _ref$includeScore;

    var transformers = [];
    if (includeMatches) transformers.push(transformMatches);
    if (includeScore) transformers.push(transformScore);
    return results.map(function (result) {
      var idx = result.idx;
      var data = {
        item: docs[idx],
        refIndex: idx
      };

      if (transformers.length) {
        transformers.forEach(function (transformer) {
          transformer(result, data);
        });
      }

      return data;
    });
  }

  var Fuse = /*#__PURE__*/function () {
    function Fuse(docs) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var index = arguments.length > 2 ? arguments[2] : undefined;

      _classCallCheck(this, Fuse);

      this.options = _objectSpread2({}, Config, {}, options);

      if (this.options.useExtendedSearch && !true) {
        throw new Error(EXTENDED_SEARCH_UNAVAILABLE);
      }

      this._keyStore = new KeyStore(this.options.keys);
      this.setCollection(docs, index);
    }

    _createClass(Fuse, [{
      key: "setCollection",
      value: function setCollection(docs, index) {
        this._docs = docs;

        if (index && !(index instanceof FuseIndex)) {
          throw new Error(INCORRECT_INDEX_TYPE);
        }

        this._myIndex = index || createIndex(this.options.keys, this._docs, {
          getFn: this.options.getFn
        });
      }
    }, {
      key: "add",
      value: function add(doc) {
        if (!isDefined(doc)) {
          return;
        }

        this._docs.push(doc);

        this._myIndex.add(doc);
      }
    }, {
      key: "remove",
      value: function remove() {
        var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {
          return (
            /* doc, idx */
            false
          );
        };
        var results = [];

        for (var i = 0, len = this._docs.length; i < len; i += 1) {
          var doc = this._docs[i];

          if (predicate(doc, i)) {
            this.removeAt(i);
            i -= 1;
            len -= 1;
            results.push(doc);
          }
        }

        return results;
      }
    }, {
      key: "removeAt",
      value: function removeAt(idx) {
        this._docs.splice(idx, 1);

        this._myIndex.removeAt(idx);
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        return this._myIndex;
      }
    }, {
      key: "search",
      value: function search(query) {
        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            _ref$limit = _ref.limit,
            limit = _ref$limit === void 0 ? -1 : _ref$limit;

        var _this$options = this.options,
            includeMatches = _this$options.includeMatches,
            includeScore = _this$options.includeScore,
            shouldSort = _this$options.shouldSort,
            sortFn = _this$options.sortFn,
            ignoreFieldNorm = _this$options.ignoreFieldNorm;
        var results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);
        computeScore$1(results, {
          ignoreFieldNorm: ignoreFieldNorm
        });

        if (shouldSort) {
          results.sort(sortFn);
        }

        if (isNumber(limit) && limit > -1) {
          results = results.slice(0, limit);
        }

        return format(results, this._docs, {
          includeMatches: includeMatches,
          includeScore: includeScore
        });
      }
    }, {
      key: "_searchStringList",
      value: function _searchStringList(query) {
        var searcher = createSearcher(query, this.options);
        var records = this._myIndex.records;
        var results = []; // Iterate over every string in the index

        records.forEach(function (_ref2) {
          var text = _ref2.v,
              idx = _ref2.i,
              norm = _ref2.n;

          if (!isDefined(text)) {
            return;
          }

          var _searcher$searchIn = searcher.searchIn(text),
              isMatch = _searcher$searchIn.isMatch,
              score = _searcher$searchIn.score,
              indices = _searcher$searchIn.indices;

          if (isMatch) {
            results.push({
              item: text,
              idx: idx,
              matches: [{
                score: score,
                value: text,
                norm: norm,
                indices: indices
              }]
            });
          }
        });
        return results;
      }
    }, {
      key: "_searchLogical",
      value: function _searchLogical(query) {
        var _this = this;

        var expression = parse(query, this.options);

        var evaluate = function evaluate(node, item, idx) {
          if (!node.children) {
            var keyId = node.keyId,
                searcher = node.searcher;

            var matches = _this._findMatches({
              key: _this._keyStore.get(keyId),
              value: _this._myIndex.getValueForItemAtKeyId(item, keyId),
              searcher: searcher
            });

            if (matches && matches.length) {
              return [{
                idx: idx,
                item: item,
                matches: matches
              }];
            }

            return [];
          }
          /*eslint indent: [2, 2, {"SwitchCase": 1}]*/


          switch (node.operator) {
            case LogicalOperator.AND:
              {
                var res = [];

                for (var i = 0, len = node.children.length; i < len; i += 1) {
                  var child = node.children[i];
                  var result = evaluate(child, item, idx);

                  if (result.length) {
                    res.push.apply(res, _toConsumableArray(result));
                  } else {
                    return [];
                  }
                }

                return res;
              }

            case LogicalOperator.OR:
              {
                var _res = [];

                for (var _i = 0, _len = node.children.length; _i < _len; _i += 1) {
                  var _child = node.children[_i];

                  var _result = evaluate(_child, item, idx);

                  if (_result.length) {
                    _res.push.apply(_res, _toConsumableArray(_result));

                    break;
                  }
                }

                return _res;
              }
          }
        };

        var records = this._myIndex.records;
        var resultMap = {};
        var results = [];
        records.forEach(function (_ref3) {
          var item = _ref3.$,
              idx = _ref3.i;

          if (isDefined(item)) {
            var expResults = evaluate(expression, item, idx);

            if (expResults.length) {
              // Dedupe when adding
              if (!resultMap[idx]) {
                resultMap[idx] = {
                  idx: idx,
                  item: item,
                  matches: []
                };
                results.push(resultMap[idx]);
              }

              expResults.forEach(function (_ref4) {
                var _resultMap$idx$matche;

                var matches = _ref4.matches;

                (_resultMap$idx$matche = resultMap[idx].matches).push.apply(_resultMap$idx$matche, _toConsumableArray(matches));
              });
            }
          }
        });
        return results;
      }
    }, {
      key: "_searchObjectList",
      value: function _searchObjectList(query) {
        var _this2 = this;

        var searcher = createSearcher(query, this.options);
        var _this$_myIndex = this._myIndex,
            keys = _this$_myIndex.keys,
            records = _this$_myIndex.records;
        var results = []; // List is Array<Object>

        records.forEach(function (_ref5) {
          var item = _ref5.$,
              idx = _ref5.i;

          if (!isDefined(item)) {
            return;
          }

          var matches = []; // Iterate over every key (i.e, path), and fetch the value at that key

          keys.forEach(function (key, keyIndex) {
            matches.push.apply(matches, _toConsumableArray(_this2._findMatches({
              key: key,
              value: item[keyIndex],
              searcher: searcher
            })));
          });

          if (matches.length) {
            results.push({
              idx: idx,
              item: item,
              matches: matches
            });
          }
        });
        return results;
      }
    }, {
      key: "_findMatches",
      value: function _findMatches(_ref6) {
        var key = _ref6.key,
            value = _ref6.value,
            searcher = _ref6.searcher;

        if (!isDefined(value)) {
          return [];
        }

        var matches = [];

        if (isArray(value)) {
          value.forEach(function (_ref7) {
            var text = _ref7.v,
                idx = _ref7.i,
                norm = _ref7.n;

            if (!isDefined(text)) {
              return;
            }

            var _searcher$searchIn2 = searcher.searchIn(text),
                isMatch = _searcher$searchIn2.isMatch,
                score = _searcher$searchIn2.score,
                indices = _searcher$searchIn2.indices;

            if (isMatch) {
              matches.push({
                score: score,
                key: key,
                value: text,
                idx: idx,
                norm: norm,
                indices: indices
              });
            }
          });
        } else {
          var text = value.v,
              norm = value.n;

          var _searcher$searchIn3 = searcher.searchIn(text),
              isMatch = _searcher$searchIn3.isMatch,
              score = _searcher$searchIn3.score,
              indices = _searcher$searchIn3.indices;

          if (isMatch) {
            matches.push({
              score: score,
              key: key,
              value: text,
              norm: norm,
              indices: indices
            });
          }
        }

        return matches;
      }
    }]);

    return Fuse;
  }();

  Fuse.version = '6.4.6';
  Fuse.createIndex = createIndex;
  Fuse.parseIndex = parseIndex;
  Fuse.config = Config;

  {
    Fuse.parseQuery = parse;
  }

  {
    register(ExtendedSearch);
  }

  return Fuse;

});
define('skylark-choices/vendors/is-mergeable-object',[],function(){
	function isMergeableObject(value) {
		return isNonNullObject(value)
			&& !isSpecial(value)
	}

	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}

	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value)

		return stringValue === '[object RegExp]'
			|| stringValue === '[object Date]'
			|| isReactElement(value)
	}

	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === 'function' && Symbol.for
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7

	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE
	}

	return isMergeableObject;
});
define('skylark-choices/vendors/deepmerge',[
	"./is-mergeable-object"
],function(defaultIsMergeableObject){

	function emptyTarget(val) {
		return Array.isArray(val) ? [] : {}
	}

	function cloneUnlessOtherwiseSpecified(value, options) {
		return (options.clone !== false && options.isMergeableObject(value))
			? deepmerge(emptyTarget(value), value, options)
			: value
	}

	function defaultArrayMerge(target, source, options) {
		return target.concat(source).map(function(element) {
			return cloneUnlessOtherwiseSpecified(element, options)
		})
	}

	function getMergeFunction(key, options) {
		if (!options.customMerge) {
			return deepmerge
		}
		var customMerge = options.customMerge(key)
		return typeof customMerge === 'function' ? customMerge : deepmerge
	}

	function getEnumerableOwnPropertySymbols(target) {
		return Object.getOwnPropertySymbols
			? Object.getOwnPropertySymbols(target).filter(function(symbol) {
				return target.propertyIsEnumerable(symbol)
			})
			: []
	}

	function getKeys(target) {
		return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
	}

	function propertyIsOnObject(object, property) {
		try {
			return property in object
		} catch(_) {
			return false
		}
	}

	// Protects from prototype poisoning and unexpected merging up the prototype chain.
	function propertyIsUnsafe(target, key) {
		return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
			&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
				&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
	}

	function mergeObject(target, source, options) {
		var destination = {}
		if (options.isMergeableObject(target)) {
			getKeys(target).forEach(function(key) {
				destination[key] = cloneUnlessOtherwiseSpecified(target[key], options)
			})
		}
		getKeys(source).forEach(function(key) {
			if (propertyIsUnsafe(target, key)) {
				return
			}

			if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
				destination[key] = getMergeFunction(key, options)(target[key], source[key], options)
			} else {
				destination[key] = cloneUnlessOtherwiseSpecified(source[key], options)
			}
		})
		return destination
	}

	function deepmerge(target, source, options) {
		options = options || {}
		options.arrayMerge = options.arrayMerge || defaultArrayMerge
		options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject
		// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
		// implementations can use it. The caller may not replace it.
		options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified

		var sourceIsArray = Array.isArray(source)
		var targetIsArray = Array.isArray(target)
		var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray

		if (!sourceAndTargetTypesMatch) {
			return cloneUnlessOtherwiseSpecified(source, options)
		} else if (sourceIsArray) {
			return options.arrayMerge(target, source, options)
		} else {
			return mergeObject(target, source, options)
		}
	}

	deepmerge.all = function deepmergeAll(array, options) {
		if (!Array.isArray(array)) {
			throw new Error('first argument should be an array')
		}

		return array.reduce(function(prev, next) {
			return deepmerge(prev, next, options)
		}, {})
	}

	return deepmerge
});
define('skylark-redux/utils/symbol-observable',[],function () {
    'use strict';
    return (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();
});
define('skylark-redux/utils/actionTypes',[],function () {
    'use strict';
    const randomString = () => Math.random().toString(36).substring(7).split('').join('.');
    const ActionTypes = {
        INIT: `@@redux/INIT${ randomString() }`,
        REPLACE: `@@redux/REPLACE${ randomString() }`,
        PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${ randomString() }`
    };
    return ActionTypes;
});
define('skylark-redux/utils/isPlainObject',[],function () {
    'use strict';
    return function isPlainObject(obj) {
        if (typeof obj !== 'object' || obj === null)
            return false;
        let proto = obj;
        while (Object.getPrototypeOf(proto) !== null) {
            proto = Object.getPrototypeOf(proto);
        }
        return Object.getPrototypeOf(obj) === proto;
    };
});
define('skylark-redux/utils/kindOf',[],function () {
    'use strict';
    function miniKindOf(val) {
        if (val === void 0)
            return 'undefined';
        if (val === null)
            return 'null';
        const type = typeof val;
        switch (type) {
        case 'boolean':
        case 'string':
        case 'number':
        case 'symbol':
        case 'function': {
                return type;
            }
        default:
            break;
        }
        if (Array.isArray(val))
            return 'array';
        if (isDate(val))
            return 'date';
        if (isError(val))
            return 'error';
        const constructorName = ctorName(val);
        switch (constructorName) {
        case 'Symbol':
        case 'Promise':
        case 'WeakMap':
        case 'WeakSet':
        case 'Map':
        case 'Set':
            return constructorName;
        default:
            break;
        }
        return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
    }
    function ctorName(val) {
        return typeof val.constructor === 'function' ? val.constructor.name : null;
    }
    function isError(val) {
        return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
    }
    function isDate(val) {
        if (val instanceof Date)
            return true;
        return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
    }
    function kindOf(val) {
        let typeOfVal = typeof val;
        typeOfVal = miniKindOf(val);
        return typeOfVal;
    }
    return { kindOf: kindOf };
});
define('skylark-redux/createStore',[
    './utils/symbol-observable',
    './utils/actionTypes',
    './utils/isPlainObject',
    './utils/kindOf'
], function ($$observable, ActionTypes, isPlainObject, a) {
    'use strict';
    return function createStore(reducer, preloadedState, enhancer) {
        if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
            throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');
        }
        if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
            enhancer = preloadedState;
            preloadedState = undefined;
        }
        if (typeof enhancer !== 'undefined') {
            if (typeof enhancer !== 'function') {
                throw new Error(`Expected the enhancer to be a function. Instead, received: '${ a.kindOf(enhancer) }'`);
            }
            return enhancer(createStore)(reducer, preloadedState);
        }
        if (typeof reducer !== 'function') {
            throw new Error(`Expected the root reducer to be a function. Instead, received: '${ a.kindOf(reducer) }'`);
        }
        let currentReducer = reducer;
        let currentState = preloadedState;
        let currentListeners = [];
        let nextListeners = currentListeners;
        let isDispatching = false;
        function ensureCanMutateNextListeners() {
            if (nextListeners === currentListeners) {
                nextListeners = currentListeners.slice();
            }
        }
        function getState() {
            if (isDispatching) {
                throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
            }
            return currentState;
        }
        function subscribe(listener) {
            if (typeof listener !== 'function') {
                throw new Error(`Expected the listener to be a function. Instead, received: '${ a.kindOf(listener) }'`);
            }
            if (isDispatching) {
                throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
            }
            let isSubscribed = true;
            ensureCanMutateNextListeners();
            nextListeners.push(listener);
            return function unsubscribe() {
                if (!isSubscribed) {
                    return;
                }
                if (isDispatching) {
                    throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
                }
                isSubscribed = false;
                ensureCanMutateNextListeners();
                const index = nextListeners.indexOf(listener);
                nextListeners.splice(index, 1);
                currentListeners = null;
            };
        }
        function dispatch(action) {
            if (!isPlainObject(action)) {
                throw new Error(`Actions must be plain objects. Instead, the actual type was: '${ a.kindOf(action) }'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
            }
            if (typeof action.type === 'undefined') {
                throw new Error('Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
            }
            if (isDispatching) {
                throw new Error('Reducers may not dispatch actions.');
            }
            try {
                isDispatching = true;
                currentState = currentReducer(currentState, action);
            } finally {
                isDispatching = false;
            }
            const listeners = currentListeners = nextListeners;
            for (let i = 0; i < listeners.length; i++) {
                const listener = listeners[i];
                listener();
            }
            return action;
        }
        function replaceReducer(nextReducer) {
            if (typeof nextReducer !== 'function') {
                throw new Error(`Expected the nextReducer to be a function. Instead, received: '${ a.kindOf(nextReducer) }`);
            }
            currentReducer = nextReducer;
            dispatch({ type: ActionTypes.REPLACE });
        }
        function observable() {
            const outerSubscribe = subscribe;
            return {
                subscribe(observer) {
                    if (typeof observer !== 'object' || observer === null) {
                        throw new TypeError(`Expected the observer to be an object. Instead, received: '${ a.kindOf(observer) }'`);
                    }
                    function observeState() {
                        if (observer.next) {
                            observer.next(getState());
                        }
                    }
                    observeState();
                    const unsubscribe = outerSubscribe(observeState);
                    return { unsubscribe };
                },
                [$$observable]() {
                    return this;
                }
            };
        }
        dispatch({ type: ActionTypes.INIT });
        return {
            dispatch,
            subscribe,
            getState,
            replaceReducer,
            [$$observable]: observable
        };
    };
});
define('skylark-redux/utils/warning',[],function () {
    'use strict';
    return function warning(message) {
        if (typeof console !== 'undefined' && typeof console.error === 'function') {
            console.error(message);
        }
        try {
            throw new Error(message);
        } catch (e) {
        }
    };
});
define('skylark-redux/combineReducers',[
    './utils/actionTypes',
    './utils/warning',
    './utils/isPlainObject',
    './utils/kindOf'
], function (ActionTypes, warning, isPlainObject, a) {
    'use strict';
    function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
        const reducerKeys = Object.keys(reducers);
        const argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
        if (reducerKeys.length === 0) {
            return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
        }
        if (!isPlainObject(inputState)) {
            return `The ${ argumentName } has unexpected type of "${ a.kindOf(inputState) }". Expected argument to be an object with the following ` + `keys: "${ reducerKeys.join('", "') }"`;
        }
        const unexpectedKeys = Object.keys(inputState).filter(key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);
        unexpectedKeys.forEach(key => {
            unexpectedKeyCache[key] = true;
        });
        if (action && action.type === ActionTypes.REPLACE)
            return;
        if (unexpectedKeys.length > 0) {
            return `Unexpected ${ unexpectedKeys.length > 1 ? 'keys' : 'key' } ` + `"${ unexpectedKeys.join('", "') }" found in ${ argumentName }. ` + `Expected to find one of the known reducer keys instead: ` + `"${ reducerKeys.join('", "') }". Unexpected keys will be ignored.`;
        }
    }
    function assertReducerShape(reducers) {
        Object.keys(reducers).forEach(key => {
            const reducer = reducers[key];
            const initialState = reducer(undefined, { type: ActionTypes.INIT });
            if (typeof initialState === 'undefined') {
                throw new Error(`The slice reducer for key "${ key }" returned undefined during initialization. ` + `If the state passed to the reducer is undefined, you must ` + `explicitly return the initial state. The initial state may ` + `not be undefined. If you don't want to set a value for this reducer, ` + `you can use null instead of undefined.`);
            }
            if (typeof reducer(undefined, { type: ActionTypes.PROBE_UNKNOWN_ACTION() }) === 'undefined') {
                throw new Error(`The slice reducer for key "${ key }" returned undefined when probed with a random type. ` + `Don't try to handle '${ ActionTypes.INIT }' or other actions in "redux/*" ` + `namespace. They are considered private. Instead, you must return the ` + `current state for any unknown actions, unless it is undefined, ` + `in which case you must return the initial state, regardless of the ` + `action type. The initial state may not be undefined, but can be null.`);
            }
        });
    }
    return function combineReducers(reducers) {
        const reducerKeys = Object.keys(reducers);
        const finalReducers = {};
        for (let i = 0; i < reducerKeys.length; i++) {
            const key = reducerKeys[i];
            if (typeof reducers[key] === 'undefined') {
                warning(`No reducer provided for key "${ key }"`);
            }
            if (typeof reducers[key] === 'function') {
                finalReducers[key] = reducers[key];
            }
        }
        const finalReducerKeys = Object.keys(finalReducers);
        let unexpectedKeyCache;

        unexpectedKeyCache = {};

        let shapeAssertionError;
        try {
            assertReducerShape(finalReducers);
        } catch (e) {
            shapeAssertionError = e;
        }
        return function combination(state = {}, action) {
            if (shapeAssertionError) {
                throw shapeAssertionError;
            }
            const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
            if (warningMessage) {
                warning(warningMessage);
            }
            let hasChanged = false;
            const nextState = {};
            for (let i = 0; i < finalReducerKeys.length; i++) {
                const key = finalReducerKeys[i];
                const reducer = finalReducers[key];
                const previousStateForKey = state[key];
                const nextStateForKey = reducer(previousStateForKey, action);
                if (typeof nextStateForKey === 'undefined') {
                    const actionType = action && action.type;
                    throw new Error(`When called with an action of type ${ actionType ? `"${ String(actionType) }"` : '(unknown type)' }, the slice reducer for key "${ key }" returned undefined. ` + `To ignore an action, you must explicitly return the previous state. ` + `If you want this reducer to hold no value, you can return null instead of undefined.`);
                }
                nextState[key] = nextStateForKey;
                hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
            }
            hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
            return hasChanged ? nextState : state;
        };
    };
});
define('skylark-redux/bindActionCreators',['./utils/kindOf'], function (a) {
    'use strict';
    function bindActionCreator(actionCreator, dispatch) {
        return function () {
            return dispatch(actionCreator.apply(this, arguments));
        };
    }
    return function bindActionCreators(actionCreators, dispatch) {
        if (typeof actionCreators === 'function') {
            return bindActionCreator(actionCreators, dispatch);
        }
        if (typeof actionCreators !== 'object' || actionCreators === null) {
            throw new Error(`bindActionCreators expected an object or a function, but instead received: '${ a.kindOf(actionCreators) }'. ` + `Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
        }
        const boundActionCreators = {};
        for (const key in actionCreators) {
            const actionCreator = actionCreators[key];
            if (typeof actionCreator === 'function') {
                boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
            }
        }
        return boundActionCreators;
    };
});
define('skylark-redux/compose',[],function () {
    'use strict';
    return function compose(...funcs) {
        if (funcs.length === 0) {
            return arg => arg;
        }
        if (funcs.length === 1) {
            return funcs[0];
        }
        return funcs.reduce((a, b) => (...args) => a(b(...args)));
    };
});
define('skylark-redux/applyMiddleware',['./compose'], function (compose) {
    'use strict';
    return function applyMiddleware(...middlewares) {
        return createStore => (...args) => {
            const store = createStore(...args);
            let dispatch = () => {
                throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
            };
            const middlewareAPI = {
                getState: store.getState,
                dispatch: (...args) => dispatch(...args)
            };
            const chain = middlewares.map(middleware => middleware(middlewareAPI));
            dispatch = compose(...chain)(store.dispatch);
            return {
                ...store,
                dispatch
            };
        };
    };
});
define('skylark-redux/main',[
    "skylark-langx-ns",
    './createStore',
    './combineReducers',
    './bindActionCreators',
    './applyMiddleware',
    './compose',
    './utils/warning',
    './utils/actionTypes'
], function (
    skylark,
    createStore, 
    combineReducers, 
    bindActionCreators, 
    applyMiddleware, 
    compose, 
    warning, 
    __DO_NOT_USE__ActionTypes
) {
    'use strict';

    function isCrushed() {
    }
    
    return skylark.attach("intg.redux",{
        createStore,
        combineReducers,
        bindActionCreators,
        applyMiddleware,
        compose,
        __DO_NOT_USE__ActionTypes
    });
});
define('skylark-redux', ['skylark-redux/main'], function (main) { return main; });

define('skylark-choices/reducers/items',[],function () {
    'use strict';
    const defaultState = [];
    return function items(state = defaultState, action) {
        switch (action.type) {
        case 'ADD_ITEM': {
                const newState = [
                    ...state,
                    {
                        id: action.id,
                        choiceId: action.choiceId,
                        groupId: action.groupId,
                        value: action.value,
                        label: action.label,
                        active: true,
                        highlighted: false,
                        customProperties: action.customProperties,
                        placeholder: action.placeholder || false,
                        keyCode: null
                    }
                ];
                return newState.map(obj => {
                    const item = obj;
                    item.highlighted = false;
                    return item;
                });
            }
        case 'REMOVE_ITEM': {
                return state.map(obj => {
                    const item = obj;
                    if (item.id === action.id) {
                        item.active = false;
                    }
                    return item;
                });
            }
        case 'HIGHLIGHT_ITEM': {
                return state.map(obj => {
                    const item = obj;
                    if (item.id === action.id) {
                        item.highlighted = action.highlighted;
                    }
                    return item;
                });
            }
        default: {
                return state;
            }
        }
    };
});
define('skylark-choices/reducers/groups',[],function () {
    'use strict';
    const defaultState = [];
    return function groups(state = defaultState, action) {
        switch (action.type) {
        case 'ADD_GROUP': {
                return [
                    ...state,
                    {
                        id: action.id,
                        value: action.value,
                        active: action.active,
                        disabled: action.disabled
                    }
                ];
            }
        case 'CLEAR_CHOICES': {
                return [];
            }
        default: {
                return state;
            }
        }
    };
});
define('skylark-choices/reducers/choices',[],function () {
    'use strict';
    const defaultState = [];
    return function choices(state = defaultState, action) {
        switch (action.type) {
        case 'ADD_CHOICE': {
                return [
                    ...state,
                    {
                        id: action.id,
                        elementId: action.elementId,
                        groupId: action.groupId,
                        value: action.value,
                        label: action.label || action.value,
                        disabled: action.disabled || false,
                        selected: false,
                        active: true,
                        score: 9999,
                        customProperties: action.customProperties,
                        placeholder: action.placeholder || false,
                        keyCode: null
                    }
                ];
            }
        case 'ADD_ITEM': {
                if (action.activateOptions) {
                    return state.map(obj => {
                        const choice = obj;
                        choice.active = action.active;
                        return choice;
                    });
                }
                if (action.choiceId > -1) {
                    return state.map(obj => {
                        const choice = obj;
                        if (choice.id === parseInt(action.choiceId, 10)) {
                            choice.selected = true;
                        }
                        return choice;
                    });
                }
                return state;
            }
        case 'REMOVE_ITEM': {
                if (action.choiceId > -1) {
                    return state.map(obj => {
                        const choice = obj;
                        if (choice.id === parseInt(action.choiceId, 10)) {
                            choice.selected = false;
                        }
                        return choice;
                    });
                }
                return state;
            }
        case 'FILTER_CHOICES': {
                return state.map(obj => {
                    const choice = obj;
                    choice.active = action.results.some(({item, score}) => {
                        if (item.id === choice.id) {
                            choice.score = score;
                            return true;
                        }
                        return false;
                    });
                    return choice;
                });
            }
        case 'ACTIVATE_CHOICES': {
                return state.map(obj => {
                    const choice = obj;
                    choice.active = action.active;
                    return choice;
                });
            }
        case 'CLEAR_CHOICES': {
                return defaultState;
            }
        default: {
                return state;
            }
        }
    };
});
define('skylark-choices/reducers/general',[],function () {
    'use strict';
    const defaultState = { loading: false };
    const general = (state = defaultState, action) => {
        switch (action.type) {
        case 'SET_IS_LOADING': {
                return { loading: action.isLoading };
            }
        default: {
                return state;
            }
        }
    };
    return general;
});
define('skylark-choices/lib/utils',[],function () {
    'use strict';
    const getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min) + min);
    const generateChars = length => Array.from({ length }, () => getRandomNumber(0, 36).toString(36)).join('');
    const generateId = (element, prefix) => {
        let id = element.id || element.name && `${ element.name }-${ generateChars(2) }` || generateChars(4);
        id = id.replace(/(:|\.|\[|\]|,)/g, '');
        id = `${ prefix }-${ id }`;
        return id;
    };
    const getType = obj => Object.prototype.toString.call(obj).slice(8, -1);
    const isType = (type, obj) => obj !== undefined && obj !== null && getType(obj) === type;
    const wrap = (element, wrapper = document.createElement('div')) => {
        if (element.nextSibling) {
            element.parentNode.insertBefore(wrapper, element.nextSibling);
        } else {
            element.parentNode.appendChild(wrapper);
        }
        return wrapper.appendChild(element);
    };
    const getAdjacentEl = (startEl, selector, direction = 1) => {
        if (!(startEl instanceof Element) || typeof selector !== 'string') {
            return undefined;
        }
        const prop = `${ direction > 0 ? 'next' : 'previous' }ElementSibling`;
        let sibling = startEl[prop];
        while (sibling) {
            if (sibling.matches(selector)) {
                return sibling;
            }
            sibling = sibling[prop];
        }
        return sibling;
    };
    const isScrolledIntoView = (element, parent, direction = 1) => {
        if (!element) {
            return false;
        }
        let isVisible;
        if (direction > 0) {
            isVisible = parent.scrollTop + parent.offsetHeight >= element.offsetTop + element.offsetHeight;
        } else {
            isVisible = element.offsetTop >= parent.scrollTop;
        }
        return isVisible;
    };
    const sanitise = value => {
        if (typeof value !== 'string') {
            return value;
        }
        return value.replace(/&/g, '&amp;').replace(/>/g, '&rt;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
    };
    const strToEl = (() => {
        const tmpEl = document.createElement('div');
        return str => {
            const cleanedInput = str.trim();
            tmpEl.innerHTML = cleanedInput;
            const firldChild = tmpEl.children[0];
            while (tmpEl.firstChild) {
                tmpEl.removeChild(tmpEl.firstChild);
            }
            return firldChild;
        };
    })();
    const sortByAlpha = ({value, label = value}, {
        value: value2,
        label: label2 = value2
    }) => label.localeCompare(label2, [], {
        sensitivity: 'base',
        ignorePunctuation: true,
        numeric: true
    });
    const sortByScore = (a, b) => a.score - b.score;
    const dispatchEvent = (element, type, customArgs = null) => {
        const event = new CustomEvent(type, {
            detail: customArgs,
            bubbles: true,
            cancelable: true
        });
        return element.dispatchEvent(event);
    };
    const existsInArray = (array, value, key = 'value') => array.some(item => {
        if (typeof value === 'string') {
            return item[key] === value.trim();
        }
        return item[key] === value;
    });
    const cloneObject = obj => JSON.parse(JSON.stringify(obj));
    const diff = (a, b) => {
        const aKeys = Object.keys(a).sort();
        const bKeys = Object.keys(b).sort();
        return aKeys.filter(i => bKeys.indexOf(i) < 0);
    };
    return {
        getRandomNumber: getRandomNumber,
        generateChars: generateChars,
        generateId: generateId,
        getType: getType,
        isType: isType,
        wrap: wrap,
        getAdjacentEl: getAdjacentEl,
        isScrolledIntoView: isScrolledIntoView,
        sanitise: sanitise,
        strToEl: strToEl,
        sortByAlpha: sortByAlpha,
        sortByScore: sortByScore,
        dispatchEvent: dispatchEvent,
        existsInArray: existsInArray,
        cloneObject: cloneObject,
        diff: diff
    };
});
define('skylark-choices/reducers/index',[
    'skylark-redux',
    './items',
    './groups',
    './choices',
    './general',
    '../lib/utils'
], function (redux, items, groups, choices, general, utils) {
    'use strict';
    const appReducer = redux.combineReducers({
        items,
        groups,
        choices,
        general
    });
    const rootReducer = (passedState, action) => {
        let state = passedState;
        if (action.type === 'CLEAR_ALL') {
            state = undefined;
        } else if (action.type === 'RESET_TO') {
            return utils.cloneObject(action.state);
        }
        return appReducer(state, action);
    };
    return rootReducer;
});
define('skylark-choices/store/store',[
    'skylark-redux',
    '../reducers/index'
], function (redux, rootReducer) {
    'use strict';
    return class Store {
        constructor() {
            this._store = redux.createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());
        }
        subscribe(onChange) {
            this._store.subscribe(onChange);
        }
        dispatch(action) {
            this._store.dispatch(action);
        }
        get state() {
            return this._store.getState();
        }
        get items() {
            return this.state.items;
        }
        get activeItems() {
            return this.items.filter(item => item.active === true);
        }
        get highlightedActiveItems() {
            return this.items.filter(item => item.active && item.highlighted);
        }
        get choices() {
            return this.state.choices;
        }
        get activeChoices() {
            return this.choices.filter(choice => choice.active === true);
        }
        get selectableChoices() {
            return this.choices.filter(choice => choice.disabled !== true);
        }
        get searchableChoices() {
            return this.selectableChoices.filter(choice => choice.placeholder !== true);
        }
        get placeholderChoice() {
            return [...this.choices].reverse().find(choice => choice.placeholder === true);
        }
        get groups() {
            return this.state.groups;
        }
        get activeGroups() {
            const {groups, choices} = this;
            return groups.filter(group => {
                const isActive = group.active === true && group.disabled === false;
                const hasActiveOptions = choices.some(choice => choice.active === true && choice.disabled === false);
                return isActive && hasActiveOptions;
            }, []);
        }
        isLoading() {
            return this.state.general.loading;
        }
        getChoiceById(id) {
            return this.activeChoices.find(choice => choice.id === parseInt(id, 10));
        }
        getGroupById(id) {
            return this.groups.find(group => group.id === id);
        }
    };
});
define('skylark-choices/components/dropdown',[],function () {
    'use strict';
    return class Dropdown {
        constructor({element, type, classNames}) {
            this.element = element;
            this.classNames = classNames;
            this.type = type;
            this.isActive = false;
        }
        get distanceFromTopWindow() {
            return this.element.getBoundingClientRect().bottom;
        }
        getChild(selector) {
            return this.element.querySelector(selector);
        }
        show() {
            this.element.classList.add(this.classNames.activeState);
            this.element.setAttribute('aria-expanded', 'true');
            this.isActive = true;
            return this;
        }
        hide() {
            this.element.classList.remove(this.classNames.activeState);
            this.element.setAttribute('aria-expanded', 'false');
            this.isActive = false;
            return this;
        }
    };
});
define('skylark-choices/constants',['./lib/utils'], function (utils) {
    'use strict';
    const DEFAULT_CLASSNAMES = {
        containerOuter: 'choices',
        containerInner: 'choices__inner',
        input: 'choices__input',
        inputCloned: 'choices__input--cloned',
        list: 'choices__list',
        listItems: 'choices__list--multiple',
        listSingle: 'choices__list--single',
        listDropdown: 'choices__list--dropdown',
        item: 'choices__item',
        itemSelectable: 'choices__item--selectable',
        itemDisabled: 'choices__item--disabled',
        itemChoice: 'choices__item--choice',
        placeholder: 'choices__placeholder',
        group: 'choices__group',
        groupHeading: 'choices__heading',
        button: 'choices__button',
        activeState: 'is-active',
        focusState: 'is-focused',
        openState: 'is-open',
        disabledState: 'is-disabled',
        highlightedState: 'is-highlighted',
        selectedState: 'is-selected',
        flippedState: 'is-flipped',
        loadingState: 'is-loading',
        noResults: 'has-no-results',
        noChoices: 'has-no-choices'
    };
    const DEFAULT_CONFIG = {
        items: [],
        choices: [],
        silent: false,
        renderChoiceLimit: -1,
        maxItemCount: -1,
        addItems: true,
        addItemFilter: null,
        removeItems: true,
        removeItemButton: false,
        editItems: false,
        duplicateItemsAllowed: true,
        delimiter: ',',
        paste: true,
        searchEnabled: true,
        searchChoices: true,
        searchFloor: 1,
        searchResultLimit: 4,
        searchFields: [
            'label',
            'value'
        ],
        position: 'auto',
        resetScrollPosition: true,
        shouldSort: true,
        shouldSortItems: false,
        sorter: utils.sortByAlpha,
        placeholder: true,
        placeholderValue: null,
        searchPlaceholderValue: null,
        prependValue: null,
        appendValue: null,
        renderSelectedChoices: 'auto',
        loadingText: 'Loading...',
        noResultsText: 'No results found',
        noChoicesText: 'No choices to choose from',
        itemSelectText: 'Press to select',
        uniqueItemText: 'Only unique values can be added',
        customAddItemText: 'Only values matching specific conditions can be added',
        addItemText: value => `Press Enter to add <b>"${ utils.sanitise(value) }"</b>`,
        maxItemText: maxItemCount => `Only ${ maxItemCount } values can be added`,
        valueComparer: (value1, value2) => value1 === value2,
        fuseOptions: { includeScore: true },
        callbackOnInit: null,
        callbackOnCreateTemplates: null,
        classNames: DEFAULT_CLASSNAMES
    };
    const EVENTS = {
        showDropdown: 'showDropdown',
        hideDropdown: 'hideDropdown',
        change: 'change',
        choice: 'choice',
        search: 'search',
        addItem: 'addItem',
        removeItem: 'removeItem',
        highlightItem: 'highlightItem',
        highlightChoice: 'highlightChoice'
    };
    const ACTION_TYPES = {
        ADD_CHOICE: 'ADD_CHOICE',
        FILTER_CHOICES: 'FILTER_CHOICES',
        ACTIVATE_CHOICES: 'ACTIVATE_CHOICES',
        CLEAR_CHOICES: 'CLEAR_CHOICES',
        ADD_GROUP: 'ADD_GROUP',
        ADD_ITEM: 'ADD_ITEM',
        REMOVE_ITEM: 'REMOVE_ITEM',
        HIGHLIGHT_ITEM: 'HIGHLIGHT_ITEM',
        CLEAR_ALL: 'CLEAR_ALL'
    };
    const KEY_CODES = {
        BACK_KEY: 46,
        DELETE_KEY: 8,
        ENTER_KEY: 13,
        A_KEY: 65,
        ESC_KEY: 27,
        UP_KEY: 38,
        DOWN_KEY: 40,
        PAGE_UP_KEY: 33,
        PAGE_DOWN_KEY: 34
    };
    const TEXT_TYPE = 'text';
    const SELECT_ONE_TYPE = 'select-one';
    const SELECT_MULTIPLE_TYPE = 'select-multiple';
    const SCROLLING_SPEED = 4;
    return {
        DEFAULT_CLASSNAMES: DEFAULT_CLASSNAMES,
        DEFAULT_CONFIG: DEFAULT_CONFIG,
        EVENTS: EVENTS,
        ACTION_TYPES: ACTION_TYPES,
        KEY_CODES: KEY_CODES,
        TEXT_TYPE: TEXT_TYPE,
        SELECT_ONE_TYPE: SELECT_ONE_TYPE,
        SELECT_MULTIPLE_TYPE: SELECT_MULTIPLE_TYPE,
        SCROLLING_SPEED: SCROLLING_SPEED
    };
});
define('skylark-choices/components/container',[
    '../lib/utils',
    '../constants'
], function (utils, constants) {
    'use strict';
    return class Container {
        constructor({element, type, classNames, position}) {
            this.element = element;
            this.classNames = classNames;
            this.type = type;
            this.position = position;
            this.isOpen = false;
            this.isFlipped = false;
            this.isFocussed = false;
            this.isDisabled = false;
            this.isLoading = false;
            this._onFocus = this._onFocus.bind(this);
            this._onBlur = this._onBlur.bind(this);
        }
        addEventListeners() {
            this.element.addEventListener('focus', this._onFocus);
            this.element.addEventListener('blur', this._onBlur);
        }
        removeEventListeners() {
            this.element.removeEventListener('focus', this._onFocus);
            this.element.removeEventListener('blur', this._onBlur);
        }
        shouldFlip(dropdownPos) {
            if (typeof dropdownPos !== 'number') {
                return false;
            }
            let shouldFlip = false;
            if (this.position === 'auto') {
                shouldFlip = !window.matchMedia(`(min-height: ${ dropdownPos + 1 }px)`).matches;
            } else if (this.position === 'top') {
                shouldFlip = true;
            }
            return shouldFlip;
        }
        setActiveDescendant(activeDescendantID) {
            this.element.setAttribute('aria-activedescendant', activeDescendantID);
        }
        removeActiveDescendant() {
            this.element.removeAttribute('aria-activedescendant');
        }
        open(dropdownPos) {
            this.element.classList.add(this.classNames.openState);
            this.element.setAttribute('aria-expanded', 'true');
            this.isOpen = true;
            if (this.shouldFlip(dropdownPos)) {
                this.element.classList.add(this.classNames.flippedState);
                this.isFlipped = true;
            }
        }
        close() {
            this.element.classList.remove(this.classNames.openState);
            this.element.setAttribute('aria-expanded', 'false');
            this.removeActiveDescendant();
            this.isOpen = false;
            if (this.isFlipped) {
                this.element.classList.remove(this.classNames.flippedState);
                this.isFlipped = false;
            }
        }
        focus() {
            if (!this.isFocussed) {
                this.element.focus();
            }
        }
        addFocusState() {
            this.element.classList.add(this.classNames.focusState);
        }
        removeFocusState() {
            this.element.classList.remove(this.classNames.focusState);
        }
        enable() {
            this.element.classList.remove(this.classNames.disabledState);
            this.element.removeAttribute('aria-disabled');
            if (this.type === constants.SELECT_ONE_TYPE) {
                this.element.setAttribute('tabindex', '0');
            }
            this.isDisabled = false;
        }
        disable() {
            this.element.classList.add(this.classNames.disabledState);
            this.element.setAttribute('aria-disabled', 'true');
            if (this.type === constants.SELECT_ONE_TYPE) {
                this.element.setAttribute('tabindex', '-1');
            }
            this.isDisabled = true;
        }
        wrap(element) {
            utils.wrap(element, this.element);
        }
        unwrap(element) {
            this.element.parentNode.insertBefore(element, this.element);
            this.element.parentNode.removeChild(this.element);
        }
        addLoadingState() {
            this.element.classList.add(this.classNames.loadingState);
            this.element.setAttribute('aria-busy', 'true');
            this.isLoading = true;
        }
        removeLoadingState() {
            this.element.classList.remove(this.classNames.loadingState);
            this.element.removeAttribute('aria-busy');
            this.isLoading = false;
        }
        _onFocus() {
            this.isFocussed = true;
        }
        _onBlur() {
            this.isFocussed = false;
        }
    };
});
define('skylark-choices/components/input',[
    '../lib/utils',
    '../constants'
], function (utils, constants) {
    'use strict';
    return class Input {
        constructor({element, type, classNames, preventPaste}) {
            this.element = element;
            this.type = type;
            this.classNames = classNames;
            this.preventPaste = preventPaste;
            this.isFocussed = this.element === document.activeElement;
            this.isDisabled = element.disabled;
            this._onPaste = this._onPaste.bind(this);
            this._onInput = this._onInput.bind(this);
            this._onFocus = this._onFocus.bind(this);
            this._onBlur = this._onBlur.bind(this);
        }
        set placeholder(placeholder) {
            this.element.placeholder = placeholder;
        }
        get value() {
            return utils.sanitise(this.element.value);
        }
        set value(value) {
            this.element.value = value;
        }
        addEventListeners() {
            this.element.addEventListener('paste', this._onPaste);
            this.element.addEventListener('input', this._onInput, { passive: true });
            this.element.addEventListener('focus', this._onFocus, { passive: true });
            this.element.addEventListener('blur', this._onBlur, { passive: true });
        }
        removeEventListeners() {
            this.element.removeEventListener('input', this._onInput, { passive: true });
            this.element.removeEventListener('paste', this._onPaste);
            this.element.removeEventListener('focus', this._onFocus, { passive: true });
            this.element.removeEventListener('blur', this._onBlur, { passive: true });
        }
        enable() {
            this.element.removeAttribute('disabled');
            this.isDisabled = false;
        }
        disable() {
            this.element.setAttribute('disabled', '');
            this.isDisabled = true;
        }
        focus() {
            if (!this.isFocussed) {
                this.element.focus();
            }
        }
        blur() {
            if (this.isFocussed) {
                this.element.blur();
            }
        }
        clear(setWidth = true) {
            if (this.element.value) {
                this.element.value = '';
            }
            if (setWidth) {
                this.setWidth();
            }
            return this;
        }
        setWidth() {
            const {style, value, placeholder} = this.element;
            style.minWidth = `${ placeholder.length + 1 }ch`;
            style.width = `${ value.length + 1 }ch`;
        }
        setActiveDescendant(activeDescendantID) {
            this.element.setAttribute('aria-activedescendant', activeDescendantID);
        }
        removeActiveDescendant() {
            this.element.removeAttribute('aria-activedescendant');
        }
        _onInput() {
            if (this.type !== constants.SELECT_ONE_TYPE) {
                this.setWidth();
            }
        }
        _onPaste(event) {
            if (this.preventPaste) {
                event.preventDefault();
            }
        }
        _onFocus() {
            this.isFocussed = true;
        }
        _onBlur() {
            this.isFocussed = false;
        }
    };
});
define('skylark-choices/components/list',[
    '../constants'
], function (constants) {
    'use strict';
    return class List {
        constructor({element}) {
            this.element = element;
            this.scrollPos = this.element.scrollTop;
            this.height = this.element.offsetHeight;
        }
        clear() {
            this.element.innerHTML = '';
        }
        append(node) {
            this.element.appendChild(node);
        }
        getChild(selector) {
            return this.element.querySelector(selector);
        }
        hasChildren() {
            return this.element.hasChildNodes();
        }
        scrollToTop() {
            this.element.scrollTop = 0;
        }
        scrollToChildElement(element, direction) {
            if (!element) {
                return;
            }
            const listHeight = this.element.offsetHeight;
            const listScrollPosition = this.element.scrollTop + listHeight;
            const elementHeight = element.offsetHeight;
            const elementPos = element.offsetTop + elementHeight;
            const destination = direction > 0 ? this.element.scrollTop + elementPos - listScrollPosition : element.offsetTop;
            requestAnimationFrame(() => {
                this._animateScroll(destination, direction);
            });
        }
        _scrollDown(scrollPos, strength, destination) {
            const easing = (destination - scrollPos) / strength;
            const distance = easing > 1 ? easing : 1;
            this.element.scrollTop = scrollPos + distance;
        }
        _scrollUp(scrollPos, strength, destination) {
            const easing = (scrollPos - destination) / strength;
            const distance = easing > 1 ? easing : 1;
            this.element.scrollTop = scrollPos - distance;
        }
        _animateScroll(destination, direction) {
            const strength = constants.SCROLLING_SPEED;
            const choiceListScrollTop = this.element.scrollTop;
            let continueAnimation = false;
            if (direction > 0) {
                this._scrollDown(choiceListScrollTop, strength, destination);
                if (choiceListScrollTop < destination) {
                    continueAnimation = true;
                }
            } else {
                this._scrollUp(choiceListScrollTop, strength, destination);
                if (choiceListScrollTop > destination) {
                    continueAnimation = true;
                }
            }
            if (continueAnimation) {
                requestAnimationFrame(() => {
                    this._animateScroll(destination, direction);
                });
            }
        }
    };
});
define('skylark-choices/components/wrapped-element',[
    '../lib/utils'
], function (utils) {
    'use strict';
    return class WrappedElement {
        constructor({element, classNames}) {
            this.element = element;
            this.classNames = classNames;
            if (!(element instanceof HTMLInputElement) && !(element instanceof HTMLSelectElement)) {
                throw new TypeError('Invalid element passed');
            }
            this.isDisabled = false;
        }
        get isActive() {
            return this.element.dataset.choice === 'active';
        }
        get dir() {
            return this.element.dir;
        }
        get value() {
            return this.element.value;
        }
        set value(value) {
            this.element.value = value;
        }
        conceal() {
            this.element.classList.add(this.classNames.input);
            this.element.hidden = true;
            this.element.tabIndex = -1;
            const origStyle = this.element.getAttribute('style');
            if (origStyle) {
                this.element.setAttribute('data-choice-orig-style', origStyle);
            }
            this.element.setAttribute('data-choice', 'active');
        }
        reveal() {
            this.element.classList.remove(this.classNames.input);
            this.element.hidden = false;
            this.element.removeAttribute('tabindex');
            const origStyle = this.element.getAttribute('data-choice-orig-style');
            if (origStyle) {
                this.element.removeAttribute('data-choice-orig-style');
                this.element.setAttribute('style', origStyle);
            } else {
                this.element.removeAttribute('style');
            }
            this.element.removeAttribute('data-choice');
            this.element.value = this.element.value;
        }
        enable() {
            this.element.removeAttribute('disabled');
            this.element.disabled = false;
            this.isDisabled = false;
        }
        disable() {
            this.element.setAttribute('disabled', '');
            this.element.disabled = true;
            this.isDisabled = true;
        }
        triggerEvent(eventType, data) {
            utils.dispatchEvent(this.element, eventType, data);
        }
    };
});
define('skylark-choices/components/wrapped-input',[
    './wrapped-element'
], function (WrappedElement) {
    'use strict';
    return class WrappedInput extends WrappedElement {
        constructor({element, classNames, delimiter}) {
            super({
                element,
                classNames
            });
            this.delimiter = delimiter;
        }
        get value() {
            return this.element.value;
        }
        set value(items) {
            const itemValues = items.map(({value}) => value);
            const joinedValues = itemValues.join(this.delimiter);
            this.element.setAttribute('value', joinedValues);
            this.element.value = joinedValues;
        }
    };
});
define('skylark-choices/components/wrapped-select',[
    './wrapped-element'
], function (WrappedElement) {
    'use strict';
    return class WrappedSelect extends WrappedElement {
        constructor({element, classNames, template}) {
            super({
                element,
                classNames
            });
            this.template = template;
        }
        get placeholderOption() {
            return this.element.querySelector('option[value=""]') || this.element.querySelector('option[placeholder]');
        }
        get optionGroups() {
            return Array.from(this.element.getElementsByTagName('OPTGROUP'));
        }
        get options() {
            return Array.from(this.element.options);
        }
        set options(options) {
            const fragment = document.createDocumentFragment();
            const addOptionToFragment = data => {
                const option = this.template(data);
                fragment.appendChild(option);
            };
            options.forEach(optionData => addOptionToFragment(optionData));
            this.appendDocFragment(fragment);
        }
        appendDocFragment(fragment) {
            this.element.innerHTML = '';
            this.element.appendChild(fragment);
        }
    };
});
define('skylark-choices/components/index',[
    './dropdown',
    './container',
    './input',
    './list',
    './wrapped-input',
    './wrapped-select'
], function (Dropdown, Container, Input, List, WrappedInput, WrappedSelect) {
    'use strict';
    return {
        Dropdown,
        Container,
        Input,
        List,
        WrappedInput,
        WrappedSelect
    };
});
define('skylark-choices/templates',[],function () {
    'use strict';
    const TEMPLATES = {
        containerOuter({containerOuter}, dir, isSelectElement, isSelectOneElement, searchEnabled, passedElementType) {
            const div = Object.assign(document.createElement('div'), { className: containerOuter });
            div.dataset.type = passedElementType;
            if (dir) {
                div.dir = dir;
            }
            if (isSelectOneElement) {
                div.tabIndex = 0;
            }
            if (isSelectElement) {
                div.setAttribute('role', searchEnabled ? 'combobox' : 'listbox');
                if (searchEnabled) {
                    div.setAttribute('aria-autocomplete', 'list');
                }
            }
            div.setAttribute('aria-haspopup', 'true');
            div.setAttribute('aria-expanded', 'false');
            return div;
        },
        containerInner({containerInner}) {
            return Object.assign(document.createElement('div'), { className: containerInner });
        },
        itemList({list, listSingle, listItems}, isSelectOneElement) {
            return Object.assign(document.createElement('div'), { className: `${ list } ${ isSelectOneElement ? listSingle : listItems }` });
        },
        placeholder({placeholder}, value) {
            return Object.assign(document.createElement('div'), {
                className: placeholder,
                innerHTML: value
            });
        },
        item({item, button, highlightedState, itemSelectable, placeholder}, {
            id,
            value,
            label,
            customProperties,
            active,
            disabled,
            highlighted,
            placeholder: isPlaceholder
        }, removeItemButton) {
            const div = Object.assign(document.createElement('div'), {
                className: item,
                innerHTML: label
            });
            Object.assign(div.dataset, {
                item: '',
                id,
                value,
                customProperties
            });
            if (active) {
                div.setAttribute('aria-selected', 'true');
            }
            if (disabled) {
                div.setAttribute('aria-disabled', 'true');
            }
            if (isPlaceholder) {
                div.classList.add(placeholder);
            }
            div.classList.add(highlighted ? highlightedState : itemSelectable);
            if (removeItemButton) {
                if (disabled) {
                    div.classList.remove(itemSelectable);
                }
                div.dataset.deletable = '';
                const REMOVE_ITEM_TEXT = 'Remove item';
                const removeButton = Object.assign(document.createElement('button'), {
                    type: 'button',
                    className: button,
                    innerHTML: REMOVE_ITEM_TEXT
                });
                removeButton.setAttribute('aria-label', `${ REMOVE_ITEM_TEXT }: '${ value }'`);
                removeButton.dataset.button = '';
                div.appendChild(removeButton);
            }
            return div;
        },
        choiceList({list}, isSelectOneElement) {
            const div = Object.assign(document.createElement('div'), { className: list });
            if (!isSelectOneElement) {
                div.setAttribute('aria-multiselectable', 'true');
            }
            div.setAttribute('role', 'listbox');
            return div;
        },
        choiceGroup({group, groupHeading, itemDisabled}, {id, value, disabled}) {
            const div = Object.assign(document.createElement('div'), { className: `${ group } ${ disabled ? itemDisabled : '' }` });
            div.setAttribute('role', 'group');
            Object.assign(div.dataset, {
                group: '',
                id,
                value
            });
            if (disabled) {
                div.setAttribute('aria-disabled', 'true');
            }
            div.appendChild(Object.assign(document.createElement('div'), {
                className: groupHeading,
                innerHTML: value
            }));
            return div;
        },
        choice({item, itemChoice, itemSelectable, selectedState, itemDisabled, placeholder}, {
            id,
            value,
            label,
            groupId,
            elementId,
            disabled: isDisabled,
            selected: isSelected,
            placeholder: isPlaceholder
        }, selectText) {
            const div = Object.assign(document.createElement('div'), {
                id: elementId,
                innerHTML: label,
                className: `${ item } ${ itemChoice }`
            });
            if (isSelected) {
                div.classList.add(selectedState);
            }
            if (isPlaceholder) {
                div.classList.add(placeholder);
            }
            div.setAttribute('role', groupId > 0 ? 'treeitem' : 'option');
            Object.assign(div.dataset, {
                choice: '',
                id,
                value,
                selectText
            });
            if (isDisabled) {
                div.classList.add(itemDisabled);
                div.dataset.choiceDisabled = '';
                div.setAttribute('aria-disabled', 'true');
            } else {
                div.classList.add(itemSelectable);
                div.dataset.choiceSelectable = '';
            }
            return div;
        },
        input({input, inputCloned}, placeholderValue) {
            const inp = Object.assign(document.createElement('input'), {
                type: 'text',
                className: `${ input } ${ inputCloned }`,
                autocomplete: 'off',
                autocapitalize: 'off',
                spellcheck: false
            });
            inp.setAttribute('role', 'textbox');
            inp.setAttribute('aria-autocomplete', 'list');
            inp.setAttribute('aria-label', placeholderValue);
            return inp;
        },
        dropdown({list, listDropdown}) {
            const div = document.createElement('div');
            div.classList.add(list, listDropdown);
            div.setAttribute('aria-expanded', 'false');
            return div;
        },
        notice({item, itemChoice, noResults, noChoices}, innerHTML, type = '') {
            const classes = [
                item,
                itemChoice
            ];
            if (type === 'no-choices') {
                classes.push(noChoices);
            } else if (type === 'no-results') {
                classes.push(noResults);
            }
            return Object.assign(document.createElement('div'), {
                innerHTML,
                className: classes.join(' ')
            });
        },
        option({label, value, customProperties, active, disabled}) {
            const opt = new Option(label, value, false, active);
            if (customProperties) {
                opt.dataset.customProperties = customProperties;
            }
            opt.disabled = disabled;
            return opt;
        }
    };
    return TEMPLATES;
});
define('skylark-choices/actions/choices',[
    '../constants'
], function (constants) {
    'use strict';
    const addChoice = ({
        value, 
        label, 
        id, 
        groupId, 
        disabled, 
        elementId, 
        customProperties, 
        placeholder, 
        keyCode
    }) => ({
        type: constants.ACTION_TYPES.ADD_CHOICE,
        value,
        label,
        id,
        groupId,
        disabled,
        elementId,
        customProperties,
        placeholder,
        keyCode
    });
    const filterChoices = results => ({
        type: constants.ACTION_TYPES.FILTER_CHOICES,
        results
    });
    const activateChoices = (active = true) => ({
        type: constants.ACTION_TYPES.ACTIVATE_CHOICES,
        active
    });
    const clearChoices = () => ({ type: constants.ACTION_TYPES.CLEAR_CHOICES });
    return {
        addChoice: addChoice,
        filterChoices: filterChoices,
        activateChoices: activateChoices,
        clearChoices: clearChoices
    };
});
define('skylark-choices/actions/items',[
    '../constants'
], function (constants) {
    'use strict';
    const addItem = ({value, label, id, choiceId, groupId, customProperties, placeholder, keyCode}) => ({
        type: constants.ACTION_TYPES.ADD_ITEM,
        value,
        label,
        id,
        choiceId,
        groupId,
        customProperties,
        placeholder,
        keyCode
    });
    const removeItem = (id, choiceId) => ({
        type: constants.ACTION_TYPES.REMOVE_ITEM,
        id,
        choiceId
    });
    const highlightItem = (id, highlighted) => ({
        type: constants.ACTION_TYPES.HIGHLIGHT_ITEM,
        id,
        highlighted
    });
    return {
        addItem: addItem,
        removeItem: removeItem,
        highlightItem: highlightItem
    };
});
define('skylark-choices/actions/groups',['../constants'], function (constants) {
    'use strict';
    const addGroup = ({value, id, active, disabled}) => ({
        type: constants.ACTION_TYPES.ADD_GROUP,
        value,
        id,
        active,
        disabled
    });
    return { addGroup: addGroup };
});
define('skylark-choices/actions/misc',[],function () {
    'use strict';
    const clearAll = () => ({ type: 'CLEAR_ALL' });
    const resetTo = state => ({
        type: 'RESET_TO',
        state
    });
    const setIsLoading = isLoading => ({
        type: 'SET_IS_LOADING',
        isLoading
    });
    return {
        clearAll: clearAll,
        resetTo: resetTo,
        setIsLoading: setIsLoading
    };
});
define('skylark-choices/choices',[
    './vendors/fuse',
    './vendors/deepmerge',
    './store/store',
    './components/index',
    './constants',
    './templates',
    './actions/choices',
    './actions/items',
    './actions/groups',
    './actions/misc',
    './lib/utils'
], function (Fuse, merge, Store, components, constants, TEMPLATES, actionsChoices, actionsItems, groups, misc, utils) {
    'use strict';
    const IS_IE11 = '-ms-scroll-limit' in document.documentElement.style && '-ms-ime-align' in document.documentElement.style;
    const USER_DEFAULTS = {};
    class Choices {
        static get defaults() {
            return Object.preventExtensions({
                get options() {
                    return USER_DEFAULTS;
                },
                get templates() {
                    return TEMPLATES;
                }
            });
        }
        constructor(element = '[data-choice]', userConfig = {}) {
            this.config = merge.all([
                constants.DEFAULT_CONFIG,
                Choices.defaults.options,
                userConfig
            ], { arrayMerge: (_, sourceArray) => [...sourceArray] });
            const invalidConfigOptions = utils.diff(this.config, constants.DEFAULT_CONFIG);
            if (invalidConfigOptions.length) {
                console.warn('Unknown config option(s) passed', invalidConfigOptions.join(', '));
            }
            const passedElement = typeof element === 'string' ? document.querySelector(element) : element;
            if (!(passedElement instanceof HTMLInputElement || passedElement instanceof HTMLSelectElement)) {
                throw TypeError('Expected one of the following types text|select-one|select-multiple');
            }
            this._isTextElement = passedElement.type === constants.TEXT_TYPE;
            this._isSelectOneElement = passedElement.type === constants.SELECT_ONE_TYPE;
            this._isSelectMultipleElement = passedElement.type === constants.SELECT_MULTIPLE_TYPE;
            this._isSelectElement = this._isSelectOneElement || this._isSelectMultipleElement;
            this.config.searchEnabled = this._isSelectMultipleElement || this.config.searchEnabled;
            if (![
                    'auto',
                    'always'
                ].includes(this.config.renderSelectedChoices)) {
                this.config.renderSelectedChoices = 'auto';
            }
            if (userConfig.addItemFilter && typeof userConfig.addItemFilter !== 'function') {
                const re = userConfig.addItemFilter instanceof RegExp ? userConfig.addItemFilter : new RegExp(userConfig.addItemFilter);
                this.config.addItemFilter = re.test.bind(re);
            }
            if (this._isTextElement) {
                this.passedElement = new components.WrappedInput({
                    element: passedElement,
                    classNames: this.config.classNames,
                    delimiter: this.config.delimiter
                });
            } else {
                this.passedElement = new components.WrappedSelect({
                    element: passedElement,
                    classNames: this.config.classNames,
                    template: data => this._templates.option(data)
                });
            }
            this.initialised = false;
            this._store = new Store();
            this._initialState = {};
            this._currentState = {};
            this._prevState = {};
            this._currentValue = '';
            this._canSearch = this.config.searchEnabled;
            this._isScrollingOnIe = false;
            this._highlightPosition = 0;
            this._wasTap = true;
            this._placeholderValue = this._generatePlaceholderValue();
            this._baseId = utils.generateId(this.passedElement.element, 'choices-');
            this._direction = this.passedElement.dir;
            if (!this._direction) {
                const {direction: elementDirection} = window.getComputedStyle(this.passedElement.element);
                const {direction: documentDirection} = window.getComputedStyle(document.documentElement);
                if (elementDirection !== documentDirection) {
                    this._direction = elementDirection;
                }
            }
            this._idNames = { itemChoice: 'item-choice' };
            this._presetGroups = this.passedElement.optionGroups;
            this._presetOptions = this.passedElement.options;
            this._presetChoices = this.config.choices;
            this._presetItems = this.config.items;
            if (this.passedElement.value) {
                this._presetItems = this._presetItems.concat(this.passedElement.value.split(this.config.delimiter));
            }
            if (this.passedElement.options) {
                this.passedElement.options.forEach(o => {
                    this._presetChoices.push({
                        value: o.value,
                        label: o.innerHTML,
                        selected: o.selected,
                        disabled: o.disabled || o.parentNode.disabled,
                        placeholder: o.value === '' || o.hasAttribute('placeholder'),
                        customProperties: o.getAttribute('data-custom-properties')
                    });
                });
            }
            this._render = this._render.bind(this);
            this._onFocus = this._onFocus.bind(this);
            this._onBlur = this._onBlur.bind(this);
            this._onKeyUp = this._onKeyUp.bind(this);
            this._onKeyDown = this._onKeyDown.bind(this);
            this._onClick = this._onClick.bind(this);
            this._onTouchMove = this._onTouchMove.bind(this);
            this._onTouchEnd = this._onTouchEnd.bind(this);
            this._onMouseDown = this._onMouseDown.bind(this);
            this._onMouseOver = this._onMouseOver.bind(this);
            this._onFormReset = this._onFormReset.bind(this);
            this._onAKey = this._onAKey.bind(this);
            this._onEnterKey = this._onEnterKey.bind(this);
            this._onEscapeKey = this._onEscapeKey.bind(this);
            this._onDirectionKey = this._onDirectionKey.bind(this);
            this._onDeleteKey = this._onDeleteKey.bind(this);
            if (this.passedElement.isActive) {
                if (!this.config.silent) {
                    console.warn('Trying to initialise Choices on element already initialised');
                }
                this.initialised = true;
                return;
            }
            this.init();
        }
        init() {
            if (this.initialised) {
                return;
            }
            this._createTemplates();
            this._createElements();
            this._createStructure();
            this._initialState = utils.cloneObject(this._store.state);
            this._store.subscribe(this._render);
            this._render();
            this._addEventListeners();
            const shouldDisable = !this.config.addItems || this.passedElement.element.hasAttribute('disabled');
            if (shouldDisable) {
                this.disable();
            }
            this.initialised = true;
            const {callbackOnInit} = this.config;
            if (callbackOnInit && typeof callbackOnInit === 'function') {
                callbackOnInit.call(this);
            }
        }
        destroy() {
            if (!this.initialised) {
                return;
            }
            this._removeEventListeners();
            this.passedElement.reveal();
            this.containerOuter.unwrap(this.passedElement.element);
            this.clearStore();
            if (this._isSelectElement) {
                this.passedElement.options = this._presetOptions;
            }
            this._templates = null;
            this.initialised = false;
        }
        enable() {
            if (this.passedElement.isDisabled) {
                this.passedElement.enable();
            }
            if (this.containerOuter.isDisabled) {
                this._addEventListeners();
                this.input.enable();
                this.containerOuter.enable();
            }
            return this;
        }
        disable() {
            if (!this.passedElement.isDisabled) {
                this.passedElement.disable();
            }
            if (!this.containerOuter.isDisabled) {
                this._removeEventListeners();
                this.input.disable();
                this.containerOuter.disable();
            }
            return this;
        }
        highlightItem(item, runEvent = true) {
            if (!item) {
                return this;
            }
            const {id, groupId = -1, value = '', label = ''} = item;
            const group = groupId >= 0 ? this._store.getGroupById(groupId) : null;
            this._store.dispatch(actionsItems.highlightItem(id, true));
            if (runEvent) {
                this.passedElement.triggerEvent(constants.EVENTS.highlightItem, {
                    id,
                    value,
                    label,
                    groupValue: group && group.value ? group.value : null
                });
            }
            return this;
        }
        unhighlightItem(item) {
            if (!item) {
                return this;
            }
            const {id, groupId = -1, value = '', label = ''} = item;
            const group = groupId >= 0 ? this._store.getGroupById(groupId) : null;
            this._store.dispatch(actionsItems.highlightItem(id, false));
            this.passedElement.triggerEvent(constants.EVENTS.highlightItem, {
                id,
                value,
                label,
                groupValue: group && group.value ? group.value : null
            });
            return this;
        }
        highlightAll() {
            this._store.items.forEach(item => this.highlightItem(item));
            return this;
        }
        unhighlightAll() {
            this._store.items.forEach(item => this.unhighlightItem(item));
            return this;
        }
        removeActiveItemsByValue(value) {
            this._store.activeItems.filter(item => item.value === value).forEach(item => this._removeItem(item));
            return this;
        }
        removeActiveItems(excludedId) {
            this._store.activeItems.filter(({id}) => id !== excludedId).forEach(item => this._removeItem(item));
            return this;
        }
        removeHighlightedItems(runEvent = false) {
            this._store.highlightedActiveItems.forEach(item => {
                this._removeItem(item);
                if (runEvent) {
                    this._triggerChange(item.value);
                }
            });
            return this;
        }
        showDropdown(preventInputFocus) {
            if (this.dropdown.isActive) {
                return this;
            }
            requestAnimationFrame(() => {
                this.dropdown.show();
                this.containerOuter.open(this.dropdown.distanceFromTopWindow);
                if (!preventInputFocus && this._canSearch) {
                    this.input.focus();
                }
                this.passedElement.triggerEvent(constants.EVENTS.showDropdown, {});
            });
            return this;
        }
        hideDropdown(preventInputBlur) {
            if (!this.dropdown.isActive) {
                return this;
            }
            requestAnimationFrame(() => {
                this.dropdown.hide();
                this.containerOuter.close();
                if (!preventInputBlur && this._canSearch) {
                    this.input.removeActiveDescendant();
                    this.input.blur();
                }
                this.passedElement.triggerEvent(constants.EVENTS.hideDropdown, {});
            });
            return this;
        }
        getValue(valueOnly = false) {
            const values = this._store.activeItems.reduce((selectedItems, item) => {
                const itemValue = valueOnly ? item.value : item;
                selectedItems.push(itemValue);
                return selectedItems;
            }, []);
            return this._isSelectOneElement ? values[0] : values;
        }
        setValue(items) {
            if (!this.initialised) {
                return this;
            }
            items.forEach(value => this._setChoiceOrItem(value));
            return this;
        }
        setChoiceByValue(value) {
            if (!this.initialised || this._isTextElement) {
                return this;
            }
            const choiceValue = Array.isArray(value) ? value : [value];
            choiceValue.forEach(val => this._findAndSelectChoiceByValue(val));
            return this;
        }
        setChoices(choicesArrayOrFetcher = [], value = 'value', label = 'label', replaceChoices = false) {
            if (!this.initialised) {
                throw new ReferenceError(`setChoices was called on a non-initialized instance of Choices`);
            }
            if (!this._isSelectElement) {
                throw new TypeError(`setChoices can't be used with INPUT based Choices`);
            }
            if (typeof value !== 'string' || !value) {
                throw new TypeError(`value parameter must be a name of 'value' field in passed objects`);
            }
            if (replaceChoices) {
                this.clearChoices();
            }
            if (typeof choicesArrayOrFetcher === 'function') {
                const fetcher = choicesArrayOrFetcher(this);
                if (typeof Promise === 'function' && fetcher instanceof Promise) {
                    return new Promise(resolve => requestAnimationFrame(resolve)).then(() => this._handleLoadingState(true)).then(() => fetcher).then(data => this.setChoices(data, value, label, replaceChoices)).catch(err => {
                        if (!this.config.silent) {
                            console.error(err);
                        }
                    }).then(() => this._handleLoadingState(false)).then(() => this);
                }
                if (!Array.isArray(fetcher)) {
                    throw new TypeError(`.setChoices first argument function must return either array of choices or Promise, got: ${ typeof fetcher }`);
                }
                return this.setChoices(fetcher, value, label, false);
            }
            if (!Array.isArray(choicesArrayOrFetcher)) {
                throw new TypeError(`.setChoices must be called either with array of choices with a function resulting into Promise of array of choices`);
            }
            this.containerOuter.removeLoadingState();
            this._startLoading();
            choicesArrayOrFetcher.forEach(groupOrChoice => {
                if (groupOrChoice.choices) {
                    this._addGroup({
                        id: parseInt(groupOrChoice.id, 10) || null,
                        group: groupOrChoice,
                        valueKey: value,
                        labelKey: label
                    });
                } else {
                    this._addChoice({
                        value: groupOrChoice[value],
                        label: groupOrChoice[label],
                        isSelected: groupOrChoice.selected,
                        isDisabled: groupOrChoice.disabled,
                        customProperties: groupOrChoice.customProperties,
                        placeholder: groupOrChoice.placeholder
                    });
                }
            });
            this._stopLoading();
            return this;
        }
        clearChoices() {
            this._store.dispatch(actionsChoices.clearChoices());
            return this;
        }
        clearStore() {
            this._store.dispatch(misc.clearAll());
            return this;
        }
        clearInput() {
            const shouldSetInputWidth = !this._isSelectOneElement;
            this.input.clear(shouldSetInputWidth);
            if (!this._isTextElement && this._canSearch) {
                this._isSearching = false;
                this._store.dispatch(actionsChoices.activateChoices(true));
            }
            return this;
        }
        _render() {
            if (this._store.isLoading()) {
                return;
            }
            this._currentState = this._store.state;
            const stateChanged = this._currentState.choices !== this._prevState.choices || this._currentState.groups !== this._prevState.groups || this._currentState.items !== this._prevState.items;
            const shouldRenderChoices = this._isSelectElement;
            const shouldRenderItems = this._currentState.items !== this._prevState.items;
            if (!stateChanged) {
                return;
            }
            if (shouldRenderChoices) {
                this._renderChoices();
            }
            if (shouldRenderItems) {
                this._renderItems();
            }
            this._prevState = this._currentState;
        }
        _renderChoices() {
            const {activeGroups, activeChoices} = this._store;
            let choiceListFragment = document.createDocumentFragment();
            this.choiceList.clear();
            if (this.config.resetScrollPosition) {
                requestAnimationFrame(() => this.choiceList.scrollToTop());
            }
            if (activeGroups.length >= 1 && !this._isSearching) {
                const activePlaceholders = activeChoices.filter(activeChoice => activeChoice.placeholder === true && activeChoice.groupId === -1);
                if (activePlaceholders.length >= 1) {
                    choiceListFragment = this._createChoicesFragment(activePlaceholders, choiceListFragment);
                }
                choiceListFragment = this._createGroupsFragment(activeGroups, activeChoices, choiceListFragment);
            } else if (activeChoices.length >= 1) {
                choiceListFragment = this._createChoicesFragment(activeChoices, choiceListFragment);
            }
            if (choiceListFragment.childNodes && choiceListFragment.childNodes.length > 0) {
                const {activeItems} = this._store;
                const canAddItem = this._canAddItem(activeItems, this.input.value);
                if (canAddItem.response) {
                    this.choiceList.append(choiceListFragment);
                    this._highlightChoice();
                } else {
                    this.choiceList.append(this._getTemplate('notice', canAddItem.notice));
                }
            } else {
                let dropdownItem;
                let notice;
                if (this._isSearching) {
                    notice = typeof this.config.noResultsText === 'function' ? this.config.noResultsText() : this.config.noResultsText;
                    dropdownItem = this._getTemplate('notice', notice, 'no-results');
                } else {
                    notice = typeof this.config.noChoicesText === 'function' ? this.config.noChoicesText() : this.config.noChoicesText;
                    dropdownItem = this._getTemplate('notice', notice, 'no-choices');
                }
                this.choiceList.append(dropdownItem);
            }
        }
        _renderItems() {
            const activeItems = this._store.activeItems || [];
            this.itemList.clear();
            const itemListFragment = this._createItemsFragment(activeItems);
            if (itemListFragment.childNodes) {
                this.itemList.append(itemListFragment);
            }
        }
        _createGroupsFragment(groups, choices, fragment = document.createDocumentFragment()) {
            const getGroupChoices = group => choices.filter(choice => {
                if (this._isSelectOneElement) {
                    return choice.groupId === group.id;
                }
                return choice.groupId === group.id && (this.config.renderSelectedChoices === 'always' || !choice.selected);
            });
            if (this.config.shouldSort) {
                groups.sort(this.config.sorter);
            }
            groups.forEach(group => {
                const groupChoices = getGroupChoices(group);
                if (groupChoices.length >= 1) {
                    const dropdownGroup = this._getTemplate('choiceGroup', group);
                    fragment.appendChild(dropdownGroup);
                    this._createChoicesFragment(groupChoices, fragment, true);
                }
            });
            return fragment;
        }
        _createChoicesFragment(choices, fragment = document.createDocumentFragment(), withinGroup = false) {
            const {renderSelectedChoices, searchResultLimit, renderChoiceLimit} = this.config;
            const filter = this._isSearching ? utils.sortByScore : this.config.sorter;
            const appendChoice = choice => {
                const shouldRender = renderSelectedChoices === 'auto' ? this._isSelectOneElement || !choice.selected : true;
                if (shouldRender) {
                    const dropdownItem = this._getTemplate('choice', choice, this.config.itemSelectText);
                    fragment.appendChild(dropdownItem);
                }
            };
            let rendererableChoices = choices;
            if (renderSelectedChoices === 'auto' && !this._isSelectOneElement) {
                rendererableChoices = choices.filter(choice => !choice.selected);
            }
            const {placeholderChoices, normalChoices} = rendererableChoices.reduce((acc, choice) => {
                if (choice.placeholder) {
                    acc.placeholderChoices.push(choice);
                } else {
                    acc.normalChoices.push(choice);
                }
                return acc;
            }, {
                placeholderChoices: [],
                normalChoices: []
            });
            if (this.config.shouldSort || this._isSearching) {
                normalChoices.sort(filter);
            }
            let choiceLimit = rendererableChoices.length;
            const sortedChoices = this._isSelectOneElement ? [
                ...placeholderChoices,
                ...normalChoices
            ] : normalChoices;
            if (this._isSearching) {
                choiceLimit = searchResultLimit;
            } else if (renderChoiceLimit && renderChoiceLimit > 0 && !withinGroup) {
                choiceLimit = renderChoiceLimit;
            }
            for (let i = 0; i < choiceLimit; i += 1) {
                if (sortedChoices[i]) {
                    appendChoice(sortedChoices[i]);
                }
            }
            return fragment;
        }
        _createItemsFragment(items, fragment = document.createDocumentFragment()) {
            const {shouldSortItems, sorter, removeItemButton} = this.config;
            if (shouldSortItems && !this._isSelectOneElement) {
                items.sort(sorter);
            }
            if (this._isTextElement) {
                this.passedElement.value = items;
            } else {
                this.passedElement.options = items;
            }
            const addItemToFragment = item => {
                const listItem = this._getTemplate('item', item, removeItemButton);
                fragment.appendChild(listItem);
            };
            items.forEach(addItemToFragment);
            return fragment;
        }
        _triggerChange(value) {
            if (value === undefined || value === null) {
                return;
            }
            this.passedElement.triggerEvent(constants.EVENTS.change, { value });
        }
        _selectPlaceholderChoice() {
            const {placeholderChoice} = this._store;
            if (placeholderChoice) {
                this._addItem({
                    value: placeholderChoice.value,
                    label: placeholderChoice.label,
                    choiceId: placeholderChoice.id,
                    groupId: placeholderChoice.groupId,
                    placeholder: placeholderChoice.placeholder
                });
                this._triggerChange(placeholderChoice.value);
            }
        }
        _handleButtonAction(activeItems, element) {
            if (!activeItems || !element || !this.config.removeItems || !this.config.removeItemButton) {
                return;
            }
            const itemId = element.parentNode.getAttribute('data-id');
            const itemToRemove = activeItems.find(item => item.id === parseInt(itemId, 10));
            this._removeItem(itemToRemove);
            this._triggerChange(itemToRemove.value);
            if (this._isSelectOneElement) {
                this._selectPlaceholderChoice();
            }
        }
        _handleItemAction(activeItems, element, hasShiftKey = false) {
            if (!activeItems || !element || !this.config.removeItems || this._isSelectOneElement) {
                return;
            }
            const passedId = element.getAttribute('data-id');
            activeItems.forEach(item => {
                if (item.id === parseInt(passedId, 10) && !item.highlighted) {
                    this.highlightItem(item);
                } else if (!hasShiftKey && item.highlighted) {
                    this.unhighlightItem(item);
                }
            });
            this.input.focus();
        }
        _handleChoiceAction(activeItems, element) {
            if (!activeItems || !element) {
                return;
            }
            const {id} = element.dataset;
            const choice = this._store.getChoiceById(id);
            if (!choice) {
                return;
            }
            const passedKeyCode = activeItems[0] && activeItems[0].keyCode ? activeItems[0].keyCode : null;
            const hasActiveDropdown = this.dropdown.isActive;
            choice.keyCode = passedKeyCode;
            this.passedElement.triggerEvent(constants.EVENTS.choice, { choice });
            if (!choice.selected && !choice.disabled) {
                const canAddItem = this._canAddItem(activeItems, choice.value);
                if (canAddItem.response) {
                    this._addItem({
                        value: choice.value,
                        label: choice.label,
                        choiceId: choice.id,
                        groupId: choice.groupId,
                        customProperties: choice.customProperties,
                        placeholder: choice.placeholder,
                        keyCode: choice.keyCode
                    });
                    this._triggerChange(choice.value);
                }
            }
            this.clearInput();
            if (hasActiveDropdown && this._isSelectOneElement) {
                this.hideDropdown(true);
                this.containerOuter.focus();
            }
        }
        _handleBackspace(activeItems) {
            if (!this.config.removeItems || !activeItems) {
                return;
            }
            const lastItem = activeItems[activeItems.length - 1];
            const hasHighlightedItems = activeItems.some(item => item.highlighted);
            if (this.config.editItems && !hasHighlightedItems && lastItem) {
                this.input.value = lastItem.value;
                this.input.setWidth();
                this._removeItem(lastItem);
                this._triggerChange(lastItem.value);
            } else {
                if (!hasHighlightedItems) {
                    this.highlightItem(lastItem, false);
                }
                this.removeHighlightedItems(true);
            }
        }
        _startLoading() {
            this._store.dispatch(misc.setIsLoading(true));
        }
        _stopLoading() {
            this._store.dispatch(misc.setIsLoading(false));
        }
        _handleLoadingState(setLoading = true) {
            let placeholderItem = this.itemList.getChild(`.${ this.config.classNames.placeholder }`);
            if (setLoading) {
                this.disable();
                this.containerOuter.addLoadingState();
                if (this._isSelectOneElement) {
                    if (!placeholderItem) {
                        placeholderItem = this._getTemplate('placeholder', this.config.loadingText);
                        this.itemList.append(placeholderItem);
                    } else {
                        placeholderItem.innerHTML = this.config.loadingText;
                    }
                } else {
                    this.input.placeholder = this.config.loadingText;
                }
            } else {
                this.enable();
                this.containerOuter.removeLoadingState();
                if (this._isSelectOneElement) {
                    placeholderItem.innerHTML = this._placeholderValue || '';
                } else {
                    this.input.placeholder = this._placeholderValue || '';
                }
            }
        }
        _handleSearch(value) {
            if (!value || !this.input.isFocussed) {
                return;
            }
            const {choices} = this._store;
            const {searchFloor, searchChoices} = this.config;
            const hasUnactiveChoices = choices.some(option => !option.active);
            if (value && value.length >= searchFloor) {
                const resultCount = searchChoices ? this._searchChoices(value) : 0;
                this.passedElement.triggerEvent(constants.EVENTS.search, {
                    value,
                    resultCount
                });
            } else if (hasUnactiveChoices) {
                this._isSearching = false;
                this._store.dispatch(actionsChoices.activateChoices(true));
            }
        }
        _canAddItem(activeItems, value) {
            let canAddItem = true;
            let notice = typeof this.config.addItemText === 'function' ? this.config.addItemText(value) : this.config.addItemText;
            if (!this._isSelectOneElement) {
                const isDuplicateValue = utils.existsInArray(activeItems, value);
                if (this.config.maxItemCount > 0 && this.config.maxItemCount <= activeItems.length) {
                    canAddItem = false;
                    notice = typeof this.config.maxItemText === 'function' ? this.config.maxItemText(this.config.maxItemCount) : this.config.maxItemText;
                }
                if (!this.config.duplicateItemsAllowed && isDuplicateValue && canAddItem) {
                    canAddItem = false;
                    notice = typeof this.config.uniqueItemText === 'function' ? this.config.uniqueItemText(value) : this.config.uniqueItemText;
                }
                if (this._isTextElement && this.config.addItems && canAddItem && typeof this.config.addItemFilter === 'function' && !this.config.addItemFilter(value)) {
                    canAddItem = false;
                    notice = typeof this.config.customAddItemText === 'function' ? this.config.customAddItemText(value) : this.config.customAddItemText;
                }
            }
            return {
                response: canAddItem,
                notice
            };
        }
        _searchChoices(value) {
            const newValue = typeof value === 'string' ? value.trim() : value;
            const currentValue = typeof this._currentValue === 'string' ? this._currentValue.trim() : this._currentValue;
            if (newValue.length < 1 && newValue === `${ currentValue } `) {
                return 0;
            }
            const haystack = this._store.searchableChoices;
            const needle = newValue;
            const keys = [...this.config.searchFields];
            const options = Object.assign(this.config.fuseOptions, { keys });
            const fuse = new Fuse(haystack, options);
            const results = fuse.search(needle);
            this._currentValue = newValue;
            this._highlightPosition = 0;
            this._isSearching = true;
            this._store.dispatch(actionsChoices.filterChoices(results));
            return results.length;
        }
        _addEventListeners() {
            const {documentElement} = document;
            documentElement.addEventListener('touchend', this._onTouchEnd, true);
            this.containerOuter.element.addEventListener('keydown', this._onKeyDown, true);
            this.containerOuter.element.addEventListener('mousedown', this._onMouseDown, true);
            documentElement.addEventListener('click', this._onClick, { passive: true });
            documentElement.addEventListener('touchmove', this._onTouchMove, { passive: true });
            this.dropdown.element.addEventListener('mouseover', this._onMouseOver, { passive: true });
            if (this._isSelectOneElement) {
                this.containerOuter.element.addEventListener('focus', this._onFocus, { passive: true });
                this.containerOuter.element.addEventListener('blur', this._onBlur, { passive: true });
            }
            this.input.element.addEventListener('keyup', this._onKeyUp, { passive: true });
            this.input.element.addEventListener('focus', this._onFocus, { passive: true });
            this.input.element.addEventListener('blur', this._onBlur, { passive: true });
            if (this.input.element.form) {
                this.input.element.form.addEventListener('reset', this._onFormReset, { passive: true });
            }
            this.input.addEventListeners();
        }
        _removeEventListeners() {
            const {documentElement} = document;
            documentElement.removeEventListener('touchend', this._onTouchEnd, true);
            this.containerOuter.element.removeEventListener('keydown', this._onKeyDown, true);
            this.containerOuter.element.removeEventListener('mousedown', this._onMouseDown, true);
            documentElement.removeEventListener('click', this._onClick);
            documentElement.removeEventListener('touchmove', this._onTouchMove);
            this.dropdown.element.removeEventListener('mouseover', this._onMouseOver);
            if (this._isSelectOneElement) {
                this.containerOuter.element.removeEventListener('focus', this._onFocus);
                this.containerOuter.element.removeEventListener('blur', this._onBlur);
            }
            this.input.element.removeEventListener('keyup', this._onKeyUp);
            this.input.element.removeEventListener('focus', this._onFocus);
            this.input.element.removeEventListener('blur', this._onBlur);
            if (this.input.element.form) {
                this.input.element.form.removeEventListener('reset', this._onFormReset);
            }
            this.input.removeEventListeners();
        }
        _onKeyDown(event) {
            const {target, keyCode, ctrlKey, metaKey} = event;
            const {activeItems} = this._store;
            const hasFocusedInput = this.input.isFocussed;
            const hasActiveDropdown = this.dropdown.isActive;
            const hasItems = this.itemList.hasChildren();
            const keyString = String.fromCharCode(keyCode);
            const {BACK_KEY, DELETE_KEY, ENTER_KEY, A_KEY, ESC_KEY, UP_KEY, DOWN_KEY, PAGE_UP_KEY, PAGE_DOWN_KEY} = constants.KEY_CODES;
            const hasCtrlDownKeyPressed = ctrlKey || metaKey;
            if (!this._isTextElement && /[a-zA-Z0-9-_ ]/.test(keyString)) {
                this.showDropdown();
            }
            const keyDownActions = {
                [A_KEY]: this._onAKey,
                [ENTER_KEY]: this._onEnterKey,
                [ESC_KEY]: this._onEscapeKey,
                [UP_KEY]: this._onDirectionKey,
                [PAGE_UP_KEY]: this._onDirectionKey,
                [DOWN_KEY]: this._onDirectionKey,
                [PAGE_DOWN_KEY]: this._onDirectionKey,
                [DELETE_KEY]: this._onDeleteKey,
                [BACK_KEY]: this._onDeleteKey
            };
            if (keyDownActions[keyCode]) {
                keyDownActions[keyCode]({
                    event,
                    target,
                    keyCode,
                    metaKey,
                    activeItems,
                    hasFocusedInput,
                    hasActiveDropdown,
                    hasItems,
                    hasCtrlDownKeyPressed
                });
            }
        }
        _onKeyUp({target, keyCode}) {
            const {value} = this.input;
            const {activeItems} = this._store;
            const canAddItem = this._canAddItem(activeItems, value);
            const {
                BACK_KEY: backKey,
                DELETE_KEY: deleteKey
            } = constants.KEY_CODES;
            if (this._isTextElement) {
                const canShowDropdownNotice = canAddItem.notice && value;
                if (canShowDropdownNotice) {
                    const dropdownItem = this._getTemplate('notice', canAddItem.notice);
                    this.dropdown.element.innerHTML = dropdownItem.outerHTML;
                    this.showDropdown(true);
                } else {
                    this.hideDropdown(true);
                }
            } else {
                const userHasRemovedValue = (keyCode === backKey || keyCode === deleteKey) && !target.value;
                const canReactivateChoices = !this._isTextElement && this._isSearching;
                const canSearch = this._canSearch && canAddItem.response;
                if (userHasRemovedValue && canReactivateChoices) {
                    this._isSearching = false;
                    this._store.dispatch(actionsChoices.activateChoices(true));
                } else if (canSearch) {
                    this._handleSearch(this.input.value);
                }
            }
            this._canSearch = this.config.searchEnabled;
        }
        _onAKey({hasItems, hasCtrlDownKeyPressed}) {
            if (hasCtrlDownKeyPressed && hasItems) {
                this._canSearch = false;
                const shouldHightlightAll = this.config.removeItems && !this.input.value && this.input.element === document.activeElement;
                if (shouldHightlightAll) {
                    this.highlightAll();
                }
            }
        }
        _onEnterKey({event, target, activeItems, hasActiveDropdown}) {
            const {ENTER_KEY: enterKey} = constants.KEY_CODES;
            const targetWasButton = target.hasAttribute('data-button');
            if (this._isTextElement && target.value) {
                const {value} = this.input;
                const canAddItem = this._canAddItem(activeItems, value);
                if (canAddItem.response) {
                    this.hideDropdown(true);
                    this._addItem({ value });
                    this._triggerChange(value);
                    this.clearInput();
                }
            }
            if (targetWasButton) {
                this._handleButtonAction(activeItems, target);
                event.preventDefault();
            }
            if (hasActiveDropdown) {
                const highlightedChoice = this.dropdown.getChild(`.${ this.config.classNames.highlightedState }`);
                if (highlightedChoice) {
                    if (activeItems[0]) {
                        activeItems[0].keyCode = enterKey;
                    }
                    this._handleChoiceAction(activeItems, highlightedChoice);
                }
                event.preventDefault();
            } else if (this._isSelectOneElement) {
                this.showDropdown();
                event.preventDefault();
            }
        }
        _onEscapeKey({hasActiveDropdown}) {
            if (hasActiveDropdown) {
                this.hideDropdown(true);
                this.containerOuter.focus();
            }
        }
        _onDirectionKey({event, hasActiveDropdown, keyCode, metaKey}) {
            const {
                DOWN_KEY: downKey,
                PAGE_UP_KEY: pageUpKey,
                PAGE_DOWN_KEY: pageDownKey
            } = constants.KEY_CODES;
            if (hasActiveDropdown || this._isSelectOneElement) {
                this.showDropdown();
                this._canSearch = false;
                const directionInt = keyCode === downKey || keyCode === pageDownKey ? 1 : -1;
                const skipKey = metaKey || keyCode === pageDownKey || keyCode === pageUpKey;
                const selectableChoiceIdentifier = '[data-choice-selectable]';
                let nextEl;
                if (skipKey) {
                    if (directionInt > 0) {
                        nextEl = this.dropdown.element.querySelector(`${ selectableChoiceIdentifier }:last-of-type`);
                    } else {
                        nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier);
                    }
                } else {
                    const currentEl = this.dropdown.element.querySelector(`.${ this.config.classNames.highlightedState }`);
                    if (currentEl) {
                        nextEl = utils.getAdjacentEl(currentEl, selectableChoiceIdentifier, directionInt);
                    } else {
                        nextEl = this.dropdown.element.querySelector(selectableChoiceIdentifier);
                    }
                }
                if (nextEl) {
                    if (!utils.isScrolledIntoView(nextEl, this.choiceList.element, directionInt)) {
                        this.choiceList.scrollToChildElement(nextEl, directionInt);
                    }
                    this._highlightChoice(nextEl);
                }
                event.preventDefault();
            }
        }
        _onDeleteKey({event, target, hasFocusedInput, activeItems}) {
            if (hasFocusedInput && !target.value && !this._isSelectOneElement) {
                this._handleBackspace(activeItems);
                event.preventDefault();
            }
        }
        _onTouchMove() {
            if (this._wasTap) {
                this._wasTap = false;
            }
        }
        _onTouchEnd(event) {
            const {target} = event || event.touches[0];
            const touchWasWithinContainer = this._wasTap && this.containerOuter.element.contains(target);
            if (touchWasWithinContainer) {
                const containerWasExactTarget = target === this.containerOuter.element || target === this.containerInner.element;
                if (containerWasExactTarget) {
                    if (this._isTextElement) {
                        this.input.focus();
                    } else if (this._isSelectMultipleElement) {
                        this.showDropdown();
                    }
                }
                event.stopPropagation();
            }
            this._wasTap = true;
        }
        _onMouseDown(event) {
            const {target} = event;
            if (!(target instanceof HTMLElement)) {
                return;
            }
            if (IS_IE11 && this.choiceList.element.contains(target)) {
                const firstChoice = this.choiceList.element.firstElementChild;
                const isOnScrollbar = this._direction === 'ltr' ? event.offsetX >= firstChoice.offsetWidth : event.offsetX < firstChoice.offsetLeft;
                this._isScrollingOnIe = isOnScrollbar;
            }
            if (target === this.input.element) {
                return;
            }
            const item = target.closest('[data-button],[data-item],[data-choice]');
            if (item instanceof HTMLElement) {
                const hasShiftKey = event.shiftKey;
                const {activeItems} = this._store;
                const {dataset} = item;
                if ('button' in dataset) {
                    this._handleButtonAction(activeItems, item);
                } else if ('item' in dataset) {
                    this._handleItemAction(activeItems, item, hasShiftKey);
                } else if ('choice' in dataset) {
                    this._handleChoiceAction(activeItems, item);
                }
            }
            event.preventDefault();
        }
        _onMouseOver({target}) {
            if (target instanceof HTMLElement && 'choice' in target.dataset) {
                this._highlightChoice(target);
            }
        }
        _onClick({target}) {
            const clickWasWithinContainer = this.containerOuter.element.contains(target);
            if (clickWasWithinContainer) {
                if (!this.dropdown.isActive && !this.containerOuter.isDisabled) {
                    if (this._isTextElement) {
                        if (document.activeElement !== this.input.element) {
                            this.input.focus();
                        }
                    } else {
                        this.showDropdown();
                        this.containerOuter.focus();
                    }
                } else if (this._isSelectOneElement && target !== this.input.element && !this.dropdown.element.contains(target)) {
                    this.hideDropdown();
                }
            } else {
                const hasHighlightedItems = this._store.highlightedActiveItems.length > 0;
                if (hasHighlightedItems) {
                    this.unhighlightAll();
                }
                this.containerOuter.removeFocusState();
                this.hideDropdown(true);
            }
        }
        _onFocus({target}) {
            const focusWasWithinContainer = this.containerOuter.element.contains(target);
            if (!focusWasWithinContainer) {
                return;
            }
            const focusActions = {
                [constants.TEXT_TYPE]: () => {
                    if (target === this.input.element) {
                        this.containerOuter.addFocusState();
                    }
                },
                [constants.SELECT_ONE_TYPE]: () => {
                    this.containerOuter.addFocusState();
                    if (target === this.input.element) {
                        this.showDropdown(true);
                    }
                },
                [constants.SELECT_MULTIPLE_TYPE]: () => {
                    if (target === this.input.element) {
                        this.showDropdown(true);
                        this.containerOuter.addFocusState();
                    }
                }
            };
            focusActions[this.passedElement.element.type]();
        }
        _onBlur({target}) {
            const blurWasWithinContainer = this.containerOuter.element.contains(target);
            if (blurWasWithinContainer && !this._isScrollingOnIe) {
                const {activeItems} = this._store;
                const hasHighlightedItems = activeItems.some(item => item.highlighted);
                const blurActions = {
                    [constants.TEXT_TYPE]: () => {
                        if (target === this.input.element) {
                            this.containerOuter.removeFocusState();
                            if (hasHighlightedItems) {
                                this.unhighlightAll();
                            }
                            this.hideDropdown(true);
                        }
                    },
                    [constants.SELECT_ONE_TYPE]: () => {
                        this.containerOuter.removeFocusState();
                        if (target === this.input.element || target === this.containerOuter.element && !this._canSearch) {
                            this.hideDropdown(true);
                        }
                    },
                    [constants.SELECT_MULTIPLE_TYPE]: () => {
                        if (target === this.input.element) {
                            this.containerOuter.removeFocusState();
                            this.hideDropdown(true);
                            if (hasHighlightedItems) {
                                this.unhighlightAll();
                            }
                        }
                    }
                };
                blurActions[this.passedElement.element.type]();
            } else {
                this._isScrollingOnIe = false;
                this.input.element.focus();
            }
        }
        _onFormReset() {
            this._store.dispatch(misc.resetTo(this._initialState));
        }
        _highlightChoice(el = null) {
            const choices = Array.from(this.dropdown.element.querySelectorAll('[data-choice-selectable]'));
            if (!choices.length) {
                return;
            }
            let passedEl = el;
            const highlightedChoices = Array.from(this.dropdown.element.querySelectorAll(`.${ this.config.classNames.highlightedState }`));
            highlightedChoices.forEach(choice => {
                choice.classList.remove(this.config.classNames.highlightedState);
                choice.setAttribute('aria-selected', 'false');
            });
            if (passedEl) {
                this._highlightPosition = choices.indexOf(passedEl);
            } else {
                if (choices.length > this._highlightPosition) {
                    passedEl = choices[this._highlightPosition];
                } else {
                    passedEl = choices[choices.length - 1];
                }
                if (!passedEl) {
                    passedEl = choices[0];
                }
            }
            passedEl.classList.add(this.config.classNames.highlightedState);
            passedEl.setAttribute('aria-selected', 'true');
            this.passedElement.triggerEvent(constants.EVENTS.highlightChoice, { el: passedEl });
            if (this.dropdown.isActive) {
                this.input.setActiveDescendant(passedEl.id);
                this.containerOuter.setActiveDescendant(passedEl.id);
            }
        }
        _addItem({value, label = null, choiceId = -1, groupId = -1, customProperties = null, placeholder = false, keyCode = null}) {
            let passedValue = typeof value === 'string' ? value.trim() : value;
            const passedKeyCode = keyCode;
            const passedCustomProperties = customProperties;
            const {items} = this._store;
            const passedLabel = label || passedValue;
            const passedOptionId = choiceId || -1;
            const group = groupId >= 0 ? this._store.getGroupById(groupId) : null;
            const id = items ? items.length + 1 : 1;
            if (this.config.prependValue) {
                passedValue = this.config.prependValue + passedValue.toString();
            }
            if (this.config.appendValue) {
                passedValue += this.config.appendValue.toString();
            }
            this._store.dispatch(actionsItems.addItem({
                value: passedValue,
                label: passedLabel,
                id,
                choiceId: passedOptionId,
                groupId,
                customProperties,
                placeholder,
                keyCode: passedKeyCode
            }));
            if (this._isSelectOneElement) {
                this.removeActiveItems(id);
            }
            this.passedElement.triggerEvent(constants.EVENTS.addItem, {
                id,
                value: passedValue,
                label: passedLabel,
                customProperties: passedCustomProperties,
                groupValue: group && group.value ? group.value : undefined,
                keyCode: passedKeyCode
            });
            return this;
        }
        _removeItem(item) {
            if (!item || !utils.isType('Object', item)) {
                return this;
            }
            const {id, value, label, choiceId, groupId} = item;
            const group = groupId >= 0 ? this._store.getGroupById(groupId) : null;
            this._store.dispatch(actionsItems.removeItem(id, choiceId));
            if (group && group.value) {
                this.passedElement.triggerEvent(constants.EVENTS.removeItem, {
                    id,
                    value,
                    label,
                    groupValue: group.value
                });
            } else {
                this.passedElement.triggerEvent(constants.EVENTS.removeItem, {
                    id,
                    value,
                    label
                });
            }
            return this;
        }
        _addChoice({value, label = null, isSelected = false, isDisabled = false, groupId = -1, customProperties = null, placeholder = false, keyCode = null}) {
            if (typeof value === 'undefined' || value === null) {
                return;
            }
            const {choices} = this._store;
            const choiceLabel = label || value;
            const choiceId = choices ? choices.length + 1 : 1;
            const choiceElementId = `${ this._baseId }-${ this._idNames.itemChoice }-${ choiceId }`;
            this._store.dispatch(actionsChoices.addChoice({
                id: choiceId,
                groupId,
                elementId: choiceElementId,
                value,
                label: choiceLabel,
                disabled: isDisabled,
                customProperties,
                placeholder,
                keyCode
            }));
            if (isSelected) {
                this._addItem({
                    value,
                    label: choiceLabel,
                    choiceId,
                    customProperties,
                    placeholder,
                    keyCode
                });
            }
        }
        _addGroup({group, id, valueKey = 'value', labelKey = 'label'}) {
            const groupChoices = utils.isType('Object', group) ? group.choices : Array.from(group.getElementsByTagName('OPTION'));
            const groupId = id || Math.floor(new Date().valueOf() * Math.random());
            const isDisabled = group.disabled ? group.disabled : false;
            if (groupChoices) {
                this._store.dispatch(groups.addGroup({
                    value: group.label,
                    id: groupId,
                    active: true,
                    disabled: isDisabled
                }));
                const addGroupChoices = choice => {
                    const isOptDisabled = choice.disabled || choice.parentNode && choice.parentNode.disabled;
                    this._addChoice({
                        value: choice[valueKey],
                        label: utils.isType('Object', choice) ? choice[labelKey] : choice.innerHTML,
                        isSelected: choice.selected,
                        isDisabled: isOptDisabled,
                        groupId,
                        customProperties: choice.customProperties,
                        placeholder: choice.placeholder
                    });
                };
                groupChoices.forEach(addGroupChoices);
            } else {
                this._store.dispatch(groups.addGroup({
                    value: group.label,
                    id: group.id,
                    active: false,
                    disabled: group.disabled
                }));
            }
        }
        _getTemplate(template, ...args) {
            if (!template) {
                return null;
            }
            const {classNames} = this.config;
            return this._templates[template].call(this, classNames, ...args);
        }
        _createTemplates() {
            const {callbackOnCreateTemplates} = this.config;
            let userTemplates = {};
            if (callbackOnCreateTemplates && typeof callbackOnCreateTemplates === 'function') {
                userTemplates = callbackOnCreateTemplates.call(this, utils.strToEl);
            }
            this._templates = merge(TEMPLATES, userTemplates);
        }
        _createElements() {
            this.containerOuter = new components.Container({
                element: this._getTemplate('containerOuter', this._direction, this._isSelectElement, this._isSelectOneElement, this.config.searchEnabled, this.passedElement.element.type),
                classNames: this.config.classNames,
                type: this.passedElement.element.type,
                position: this.config.position
            });
            this.containerInner = new components.Container({
                element: this._getTemplate('containerInner'),
                classNames: this.config.classNames,
                type: this.passedElement.element.type,
                position: this.config.position
            });
            this.input = new components.Input({
                element: this._getTemplate('input', this._placeholderValue),
                classNames: this.config.classNames,
                type: this.passedElement.element.type,
                preventPaste: !this.config.paste
            });
            this.choiceList = new components.List({ element: this._getTemplate('choiceList', this._isSelectOneElement) });
            this.itemList = new components.List({ element: this._getTemplate('itemList', this._isSelectOneElement) });
            this.dropdown = new components.Dropdown({
                element: this._getTemplate('dropdown'),
                classNames: this.config.classNames,
                type: this.passedElement.element.type
            });
        }
        _createStructure() {
            this.passedElement.conceal();
            this.containerInner.wrap(this.passedElement.element);
            this.containerOuter.wrap(this.containerInner.element);
            if (this._isSelectOneElement) {
                this.input.placeholder = this.config.searchPlaceholderValue || '';
            } else if (this._placeholderValue) {
                this.input.placeholder = this._placeholderValue;
                this.input.setWidth();
            }
            this.containerOuter.element.appendChild(this.containerInner.element);
            this.containerOuter.element.appendChild(this.dropdown.element);
            this.containerInner.element.appendChild(this.itemList.element);
            if (!this._isTextElement) {
                this.dropdown.element.appendChild(this.choiceList.element);
            }
            if (!this._isSelectOneElement) {
                this.containerInner.element.appendChild(this.input.element);
            } else if (this.config.searchEnabled) {
                this.dropdown.element.insertBefore(this.input.element, this.dropdown.element.firstChild);
            }
            if (this._isSelectElement) {
                this._highlightPosition = 0;
                this._isSearching = false;
                this._startLoading();
                if (this._presetGroups.length) {
                    this._addPredefinedGroups(this._presetGroups);
                } else {
                    this._addPredefinedChoices(this._presetChoices);
                }
                this._stopLoading();
            }
            if (this._isTextElement) {
                this._addPredefinedItems(this._presetItems);
            }
        }
        _addPredefinedGroups(groups) {
            const placeholderChoice = this.passedElement.placeholderOption;
            if (placeholderChoice && placeholderChoice.parentNode.tagName === 'SELECT') {
                this._addChoice({
                    value: placeholderChoice.value,
                    label: placeholderChoice.innerHTML,
                    isSelected: placeholderChoice.selected,
                    isDisabled: placeholderChoice.disabled,
                    placeholder: true
                });
            }
            groups.forEach(group => this._addGroup({
                group,
                id: group.id || null
            }));
        }
        _addPredefinedChoices(choices) {
            if (this.config.shouldSort) {
                choices.sort(this.config.sorter);
            }
            const hasSelectedChoice = choices.some(choice => choice.selected);
            const firstEnabledChoiceIndex = choices.findIndex(choice => choice.disabled === undefined || !choice.disabled);
            choices.forEach((choice, index) => {
                const {value, label, customProperties, placeholder} = choice;
                if (this._isSelectElement) {
                    if (choice.choices) {
                        this._addGroup({
                            group: choice,
                            id: choice.id || null
                        });
                    } else {
                        const shouldPreselect = this._isSelectOneElement && !hasSelectedChoice && index === firstEnabledChoiceIndex;
                        const isSelected = shouldPreselect ? true : choice.selected;
                        const isDisabled = choice.disabled;
                        this._addChoice({
                            value,
                            label,
                            isSelected,
                            isDisabled,
                            customProperties,
                            placeholder
                        });
                    }
                } else {
                    this._addChoice({
                        value,
                        label,
                        isSelected: choice.selected,
                        isDisabled: choice.disabled,
                        customProperties,
                        placeholder
                    });
                }
            });
        }
        _addPredefinedItems(items) {
            items.forEach(item => {
                if (typeof item === 'object' && item.value) {
                    this._addItem({
                        value: item.value,
                        label: item.label,
                        choiceId: item.id,
                        customProperties: item.customProperties,
                        placeholder: item.placeholder
                    });
                }
                if (typeof item === 'string') {
                    this._addItem({ value: item });
                }
            });
        }
        _setChoiceOrItem(item) {
            const itemType = utils.getType(item).toLowerCase();
            const handleType = {
                object: () => {
                    if (!item.value) {
                        return;
                    }
                    if (!this._isTextElement) {
                        this._addChoice({
                            value: item.value,
                            label: item.label,
                            isSelected: true,
                            isDisabled: false,
                            customProperties: item.customProperties,
                            placeholder: item.placeholder
                        });
                    } else {
                        this._addItem({
                            value: item.value,
                            label: item.label,
                            choiceId: item.id,
                            customProperties: item.customProperties,
                            placeholder: item.placeholder
                        });
                    }
                },
                string: () => {
                    if (!this._isTextElement) {
                        this._addChoice({
                            value: item,
                            label: item,
                            isSelected: true,
                            isDisabled: false
                        });
                    } else {
                        this._addItem({ value: item });
                    }
                }
            };
            handleType[itemType]();
        }
        _findAndSelectChoiceByValue(val) {
            const {choices} = this._store;
            const foundChoice = choices.find(choice => this.config.valueComparer(choice.value, val));
            if (foundChoice && !foundChoice.selected) {
                this._addItem({
                    value: foundChoice.value,
                    label: foundChoice.label,
                    choiceId: foundChoice.id,
                    groupId: foundChoice.groupId,
                    customProperties: foundChoice.customProperties,
                    placeholder: foundChoice.placeholder,
                    keyCode: foundChoice.keyCode
                });
            }
        }
        _generatePlaceholderValue() {
            if (this._isSelectElement) {
                const {placeholderOption} = this.passedElement;
                return placeholderOption ? placeholderOption.text : false;
            }
            const {placeholder, placeholderValue} = this.config;
            const {
                element: {dataset}
            } = this.passedElement;
            if (placeholder) {
                if (placeholderValue) {
                    return placeholderValue;
                }
                if (dataset.placeholder) {
                    return dataset.placeholder;
                }
            }
            return false;
        }
    }
    return Choices;
});
define('skylark-choices/main',[
	"./choices"
],function(Choices){
	return Choices;
});
define('skylark-choices', ['skylark-choices/main'], function (main) { return main; });

define('skylark-formio/utils/ChoicesWrapper',['skylark-choices'], function (Choices) {
    'use strict';
    Choices.prototype._generatePlaceholderValue = function () {
        if (this._isSelectElement && this.passedElement.placeholderOption) {
            const {placeholderOption} = this.passedElement;
            return placeholderOption ? placeholderOption.text : false;
        }
        const {placeholder, placeholderValue} = this.config;
        const {
            element: {dataset}
        } = this.passedElement;
        if (placeholder) {
            if (placeholderValue) {
                return placeholderValue;
            }
            if (dataset.placeholder) {
                return dataset.placeholder;
            }
        }
        return false;
    };
    const KEY_CODES = {
        BACK_KEY: 46,
        DELETE_KEY: 8,
        TAB_KEY: 9,
        ENTER_KEY: 13,
        A_KEY: 65,
        ESC_KEY: 27,
        UP_KEY: 38,
        DOWN_KEY: 40,
        PAGE_UP_KEY: 33,
        PAGE_DOWN_KEY: 34
    };
    class ChoicesWrapper extends Choices {
        constructor(...args) {
            super(...args);
            this._onTabKey = this._onTabKey.bind(this);
            this.isDirectionUsing = false;
            this.shouldOpenDropDown = true;
        }
        _handleButtonAction(activeItems, element) {
            if (!this._isSelectOneElement) {
                return super._handleButtonAction(activeItems, element);
            }
            if (!activeItems || !element || !this.config.removeItems || !this.config.removeItemButton) {
                return;
            }
            this.shouldOpenDropDown = false;
            super._handleButtonAction(activeItems, element);
        }
        _onDirectionKey(...args) {
            if (!this._isSelectOneElement) {
                return super._onDirectionKey(...args);
            }
            this.isDirectionUsing = true;
            super._onDirectionKey(...args);
            this.onSelectValue(...args);
            this.isDirectionUsing = false;
        }
        _onTabKey({activeItems, hasActiveDropdown}) {
            if (hasActiveDropdown) {
                this._selectHighlightedChoice(activeItems);
            }
        }
        _selectHighlightedChoice(activeItems) {
            const highlightedChoice = this.dropdown.getChild(`.${ this.config.classNames.highlightedState }`);
            if (highlightedChoice) {
                this._handleChoiceAction(activeItems, highlightedChoice);
            }
            event.preventDefault();
        }
        _onKeyDown(event) {
            if (!this._isSelectOneElement) {
                return super._onKeyDown(event);
            }
            const {target, keyCode, ctrlKey, metaKey} = event;
            if (target !== this.input.element && !this.containerOuter.element.contains(target)) {
                return;
            }
            const activeItems = this._store.activeItems;
            const hasFocusedInput = this.input.isFocussed;
            const hasActiveDropdown = this.dropdown.isActive;
            const hasItems = this.itemList.hasChildren;
            const keyString = String.fromCharCode(keyCode);
            const {BACK_KEY, DELETE_KEY, TAB_KEY, ENTER_KEY, A_KEY, ESC_KEY, UP_KEY, DOWN_KEY, PAGE_UP_KEY, PAGE_DOWN_KEY} = KEY_CODES;
            const hasCtrlDownKeyPressed = ctrlKey || metaKey;
            if (!this._isTextElement && /[a-zA-Z0-9-_ ]/.test(keyString)) {
                this.showDropdown();
            }
            const keyDownActions = {
                [A_KEY]: this._onAKey,
                [TAB_KEY]: this._onTabKey,
                [ENTER_KEY]: this._onEnterKey,
                [ESC_KEY]: this._onEscapeKey,
                [UP_KEY]: this._onDirectionKey,
                [PAGE_UP_KEY]: this._onDirectionKey,
                [DOWN_KEY]: this._onDirectionKey,
                [PAGE_DOWN_KEY]: this._onDirectionKey,
                [DELETE_KEY]: this._onDeleteKey,
                [BACK_KEY]: this._onDeleteKey
            };
            if (keyDownActions[keyCode]) {
                keyDownActions[keyCode]({
                    event,
                    target,
                    keyCode,
                    metaKey,
                    activeItems,
                    hasFocusedInput,
                    hasActiveDropdown,
                    hasItems,
                    hasCtrlDownKeyPressed
                });
            }
        }
        onSelectValue({event, activeItems, hasActiveDropdown}) {
            if (hasActiveDropdown) {
                this._selectHighlightedChoice(activeItems);
            } else if (this._isSelectOneElement) {
                this.showDropdown();
                event.preventDefault();
            }
        }
        showDropdown(...args) {
            if (!this.shouldOpenDropDown) {
                this.shouldOpenDropDown = true;
                return;
            }
            super.showDropdown(...args);
        }
        hideDropdown(...args) {
            if (this.isDirectionUsing) {
                return;
            }
            super.hideDropdown(...args);
        }
    }
    return ChoicesWrapper;
});
define('skylark-formio/components/select/Select',[
    '../../utils/ChoicesWrapper',
    'skylark-lodash',
    '../../Formio',
    '../_classes/field/Field',
    '../../Form',
    '../../vendors/getify/npo'
], function (
    Choices, 
    _, 
    Formio, 
    Field, 
    Form, 
    NativePromise
) {
    'use strict';
    return class SelectComponent extends Field {
        static schema(...extend) {
            return Field.schema({
                type: 'select',
                label: 'Select',
                key: 'select',
                data: {
                    values: [],
                    json: '',
                    url: '',
                    resource: '',
                    custom: ''
                },
                clearOnRefresh: false,
                limit: 100,
                dataSrc: 'values',
                valueProperty: '',
                lazyLoad: true,
                filter: '',
                searchEnabled: true,
                searchField: '',
                minSearch: 0,
                readOnlyValue: false,
                authenticate: false,
                template: '<span>{{ item.label }}</span>',
                selectFields: '',
                searchThreshold: 0.3,
                tableView: true,
                fuseOptions: {
                    include: 'score',
                    threshold: 0.3
                },
                customOptions: {}
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Select',
                group: 'basic',
                icon: 'th-list',
                weight: 70,
                documentation: 'http://help.form.io/userguide/#select',
                schema: SelectComponent.schema()
            };
        }
        init() {
            super.init();
            this.validators = this.validators.concat(['select']);
            let updateArgs = [];
            const triggerUpdate = _.debounce((...args) => {
                updateArgs = [];
                return this.updateItems.apply(this, args);
            }, 100);
            this.triggerUpdate = (...args) => {
                if (args.length) {
                    updateArgs = args;
                }
                return triggerUpdate(...updateArgs);
            };
            this.selectOptions = [];
            if (this.isInfiniteScrollProvided) {
                this.isFromSearch = false;
                this.searchServerCount = null;
                this.defaultServerCount = null;
                this.isScrollLoading = false;
                this.searchDownloadedResources = [];
                this.defaultDownloadedResources = [];
            }
            this.activated = false;
            this.itemsLoaded = new NativePromise(resolve => {
                this.itemsLoadedResolve = resolve;
            });
        }
        get dataReady() {
            return this.itemsLoaded;
        }
        get defaultSchema() {
            return SelectComponent.schema();
        }
        get emptyValue() {
            if (this.valueProperty) {
                return '';
            }
            return {};
        }
        get valueProperty() {
            if (this.component.valueProperty) {
                return this.component.valueProperty;
            }
            if (this.component.dataSrc === 'values') {
                return 'value';
            }
            return '';
        }
        get inputInfo() {
            const info = super.elementInfo();
            info.type = 'select';
            info.changeEvent = 'change';
            return info;
        }
        get isSelectResource() {
            return this.component.dataSrc === 'resource';
        }
        get isSelectURL() {
            return this.component.dataSrc === 'url';
        }
        get isInfiniteScrollProvided() {
            return this.isSelectResource || this.isSelectURL;
        }
        get shouldDisabled() {
            return super.shouldDisabled || this.parentDisabled;
        }
        itemTemplate(data) {
            if (!data) {
                return '';
            }
            if (this.options.readOnly && this.component.readOnlyValue) {
                return this.itemValue(data);
            }
            if (data && !this.component.template) {
                const itemLabel = data.label || data;
                return typeof itemLabel === 'string' ? this.t(itemLabel) : itemLabel;
            }
            if (typeof data === 'string') {
                return this.t(data);
            }
            const template = this.component.template ? this.interpolate(this.component.template, { item: data }) : data.label;
            if (template) {
                const label = template.replace(/<\/?[^>]+(>|$)/g, '');
                return template.replace(label, this.t(label));
            } else {
                return JSON.stringify(data);
            }
        }
        addOption(value, label, attrs = {}, id) {
            const option = {
                value: _.isObject(value) ? value : _.isNull(value) ? this.emptyValue : String(this.normalizeSingleValue(value)),
                label: label
            };
            if (value) {
                this.selectOptions.push(option);
            }
            if (this.refs.selectContainer && this.component.widget === 'html5') {
                const div = document.createElement('div');
                div.innerHTML = this.sanitize(this.renderTemplate('selectOption', {
                    selected: _.isEqual(this.dataValue, option.value),
                    option,
                    attrs,
                    id,
                    useId: this.valueProperty === '' && _.isObject(value) && id
                })).trim();
                option.element = div.firstChild;
                this.refs.selectContainer.appendChild(option.element);
            }
        }
        addValueOptions(items) {
            items = items || [];
            if (!this.selectOptions.length) {
                if (this.choices) {
                    const currentChoices = Array.isArray(this.dataValue) ? this.dataValue : [this.dataValue];
                    return this.addCurrentChoices(currentChoices, items);
                } else if (!this.component.multiple) {
                    this.addPlaceholder();
                }
            }
            return false;
        }
        disableInfiniteScroll() {
            if (!this.downloadedResources) {
                return;
            }
            this.downloadedResources.serverCount = this.downloadedResources.length;
            this.serverCount = this.downloadedResources.length;
        }
        setItems(items, fromSearch) {
            if (typeof items == 'string') {
                try {
                    items = JSON.parse(items);
                } catch (err) {
                    console.warn(err.message);
                    items = [];
                }
            }
            if (this.component.onSetItems && typeof this.component.onSetItems === 'function') {
                const newItems = this.component.onSetItems(this, items);
                if (newItems) {
                    items = newItems;
                }
            }
            if (!this.choices && this.refs.selectContainer) {
                if (this.loading) {
                }
                this.empty(this.refs.selectContainer);
            }
            if (this.component.selectValues) {
                items = _.get(items, this.component.selectValues, items) || [];
            }
            let areItemsEqual;
            if (this.isInfiniteScrollProvided) {
                areItemsEqual = this.isSelectURL ? _.isEqual(items, this.downloadedResources) : false;
                const areItemsEnded = this.component.limit > items.length;
                const areItemsDownloaded = areItemsEqual && this.downloadedResources && this.downloadedResources.length === items.length;
                if (areItemsEnded) {
                    this.disableInfiniteScroll();
                } else if (areItemsDownloaded) {
                    this.selectOptions = [];
                } else {
                    this.serverCount = items.serverCount;
                }
            }
            if (this.isScrollLoading && items) {
                if (!areItemsEqual) {
                    this.downloadedResources = this.downloadedResources ? this.downloadedResources.concat(items) : items;
                }
                this.downloadedResources.serverCount = items.serverCount || this.downloadedResources.serverCount;
            } else {
                this.downloadedResources = items || [];
                this.selectOptions = [];
            }
            if (!fromSearch) {
                this.addValueOptions(items);
            }
            if (this.component.widget === 'html5' && !this.component.placeholder) {
                this.addOption(null, '');
            }
            _.each(items, (item, index) => {
                this.addOption(this.itemValue(item), this.itemTemplate(item), {}, String(index));
            });
            if (this.choices) {
                this.choices.setChoices(this.selectOptions, 'value', 'label', true);
            } else if (this.loading) {
            }
            this.isScrollLoading = false;
            this.loading = false;
            if (this.dataValue) {
                this.setValue(this.dataValue, { noUpdateEvent: true });
            } else {
                const defaultValue = this.multiple ? this.defaultValue || [] : this.defaultValue;
                if (defaultValue) {
                    this.setValue(defaultValue);
                }
            }
            this.itemsLoadedResolve();
        }
        loadItems(url, search, headers, options, method, body) {
            options = options || {};
            const minSearch = parseInt(this.component.minSearch, 10);
            if (this.component.searchField && minSearch > 0 && (!search || search.length < minSearch)) {
                return this.setItems([]);
            }
            method = method || 'GET';
            if (method.toUpperCase() === 'GET') {
                body = null;
            }
            const limit = this.component.limit || 100;
            const skip = this.isScrollLoading ? this.selectOptions.length : 0;
            const query = this.component.dataSrc === 'url' ? {} : {
                limit,
                skip
            };
            url = this.interpolate(url, {
                formioBase: Formio.getBaseUrl(),
                search,
                limit,
                skip,
                page: Math.abs(Math.floor(skip / limit))
            });
            if (this.component.searchField && search) {
                if (Array.isArray(search)) {
                    query[`${ this.component.searchField }`] = search.join(',');
                } else {
                    query[`${ this.component.searchField }`] = search;
                }
            }
            if (this.component.selectFields) {
                query.select = this.component.selectFields;
            }
            if (this.component.sort) {
                query.sort = this.component.sort;
            }
            if (!_.isEmpty(query)) {
                url += (!url.includes('?') ? '?' : '&') + Formio.serialize(query, item => this.interpolate(item));
            }
            if (this.component.filter) {
                url += (!url.includes('?') ? '?' : '&') + this.interpolate(this.component.filter);
            }
            options.header = headers;
            this.loading = true;
            Formio.makeRequest(this.options.formio, 'select', url, method, body, options).then(response => {
                this.loading = false;
                this.setItems(response, !!search);
            }).catch(err => {
                if (this.isInfiniteScrollProvided) {
                    this.setItems([]);
                    this.disableInfiniteScroll();
                }
                this.isScrollLoading = false;
                this.loading = false;
                this.itemsLoadedResolve();
                this.emit('componentError', {
                    component: this.component,
                    message: err.toString()
                });
                console.warn(`Unable to load resources for ${ this.key }`);
            });
        }
        get requestHeaders() {
            const headers = new Formio.Headers();
            if (this.component.data && this.component.data.headers) {
                try {
                    _.each(this.component.data.headers, header => {
                        if (header.key) {
                            headers.set(header.key, this.interpolate(header.value));
                        }
                    });
                } catch (err) {
                    console.warn(err.message);
                }
            }
            return headers;
        }
        getCustomItems() {
            return this.evaluate(this.component.data.custom, { values: [] }, 'values');
        }
        updateCustomItems() {
            this.setItems(this.getCustomItems() || []);
        }
        refresh() {
            if (this.component.clearOnRefresh) {
                this.setValue(this.emptyValue);
            }
            if (this.component.lazyLoad) {
                this.activated = false;
                this.loading = true;
                this.setItems([]);
            }
            this.updateItems(null, true);
        }
        get additionalResourcesAvailable() {
            return _.isNil(this.serverCount) || this.serverCount > this.downloadedResources.length;
        }
        get serverCount() {
            if (this.isFromSearch) {
                return this.searchServerCount;
            }
            return this.defaultServerCount;
        }
        set serverCount(value) {
            if (this.isFromSearch) {
                this.searchServerCount = value;
            } else {
                this.defaultServerCount = value;
            }
        }
        get downloadedResources() {
            if (this.isFromSearch) {
                return this.searchDownloadedResources;
            }
            return this.defaultDownloadedResources;
        }
        set downloadedResources(value) {
            if (this.isFromSearch) {
                this.searchDownloadedResources = value;
            } else {
                this.defaultDownloadedResources = value;
            }
        }
        updateItems(searchInput, forceUpdate) {
            if (!this.component.data) {
                console.warn(`Select component ${ this.key } does not have data configuration.`);
                this.itemsLoadedResolve();
                return;
            }
            if (!this.checkConditions()) {
                this.itemsLoadedResolve();
                return;
            }
            switch (this.component.dataSrc) {
            case 'values':
                this.setItems(this.component.data.values);
                break;
            case 'json':
                this.setItems(this.component.data.json);
                break;
            case 'custom':
                this.updateCustomItems();
                break;
            case 'resource': {
                    if (!this.component.data.resource || !forceUpdate && !this.active) {
                        return;
                    }
                    let resourceUrl = this.options.formio ? this.options.formio.formsUrl : `${ Formio.getProjectUrl() }/form`;
                    resourceUrl += `/${ this.component.data.resource }/submission`;
                    if (forceUpdate || this.additionalResourcesAvailable) {
                        try {
                            this.loadItems(resourceUrl, searchInput, this.requestHeaders);
                        } catch (err) {
                            console.warn(`Unable to load resources for ${ this.key }`);
                        }
                    } else {
                        this.setItems(this.downloadedResources);
                    }
                    break;
                }
            case 'url': {
                    if (!forceUpdate && !this.active) {
                        return;
                    }
                    let {url} = this.component.data;
                    let method;
                    let body;
                    if (url.startsWith('/')) {
                        const baseUrl = url.startsWith('/project') ? Formio.getBaseUrl() : Formio.getProjectUrl() || Formio.getBaseUrl();
                        url = baseUrl + url;
                    }
                    if (!this.component.data.method) {
                        method = 'GET';
                    } else {
                        method = this.component.data.method;
                        if (method.toUpperCase() === 'POST') {
                            body = this.component.data.body;
                        } else {
                            body = null;
                        }
                    }
                    const options = this.component.authenticate ? {} : { noToken: true };
                    this.loadItems(url, searchInput, this.requestHeaders, options, method, body);
                    break;
                }
            case 'indexeddb': {
                    if (!window.indexedDB) {
                        window.alert("Your browser doesn't support current version of indexedDB");
                    }
                    if (this.component.indexeddb && this.component.indexeddb.database && this.component.indexeddb.table) {
                        const request = window.indexedDB.open(this.component.indexeddb.database);
                        request.onupgradeneeded = event => {
                            if (this.component.customOptions) {
                                const db = event.target.result;
                                const objectStore = db.createObjectStore(this.component.indexeddb.table, {
                                    keyPath: 'myKey',
                                    autoIncrement: true
                                });
                                objectStore.transaction.oncomplete = () => {
                                    const transaction = db.transaction(this.component.indexeddb.table, 'readwrite');
                                    this.component.customOptions.forEach(item => {
                                        transaction.objectStore(this.component.indexeddb.table).put(item);
                                    });
                                };
                            }
                        };
                        request.onerror = () => {
                            window.alert(request.errorCode);
                        };
                        request.onsuccess = event => {
                            const db = event.target.result;
                            const transaction = db.transaction(this.component.indexeddb.table, 'readwrite');
                            const objectStore = transaction.objectStore(this.component.indexeddb.table);
                            new NativePromise(resolve => {
                                const responseItems = [];
                                objectStore.getAll().onsuccess = event => {
                                    event.target.result.forEach(item => {
                                        responseItems.push(item);
                                    });
                                    resolve(responseItems);
                                };
                            }).then(items => {
                                if (!_.isEmpty(this.component.indexeddb.filter)) {
                                    items = _.filter(items, this.component.indexeddb.filter);
                                }
                                this.setItems(items);
                            });
                        };
                    }
                }
            }
        }
        addPlaceholder() {
            if (!this.component.placeholder) {
                return;
            }
            this.addOption('', this.component.placeholder, { placeholder: true });
        }
        activate() {
            if (this.active) {
                return;
            }
            this.activated = true;
            if (this.choices) {
                this.choices.setChoices([{
                        value: '',
                        label: `<i class="${ this.iconClass('refresh') }" style="font-size:1.3em;"></i>`,
                        disabled: true
                    }], 'value', 'label', true);
            } else if (this.component.dataSrc === 'url' || this.component.dataSrc === 'resource') {
                this.addOption('', this.t('loading...'));
            }
            this.triggerUpdate();
        }
        get active() {
            return !this.component.lazyLoad || this.activated || this.options.readOnly;
        }
        render() {
            const info = this.inputInfo;
            info.attr = info.attr || {};
            info.multiple = this.component.multiple;
            return super.render(this.wrapElement(this.renderTemplate('select', {
                input: info,
                selectOptions: '',
                index: null
            })));
        }
        wrapElement(element) {
            return this.component.addResource ? this.renderTemplate('resourceAdd', { element }) : element;
        }
        choicesOptions() {
            const useSearch = this.component.hasOwnProperty('searchEnabled') ? this.component.searchEnabled : true;
            const placeholderValue = this.t(this.component.placeholder);
            let customOptions = this.component.customOptions || {};
            if (typeof customOptions == 'string') {
                try {
                    customOptions = JSON.parse(customOptions);
                } catch (err) {
                    console.warn(err.message);
                    customOptions = {};
                }
            }
            return {
                removeItemButton: this.component.disabled ? false : _.get(this.component, 'removeItemButton', true),
                itemSelectText: '',
                classNames: {
                    containerOuter: 'choices form-group formio-choices',
                    containerInner: this.transform('class', 'form-control ui fluid selection dropdown')
                },
                addItemText: false,
                placeholder: !!this.component.placeholder,
                placeholderValue: placeholderValue,
                noResultsText: this.t('No results found'),
                noChoicesText: this.t('No choices to choose from'),
                searchPlaceholderValue: this.t('Type to search'),
                shouldSort: false,
                position: this.component.dropdown || 'auto',
                searchEnabled: useSearch,
                searchChoices: !this.component.searchField,
                searchFields: _.get(this, 'component.searchFields', ['label']),
                fuseOptions: Object.assign({}, _.get(this, 'component.fuseOptions', {}), {
                    include: 'score',
                    threshold: _.get(this, 'component.searchThreshold', 0.3)
                }),
                valueComparer: _.isEqual,
                resetScrollPosition: false,
                ...customOptions
            };
        }
        attach(element) {
            const superAttach = super.attach(element);
            this.loadRefs(element, {
                selectContainer: 'single',
                addResource: 'single',
                autocompleteInput: 'single'
            });
            const autocompleteInput = this.refs.autocompleteInput;
            if (autocompleteInput) {
                this.addEventListener(autocompleteInput, 'change', event => {
                    this.setValue(event.target.value);
                });
            }
            const input = this.refs.selectContainer;
            if (!input) {
                return;
            }
            this.addEventListener(input, this.inputInfo.changeEvent, () => this.updateValue(null, { modified: true }));
            if (this.component.widget === 'html5') {
                this.triggerUpdate();
                this.focusableElement = input;
                this.addEventListener(input, 'focus', () => this.update());
                this.addEventListener(input, 'keydown', event => {
                    const {key} = event;
                    if ([
                            'Backspace',
                            'Delete'
                        ].includes(key)) {
                        this.setValue(this.emptyValue);
                    }
                });
                return;
            }
            const tabIndex = input.tabIndex;
            this.addPlaceholder();
            input.setAttribute('dir', this.i18next.dir());
            if (this.choices) {
                this.choices.destroy();
            }
            const choicesOptions = this.choicesOptions();
            this.choices = new Choices(input, choicesOptions);
            this.addEventListener(input, 'hideDropdown', () => {
                this.choices.input.element.value = '';
                this.updateItems(null, true);
            });
            if (this.selectOptions && this.selectOptions.length) {
                this.choices.setChoices(this.selectOptions, 'value', 'label', true);
            }
            if (this.component.multiple) {
                this.focusableElement = this.choices.input.element;
            } else {
                this.focusableElement = this.choices.containerInner.element;
                this.choices.containerOuter.element.setAttribute('tabIndex', '-1');
                if (choicesOptions.searchEnabled) {
                    this.addEventListener(this.choices.containerOuter.element, 'focus', () => this.focusableElement.focus());
                }
            }
            if (this.isInfiniteScrollProvided) {
                this.scrollList = this.choices.choiceList.element;
                this.onScroll = () => {
                    const isLoadingAvailable = !this.isScrollLoading && this.additionalResourcesAvailable && this.scrollList.scrollTop + this.scrollList.clientHeight >= this.scrollList.scrollHeight;
                    if (isLoadingAvailable) {
                        this.isScrollLoading = true;
                        this.choices.setChoices([{
                                value: `${ this.id }-loading`,
                                label: 'Loading...',
                                disabled: true
                            }], 'value', 'label');
                        this.triggerUpdate(this.choices.input.element.value);
                    }
                };
                this.addEventListener(this.scrollList, 'scroll', this.onScroll);
            }
            this.focusableElement.setAttribute('tabIndex', tabIndex);
            if (this.component.searchField) {
                if (this.choices && this.choices.input && this.choices.input.element) {
                    this.addEventListener(this.choices.input.element, 'input', event => {
                        this.isFromSearch = !!event.target.value;
                        if (!event.target.value) {
                            this.triggerUpdate();
                        } else {
                            this.serverCount = null;
                            this.downloadedResources = [];
                        }
                    });
                }
                this.addEventListener(input, 'search', event => this.triggerUpdate(event.detail.value));
                this.addEventListener(input, 'stopSearch', () => this.triggerUpdate());
            }
            this.addEventListener(input, 'showDropdown', () => {
                if (this.dataValue) {
                    this.triggerUpdate();
                }
                this.update();
            });
            if (choicesOptions.placeholderValue && this.choices._isSelectOneElement) {
                this.addPlaceholderItem(choicesOptions.placeholderValue);
                this.addEventListener(input, 'removeItem', () => {
                    this.addPlaceholderItem(choicesOptions.placeholderValue);
                });
            }
            this.addValueOptions();
            this.setChoicesValue(this.dataValue);
            if (this.isSelectResource && this.refs.addResource) {
                this.addEventListener(this.refs.addResource, 'click', event => {
                    event.preventDefault();
                    const formioForm = this.ce('div');
                    const dialog = this.createModal(formioForm);
                    const projectUrl = _.get(this.root, 'formio.projectUrl', Formio.getBaseUrl());
                    const formUrl = `${ projectUrl }/form/${ this.component.data.resource }`;
                    new Form(formioForm, formUrl, {}).ready.then(form => {
                        form.on('submit', submission => {
                            if (this.component.multiple) {
                                submission = [
                                    ...this.dataValue,
                                    submission
                                ];
                            }
                            this.setValue(submission);
                            dialog.close();
                        });
                    });
                });
            }
            this.disabled = this.shouldDisabled;
            this.triggerUpdate();
            return superAttach;
        }
        addPlaceholderItem(placeholderValue) {
            const items = this.choices._store.activeItems;
            if (!items.length) {
                this.choices._addItem({
                    value: placeholderValue,
                    label: placeholderValue,
                    choiceId: 0,
                    groupId: -1,
                    customProperties: null,
                    placeholder: true,
                    keyCode: null
                });
            }
        }
        update() {
            if (this.component.dataSrc === 'custom') {
                this.updateCustomItems();
            }
            this.activate();
        }
        set disabled(disabled) {
            super.disabled = disabled;
            if (!this.choices) {
                return;
            }
            if (disabled) {
                this.setDisabled(this.choices.containerInner.element, true);
                this.focusableElement.removeAttribute('tabIndex');
                this.choices.disable();
            } else {
                this.setDisabled(this.choices.containerInner.element, false);
                this.focusableElement.setAttribute('tabIndex', this.component.tabindex || 0);
                this.choices.enable();
            }
        }
        get disabled() {
            return super.disabled;
        }
        set visible(value) {
            if (value && !this._visible !== !value) {
                this.triggerUpdate();
            }
            super.visible = value;
        }
        get visible() {
            return super.visible;
        }
        addCurrentChoices(values, items, keyValue) {
            if (!values) {
                return false;
            }
            const notFoundValuesToAdd = [];
            const added = values.reduce((defaultAdded, value) => {
                if (!value || _.isEmpty(value)) {
                    return defaultAdded;
                }
                let found = false;
                const isSelectOptions = items === this.selectOptions;
                if (items && items.length) {
                    _.each(items, choice => {
                        if (choice._id && value._id && choice._id === value._id) {
                            found = true;
                            return false;
                        }
                        const itemValue = keyValue ? choice.value : this.itemValue(choice, isSelectOptions);
                        found |= _.isEqual(itemValue, value);
                        return found ? false : true;
                    });
                }
                if (!found) {
                    notFoundValuesToAdd.push({
                        value: this.itemValue(value),
                        label: this.itemTemplate(value)
                    });
                    return true;
                }
                return found || defaultAdded;
            }, false);
            if (notFoundValuesToAdd.length) {
                if (this.choices) {
                    this.choices.setChoices(notFoundValuesToAdd, 'value', 'label', true);
                } else {
                    notFoundValuesToAdd.map(notFoundValue => {
                        this.addOption(notFoundValue.value, notFoundValue.label);
                    });
                }
            }
            return added;
        }
        getValueAsString(data) {
            return this.component.multiple && Array.isArray(data) ? data.map(this.asString.bind(this)).join(', ') : this.asString(data);
        }
        getValue() {
            if (this.viewOnly || this.loading || !this.component.lazyLoad && !this.selectOptions.length || !this.element) {
                return this.dataValue;
            }
            let value = this.emptyValue;
            if (this.choices) {
                value = this.choices.getValue(true);
                if (!this.component.multiple && this.component.placeholder && value === this.t(this.component.placeholder)) {
                    value = this.emptyValue;
                }
            } else if (this.refs.selectContainer) {
                value = this.refs.selectContainer.value;
                if (this.valueProperty === '') {
                    if (value === '') {
                        return {};
                    }
                    const option = this.selectOptions[value];
                    if (option && _.isObject(option.value)) {
                        value = option.value;
                    }
                }
            } else {
                value = this.dataValue;
            }
            if (value === undefined || value === null) {
                value = '';
            }
            return value;
        }
        redraw() {
            const done = super.redraw();
            this.triggerUpdate();
            return done;
        }
        normalizeSingleValue(value) {
            if (!value) {
                return;
            }
            const dataType = this.component['dataType'] || 'auto';
            const denormalizedValue = typeof value === 'string' ? value.toLowerCase() : value;
            const normalize = {
                value: denormalizedValue,
                toNumber() {
                    try {
                        const numberValue = parseFloat(this.value);
                        if (!Number.isNaN(numberValue) && isFinite(numberValue)) {
                            this.value = numberValue;
                            return this;
                        }
                        return this;
                    } catch (e) {
                        return this;
                    }
                },
                toBoolean() {
                    try {
                        const booleanValue = this.value === 'true' || this.value === 'false';
                        if (booleanValue) {
                            this.value = this.value === 'true';
                            return this;
                        }
                        return this;
                    } catch (e) {
                        return this;
                    }
                },
                toString() {
                    try {
                        const stringValue = typeof this.value === 'object' ? JSON.stringify(this.value) : this.value.toString();
                        if (stringValue) {
                            this.value = stringValue;
                            return this;
                        }
                        return this;
                    } catch (e) {
                        return this;
                    }
                },
                auto() {
                    try {
                        const autoValue = this.toString().toNumber().toBoolean();
                        if (autoValue && !_.isObject(autoValue)) {
                            this.value = autoValue;
                        }
                        return this;
                    } catch (e) {
                        return this;
                    }
                }
            };
            switch (dataType) {
            case 'auto': {
                    return normalize.auto().value;
                }
            case 'number': {
                    return normalize.toNumber().value;
                }
            case 'string': {
                    return normalize.toString().value;
                }
            case 'boolean':
                return normalize.toBoolean().value;
            }
        }
        normalizeValue(value) {
            if (this.component.multiple && Array.isArray(value)) {
                return value.map(singleValue => this.normalizeSingleValue(singleValue));
            }
            return super.normalizeValue(this.normalizeSingleValue(value));
        }
        setValue(value, flags = {}) {
            const previousValue = this.dataValue;
            const changed = this.updateValue(value, flags);
            value = this.dataValue;
            const hasPreviousValue = Array.isArray(previousValue) ? previousValue.length : previousValue;
            const hasValue = Array.isArray(value) ? value.length : value;
            if (this.component.multiple && Array.isArray(value)) {
                value = value.map(value => {
                    if (typeof value === 'boolean' || typeof value === 'number') {
                        return value.toString();
                    }
                    return value;
                });
            } else {
                if (typeof value === 'boolean' || typeof value === 'number') {
                    value = value.toString();
                }
            }
            if (this.loading) {
                return changed;
            }
            if (this.isInitApiCallNeeded(hasValue)) {
                this.loading = true;
                this.lazyLoadInit = true;
                const searchProperty = this.component.searchField || this.component.valueProperty;
                this.triggerUpdate(_.get(value.data || value, searchProperty, value), true);
                return changed;
            }
            this.addValueOptions();
            this.setChoicesValue(value, hasPreviousValue);
            return changed;
        }
        isInitApiCallNeeded(hasValue) {
            return this.component.lazyLoad && !this.lazyLoadInit && !this.active && !this.selectOptions.length && hasValue && this.visible && (this.component.searchField || this.component.valueProperty);
        }
        setChoicesValue(value, hasPreviousValue) {
            const hasValue = Array.isArray(value) ? value.length : value;
            hasPreviousValue = hasPreviousValue === undefined ? true : hasPreviousValue;
            if (this.choices) {
                if (hasValue) {
                    this.choices.removeActiveItems();
                    const currentChoices = Array.isArray(value) ? value : [value];
                    if (!this.addCurrentChoices(currentChoices, this.selectOptions, true)) {
                        this.choices.setChoices(this.selectOptions, 'value', 'label', true);
                    }
                    this.choices.setChoiceByValue(value);
                } else if (hasPreviousValue) {
                    this.choices.removeActiveItems();
                }
            } else {
                if (hasValue) {
                    const values = Array.isArray(value) ? value : [value];
                    _.each(this.selectOptions, selectOption => {
                        _.each(values, val => {
                            if (_.isEqual(val, selectOption.value) && selectOption.element) {
                                selectOption.element.selected = true;
                                selectOption.element.setAttribute('selected', 'selected');
                                return false;
                            }
                        });
                    });
                } else {
                    _.each(this.selectOptions, selectOption => {
                        if (selectOption.element) {
                            selectOption.element.selected = false;
                            selectOption.element.removeAttribute('selected');
                        }
                    });
                }
            }
        }
        deleteValue() {
            this.setValue('', { noUpdateEvent: true });
            this.unset();
        }
        validateMultiple() {
            return false;
        }
        isBooleanOrNumber(value) {
            return typeof value === 'number' || typeof value === 'boolean';
        }
        asString(value) {
            value = value || this.getValue();
            if (this.isBooleanOrNumber(value)) {
                value = value.toString();
            }
            if (Array.isArray(value) && value.some(item => this.isBooleanOrNumber(item))) {
                value = value.map(item => {
                    if (this.isBooleanOrNumber(item)) {
                        item = item.toString();
                    }
                });
            }
            if ([
                    'values',
                    'custom'
                ].includes(this.component.dataSrc)) {
                const {items, valueProperty} = this.component.dataSrc === 'values' ? {
                    items: this.component.data.values,
                    valueProperty: 'value'
                } : {
                    items: this.getCustomItems(),
                    valueProperty: this.valueProperty
                };
                value = this.component.multiple && Array.isArray(value) ? _.filter(items, item => value.includes(item.value)) : valueProperty ? _.find(items, [
                    valueProperty,
                    value
                ]) : value;
            }
            if (_.isString(value)) {
                return value;
            }
            if (Array.isArray(value)) {
                const items = [];
                value.forEach(item => items.push(this.itemTemplate(item)));
                return items.length > 0 ? items.join('<br />') : '-';
            }
            return !_.isNil(value) ? this.itemTemplate(value) : '-';
        }
        detach() {
            super.detach();
            if (this.choices) {
                this.choices.destroy();
                this.choices = null;
            }
        }
        focus() {
            if (this.focusableElement) {
                this.focusableElement.focus();
            }
        }
        setErrorClasses(elements, dirty, hasError) {
            super.setErrorClasses(elements, dirty, hasError);
            if (this.choices) {
                super.setErrorClasses([this.choices.containerInner.element], dirty, hasError);
            } else {
                super.setErrorClasses([this.refs.selectContainer], dirty, hasError);
            }
        }
    };
});
define('skylark-formio/components/resource/Resource',[
    '../select/Select'
], function (SelectComponent) {
    'use strict';
    return class ResourceComponent extends SelectComponent {
        static schema(...extend) {
            return SelectComponent.schema({
                type: 'resource',
                label: 'Resource',
                key: 'resource',
                dataSrc: 'resource',
                resource: '',
                project: '',
                template: '<span>{{ item.data }}</span>'
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Resource',
                group: 'premium',
                icon: 'files-o',
                weight: 90,
                documentation: 'http://help.form.io/userguide/#resource',
                schema: ResourceComponent.schema()
            };
        }
        init() {
            super.init();
            this.component.dataSrc = 'resource';
            this.component.data = { resource: this.component.resource };
        }
        get defaultSchema() {
            return ResourceComponent.schema();
        }
    };
});
define('skylark-formio/components/selectboxes/SelectBoxes',[
    'skylark-lodash',
    '../radio/Radio'
], function (_, RadioComponent) {
    'use strict';
    return class SelectBoxesComponent extends RadioComponent {
        static schema(...extend) {
            return RadioComponent.schema({
                type: 'selectboxes',
                label: 'Select Boxes',
                key: 'selectBoxes',
                inline: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Select Boxes',
                group: 'basic',
                icon: 'plus-square',
                weight: 60,
                documentation: 'http://help.form.io/userguide/#selectboxes',
                schema: SelectBoxesComponent.schema()
            };
        }
        constructor(...args) {
            super(...args);
            this.validators = this.validators.concat('minSelectedCount', 'maxSelectedCount');
        }
        init() {
            super.init();
            this.component.inputType = 'checkbox';
        }
        get defaultSchema() {
            return SelectBoxesComponent.schema();
        }
        get inputInfo() {
            const info = super.elementInfo();
            info.attr.name += '[]';
            info.attr.type = 'checkbox';
            info.attr.class = 'form-check-input';
            return info;
        }
        get emptyValue() {
            return this.component.values.reduce((prev, value) => {
                prev[value.value] = false;
                return prev;
            }, {});
        }
        isEmpty(value = this.dataValue) {
            let empty = true;
            for (const key in value) {
                if (value.hasOwnProperty(key) && value[key]) {
                    empty = false;
                    break;
                }
            }
            return empty;
        }
        getValue() {
            if (this.viewOnly || !this.refs.input || !this.refs.input.length) {
                return this.dataValue;
            }
            const value = {};
            _.each(this.refs.input, input => {
                value[input.value] = !!input.checked;
            });
            return value;
        }
        normalizeValue(value) {
            value = value || {};
            if (typeof value !== 'object') {
                if (typeof value === 'string') {
                    value = { [value]: true };
                } else {
                    value = {};
                }
            }
            if (Array.isArray(value)) {
                _.each(value, val => {
                    value[val] = true;
                });
            }
            return value;
        }
        setValue(value, flags = {}) {
            const changed = this.updateValue(value, flags);
            value = this.dataValue;
            _.each(this.refs.input, input => {
                if (_.isUndefined(value[input.value])) {
                    value[input.value] = false;
                }
                input.checked = !!value[input.value];
            });
            return changed;
        }
        getValueAsString(value) {
            if (!value) {
                return '';
            }
            return _(this.component.values || []).filter(v => value[v.value]).map('label').join(', ');
        }
        checkComponentValidity(data, dirty, rowData) {
            const minCount = this.component.validate.minSelectedCount;
            const maxCount = this.component.validate.maxSelectedCount;
            if ((maxCount || minCount) && !this.isValid(data, dirty)) {
                const count = Object.keys(this.validationValue).reduce((total, key) => {
                    if (this.validationValue[key]) {
                        total++;
                    }
                    return total;
                }, 0);
                if (maxCount && count >= maxCount) {
                    if (this.refs.input) {
                        this.refs.input.forEach(item => {
                            if (!item.checked) {
                                item.disabled = true;
                            }
                        });
                    }
                    if (maxCount && count > maxCount) {
                        const message = this.component.maxSelectedCountMessage ? this.component.maxSelectedCountMessage : `You can only select up to ${ maxCount } items.`;
                        this.setCustomValidity(message, dirty);
                        return false;
                    }
                } else if (minCount && count < minCount) {
                    if (this.refs.input) {
                        this.refs.input.forEach(item => {
                            item.disabled = false;
                        });
                    }
                    const message = this.component.minSelectedCountMessage ? this.component.minSelectedCountMessage : `You must select at least ${ minCount } items.`;
                    this.setCustomValidity(message, dirty);
                    return false;
                } else {
                    if (this.refs.input) {
                        this.refs.input.forEach(item => {
                            item.disabled = false;
                        });
                    }
                }
            }
            return super.checkComponentValidity(data, dirty, rowData);
        }
    };
});
define('skylark-formio/vendors/signature_pad/Point',[],function(){
	function Point(x, y, time) {
	  this.x = x;
	  this.y = y;
	  this.time = time || new Date().getTime();
	}

	Point.prototype.velocityFrom = function (start) {
	  return (this.time !== start.time) ? this.distanceTo(start) / (this.time - start.time) : 1;
	};

	Point.prototype.distanceTo = function (start) {
	  return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
	};

	Point.prototype.equals = function (other) {
	  return this.x === other.x && this.y === other.y && this.time === other.time;
	};
	return Point;
});

define('skylark-formio/vendors/signature_pad/bezier',[],function(){

  function Bezier(startPoint, control1, control2, endPoint) {
    this.startPoint = startPoint;
    this.control1 = control1;
    this.control2 = control2;
    this.endPoint = endPoint;
  }

  // Returns approximated length.
  Bezier.prototype.length = function () {
    const steps = 10;
    let length = 0;
    let px;
    let py;

    for (let i = 0; i <= steps; i += 1) {
      const t = i / steps;
      const cx = this._point(
        t,
        this.startPoint.x,
        this.control1.x,
        this.control2.x,
        this.endPoint.x,
      );
      const cy = this._point(
        t,
        this.startPoint.y,
        this.control1.y,
        this.control2.y,
        this.endPoint.y,
      );
      if (i > 0) {
        const xdiff = cx - px;
        const ydiff = cy - py;
        length += Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));
      }
      px = cx;
      py = cy;
    }

    return length;
  };

  /* eslint-disable no-multi-spaces, space-in-parens */
  Bezier.prototype._point = function (t, start, c1, c2, end) {
    return (       start * (1.0 - t) * (1.0 - t)  * (1.0 - t))
         + (3.0 *  c1    * (1.0 - t) * (1.0 - t)  * t)
         + (3.0 *  c2    * (1.0 - t) * t          * t)
         + (       end   * t         * t          * t);
  };
  /* eslint-enable no-multi-spaces, space-in-parens */

  return Bezier;

});

define('skylark-formio/vendors/signature_pad/throttle',[],function(){
/* eslint-disable */

// http://stackoverflow.com/a/27078401/815507
return function throttle(func, wait, options) {
  var context, args, result;
  var timeout = null;
  var previous = 0;
  if (!options) options = {};
  var later = function () {
    previous = options.leading === false ? 0 : Date.now();
    timeout = null;
    result = func.apply(context, args);
    if (!timeout) context = args = null;
  };
  return function () {
    var now = Date.now();
    if (!previous && options.leading === false) previous = now;
    var remaining = wait - (now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = now;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result;
  };
}

});

define('skylark-formio/vendors/signature_pad/SignaturePad',[
  './Point',
  './bezier',
  './throttle'
],function(Point,Bezier,throttle){

  function SignaturePad(canvas, options) {
    const self = this;
    const opts = options || {};

    this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;
    this.minWidth = opts.minWidth || 0.5;
    this.maxWidth = opts.maxWidth || 2.5;
    this.throttle = 'throttle' in opts ? opts.throttle : 16; // in miliseconds
    this.minDistance = 'minDistance' in opts ? opts.minDistance : 5;

    if (this.throttle) {
      this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);
    } else {
      this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;
    }

    this.dotSize = opts.dotSize || function () {
      return (this.minWidth + this.maxWidth) / 2;
    };
    this.penColor = opts.penColor || 'black';
    this.backgroundColor = opts.backgroundColor || 'rgba(0,0,0,0)';
    this.onBegin = opts.onBegin;
    this.onEnd = opts.onEnd;

    this._canvas = canvas;
    this._ctx = canvas.getContext('2d');
    this.clear();

    // We need add these inline so they are available to unbind while still having
    // access to 'self' we could use _.bind but it's not worth adding a dependency.
    this._handleMouseDown = function (event) {
      if (event.which === 1) {
        self._mouseButtonDown = true;
        self._strokeBegin(event);
      }
    };

    this._handleMouseMove = function (event) {
      if (self._mouseButtonDown) {
        self._strokeMoveUpdate(event);
      }
    };

    this._handleMouseUp = function (event) {
      if (event.which === 1 && self._mouseButtonDown) {
        self._mouseButtonDown = false;
        self._strokeEnd(event);
      }
    };

    this._handleTouchStart = function (event) {
      if (event.targetTouches.length === 1) {
        const touch = event.changedTouches[0];
        self._strokeBegin(touch);
      }
    };

    this._handleTouchMove = function (event) {
      // Prevent scrolling.
      event.preventDefault();

      const touch = event.targetTouches[0];
      self._strokeMoveUpdate(touch);
    };

    this._handleTouchEnd = function (event) {
      const wasCanvasTouched = event.target === self._canvas;
      if (wasCanvasTouched) {
        event.preventDefault();
        self._strokeEnd(event);
      }
    };

    // Enable mouse and touch event handlers
    this.on();
  }

  // Public methods
  SignaturePad.prototype.clear = function () {
    const ctx = this._ctx;
    const canvas = this._canvas;

    ctx.fillStyle = this.backgroundColor;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    this._data = [];
    this._reset();
    this._isEmpty = true;
  };

  SignaturePad.prototype.fromDataURL = function (dataUrl, options = {}) {
    const image = new Image();
    const ratio = options.ratio || window.devicePixelRatio || 1;
    const width = options.width || (this._canvas.width / ratio);
    const height = options.height || (this._canvas.height / ratio);

    this._reset();
    image.src = dataUrl;
    image.onload = () => {
      this._ctx.drawImage(image, 0, 0, width, height);
    };
    this._isEmpty = false;
  };

  SignaturePad.prototype.toDataURL = function (type, ...options) {
    switch (type) {
      case 'image/svg+xml':
        return this._toSVG();
      default:
        return this._canvas.toDataURL(type, ...options);
    }
  };

  SignaturePad.prototype.on = function () {
    this._handleMouseEvents();
    this._handleTouchEvents();
  };

  SignaturePad.prototype.off = function () {
    this._canvas.removeEventListener('mousedown', this._handleMouseDown);
    this._canvas.removeEventListener('mousemove', this._handleMouseMove);
    document.removeEventListener('mouseup', this._handleMouseUp);

    this._canvas.removeEventListener('touchstart', this._handleTouchStart);
    this._canvas.removeEventListener('touchmove', this._handleTouchMove);
    this._canvas.removeEventListener('touchend', this._handleTouchEnd);
  };

  SignaturePad.prototype.isEmpty = function () {
    return this._isEmpty;
  };

  // Private methods
  SignaturePad.prototype._strokeBegin = function (event) {
    this._data.push([]);
    this._reset();
    this._strokeUpdate(event);

    if (typeof this.onBegin === 'function') {
      this.onBegin(event);
    }
  };

  SignaturePad.prototype._strokeUpdate = function (event) {
    const x = event.clientX;
    const y = event.clientY;

    const point = this._createPoint(x, y);
    const lastPointGroup = this._data[this._data.length - 1];
    const lastPoint = lastPointGroup && lastPointGroup[lastPointGroup.length - 1];
    const isLastPointTooClose = lastPoint && point.distanceTo(lastPoint) < this.minDistance;

    // Skip this point if it's too close to the previous one
    if (!(lastPoint && isLastPointTooClose)) {
      const { curve, widths } = this._addPoint(point);

      if (curve && widths) {
        this._drawCurve(curve, widths.start, widths.end);
      }

      this._data[this._data.length - 1].push({
        x: point.x,
        y: point.y,
        time: point.time,
        color: this.penColor,
      });
    }
  };

  SignaturePad.prototype._strokeEnd = function (event) {
    const canDrawCurve = this.points.length > 2;
    const point = this.points[0]; // Point instance

    if (!canDrawCurve && point) {
      this._drawDot(point);
    }

    if (point) {
      const lastPointGroup = this._data[this._data.length - 1];
      const lastPoint = lastPointGroup[lastPointGroup.length - 1]; // plain object

      // When drawing a dot, there's only one point in a group, so without this check
      // such group would end up with exactly the same 2 points.
      if (!point.equals(lastPoint)) {
        lastPointGroup.push({
          x: point.x,
          y: point.y,
          time: point.time,
          color: this.penColor,
        });
      }
    }

    if (typeof this.onEnd === 'function') {
      this.onEnd(event);
    }
  };

  SignaturePad.prototype._handleMouseEvents = function () {
    this._mouseButtonDown = false;

    this._canvas.addEventListener('mousedown', this._handleMouseDown);
    this._canvas.addEventListener('mousemove', this._handleMouseMove);
    document.addEventListener('mouseup', this._handleMouseUp);
  };

  SignaturePad.prototype._handleTouchEvents = function () {
    // Pass touch events to canvas element on mobile IE11 and Edge.
    this._canvas.style.msTouchAction = 'none';
    this._canvas.style.touchAction = 'none';

    this._canvas.addEventListener('touchstart', this._handleTouchStart);
    this._canvas.addEventListener('touchmove', this._handleTouchMove);
    this._canvas.addEventListener('touchend', this._handleTouchEnd);
  };

  SignaturePad.prototype._reset = function () {
    this.points = [];
    this._lastVelocity = 0;
    this._lastWidth = (this.minWidth + this.maxWidth) / 2;
    this._ctx.fillStyle = this.penColor;
  };

  SignaturePad.prototype._createPoint = function (x, y, time) {
    const rect = this._canvas.getBoundingClientRect();

    return new Point(
      x - rect.left,
      y - rect.top,
      time || new Date().getTime(),
    );
  };

  SignaturePad.prototype._addPoint = function (point) {
    const points = this.points;
    let tmp;

    points.push(point);

    if (points.length > 2) {
      // To reduce the initial lag make it work with 3 points
      // by copying the first point to the beginning.
      if (points.length === 3) points.unshift(points[0]);

      tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);
      const c2 = tmp.c2;
      tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);
      const c3 = tmp.c1;
      const curve = new Bezier(points[1], c2, c3, points[2]);
      const widths = this._calculateCurveWidths(curve);

      // Remove the first element from the list,
      // so that we always have no more than 4 points in points array.
      points.shift();

      return { curve, widths };
    }

    return {};
  };

  SignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {
    const dx1 = s1.x - s2.x;
    const dy1 = s1.y - s2.y;
    const dx2 = s2.x - s3.x;
    const dy2 = s2.y - s3.y;

    const m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };
    const m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };

    const l1 = Math.sqrt((dx1 * dx1) + (dy1 * dy1));
    const l2 = Math.sqrt((dx2 * dx2) + (dy2 * dy2));

    const dxm = (m1.x - m2.x);
    const dym = (m1.y - m2.y);

    const k = l2 / (l1 + l2);
    const cm = { x: m2.x + (dxm * k), y: m2.y + (dym * k) };

    const tx = s2.x - cm.x;
    const ty = s2.y - cm.y;

    return {
      c1: new Point(m1.x + tx, m1.y + ty),
      c2: new Point(m2.x + tx, m2.y + ty),
    };
  };

  SignaturePad.prototype._calculateCurveWidths = function (curve) {
    const startPoint = curve.startPoint;
    const endPoint = curve.endPoint;
    const widths = { start: null, end: null };

    const velocity = (this.velocityFilterWeight * endPoint.velocityFrom(startPoint))
     + ((1 - this.velocityFilterWeight) * this._lastVelocity);

    const newWidth = this._strokeWidth(velocity);

    widths.start = this._lastWidth;
    widths.end = newWidth;

    this._lastVelocity = velocity;
    this._lastWidth = newWidth;

    return widths;
  };

  SignaturePad.prototype._strokeWidth = function (velocity) {
    return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
  };

  SignaturePad.prototype._drawPoint = function (x, y, size) {
    const ctx = this._ctx;

    ctx.moveTo(x, y);
    ctx.arc(x, y, size, 0, 2 * Math.PI, false);
    this._isEmpty = false;
  };

  SignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {
    const ctx = this._ctx;
    const widthDelta = endWidth - startWidth;
    const drawSteps = Math.floor(curve.length());

    ctx.beginPath();

    for (let i = 0; i < drawSteps; i += 1) {
      // Calculate the Bezier (x, y) coordinate for this step.
      const t = i / drawSteps;
      const tt = t * t;
      const ttt = tt * t;
      const u = 1 - t;
      const uu = u * u;
      const uuu = uu * u;

      let x = uuu * curve.startPoint.x;
      x += 3 * uu * t * curve.control1.x;
      x += 3 * u * tt * curve.control2.x;
      x += ttt * curve.endPoint.x;

      let y = uuu * curve.startPoint.y;
      y += 3 * uu * t * curve.control1.y;
      y += 3 * u * tt * curve.control2.y;
      y += ttt * curve.endPoint.y;

      const width = startWidth + (ttt * widthDelta);
      this._drawPoint(x, y, width);
    }

    ctx.closePath();
    ctx.fill();
  };

  SignaturePad.prototype._drawDot = function (point) {
    const ctx = this._ctx;
    const width = (typeof this.dotSize) === 'function' ? this.dotSize() : this.dotSize;

    ctx.beginPath();
    this._drawPoint(point.x, point.y, width);
    ctx.closePath();
    ctx.fill();
  };

  SignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {
    for (let i = 0; i < pointGroups.length; i += 1) {
      const group = pointGroups[i];

      if (group.length > 1) {
        for (let j = 0; j < group.length; j += 1) {
          const rawPoint = group[j];
          const point = new Point(rawPoint.x, rawPoint.y, rawPoint.time);
          const color = rawPoint.color;

          if (j === 0) {
            // First point in a group. Nothing to draw yet.

            // All points in the group have the same color, so it's enough to set
            // penColor just at the beginning.
            this.penColor = color;
            this._reset();

            this._addPoint(point);
          } else if (j !== group.length - 1) {
            // Middle point in a group.
            const { curve, widths } = this._addPoint(point);
            if (curve && widths) {
              drawCurve(curve, widths, color);
            }
          } else {
            // Last point in a group. Do nothing.
          }
        }
      } else {
        this._reset();
        const rawPoint = group[0];
        drawDot(rawPoint);
      }
    }
  };

  SignaturePad.prototype._toSVG = function () {
    const pointGroups = this._data;
    const canvas = this._canvas;
    const ratio = Math.max(window.devicePixelRatio || 1, 1);
    const minX = 0;
    const minY = 0;
    const maxX = canvas.width / ratio;
    const maxY = canvas.height / ratio;
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');

    svg.setAttributeNS(null, 'width', canvas.width);
    svg.setAttributeNS(null, 'height', canvas.height);

    this._fromData(
      pointGroups,
      (curve, widths, color) => {
        const path = document.createElement('path');

        // Need to check curve for NaN values, these pop up when drawing
        // lines on the canvas that are not continuous. E.g. Sharp corners
        // or stopping mid-stroke and than continuing without lifting mouse.
        if (!isNaN(curve.control1.x) &&
            !isNaN(curve.control1.y) &&
            !isNaN(curve.control2.x) &&
            !isNaN(curve.control2.y)) {
          const attr = `M ${curve.startPoint.x.toFixed(3)},${curve.startPoint.y.toFixed(3)} `
                     + `C ${curve.control1.x.toFixed(3)},${curve.control1.y.toFixed(3)} `
                     + `${curve.control2.x.toFixed(3)},${curve.control2.y.toFixed(3)} `
                     + `${curve.endPoint.x.toFixed(3)},${curve.endPoint.y.toFixed(3)}`;

          path.setAttribute('d', attr);
          path.setAttribute('stroke-width', (widths.end * 2.25).toFixed(3));
          path.setAttribute('stroke', color);
          path.setAttribute('fill', 'none');
          path.setAttribute('stroke-linecap', 'round');

          svg.appendChild(path);
        }
      },
      (rawPoint) => {
        const circle = document.createElement('circle');
        const dotSize = (typeof this.dotSize) === 'function' ? this.dotSize() : this.dotSize;
        circle.setAttribute('r', dotSize);
        circle.setAttribute('cx', rawPoint.x);
        circle.setAttribute('cy', rawPoint.y);
        circle.setAttribute('fill', rawPoint.color);

        svg.appendChild(circle);
      },
    );

    const prefix = 'data:image/svg+xml;base64,';
    const header = '<svg'
      + ' xmlns="http://www.w3.org/2000/svg"'
      + ' xmlns:xlink="http://www.w3.org/1999/xlink"'
      + ` viewBox="${minX} ${minY} ${maxX} ${maxY}"`
      + ` width="${maxX}"`
      + ` height="${maxY}"`
      + '>';
    let body = svg.innerHTML;

    // IE hack for missing innerHTML property on SVGElement
    if (body === undefined) {
      const dummy = document.createElement('dummy');
      const nodes = svg.childNodes;
      dummy.innerHTML = '';

      for (let i = 0; i < nodes.length; i += 1) {
        dummy.appendChild(nodes[i].cloneNode(true));
      }

      body = dummy.innerHTML;
    }

    const footer = '</svg>';
    const data = header + body + footer;

    return prefix + btoa(data);
  };

  SignaturePad.prototype.fromData = function (pointGroups) {
    this.clear();

    this._fromData(
      pointGroups,
      (curve, widths) => this._drawCurve(curve, widths.start, widths.end),
      rawPoint => this._drawDot(rawPoint),
    );

    this._data = pointGroups;
  };

  SignaturePad.prototype.toData = function () {
    return this._data;
  };

  return SignaturePad;
});

define('skylark-formio/components/signature/Signature',[
    '../../vendors/signature_pad/SignaturePad',
    '../_classes/input/Input',
    'skylark-lodash'
], function (SignaturePad, Input, _) {
    'use strict';
    return class SignatureComponent extends Input {
        static schema(...extend) {
            return Input.schema({
                type: 'signature',
                label: 'Signature',
                key: 'signature',
                footer: 'Sign above',
                width: '100%',
                height: '150px',
                penColor: 'black',
                backgroundColor: 'rgb(245,245,235)',
                minWidth: '0.5',
                maxWidth: '2.5'
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Signature',
                group: 'advanced',
                icon: 'pencil',
                weight: 120,
                documentation: 'http://help.form.io/userguide/#signature',
                schema: SignatureComponent.schema()
            };
        }
        init() {
            super.init();
            this.currentWidth = 0;
            this.scale = 1;
            if (!this.component.width) {
                this.component.width = '100%';
            }
            if (!this.component.height) {
                this.component.height = '200px';
            }
        }
        get emptyValue() {
            return '';
        }
        get defaultSchema() {
            return SignatureComponent.schema();
        }
        get inputInfo() {
            const info = super.inputInfo;
            info.type = 'input';
            info.attr.type = 'hidden';
            return info;
        }
        get className() {
            return `${ super.className } signature-pad`;
        }
        labelIsHidden() {
            return true;
        }
        setValue(value, flags = {}) {
            const changed = super.setValue(value, flags);
            if (value && this.refs.signatureImage && this.options.readOnly) {
                this.refs.signatureImage.setAttribute('src', value);
                this.showCanvas(false);
            }
            if (this.signaturePad) {
                if (!value) {
                    this.signaturePad.clear();
                } else if (changed) {
                    this.triggerChange();
                }
            }
            return changed;
        }
        showCanvas(show) {
            if (show) {
                if (this.refs.canvas) {
                    this.refs.canvas.style.display = 'inherit';
                }
                if (this.refs.signatureImage) {
                    this.refs.signatureImage.style.display = 'none';
                }
            } else {
                if (this.refs.canvas) {
                    this.refs.canvas.style.display = 'none';
                }
                if (this.refs.signatureImage) {
                    this.refs.signatureImage.style.display = 'inherit';
                }
            }
        }
        onDisabled() {
            this.showCanvas(!super.disabled);
            if (this.signaturePad) {
                if (super.disabled) {
                    this.signaturePad.off();
                    if (this.refs.refresh) {
                        this.refs.refresh.classList.add('disabled');
                    }
                } else {
                    this.signaturePad.on();
                    if (this.refs.refresh) {
                        this.refs.refresh.classList.remove('disabled');
                    }
                }
            }
        }
        checkSize(force, scale) {
            if (force || this.refs.padBody.offsetWidth !== this.currentWidth) {
                this.scale = force ? scale : this.scale;
                this.currentWidth = this.refs.padBody.offsetWidth;
                this.refs.canvas.width = this.currentWidth * this.scale;
                this.refs.canvas.height = this.refs.padBody.offsetHeight * this.scale;
                const ctx = this.refs.canvas.getContext('2d');
                ctx.setTransform(1, 0, 0, 1, 0, 0);
                ctx.scale(1 / this.scale, 1 / this.scale);
                ctx.fillStyle = this.signaturePad.backgroundColor;
                ctx.fillRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);
                this.signaturePad.clear();
                if (this.dataValue) {
                    this.signaturePad.fromDataURL(this.dataValue);
                }
            }
        }
        renderElement(value, index) {
            return this.renderTemplate('signature', {
                element: super.renderElement(value, index),
                required: _.get(this.component, 'validate.required', false)
            });
        }
        setOpenModalElement() {
            const template = `
      <label class="control-label">${ this.component.label }</label><br>
      <button lang='en' class='btn btn-light btn-md open-modal-button' ref='openModal'>Click to Sign</button>
    `;
            this.componentModal.setOpenModalElement(template);
        }
        getModalPreviewTemplate() {
            return `
      <label class="control-label">${ this.component.label }</label><br>
      <img src=${ this.dataValue } ref='openModal' />
    `;
        }
        attach(element) {
            this.loadRefs(element, {
                canvas: 'single',
                refresh: 'single',
                padBody: 'single',
                signatureImage: 'single'
            });
            const superAttach = super.attach(element);
            this.onDisabled();
            if (this.refs.refresh && this.options.readOnly) {
                this.refs.refresh.classList.add('disabled');
            }
            if (this.refs.canvas) {
                this.signaturePad = new SignaturePad(this.refs.canvas, {
                    minWidth: this.component.minWidth,
                    maxWidth: this.component.maxWidth,
                    penColor: this.component.penColor,
                    backgroundColor: this.component.backgroundColor
                });
                this.signaturePad.onEnd = () => this.setValue(this.signaturePad.toDataURL());
                this.refs.signatureImage.setAttribute('src', this.signaturePad.toDataURL());
                if (this.refs.padBody) {
                    if (!this.refs.padBody.style.maxWidth) {
                        this.refs.padBody.style.maxWidth = '100%';
                    }
                    this.addEventListener(window, 'resize', _.debounce(() => this.checkSize(), 100));
                    setTimeout(function checkWidth() {
                        if (this.refs.padBody && this.refs.padBody.offsetWidth) {
                            this.checkSize();
                        } else {
                            setTimeout(checkWidth.bind(this), 200);
                        }
                    }.bind(this), 200);
                }
            }
            this.addEventListener(this.refs.refresh, 'click', event => {
                event.preventDefault();
                this.showCanvas(true);
                this.signaturePad.clear();
                this.setValue(this.defaultValue);
            });
            this.setValue(this.dataValue);
            return superAttach;
        }
        detach() {
            if (this.signaturePad) {
                this.signaturePad.off();
            }
            this.signaturePad = null;
            this.currentWidth = 0;
            super.detach();
        }
        getValueAsString(value) {
            return value ? 'Yes' : 'No';
        }
        focus() {
            this.refs.padBody.focus();
        }
    };
});
define('skylark-formio/components/survey/Survey',[
    'skylark-lodash',
    '../_classes/field/Field',
    '../../utils/utils'
], function (_, Field, a) {
    'use strict';
    return class SurveyComponent extends Field {
        static schema(...extend) {
            return Field.schema({
                type: 'survey',
                label: 'Survey',
                key: 'survey',
                questions: [],
                values: []
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Survey',
                group: 'advanced',
                icon: 'list',
                weight: 110,
                documentation: 'http://help.form.io/userguide/#survey',
                schema: SurveyComponent.schema()
            };
        }
        get defaultSchema() {
            return SurveyComponent.schema();
        }
        render() {
            return super.render(this.renderTemplate('survey'));
        }
        attach(element) {
            this.loadRefs(element, { input: 'multiple' });
            const superAttach = super.attach(element);
            this.refs.input.forEach(input => {
                if (this.disabled) {
                    input.setAttribute('disabled', 'disabled');
                } else {
                    this.addEventListener(input, 'change', () => this.updateValue(null, { modified: true }));
                }
            });
            this.setValue(this.dataValue);
            return superAttach;
        }
        setValue(value, flags = {}) {
            if (!value) {
                return false;
            }
            _.each(this.component.questions, question => {
                _.each(this.refs.input, input => {
                    if (input.name === this.getInputName(question)) {
                        input.checked = input.value === value[question.value];
                    }
                });
            });
            return this.updateValue(value, flags);
        }
        get emptyValue() {
            return {};
        }
        getValue() {
            if (this.viewOnly || !this.refs.input || !this.refs.input.length) {
                return this.dataValue;
            }
            const value = {};
            _.each(this.component.questions, question => {
                _.each(this.refs.input, input => {
                    if (input.checked && input.name === this.getInputName(question)) {
                        value[question.value] = input.value;
                        return false;
                    }
                });
            });
            return value;
        }
        set disabled(disabled) {
            super.disabled = disabled;
            _.each(this.refs.input, input => {
                input.disabled = true;
            });
        }
        get disabled() {
            return super.disabled;
        }
        validateRequired(setting, value) {
            if (!a.boolValue(setting)) {
                return true;
            }
            return this.component.questions.reduce((result, question) => result && Boolean(value[question.value]), true);
        }
        getInputName(question) {
            return `${ this.options.name }[${ question.value }]`;
        }
    };
});
define('skylark-formio/utils/builder',[
    'skylark-lodash',
    './utils'
], function (_, a) {
    'use strict';
    return {
        uniquify(container, component) {
            let changed = false;
            const formKeys = {};
            a.eachComponent(container, function (comp) {
                formKeys[comp.key] = true;
            }, true);
            a.eachComponent([component], component => {
                if (!component.key) {
                    return;
                }
                const newKey = a.uniqueKey(formKeys, component.key);
                if (newKey !== component.key) {
                    component.key = newKey;
                    formKeys[newKey] = true;
                    changed = true;
                }
            }, true);
            return changed;
        },
        additionalShortcuts: {
            button: [
                'Enter',
                'Esc'
            ]
        },
        getAlphaShortcuts() {
            return _.range('A'.charCodeAt(), 'Z'.charCodeAt() + 1).map(charCode => String.fromCharCode(charCode));
        },
        getAdditionalShortcuts(type) {
            return this.additionalShortcuts[type] || [];
        },
        getBindedShortcuts(components, input) {
            const result = [];
            a.eachComponent(components, component => {
                if (component === input) {
                    return;
                }
                if (component.shortcut) {
                    result.push(component.shortcut);
                }
                if (component.values) {
                    component.values.forEach(value => {
                        if (value.shortcut) {
                            result.push(value.shortcut);
                        }
                    });
                }
            }, true);
            return result;
        },
        getAvailableShortcuts(form, component) {
            if (!component) {
                return [];
            }
            return [''].concat(_.difference(this.getAlphaShortcuts().concat(this.getAdditionalShortcuts(component.type)), this.getBindedShortcuts(form.components, component))).map(shortcut => ({
                label: shortcut,
                value: shortcut
            }));
        }
    };
});
define('skylark-formio/components/table/Table',[
    'skylark-lodash',
    '../../utils/builder',
    '../_classes/nested/NestedComponent'
], function (_, BuilderUtils, NestedComponent) {
    'use strict';
    return class TableComponent extends NestedComponent {
        static emptyTable(numRows, numCols) {
            const rows = [];
            for (let i = 0; i < numRows; i++) {
                const cols = [];
                for (let j = 0; j < numCols; j++) {
                    cols.push({ components: [] });
                }
                rows.push(cols);
            }
            return rows;
        }
        static schema(...extend) {
            return NestedComponent.schema({
                label: 'Table',
                type: 'table',
                input: false,
                key: 'table',
                numRows: 3,
                numCols: 3,
                rows: TableComponent.emptyTable(3, 3),
                header: [],
                caption: '',
                cloneRows: false,
                striped: false,
                bordered: false,
                hover: false,
                condensed: false,
                persistent: false
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Table',
                group: 'layout',
                icon: 'table',
                weight: 40,
                documentation: 'http://help.form.io/userguide/#table',
                schema: TableComponent.schema()
            };
        }
        get defaultSchema() {
            return TableComponent.schema();
        }
        get schema() {
            const schema = _.omit(super.schema, 'components');
            schema.rows = [];
            this.eachComponent(component => {
                if (!schema.rows || !schema.rows.length) {
                    schema.rows = TableComponent.emptyTable(this.component.numRows, this.component.numCols);
                }
                if (!schema.rows[component.tableRow]) {
                    schema.rows[component.tableRow] = [];
                }
                if (!schema.rows[component.tableRow][component.tableColumn]) {
                    schema.rows[component.tableRow][component.column] = { components: [] };
                }
                schema.rows[component.tableRow][component.tableColumn].components.push(component.schema);
            });
            if (!schema.rows.length) {
                schema.rows = TableComponent.emptyTable(this.component.numRows, this.component.numCols);
            }
            return schema;
        }
        get className() {
            let name = `table-responsive ${ super.className }`;
            if (!this.component.bordered) {
                name += ' no-top-border-table';
            }
            return name;
        }
        get cellClassName() {
            let name = '';
            if (this.component.cellAlignment) {
                name = `cell-align-${ this.component.cellAlignment }`;
            }
            return name;
        }
        get tableKey() {
            return `table-${ this.key }`;
        }
        constructor(...args) {
            super(...args);
            this.noField = true;
        }
        init() {
            super.init();
            for (let rowIndex = 0; rowIndex < this.component.numRows; rowIndex++) {
                this.component.rows[rowIndex] = this.component.rows[rowIndex] || [];
                for (let colIndex = 0; colIndex < this.component.numCols; colIndex++) {
                    this.component.rows[rowIndex][colIndex] = this.component.rows[rowIndex][colIndex] || { components: [] };
                }
                this.component.rows[rowIndex] = this.component.rows[rowIndex].slice(0, this.component.numCols);
            }
            this.component.rows = this.component.rows.slice(0, this.component.numRows);
            const lastNonEmptyRow = [];
            this.table = [];
            _.each(this.component.rows, (row, rowIndex) => {
                this.table[rowIndex] = [];
                _.each(row, (column, colIndex) => {
                    this.table[rowIndex][colIndex] = [];
                    if (this.component.cloneRows) {
                        if (column.components.length) {
                            lastNonEmptyRow[colIndex] = column;
                        } else if (lastNonEmptyRow[colIndex]) {
                            column.components = _.cloneDeep(lastNonEmptyRow[colIndex].components);
                            BuilderUtils.uniquify(this.root._form.components, column);
                        }
                    }
                    _.each(column.components, comp => {
                        const component = this.createComponent(comp);
                        component.tableRow = rowIndex;
                        component.tableColumn = colIndex;
                        this.table[rowIndex][colIndex].push(component);
                    });
                });
            });
        }
        render() {
            return super.render(this.renderTemplate('table', {
                cellClassName: this.cellClassName,
                tableKey: this.tableKey,
                tableComponents: this.table.map(row => row.map(column => this.renderComponents(column)))
            }));
        }
        attach(element) {
            const keys = this.table.reduce((prev, row, rowIndex) => {
                prev[`${ this.tableKey }-${ rowIndex }`] = 'multiple';
                return prev;
            }, {});
            this.loadRefs(element, keys);
            const superAttach = super.attach(element);
            this.table.forEach((row, rowIndex) => {
                row.forEach((column, columnIndex) => {
                    this.attachComponents(this.refs[`${ this.tableKey }-${ rowIndex }`][columnIndex], this.table[rowIndex][columnIndex], this.component.rows[rowIndex][columnIndex].components);
                });
            });
            return superAttach;
        }
        destroy(all) {
            super.destroy(all);
            delete this.table;
        }
    };
});
define('skylark-formio/components/tabs/Tabs',[
    'skylark-lodash',
    '../_classes/nested/NestedComponent'
], function (_, NestedComponent) {
    'use strict';
    return class TabsComponent extends NestedComponent {
        static schema(...extend) {
            return NestedComponent.schema({
                label: 'Tabs',
                type: 'tabs',
                input: false,
                key: 'tabs',
                persistent: false,
                tableView: false,
                components: [{
                        label: 'Tab 1',
                        key: 'tab1',
                        components: []
                    }]
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Tabs',
                group: 'layout',
                icon: 'folder-o',
                weight: 50,
                documentation: 'http://help.form.io/userguide/#tabs',
                schema: TabsComponent.schema()
            };
        }
        get defaultSchema() {
            return TabsComponent.schema();
        }
        get schema() {
            const schema = super.schema;
            const components = _.cloneDeep(this.component.components);
            schema.components = components.map((tab, index) => {
                tab.components = this.tabs[index].map(component => component.schema);
                return tab;
            });
            return schema;
        }
        get tabKey() {
            return `tab-${ this.key }`;
        }
        get tabLikey() {
            return `tabLi-${ this.key }`;
        }
        get tabLinkKey() {
            return `tabLink-${ this.key }`;
        }
        constructor(...args) {
            super(...args);
            this.currentTab = 0;
            this.noField = true;
        }
        init() {
            this.components = [];
            this.tabs = [];
            _.each(this.component.components, (tab, index) => {
                this.tabs[index] = [];
                tab.components = tab.components || [];
                _.each(tab.components, comp => {
                    const component = this.createComponent(comp);
                    component.tab = index;
                    this.tabs[index].push(component);
                });
            });
        }
        render() {
            return super.render(this.renderTemplate('tab', {
                tabKey: this.tabKey,
                tabLikey: this.tabLikey,
                tabLinkKey: this.tabLinkKey,
                currentTab: this.currentTab,
                tabComponents: this.tabs.map(tab => this.renderComponents(tab))
            }, this.options.flatten || this.options.pdf ? 'flat' : null));
        }
        attach(element) {
            this.loadRefs(element, {
                [this.tabLinkKey]: 'multiple',
                [this.tabKey]: 'multiple',
                [this.tabLikey]: 'multiple'
            });
            const superAttach = super.attach(element);
            this.refs[this.tabLinkKey].forEach((tabLink, index) => {
                this.addEventListener(tabLink, 'click', event => {
                    event.preventDefault();
                    this.setTab(index);
                });
            });
            this.refs[this.tabKey].forEach((tab, index) => {
                this.attachComponents(tab, this.tabs[index], this.component.components[index].components);
            });
            return superAttach;
        }
        detach(all) {
            super.detach(all);
        }
        setTab(index) {
            if (!this.tabs || !this.tabs[index] || !this.refs[this.tabKey] || !this.refs[this.tabKey][index]) {
                return;
            }
            this.currentTab = index;
            _.each(this.refs[this.tabKey], tab => {
                this.removeClass(tab, 'formio-tab-panel-active');
                tab.style.display = 'none';
            });
            this.addClass(this.refs[this.tabKey][index], 'formio-tab-panel-active');
            this.refs[this.tabKey][index].style.display = 'block';
            _.each(this.refs[this.tabLinkKey], (tabLink, tabIndex) => {
                if (this.refs[this.tabLinkKey][tabIndex]) {
                    this.removeClass(tabLink, 'formio-tab-link-active');
                }
                if (this.refs[this.tabLikey][tabIndex]) {
                    this.removeClass(this.refs[this.tabLikey][tabIndex], 'formio-tab-link-container-active');
                }
            });
            if (this.refs[this.tabLikey][index]) {
                this.addClass(this.refs[this.tabLikey][index], 'formio-tab-link-container-active');
            }
            if (this.refs[this.tabLinkKey][index]) {
                this.addClass(this.refs[this.tabLinkKey][index], 'formio-tab-link-active');
            }
            this.triggerChange();
        }
    };
});
define('skylark-formio/components/tags/Tags',[
    'skylark-choices',
    '../_classes/input/Input'
], function (Choices,Input) {
    'use strict';
    //TODO: lwf
    return class TagsComponent extends Input {
        static schema(...extend) {
            return Input.schema({
                type: 'tags',
                label: 'Tags',
                key: 'tags',
                delimeter: ',',
                storeas: 'string',
                maxTags: 0
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Tags',
                icon: 'tags',
                group: 'advanced',
                documentation: 'http://help.form.io/userguide/#tags',
                weight: 30,
                schema: TagsComponent.schema()
            };
        }
        init() {
            super.init();
        }
        get emptyValue() {
            return this.component.storeas === 'string' ? '' : [];
        }
        get defaultSchema() {
            return TagsComponent.schema();
        }
        get inputInfo() {
            const info = super.inputInfo;
            info.type = 'input';
            info.attr.type = 'text';
            info.changeEvent = 'change';
            return info;
        }
        get delimiter() {
            return this.component.delimeter || ',';
        }
        attachElement(element, index) {
            super.attachElement(element, index);
            if (!element) {
                return;
            }
            element.setAttribute('dir', this.i18next.dir());
            if (this.choices) {
                this.choices.destroy();
            }
            this.choices = new Choices(element, {
                delimiter: this.delimiter,
                editItems: true,
                maxItemCount: this.component.maxTags,
                removeItemButton: true,
                duplicateItemsAllowed: false
            });
            this.choices.itemList.element.tabIndex = element.tabIndex;
            this.addEventListener(this.choices.input.element, 'blur', () => {
                const value = this.choices.input.value;
                if (value) {
                    this.choices.setValue([value]);
                    this.choices.clearInput();
                    this.choices.hideDropdown(true);
                    this.updateValue(null, { modified: true });
                }
            });
        }
        detach() {
            super.detach();
            if (this.choices) {
                this.choices.destroy();
                this.choices = null;
            }
        }
        normalizeValue(value) {
            if (this.component.storeas === 'string' && Array.isArray(value)) {
                return value.join(this.delimiter);
            } else if (this.component.storeas === 'array' && typeof value === 'string') {
                return value.split(this.delimiter).filter(result => result);
            }
            return value;
        }
        setValue(value, flags = {}) {
            const changed = super.setValue(value, flags);
            if (this.choices) {
                let dataValue = this.dataValue;
                this.choices.removeActiveItems();
                if (dataValue) {
                    if (typeof dataValue === 'string') {
                        dataValue = dataValue.split(this.delimiter).filter(result => result);
                    }
                    this.choices.setValue(Array.isArray(dataValue) ? dataValue : [dataValue]);
                }
            }
            return changed;
        }
        set disabled(disabled) {
            super.disabled = disabled;
            if (!this.choices) {
                return;
            }
            if (disabled) {
                this.choices.disable();
            } else {
                this.choices.enable();
            }
        }
        get disabled() {
            return super.disabled;
        }
        focus() {
            if (this.refs.input && this.refs.input.length) {
                this.refs.input[0].parentNode.lastChild.focus();
            }
        }
    };
});
define('skylark-formio/components/textarea/TextArea',[
    '../textfield/TextField',
    'skylark-lodash',
    '../../vendors/getify/npo',
    '../../utils/utils'
], function (TextFieldComponent, _, NativePromise, a) {
    'use strict';
    return class TextAreaComponent extends TextFieldComponent {
        static schema(...extend) {
            return TextFieldComponent.schema({
                type: 'textarea',
                label: 'Text Area',
                key: 'textArea',
                rows: 3,
                wysiwyg: false,
                editor: '',
                inputFormat: 'html',
                validate: {
                    minWords: '',
                    maxWords: ''
                }
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Text Area',
                group: 'basic',
                icon: 'font',
                documentation: 'http://help.form.io/userguide/#textarea',
                weight: 20,
                schema: TextAreaComponent.schema()
            };
        }
        init() {
            super.init();
            this.editors = [];
            this.editorsReady = [];
            this.updateSizes = [];
            this.options.submitOnEnter = false;
        }
        get defaultSchema() {
            return TextAreaComponent.schema();
        }
        get inputInfo() {
            const info = super.inputInfo;
            info.type = this.component.wysiwyg ? 'div' : 'textarea';
            if (this.component.rows) {
                info.attr.rows = this.component.rows;
            }
            return info;
        }
        validateMultiple() {
            return !this.isJsonValue;
        }
        renderElement(value, index) {
            const info = this.inputInfo;
            info.attr = info.attr || {};
            info.content = value;
            if (this.options.readOnly || this.disabled) {
                return this.renderTemplate('well', {
                    children: '<div ref="input"></div>',
                    nestedKey: this.key,
                    value
                });
            }
            if (this.component.editor || this.component.wysiwyg) {
                return '<div ref="input"></div>';
            }
            return this.renderTemplate('input', {
                input: info,
                value,
                index
            });
        }
        get autoExpand() {
            return this.component.autoExpand;
        }
        updateEditorValue(index, newValue) {
            newValue = this.getConvertedValue(this.removeBlanks(newValue));
            const dataValue = this.dataValue;
            if (this.component.multiple && Array.isArray(dataValue)) {
                const newArray = _.clone(dataValue);
                newArray[index] = newValue;
                newValue = newArray;
            }
            if (!_.isEqual(newValue, dataValue) && (!_.isEmpty(newValue) || !_.isEmpty(dataValue))) {
                this.updateValue(newValue, { modified: !this.autoModified });
            }
            this.autoModified = false;
        }
        attachElement(element, index) {
            if (this.autoExpand && (this.isPlain || this.options.readOnly || this.options.htmlView)) {
                if (element.nodeName === 'TEXTAREA') {
                    this.addAutoExpanding(element, index);
                }
            }
            if (this.options.readOnly) {
                return element;
            }
            if (this.component.wysiwyg && !this.component.editor) {
                this.component.editor = 'ckeditor';
            }
            let settings = _.isEmpty(this.component.wysiwyg) ? this.wysiwygDefault[this.component.editor] || this.wysiwygDefault.default : this.component.wysiwyg;
            this.editorsReady[index] = new NativePromise(editorReady => {
                switch (this.component.editor) {
                case 'ace':
                    if (!settings) {
                        settings = {};
                    }
                    settings.mode = this.component.as;
                    this.addAce(element, settings, newValue => this.updateEditorValue(index, newValue)).then(ace => {
                        this.editors[index] = ace;
                        let dataValue = this.dataValue;
                        dataValue = this.component.multiple && Array.isArray(dataValue) ? dataValue[index] : dataValue;
                        ace.setValue(this.setConvertedValue(dataValue, index));
                        editorReady(ace);
                        return ace;
                    }).catch(err => console.warn(err));
                    break;
                case 'quill':
                    if (settings.hasOwnProperty('toolbarGroups') || settings.hasOwnProperty('toolbar')) {
                        console.warn('The WYSIWYG settings are configured for CKEditor. For this renderer, you will need to use configurations for the Quill Editor. See https://quilljs.com/docs/configuration for more information.');
                        settings = this.wysiwygDefault.quill;
                    }
                    this.addQuill(element, settings, () => this.updateEditorValue(index, this.editors[index].root.innerHTML)).then(quill => {
                        this.editors[index] = quill;
                        if (this.component.isUploadEnabled) {
                            const _this = this;
                            quill.getModule('toolbar').addHandler('image', function () {
                                _this.imageHandler.call(_this, this);
                            });
                        }
                        quill.root.spellcheck = this.component.spellcheck;
                        if (this.options.readOnly || this.component.disabled) {
                            quill.disable();
                        }
                        let dataValue = this.dataValue;
                        dataValue = this.component.multiple && Array.isArray(dataValue) ? dataValue[index] : dataValue;
                        quill.setContents(quill.clipboard.convert(this.setConvertedValue(dataValue, index)));
                        editorReady(quill);
                        return quill;
                    }).catch(err => console.warn(err));
                    break;
                case 'ckeditor':
                    settings = settings || {};
                    settings.rows = this.component.rows;
                    this.addCKE(element, settings, newValue => this.updateEditorValue(index, newValue)).then(editor => {
                        this.editors[index] = editor;
                        if (this.options.readOnly || this.component.disabled) {
                            editor.isReadOnly = true;
                        }
                        const numRows = parseInt(this.component.rows, 10);
                        if (_.isFinite(numRows) && _.has(editor, 'ui.view.editable.editableElement')) {
                            const editorHeight = numRows * 31 + 14;
                            editor.ui.view.editable.editableElement.style.height = `${ editorHeight }px`;
                        }
                        let dataValue = this.dataValue;
                        dataValue = this.component.multiple && Array.isArray(dataValue) ? dataValue[index] : dataValue;
                        editor.data.set(this.setConvertedValue(dataValue, index));
                        editorReady(editor);
                        return editor;
                    });
                    break;
                case 'tiny':
                    if (!settings) {
                        settings = {};
                    }
                    settings.mode = this.component.as || 'javascript';
                    this.addTiny(element, settings, newValue => this.updateEditorValue(newValue)).then(tiny => {
                        this.editors[index] = tiny;
                        tiny.setContent(this.setConvertedValue(this.dataValue));
                        editorReady(tiny);
                        return tiny;
                    }).catch(err => console.warn(err));
                    break;
                default:
                    super.attachElement(element, index);
                    break;
                }
            });
            return element;
        }
        attach(element) {
            const attached = super.attach(element);
            this.restoreValue();
            return attached;
        }
        imageHandler(quillInstance) {
            let fileInput = quillInstance.container.querySelector('input.ql-image[type=file]');
            if (fileInput == null) {
                fileInput = document.createElement('input');
                fileInput.setAttribute('type', 'file');
                fileInput.setAttribute('accept', 'image/*');
                fileInput.classList.add('ql-image');
                this.addEventListener(fileInput, 'change', () => {
                    const files = fileInput.files;
                    const range = quillInstance.quill.getSelection(true);
                    if (!files || !files.length) {
                        console.warn('No files selected');
                        return;
                    }
                    quillInstance.quill.enable(false);
                    const {uploadStorage, uploadUrl, uploadOptions, uploadDir, fileKey} = this.component;
                    let requestData;
                    this.root.formio.uploadFile(uploadStorage, files[0], a.uniqueName(files[0].name), uploadDir || '', null, uploadUrl, uploadOptions, fileKey).then(result => {
                        requestData = result;
                        return this.root.formio.downloadFile(result);
                    }).then(result => {
                        quillInstance.quill.enable(true);
                        const Delta = Quill.import('delta');
                        quillInstance.quill.updateContents(new Delta().retain(range.index).delete(range.length).insert({ image: result.url }, { alt: JSON.stringify(requestData) }), Quill.sources.USER);
                        fileInput.value = '';
                    }).catch(error => {
                        console.warn('Quill image upload failed');
                        console.warn(error);
                        quillInstance.quill.enable(true);
                    });
                });
                quillInstance.container.appendChild(fileInput);
            }
            fileInput.click();
        }
        get isPlain() {
            return !this.component.wysiwyg && !this.component.editor;
        }
        get htmlView() {
            return this.options.readOnly && (this.component.editor || this.component.wysiwyg);
        }
        setValueAt(index, value, flags = {}) {
            super.setValueAt(index, value, flags);
            if (this.editorsReady[index]) {
                const setEditorsValue = flags => editor => {
                    this.autoModified = true;
                    if (!flags.skipWysiwyg) {
                        switch (this.component.editor) {
                        case 'ace':
                            editor.setValue(this.setConvertedValue(value, index));
                            break;
                        case 'quill':
                            if (this.component.isUploadEnabled) {
                                this.setAsyncConvertedValue(value).then(result => {
                                    editor.setContents(editor.clipboard.convert(result));
                                });
                            } else {
                                editor.setContents(editor.clipboard.convert(this.setConvertedValue(value, index)));
                            }
                            break;
                        case 'ckeditor':
                            editor.data.set(this.setConvertedValue(value, index));
                            break;
                        case 'tiny':
                            editor.setContent(this.setConvertedValue(value));
                            break;
                        }
                    }
                };
                this.editorsReady[index].then(setEditorsValue(_.clone(flags)));
            }
        }
        setValue(value, flags = {}) {
            if (this.isPlain || this.options.readOnly || this.disabled) {
                value = this.component.multiple && Array.isArray(value) ? value.map((val, index) => this.setConvertedValue(val, index)) : this.setConvertedValue(value);
                return super.setValue(value, flags);
            }
            flags.skipWysiwyg = _.isEqual(value, this.getValue());
            return super.setValue(value, flags);
        }
        setReadOnlyValue(value, index) {
            index = index || 0;
            if (this.options.readOnly || this.disabled) {
                if (this.refs.input && this.refs.input[index]) {
                    this.setContent(this.refs.input[index], this.interpolate(value));
                }
            }
        }
        get isJsonValue() {
            return this.component.as && this.component.as === 'json';
        }
        setConvertedValue(value, index) {
            if (this.isJsonValue && !_.isNil(value)) {
                try {
                    value = JSON.stringify(value, null, 2);
                } catch (err) {
                    console.warn(err);
                }
            }
            if (!_.isString(value)) {
                value = '';
            }
            this.setReadOnlyValue(value, index);
            return value;
        }
        setAsyncConvertedValue(value) {
            if (this.isJsonValue && value) {
                try {
                    value = JSON.stringify(value, null, 2);
                } catch (err) {
                    console.warn(err);
                }
            }
            if (!_.isString(value)) {
                value = '';
            }
            const htmlDoc = new DOMParser().parseFromString(value, 'text/html');
            const images = htmlDoc.getElementsByTagName('img');
            if (images.length) {
                return this.setImagesUrl(images).then(() => {
                    value = htmlDoc.getElementsByTagName('body')[0].firstElementChild;
                    return new XMLSerializer().serializeToString(value);
                });
            } else {
                return NativePromise.resolve(value);
            }
        }
        setImagesUrl(images) {
            return NativePromise.all(_.map(images, image => {
                let requestData;
                try {
                    requestData = JSON.parse(image.getAttribute('alt'));
                } catch (error) {
                    console.warn(error);
                }
                return this.root.formio.downloadFile(requestData).then(result => {
                    image.setAttribute('src', result.url);
                });
            }));
        }
        addAutoExpanding(textarea, index) {
            let heightOffset = null;
            let previousHeight = null;
            const changeOverflow = value => {
                const width = textarea.style.width;
                textarea.style.width = '0px';
                textarea.offsetWidth;
                textarea.style.width = width;
                textarea.style.overflowY = value;
            };
            const preventParentScroll = (element, changeSize) => {
                const nodeScrolls = [];
                while (element && element.parentNode && element.parentNode instanceof Element) {
                    if (element.parentNode.scrollTop) {
                        nodeScrolls.push({
                            node: element.parentNode,
                            scrollTop: element.parentNode.scrollTop
                        });
                    }
                    element = element.parentNode;
                }
                changeSize();
                nodeScrolls.forEach(nodeScroll => {
                    nodeScroll.node.scrollTop = nodeScroll.scrollTop;
                });
            };
            const resize = () => {
                if (textarea.scrollHeight === 0) {
                    return;
                }
                preventParentScroll(textarea, () => {
                    textarea.style.height = '';
                    textarea.style.height = `${ textarea.scrollHeight + heightOffset }px`;
                });
            };
            const update = _.debounce(() => {
                resize();
                const styleHeight = Math.round(parseFloat(textarea.style.height));
                const computed = window.getComputedStyle(textarea, null);
                let currentHeight = textarea.offsetHeight;
                if (currentHeight < styleHeight && computed.overflowY === 'hidden') {
                    changeOverflow('scroll');
                } else if (computed.overflowY !== 'hidden') {
                    changeOverflow('hidden');
                }
                resize();
                currentHeight = textarea.offsetHeight;
                if (previousHeight !== currentHeight) {
                    previousHeight = currentHeight;
                    update();
                }
            }, 200);
            const computedStyle = window.getComputedStyle(textarea, null);
            textarea.style.resize = 'none';
            heightOffset = parseFloat(computedStyle.borderTopWidth) + parseFloat(computedStyle.borderBottomWidth) || 0;
            if (window) {
                this.addEventListener(window, 'resize', update);
            }
            this.addEventListener(textarea, 'input', update);
            this.on('initialized', update);
            this.updateSizes[index] = update;
            update();
        }
        removeBlanks(value) {
            if (!value) {
                return value;
            }
            const removeBlanks = function (input) {
                if (typeof input !== 'string') {
                    return input;
                }
                return input.replace(/<p>&nbsp;<\/p>|<p><br><\/p>|<p><br>&nbsp;<\/p>/g, '').trim();
            };
            if (Array.isArray(value)) {
                value.forEach((input, index) => {
                    value[index] = removeBlanks(input);
                });
            } else {
                value = removeBlanks(value);
            }
            return value;
        }
        onChange(flags, fromRoot) {
            const changed = super.onChange(flags, fromRoot);
            this.updateSizes.forEach(updateSize => updateSize());
            return changed;
        }
        hasChanged(newValue, oldValue) {
            return super.hasChanged(this.removeBlanks(newValue), this.removeBlanks(oldValue));
        }
        isEmpty(value = this.dataValue) {
            return super.isEmpty(this.removeBlanks(value));
        }
        get defaultValue() {
            let defaultValue = super.defaultValue;
            if (this.component.editor === 'quill' && !defaultValue) {
                defaultValue = '<p><br></p>';
            }
            return defaultValue;
        }
        getConvertedValue(value) {
            if (this.isJsonValue && value) {
                try {
                    value = JSON.parse(value);
                } catch (err) {
                }
            }
            return value;
        }
        detach() {
            this.editors.forEach(editor => {
                if (editor.destroy) {
                    editor.destroy();
                }
            });
            this.editors = [];
            this.editorsReady = [];
            this.updateSizes.forEach(updateSize => this.removeEventListener(window, 'resize', updateSize));
            this.updateSizes = [];
        }
        getValue() {
            if (this.isPlain) {
                return this.getConvertedValue(super.getValue());
            }
            return this.dataValue;
        }
    };
});
define('skylark-formio/components/time/Time',[
    'skylark-moment',
    '../textfield/TextField'
], function (moment, TextFieldComponent) {
    'use strict';
    const defaultDataFormat = 'HH:mm:ss';
    return class TimeComponent extends TextFieldComponent {
        static schema(...extend) {
            return TextFieldComponent.schema({
                type: 'time',
                label: 'Time',
                key: 'time',
                inputType: 'time',
                format: 'HH:mm',
                dataFormat: defaultDataFormat
            }, ...extend);
        }
        constructor(component, options, data) {
            super(component, options, data);
            this.component.inputMask = '99:99';
            this.component.inputType = this.component.inputType || 'time';
            this.rawData = this.component.multiple ? [] : this.emptyValue;
        }
        static get builderInfo() {
            return {
                title: 'Time',
                icon: 'clock-o',
                group: 'advanced',
                documentation: 'http://help.form.io/userguide/#time',
                weight: 55,
                schema: TimeComponent.schema()
            };
        }
        get dataFormat() {
            return this.component.dataFormat || defaultDataFormat;
        }
        get defaultSchema() {
            return TimeComponent.schema();
        }
        get defaultValue() {
            let value = super.defaultValue;
            if (this.component.multiple && Array.isArray(value)) {
                value = value.map(item => item ? this.getStringAsValue(item) : item);
            } else {
                if (value) {
                    value = this.getStringAsValue(value);
                }
            }
            return value;
        }
        get validationValue() {
            return this.rawData;
        }
        get inputInfo() {
            const info = super.inputInfo;
            info.attr.type = this.component.inputType;
            return info;
        }
        get skipMaskValidation() {
            return true;
        }
        isNotCompleteInput(value) {
            return value.includes('_');
        }
        removeValue(index) {
            this.rawData = Array.isArray(this.rawData) ? [
                ...this.rawData.slice(0, index),
                ...this.rawData.slice(index + 1)
            ] : this.emptyValue;
            super.removeValue(index);
        }
        resetRawData(index) {
            if (index) {
                this.setRawValue(this.emptyValue, index);
            } else {
                this.rawData = [];
            }
        }
        setRawValue(value, index) {
            if (Array.isArray(this.rawData)) {
                this.rawData[index] = value;
            } else {
                this.rawData = value;
            }
        }
        getRawValue(index) {
            if (index && Array.isArray(this.rawData)) {
                return this.rawData[index] || this.emptyValue;
            } else {
                return this.rawData;
            }
        }
        getValueAt(index) {
            if (!this.refs.input.length || !this.refs.input[index]) {
                return this.emptyValue;
            }
            const {value} = this.refs.input[index];
            if (!value) {
                this.resetRawData(index);
                return this.emptyValue;
            }
            this.setRawValue(value, index);
            return this.getStringAsValue(value);
        }
        setValueAt(index, value) {
            if (value && !this.getRawValue(index)) {
                this.setRawValue(this.getValueAsString(value), index);
            }
            this.refs.input[index].value = this.getRawValue(index);
        }
        getStringAsValue(view) {
            return view ? moment(view, this.component.format).format(this.component.dataFormat) : view;
        }
        getValueAsString(value) {
            return (value ? moment(value, this.component.dataFormat).format(this.component.format) : value) || '';
        }
    };
});
define('skylark-formio/components/tree/Node',['skylark-lodash'], function (_) {
    'use strict';
    return class Node {
        constructor(parent, {data = {}, children = []} = {}, {checkNode, createComponents, isNew = true, removeComponents} = {}) {
            this.parent = parent;
            this.previousData = {};
            this.persistentData = _.cloneDeep(data);
            this.new = isNew;
            this.createComponents = createComponents;
            this.checkNode = checkNode;
            this.removeComponents = removeComponents;
            this.revertAvailable = false;
            this.editing = false;
            this.collapsed = false;
            this.components = [];
            this.children = [];
            this.resetData();
            this.children = children.map(child => new Node(this, child, {
                checkNode,
                createComponents,
                isNew: false,
                removeComponents
            }));
        }
        get value() {
            return this.new ? null : {
                data: _.cloneDeep(this.persistentData),
                children: this.children.filter(child => !child.new).map(child => child.value)
            };
        }
        get isRoot() {
            return this.parent === null;
        }
        get changing() {
            return this.new || this.editing;
        }
        get hasChangingChildren() {
            return this.changin || this.children.some(child => child.hasChangingChildren);
        }
        get hasData() {
            return !_.isEmpty(this.persistentData);
        }
        get hasChildren() {
            return Array.isArray(this.children) && this.children.length > 0;
        }
        eachChild(iteratee) {
            iteratee(this);
            this.children.forEach(child => child.eachChild(iteratee));
            return this;
        }
        getComponents() {
            return this.children.reduce((components, child) => components.concat(child.getComponents()), this.components);
        }
        addChild() {
            if (this.new) {
                return null;
            }
            const child = new Node(this, {}, {
                checkNode: this.checkNode,
                createComponents: this.createComponents,
                isNew: true,
                removeComponents: this.removeComponents
            });
            this.children = this.children.concat(child);
            return child;
        }
        removeChild(childToRemove) {
            if (!this.new) {
                this.children = this.children.filter(child => child !== childToRemove);
            }
            return this;
        }
        edit() {
            if (this.new) {
                return this;
            }
            this.editing = true;
            return this.resetData();
        }
        save() {
            if (this.changing) {
                if (this.new) {
                    this.new = false;
                } else {
                    this.editing = false;
                    this.revertAvailable = true;
                }
                this.commitData();
            }
            return this;
        }
        cancel() {
            if (this.new) {
                this.remove();
            } else if (this.editing) {
                this.editing = false;
                this.resetData();
            }
            return this;
        }
        remove() {
            this.parent.removeChild(this);
            this.parent = null;
            this.clearComponents();
            return this;
        }
        revert() {
            if (!this.revertAvailable) {
                return this;
            }
            this.data = this.previousData;
            return this.commitData();
        }
        commitData() {
            this.previousData = this.persistentData;
            this.persistentData = _.cloneDeep(this.data);
            this.clearComponents();
            return this;
        }
        resetData() {
            this.data = _.cloneDeep(this.persistentData);
            this.updateComponentsContext();
            return this;
        }
        updateComponentsContext() {
            if (this.changing) {
                this.instantiateComponents();
            } else {
                this.clearComponents();
            }
            return this;
        }
        instantiateComponents() {
            this.components = this.createComponents(this.data, this);
            this.checkNode(this);
        }
        clearComponents() {
            this.removeComponents(this.components);
            this.components = [];
        }
    };
});
define('skylark-formio/components/tree/Tree',[
    'skylark-lodash',
    '../_classes/component/Component',
    '../Components',
    '../_classes/nested/NestedComponent',
    './Node',
    '../../vendors/getify/npo'
], function (_, Component, Components, NestedComponent, Node, NativePromise) {
    'use strict';
    return class TreeComponent extends NestedComponent {
        static schema(...extend) {
            return NestedComponent.schema({
                label: 'Tree',
                key: 'tree',
                type: 'tree',
                clearOnHide: true,
                input: true,
                tree: true,
                components: []
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Tree',
                icon: 'indent',
                group: 'data',
                weight: 40,
                schema: TreeComponent.schema()
            };
        }
        constructor(...args) {
            super(...args);
            this.type = 'tree';
        }
        get emptyValue() {
            return {};
        }
        get viewComponents() {
            if (!this.viewComponentsInstantiated) {
                this.viewComponentsInstantiated = true;
                this._viewComponents = this.createComponents({});
            }
            return this._viewComponents;
        }
        init() {
            if (this.builderMode) {
                return super.init();
            }
            this.components = [];
            this.componentOptions = {
                ...this.options,
                parent: this,
                root: this.root || this
            };
            this.setRoot();
            this.viewComponentsInstantiated = false;
            this._viewComponents = [];
        }
        destroy() {
            super.destroy();
            if (!this.builderMode) {
                this.removeComponents(this._viewComponents);
            }
        }
        createComponents(data, node) {
            const components = this.componentComponents.map(component => Components.create(component, this.componentOptions, data));
            if (node) {
                this.checkNode(this.data, node);
            }
            return components;
        }
        removeComponents(components) {
            return components.map(component => component.destroy());
        }
        render() {
            if (this.builderMode) {
                return super.render();
            }
            return super.render(this.renderTree(this.treeRoot));
        }
        renderTree(node = {}, odd = true) {
            const childNodes = node.hasChildren && !node.collapsed ? this.renderChildNodes(node.children, !odd) : [];
            const content = node.changing ? this.renderEdit(node) : this.renderView(node);
            return this.renderTemplate('tree', {
                odd,
                childNodes,
                content,
                node
            });
        }
        renderChildNodes(nodes = [], odd) {
            return nodes.map(node => this.renderTree(node, odd));
        }
        renderEdit(node = {}) {
            return this.renderTemplate('treeEdit', {
                children: this.renderComponents(node.components),
                node
            });
        }
        renderView(node = {}) {
            return this.renderTemplate('treeView', {
                values: this.viewComponents.map(component => {
                    component.data = node.data;
                    component.checkComponentConditions(node.data);
                    return component.getView(component.dataValue);
                }),
                nodeData: node.data,
                node
            });
        }
        attach(element) {
            if (this.builderMode) {
                return super.attach(element);
            }
            this.loadRefs(element, { root: 'single' });
            return NativePromise.all([
                super.attach(element),
                this.attachNode(this.refs.root, this.treeRoot)
            ]);
        }
        attachNode(element, node) {
            if (!element) {
                return NativePromise.resolve();
            }
            let componentsPromise = NativePromise.resolve();
            let childrenPromise = NativePromise.resolve();
            node.refs = _.reduce(element.children, (refs, child) => child.hasAttribute('ref') ? {
                ...refs,
                [child.getAttribute('ref')]: child
            } : refs, {});
            if (node.refs.content) {
                this.attachActions(node);
                componentsPromise = this.attachComponents(node);
            }
            if (node.refs.childNodes) {
                childrenPromise = this.attachChildren(node);
            }
            return NativePromise.all([
                componentsPromise,
                childrenPromise
            ]);
        }
        attachActions(node) {
            this.loadRefs.call(node, node.refs.content, {
                addChild: 'single',
                cancelNode: 'single',
                editNode: 'single',
                removeNode: 'single',
                revertNode: 'single',
                saveNode: 'single',
                toggleNode: 'single'
            });
            if (node.refs.addChild) {
                this.addEventListener(node.refs.addChild, 'click', () => {
                    this.addChild(node);
                });
            }
            if (node.refs.cancelNode) {
                this.addEventListener(node.refs.cancelNode, 'click', () => {
                    this.cancelNode(node);
                });
            }
            if (node.refs.editNode) {
                this.addEventListener(node.refs.editNode, 'click', () => {
                    this.editNode(node);
                });
            }
            if (node.refs.removeNode) {
                this.addEventListener(node.refs.removeNode, 'click', () => {
                    this.removeNode(node);
                });
            }
            if (node.refs.revertNode) {
                this.addEventListener(node.refs.revertNode, 'click', () => {
                    this.revertNode(node);
                });
            }
            if (node.refs.saveNode) {
                this.addEventListener(node.refs.saveNode, 'click', () => {
                    this.saveNode(node);
                });
            }
            if (node.refs.toggleNode) {
                this.addEventListener(node.refs.toggleNode, 'click', () => {
                    this.toggleNode(node);
                });
            }
        }
        attachComponents(node, ...args) {
            if (this.builderMode) {
                return super.attachComponents.call(this, node, ...args);
            }
            this.loadRefs.call(node, node.refs.content, { nodeEdit: 'single' });
            return node.refs.nodeEdit ? super.attachComponents(node.refs.nodeEdit, node.components) : NativePromise.resolve();
        }
        attachChildren(node) {
            const childElements = node.refs.childNodes.children;
            return NativePromise.all(_.map(childElements, (childElement, index) => this.attachNode(childElement, node.children[index])));
        }
        setValue(value, flags = {}) {
            const changed = this.updateValue(value, flags);
            this.setRoot();
            return changed;
        }
        addChild(parent) {
            if (this.options.readOnly || parent.new) {
                return;
            }
            this.hook('tree.addChild', {
                parent,
                component: this
            }, () => {
                const child = parent.addChild();
                this.redraw();
                return child;
            });
        }
        cancelNode(node) {
            if (this.options.readOnly) {
                return;
            }
            this.hook('tree.cancelNode', {
                node,
                component: this
            }, () => {
                if (node.isRoot) {
                    this.removeRoot();
                } else {
                    node.cancel();
                    this.redraw();
                }
                return node;
            });
        }
        editNode(node) {
            if (this.options.readOnly || node.new) {
                return;
            }
            this.hook('tree.editNode', {
                node,
                component: this
            }, () => {
                node.edit();
                this.redraw();
                return node;
            });
        }
        removeNode(node) {
            if (this.options.readOnly || node.new) {
                return;
            }
            this.hook('tree.removeNode', {
                node,
                component: this
            }, () => {
                if (node.isRoot) {
                    this.removeRoot();
                } else {
                    node.remove();
                    this.updateTree();
                }
                return node;
            });
        }
        revertNode(node) {
            if (this.options.readOnly || !node.revertAvailable) {
                return;
            }
            this.hook('tree.revertNode', {
                node,
                component: this
            }, () => {
                node.revert();
                this.updateTree();
                return node;
            });
        }
        saveNode(node) {
            if (this.options.readOnly) {
                return;
            }
            this.hook('tree.saveNode', {
                node,
                component: this
            }, () => {
                node.save();
                this.updateTree();
                return node;
            });
        }
        toggleNode(node) {
            this.hook('tree.toggleNode', {
                node,
                component: this
            }, () => {
                node.collapsed = !node.collapsed;
                this.redraw();
                return node;
            });
        }
        removeRoot() {
            if (this.options.readOnly) {
                return;
            }
            this.dataValue = this.defaultValue;
            this.setRoot();
            this.redraw();
        }
        setRoot() {
            const value = this.dataValue;
            this.treeRoot = new Node(null, value, {
                isNew: !value.data,
                createComponents: this.createComponents.bind(this),
                checkNode: this.checkNode.bind(this, this.data),
                removeComponents: this.removeComponents
            });
            this.hook('tree.setRoot', {
                root: this.treeRoot,
                component: this
            });
        }
        getValue() {
            return this.dataValue;
        }
        updateTree() {
            this.updateValue(this.treeRoot.value);
            this.redraw();
        }
        checkData(data, flags, row) {
            return this.checkNode(data, this.treeRoot, flags, row);
        }
        checkNode(data, node, flags, row) {
            return node.children.reduce((result, child) => this.checkNode(data, child, flags, row) && result, super.checkData(data, flags, node.data, node.components));
        }
    };
    TreeComponent.prototype.hasChanged = Component.prototype.hasChanged;
    TreeComponent.prototype.updateValue = Component.prototype.updateValue;
});
define('skylark-formio/components/unknown/Unknown',['../_classes/component/Component'], function (Component) {
    'use strict';
    return class UnknownComponent extends Component {
        static schema() {
            return {
                type: 'custom',
                key: 'custom',
                protected: false,
                persistent: true
            };
        }
        static get builderInfo() {
            return {
                title: 'Custom',
                icon: 'cubes',
                group: 'premium',
                documentation: 'https://help.form.io/userguide/form-components/#custom',
                weight: 120,
                schema: UnknownComponent.schema()
            };
        }
        get defaultSchema() {
            return UnknownComponent.schema();
        }
    };
});
define('skylark-formio/components/url/Url',['../textfield/TextField'], function (TextFieldComponent) {
    'use strict';
    return class UrlComponent extends TextFieldComponent {
        static schema(...extend) {
            return TextFieldComponent.schema({
                type: 'url',
                label: 'Url',
                key: 'url',
                inputType: 'url'
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Url',
                group: 'advanced',
                icon: 'link',
                documentation: 'http://help.form.io/userguide/#url',
                weight: 20,
                schema: UrlComponent.schema()
            };
        }
        constructor(component, options, data) {
            super(component, options, data);
            this.validators.push('url');
        }
        get defaultSchema() {
            return UrlComponent.schema();
        }
        elementInfo() {
            const info = super.elementInfo();
            info.attr.type = this.component.mask ? 'password' : 'url';
            return info;
        }
    };
});
define('skylark-formio/components/well/Well',['../_classes/nested/NestedComponent'], function (NestedComponent) {
    'use strict';
    return class WellComponent extends NestedComponent {
        static schema(...extend) {
            return NestedComponent.schema({
                type: 'well',
                key: 'well',
                input: false,
                persistent: false,
                components: []
            }, ...extend);
        }
        static get builderInfo() {
            return {
                title: 'Well',
                icon: 'square-o',
                group: 'layout',
                documentation: 'http://help.form.io/userguide/#well',
                weight: 60,
                schema: WellComponent.schema()
            };
        }
        get defaultSchema() {
            return WellComponent.schema();
        }
        get className() {
            return `${ this.component.customClass }`;
        }
        get templateName() {
            return 'well';
        }
        constructor(...args) {
            super(...args);
            this.noField = true;
        }
    };
});
define('skylark-formio/components/index',[
    './address/Address',
    './button/Button',
    './checkbox/Checkbox',
    './columns/Columns',
    './_classes/component/Component',
    './container/Container',
    './content/Content',
    './currency/Currency',
    './datagrid/DataGrid',
    './datamap/DataMap',
    './datetime/DateTime',
    './day/Day',
    './editgrid/EditGrid',
    './email/Email',
    './fieldset/Fieldset',
    './file/File',
    './form/Form',
    './hidden/Hidden',
    './_classes/input/Input',
    './_classes/multivalue/Multivalue',
    './_classes/field/Field',
    './html/HTML',
    './_classes/nested/NestedComponent',
    './_classes/nesteddata/NestedDataComponent',
    './_classes/nestedarray/NestedArrayComponent',
    './number/Number',
    './panel/Panel',
    './password/Password',
    './phonenumber/PhoneNumber',
    './radio/Radio',
    './recaptcha/ReCaptcha',
    './resource/Resource',
    './selectboxes/SelectBoxes',
    './select/Select',
    './signature/Signature',
    './survey/Survey',
    './table/Table',
    './tabs/Tabs',
    './tags/Tags',
    './textarea/TextArea',
    './textfield/TextField',
    './time/Time',
    './tree/Tree',
    './unknown/Unknown',
    './url/Url',
    './well/Well'
], function (AddressComponent, ButtonComponent, CheckBoxComponent, ColumnsComponent, Component, ContainerComponent, ContentComponent, CurrencyComponent, DataGridComponent, DataMapComponent, DateTimeComponent, DayComponent, EditGridComponent, EmailComponent, FieldsetComponent, FileComponent, FormComponent, HiddenComponent, Input, Multivalue, Field, HTMLComponent, NestedComponent, NestedDataComponent, NestedArrayComponent, NumberComponent, PanelComponent, PasswordComponent, PhoneNumberComponent, RadioComponent, ReCaptchaComponent, ResourceComponent, SelectBoxesComponent, SelectComponent, SignatureComponent, SurveyComponent, TableComponent, TabsComponent, TagsComponent, TextAreaComponent, TextFieldComponent, TimeComponent, TreeComponent, UnknownComponent, UrlComponent, WellComponent) {
    'use strict';
    return {
        address: AddressComponent,
        base: Component,
        component: Component,
        button: ButtonComponent,
        checkbox: CheckBoxComponent,
        columns: ColumnsComponent,
        container: ContainerComponent,
        content: ContentComponent,
        currency: CurrencyComponent,
        datagrid: DataGridComponent,
        datamap: DataMapComponent,
        datetime: DateTimeComponent,
        day: DayComponent,
        editgrid: EditGridComponent,
        email: EmailComponent,
        input: Input,
        field: Field,
        multivalue: Multivalue,
        fieldset: FieldsetComponent,
        file: FileComponent,
        form: FormComponent,
        hidden: HiddenComponent,
        htmlelement: HTMLComponent,
        nested: NestedComponent,
        nesteddata: NestedDataComponent,
        nestedarray: NestedArrayComponent,
        number: NumberComponent,
        panel: PanelComponent,
        password: PasswordComponent,
        phoneNumber: PhoneNumberComponent,
        radio: RadioComponent,
        recaptcha: ReCaptchaComponent,
        resource: ResourceComponent,
        select: SelectComponent,
        selectboxes: SelectBoxesComponent,
        signature: SignatureComponent,
        survey: SurveyComponent,
        table: TableComponent,
        tabs: TabsComponent,
        tags: TagsComponent,
        textarea: TextAreaComponent,
        textfield: TextFieldComponent,
        time: TimeComponent,
        tree: TreeComponent,
        unknown: UnknownComponent,
        url: UrlComponent,
        well: WellComponent
    };
});
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.3.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

define('skylark-formio/vendors/tooltip-js/tooltip',["skylark-popper"],function(Popper){



  /**
   * Check if the given variable is a function
   * @method
   * @memberof Popper.Utils
   * @argument {Any} functionToCheck - variable to check
   * @returns {Boolean} answer to: is a function?
   */
  function isFunction(functionToCheck) {
    const getType = {};
    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  const DEFAULT_OPTIONS = {
    container: false,
    delay: 0,
    html: false,
    placement: 'top',
    title: '',
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    offset: 0,
    arrowSelector: '.tooltip-arrow, .tooltip__arrow',
    innerSelector: '.tooltip-inner, .tooltip__inner'
  };

  class Tooltip {
    /**
     * Create a new Tooltip.js instance
     * @class Tooltip
     * @param {HTMLElement} reference - The DOM node used as reference of the tooltip (it can be a jQuery element).
     * @param {Object} options
     * @param {String} options.placement='top'
     *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -end),
     *      left(-start, -end)`
     * @param {String} options.arrowSelector='.tooltip-arrow, .tooltip__arrow' - className used to locate the DOM arrow element in the tooltip.
     * @param {String} options.innerSelector='.tooltip-inner, .tooltip__inner' - className used to locate the DOM inner element in the tooltip.
     * @param {HTMLElement|String|false} options.container=false - Append the tooltip to a specific element.
     * @param {Number|Object} options.delay=0
     *      Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type.
     *      If a number is supplied, delay is applied to both hide/show.
     *      Object structure is: `{ show: 500, hide: 100 }`
     * @param {Boolean} options.html=false - Insert HTML into the tooltip. If false, the content will inserted with `textContent`.
     * @param {String} [options.template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>']
     *      Base HTML to used when creating the tooltip.
     *      The tooltip's `title` will be injected into the `.tooltip-inner` or `.tooltip__inner`.
     *      `.tooltip-arrow` or `.tooltip__arrow` will become the tooltip's arrow.
     *      The outermost wrapper element should have the `.tooltip` class.
     * @param {String|HTMLElement|TitleFunction} options.title='' - Default title value if `title` attribute isn't present.
     * @param {String} [options.trigger='hover focus']
     *      How tooltip is triggered - click, hover, focus, manual.
     *      You may pass multiple triggers; separate them with a space. `manual` cannot be combined with any other trigger.
     * @param {Boolean} options.closeOnClickOutside=false - Close a popper on click outside of the popper and reference element. This has effect only when options.trigger is 'click'.
     * @param {String|HTMLElement} options.boundariesElement
     *      The element used as boundaries for the tooltip. For more information refer to Popper.js'
     *      [boundariesElement docs](https://popper.js.org/popper-documentation.html)
     * @param {Number|String} options.offset=0 - Offset of the tooltip relative to its reference. For more information refer to Popper.js'
     *      [offset docs](https://popper.js.org/popper-documentation.html)
     * @param {Object} options.popperOptions={} - Popper options, will be passed directly to popper instance. For more information refer to Popper.js'
     *      [options docs](https://popper.js.org/popper-documentation.html)
     * @return {Object} instance - The generated tooltip instance
     */
    constructor(reference, options) {
      _initialiseProps.call(this);

      // apply user options over default ones
      options = _extends({}, DEFAULT_OPTIONS, options);

      reference.jquery && (reference = reference[0]);

      // cache reference and options
      this.reference = reference;
      this.options = options;

      // get events list
      const events = typeof options.trigger === 'string' ? options.trigger.split(' ').filter(trigger => ['click', 'hover', 'focus'].indexOf(trigger) !== -1) : [];

      // set initial state
      this._isOpen = false;
      this._popperOptions = {};

      // set event listeners
      this._setEventListeners(reference, events, options);
    }

    //
    // Public methods
    //

    /**
     * Reveals an element's tooltip. This is considered a "manual" triggering of the tooltip.
     * Tooltips with zero-length titles are never displayed.
     * @method Tooltip#show
     * @memberof Tooltip
     */


    /**
     * Hides an element’s tooltip. This is considered a “manual” triggering of the tooltip.
     * @method Tooltip#hide
     * @memberof Tooltip
     */


    /**
     * Hides and destroys an element’s tooltip.
     * @method Tooltip#dispose
     * @memberof Tooltip
     */


    /**
     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
     * @method Tooltip#toggle
     * @memberof Tooltip
     */


    /**
     * Updates the tooltip's title content
     * @method Tooltip#updateTitleContent
     * @memberof Tooltip
     * @param {String|HTMLElement} title - The new content to use for the title
     */


    //
    // Private methods
    //

    /**
     * Creates a new tooltip node
     * @memberof Tooltip
     * @private
     * @param {HTMLElement} reference
     * @param {String} template
     * @param {String|HTMLElement|TitleFunction} title
     * @param {Boolean} allowHtml
     * @return {HTMLElement} tooltipNode
     */
    _create(reference, template, title, allowHtml) {
      // create tooltip element
      const tooltipGenerator = window.document.createElement('div');
      tooltipGenerator.innerHTML = template.trim();
      const tooltipNode = tooltipGenerator.childNodes[0];

      // add unique ID to our tooltip (needed for accessibility reasons)
      tooltipNode.id = `tooltip_${Math.random().toString(36).substr(2, 10)}`;

      // set initial `aria-hidden` state to `false` (it's visible!)
      tooltipNode.setAttribute('aria-hidden', 'false');

      // add title to tooltip
      const titleNode = tooltipGenerator.querySelector(this.options.innerSelector);
      this._addTitleContent(reference, title, allowHtml, titleNode);

      // return the generated tooltip node
      return tooltipNode;
    }

    _addTitleContent(reference, title, allowHtml, titleNode) {
      if (title.nodeType === 1 || title.nodeType === 11) {
        // if title is a element node or document fragment, append it only if allowHtml is true
        allowHtml && titleNode.appendChild(title);
      } else if (isFunction(title)) {
        // if title is a function, call it and set textContent or innerHtml depending by `allowHtml` value
        const titleText = title.call(reference);
        allowHtml ? titleNode.innerHTML = titleText : titleNode.textContent = titleText;
      } else {
        // if it's just a simple text, set textContent or innerHtml depending by `allowHtml` value
        allowHtml ? titleNode.innerHTML = title : titleNode.textContent = title;
      }
    }

    _show(reference, options) {
      // don't show if it's already visible
      // or if it's not being showed
      if (this._isOpen && !this._isOpening) {
        return this;
      }
      this._isOpen = true;

      // if the tooltipNode already exists, just show it
      if (this._tooltipNode) {
        this._tooltipNode.style.visibility = 'visible';
        this._tooltipNode.setAttribute('aria-hidden', 'false');
        this.popperInstance.update();
        return this;
      }

      // get title
      const title = reference.getAttribute('title') || options.title;

      // don't show tooltip if no title is defined
      if (!title) {
        return this;
      }

      // create tooltip node
      const tooltipNode = this._create(reference, options.template, title, options.html);

      // Add `aria-describedby` to our reference element for accessibility reasons
      reference.setAttribute('aria-describedby', tooltipNode.id);

      // append tooltip to container
      const container = this._findContainer(options.container, reference);

      this._append(tooltipNode, container);

      this._popperOptions = _extends({}, options.popperOptions, {
        placement: options.placement
      });

      this._popperOptions.modifiers = _extends({}, this._popperOptions.modifiers, {
        arrow: {
          element: this.options.arrowSelector
        },
        offset: {
          offset: options.offset
        }
      });

      if (options.boundariesElement) {
        this._popperOptions.modifiers.preventOverflow = {
          boundariesElement: options.boundariesElement
        };
      }

      this.popperInstance = new Popper(reference, tooltipNode, this._popperOptions);

      this._tooltipNode = tooltipNode;

      return this;
    }

    _hide() /*reference, options*/{
      // don't hide if it's already hidden
      if (!this._isOpen) {
        return this;
      }

      this._isOpen = false;

      // hide tooltipNode
      this._tooltipNode.style.visibility = 'hidden';
      this._tooltipNode.setAttribute('aria-hidden', 'true');

      return this;
    }

    _dispose() {
      // remove event listeners first to prevent any unexpected behaviour
      this._events.forEach(({ func, event }) => {
        this.reference.removeEventListener(event, func);
      });
      this._events = [];

      if (this._tooltipNode) {
        this._hide();

        // destroy instance
        this.popperInstance.destroy();

        // destroy tooltipNode if removeOnDestroy is not set, as popperInstance.destroy() already removes the element
        if (!this.popperInstance.options.removeOnDestroy) {
          this._tooltipNode.parentNode.removeChild(this._tooltipNode);
          this._tooltipNode = null;
        }
      }
      return this;
    }

    _findContainer(container, reference) {
      // if container is a query, get the relative element
      if (typeof container === 'string') {
        container = window.document.querySelector(container);
      } else if (container === false) {
        // if container is `false`, set it to reference parent
        container = reference.parentNode;
      }
      return container;
    }

    /**
     * Append tooltip to container
     * @memberof Tooltip
     * @private
     * @param {HTMLElement} tooltipNode
     * @param {HTMLElement|String|false} container
     */
    _append(tooltipNode, container) {
      container.appendChild(tooltipNode);
    }

    _setEventListeners(reference, events, options) {
      const directEvents = [];
      const oppositeEvents = [];

      events.forEach(event => {
        switch (event) {
          case 'hover':
            directEvents.push('mouseenter');
            oppositeEvents.push('mouseleave');
            break;
          case 'focus':
            directEvents.push('focus');
            oppositeEvents.push('blur');
            break;
          case 'click':
            directEvents.push('click');
            oppositeEvents.push('click');
            break;
        }
      });

      // schedule show tooltip
      directEvents.forEach(event => {
        const func = evt => {
          if (this._isOpening === true) {
            return;
          }
          evt.usedByTooltip = true;
          this._scheduleShow(reference, options.delay, options, evt);
        };
        this._events.push({ event, func });
        reference.addEventListener(event, func);
      });

      // schedule hide tooltip
      oppositeEvents.forEach(event => {
        const func = evt => {
          if (evt.usedByTooltip === true) {
            return;
          }
          this._scheduleHide(reference, options.delay, options, evt);
        };
        this._events.push({ event, func });
        reference.addEventListener(event, func);
        if (event === 'click' && options.closeOnClickOutside) {
          document.addEventListener('mousedown', e => {
            if (!this._isOpening) {
              return;
            }
            const popper = this.popperInstance.popper;
            if (reference.contains(e.target) || popper.contains(e.target)) {
              return;
            }
            func(e);
          }, true);
        }
      });
    }

    _scheduleShow(reference, delay, options /*, evt */) {
      this._isOpening = true;
      // defaults to 0
      const computedDelay = delay && delay.show || delay || 0;
      this._showTimeout = window.setTimeout(() => this._show(reference, options), computedDelay);
    }

    _scheduleHide(reference, delay, options, evt) {
      this._isOpening = false;
      // defaults to 0
      const computedDelay = delay && delay.hide || delay || 0;
      window.setTimeout(() => {
        window.clearTimeout(this._showTimeout);
        if (this._isOpen === false) {
          return;
        }
        if (!document.body.contains(this._tooltipNode)) {
          return;
        }

        // if we are hiding because of a mouseleave, we must check that the new
        // reference isn't the tooltip, because in this case we don't want to hide it
        if (evt.type === 'mouseleave') {
          const isSet = this._setTooltipNodeEvent(evt, reference, delay, options);

          // if we set the new event, don't hide the tooltip yet
          // the new event will take care to hide it if necessary
          if (isSet) {
            return;
          }
        }

        this._hide(reference, options);
      }, computedDelay);
    }

    _updateTitleContent(title) {
      if (typeof this._tooltipNode === 'undefined') {
        if (typeof this.options.title !== 'undefined') {
          this.options.title = title;
        }
        return;
      }
      const titleNode = this._tooltipNode.parentNode.querySelector(this.options.innerSelector);
      this._clearTitleContent(titleNode, this.options.html, this.reference.getAttribute('title') || this.options.title);
      this._addTitleContent(this.reference, title, this.options.html, titleNode);
      this.options.title = title;
      this.popperInstance.update();
    }

    _clearTitleContent(titleNode, allowHtml, lastTitle) {
      if (lastTitle.nodeType === 1 || lastTitle.nodeType === 11) {
        allowHtml && titleNode.removeChild(lastTitle);
      } else {
        allowHtml ? titleNode.innerHTML = '' : titleNode.textContent = '';
      }
    }

  }

  /**
   * Title function, its context is the Tooltip instance.
   * @memberof Tooltip
   * @callback TitleFunction
   * @return {String} placement - The desired title.
   */

  var _initialiseProps = function () {
    this.show = () => this._show(this.reference, this.options);

    this.hide = () => this._hide();

    this.dispose = () => this._dispose();

    this.toggle = () => {
      if (this._isOpen) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    this.updateTitleContent = title => this._updateTitleContent(title);

    this._events = [];

    this._setTooltipNodeEvent = (evt, reference, delay, options) => {
      const relatedreference = evt.relatedreference || evt.toElement || evt.relatedTarget;

      const callback = evt2 => {
        const relatedreference2 = evt2.relatedreference || evt2.toElement || evt2.relatedTarget;

        // Remove event listener after call
        this._tooltipNode.removeEventListener(evt.type, callback);

        // If the new reference is not the reference element
        if (!reference.contains(relatedreference2)) {
          // Schedule to hide tooltip
          this._scheduleHide(reference, options.delay, options, evt2);
        }
      };

      if (this._tooltipNode.contains(relatedreference)) {
        // listen to mouseleave on the tooltip element to be able to hide the tooltip
        this._tooltipNode.addEventListener(evt.type, callback);
        return true;
      }

      return false;
    };
  };

  return Tooltip;

});
define('skylark-formio/components/_classes/component/editForm/utils',[
    'skylark-lodash',
    '../../../../utils/Evaluator'
], function (_, Evaluator) {
    'use strict';
    const EditFormUtils = {
        sortAndFilterComponents(components) {
            return _.filter(_.sortBy(components, 'weight'), item => !item.ignore);
        },
        unifyComponents(objValue, srcValue) {
            if (objValue.key && srcValue.key) {
                if (objValue.skipMerge || srcValue.skipMerge) {
                    return false;
                }
                if (objValue.key === srcValue.key) {
                    _.each(objValue, (value, prop) => {
                        if (!srcValue.hasOwnProperty(prop)) {
                            srcValue[prop] = value;
                        }
                    });
                    _.each(srcValue, (value, prop) => {
                        if (!objValue.hasOwnProperty(prop)) {
                            objValue[prop] = value;
                        }
                    });
                    if (objValue.components) {
                        srcValue.components = EditFormUtils.sortAndFilterComponents(_.unionWith(objValue.components, srcValue.components, EditFormUtils.unifyComponents));
                    }
                    return true;
                } else {
                    return false;
                }
            }
            return _.isEqual(objValue, srcValue);
        },
        logicVariablesTable(additional) {
            additional = additional || '';
            return {
                type: 'htmlelement',
                tag: 'div',
                content: '<p>The following variables are available in all scripts.</p>' + '<table class="table table-bordered table-condensed table-striped">' + additional + '<tr><th>form</th><td>The complete form JSON object</td></tr>' + '<tr><th>submission</th><td>The complete submission object.</td></tr>' + '<tr><th>data</th><td>The complete submission data object.</td></tr>' + '<tr><th>row</th><td>Contextual "row" data, used within DataGrid, EditGrid, and Container components</td></tr>' + '<tr><th>component</th><td>The current component JSON</td></tr>' + '<tr><th>instance</th><td>The current component instance.</td></tr>' + '<tr><th>value</th><td>The current value of the component.</td></tr>' + '<tr><th>moment</th><td>The moment.js library for date manipulation.</td></tr>' + '<tr><th>_</th><td>An instance of <a href="https://lodash.com/docs/" target="_blank">Lodash</a>.</td></tr>' + '<tr><th>utils</th><td>An instance of the <a href="http://formio.github.io/formio.js/docs/identifiers.html#utils" target="_blank">FormioUtils</a> object.</td></tr>' + '<tr><th>util</th><td>An alias for "utils".</td></tr>' + '</table><br/>'
            };
        },
        javaScriptValue(title, property, propertyJSON, weight, exampleHTML, exampleJSON, additionalParams) {
            return {
                type: 'panel',
                title: title,
                theme: 'default',
                collapsible: true,
                collapsed: true,
                key: `${ property }Panel`,
                weight: weight,
                components: [
                    this.logicVariablesTable(additionalParams),
                    {
                        type: 'panel',
                        title: 'JavaScript',
                        collapsible: true,
                        collapsed: false,
                        style: { 'margin-bottom': '10px' },
                        key: `${ property }-js`,
                        customConditional() {
                            return !Evaluator.noeval;
                        },
                        components: [
                            {
                                type: 'textarea',
                                key: property,
                                rows: 5,
                                editor: 'ace',
                                hideLabel: true,
                                input: true
                            },
                            {
                                type: 'htmlelement',
                                tag: 'div',
                                content: `<p>Enter custom javascript code.</p>${ exampleHTML }`
                            }
                        ]
                    },
                    {
                        type: 'panel',
                        title: 'JSONLogic',
                        collapsible: true,
                        collapsed: true,
                        key: `${ property }-json`,
                        components: [
                            {
                                type: 'htmlelement',
                                tag: 'div',
                                content: '<p>Execute custom logic using <a href="http://jsonlogic.com/" target="_blank">JSONLogic</a>.</p>' + '<p>Full <a href="https://lodash.com/docs" target="_blank">Lodash</a> support is provided using an "_" before each operation, such as <code>{"_sum": {var: "data.a"}}</code></p>' + exampleJSON
                            },
                            {
                                type: 'textarea',
                                key: propertyJSON,
                                rows: 5,
                                editor: 'ace',
                                hideLabel: true,
                                as: 'json',
                                input: true
                            }
                        ]
                    }
                ]
            };
        }
    };
    return EditFormUtils;
});
define('skylark-formio/components/_classes/component/editForm/Component.edit.conditional',[
    './utils',
    '../../../../utils/utils'
], function (EditFormUtils, utils) {
    'use strict';
    return [
        {
            type: 'panel',
            title: 'Simple',
            key: 'simple-conditional',
            theme: 'default',
            components: [
                {
                    type: 'select',
                    input: true,
                    label: 'This component should Display:',
                    key: 'conditional.show',
                    dataSrc: 'values',
                    data: {
                        values: [
                            {
                                label: 'True',
                                value: 'true'
                            },
                            {
                                label: 'False',
                                value: 'false'
                            }
                        ]
                    }
                },
                {
                    type: 'select',
                    input: true,
                    label: 'When the form component:',
                    key: 'conditional.when',
                    dataSrc: 'custom',
                    valueProperty: 'value',
                    data: {
                        custom(context) {
                            return utils.getContextComponents(context);
                        }
                    }
                },
                {
                    type: 'textfield',
                    input: true,
                    label: 'Has the value:',
                    key: 'conditional.eq'
                }
            ]
        },
        EditFormUtils.javaScriptValue('Advanced Conditions', 'customConditional', 'conditional.json', 110, '<p>You must assign the <strong>show</strong> variable a boolean result.</p>' + '<p><strong>Note: Advanced Conditional logic will override the results of the Simple Conditional logic.</strong></p>' + '<h5>Example</h5><pre>show = !!data.showMe;</pre>', '<p><a href="http://formio.github.io/formio.js/app/examples/conditions.html" target="_blank">Click here for an example</a></p>')
    ];
});
define('skylark-formio/components/_classes/component/editForm/Component.edit.data',['./utils'], function (EditFormUtils) {
    'use strict';
    return [
        {
            weight: 0,
            type: 'checkbox',
            label: 'Multiple Values',
            tooltip: 'Allows multiple values to be entered for this field.',
            key: 'multiple',
            input: true
        },
        {
            type: 'textfield',
            label: 'Default Value',
            key: 'defaultValue',
            weight: 5,
            placeholder: 'Default Value',
            tooltip: 'The will be the value for this field, before user interaction. Having a default value will override the placeholder text.',
            input: true
        },
        {
            weight: 30,
            type: 'radio',
            label: 'Persistent',
            tooltip: 'A persistent field will be stored in database when the form is submitted.',
            key: 'persistent',
            input: true,
            inline: true,
            defaultValue: true,
            values: [
                {
                    label: 'None',
                    value: false
                },
                {
                    label: 'Server',
                    value: true
                },
                {
                    label: 'Client',
                    value: 'client-only'
                }
            ]
        },
        {
            weight: 150,
            type: 'checkbox',
            label: 'Protected',
            tooltip: 'A protected field will not be returned when queried via API.',
            key: 'protected',
            input: true
        },
        {
            type: 'checkbox',
            input: true,
            weight: 200,
            key: 'dbIndex',
            label: 'Database Index',
            tooltip: 'Set this field as an index within the database. Increases performance for submission queries.'
        },
        {
            weight: 400,
            type: 'checkbox',
            label: 'Encrypted (Enterprise Only)',
            tooltip: 'Encrypt this field on the server. This is two way encryption which is not suitable for passwords.',
            key: 'encrypted',
            input: true
        },
        {
            type: 'select',
            input: true,
            key: 'redrawOn',
            label: 'Redraw On',
            weight: 600,
            tooltip: 'Redraw this component if another component changes. This is useful if interpolating parts of the component like the label.',
            dataSrc: 'custom',
            valueProperty: 'value',
            data: {
                custom(context) {
                    var values = [];
                    values.push({
                        label: 'Any Change',
                        value: 'data'
                    });
                    context.utils.eachComponent(context.instance.options.editForm.components, function (component, path) {
                        if (component.key !== context.data.key) {
                            values.push({
                                label: component.label || component.key,
                                value: path
                            });
                        }
                    });
                    return values;
                }
            },
            conditional: { json: { '!': [{ var: 'data.dataSrc' }] } }
        },
        {
            weight: 700,
            type: 'checkbox',
            label: 'Clear Value When Hidden',
            key: 'clearOnHide',
            defaultValue: true,
            tooltip: 'When a field is hidden, clear the value.',
            input: true
        },
        EditFormUtils.javaScriptValue('Custom Default Value', 'customDefaultValue', 'customDefaultValue', 1000, '<p><h4>Example:</h4><pre>value = data.firstName + " " + data.lastName;</pre></p>', '<p><h4>Example:</h4><pre>{"cat": [{"var": "data.firstName"}, " ", {"var": "data.lastName"}]}</pre>'),
        EditFormUtils.javaScriptValue('Calculated Value', 'calculateValue', 'calculateValue', 1100, '<p><h4>Example:</h4><pre>value = data.a + data.b + data.c;</pre></p>', '<p><h4>Example:</h4><pre>{"+": [{"var": "data.a"}, {"var": "data.b"}, {"var": "data.c"}]}</pre><p><a target="_blank" href="http://formio.github.io/formio.js/app/examples/calculated.html">Click here for an example</a></p>', '<tr><th>token</th><td>The decoded JWT token for the authenticated user.</td></tr>'),
        {
            type: 'checkbox',
            input: true,
            weight: 1100,
            key: 'calculateServer',
            label: 'Calculate Value on server',
            tooltip: 'Checking this will run the calculation on the server. This is useful if you wish to override the values submitted with the calculations performed on the server.'
        },
        {
            type: 'checkbox',
            input: true,
            weight: 1200,
            key: 'allowCalculateOverride',
            label: 'Allow Manual Override of Calculated Value',
            tooltip: 'When checked, this will allow the user to manually override the calculated value.'
        }
    ];
});
define('skylark-formio/components/_classes/component/editForm/Component.edit.api',[],function () {
    'use strict';
    return [
        {
            weight: 0,
            type: 'textfield',
            input: true,
            key: 'key',
            label: 'Property Name',
            tooltip: 'The name of this field in the API endpoint.',
            validate: {
                pattern: '(\\w|\\w[\\w-.]*\\w)',
                patternMessage: 'The property name must only contain alphanumeric characters, underscores, dots and dashes and should not be ended by dash or dot.'
            }
        },
        {
            weight: 100,
            type: 'tags',
            input: true,
            label: 'Field Tags',
            storeas: 'array',
            tooltip: 'Tag the field for use in custom logic.',
            key: 'tags'
        },
        {
            weight: 200,
            type: 'datamap',
            label: 'Custom Properties',
            tooltip: 'This allows you to configure any custom properties for this component.',
            key: 'properties',
            valueComponent: {
                type: 'textfield',
                key: 'value',
                label: 'Value',
                placeholder: 'Value',
                input: true
            }
        }
    ];
});
define('skylark-formio/components/_classes/component/editForm/Component.edit.display',[],function () {
    'use strict';
    return [
        {
            weight: 0,
            type: 'textfield',
            input: true,
            key: 'label',
            label: 'Label',
            placeholder: 'Field Label',
            tooltip: 'The label for this field that will appear next to it.',
            validate: { required: true }
        },
        {
            type: 'select',
            input: true,
            key: 'labelPosition',
            label: 'Label Position',
            tooltip: 'Position for the label for this field.',
            weight: 20,
            defaultValue: 'top',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Top',
                        value: 'top'
                    },
                    {
                        label: 'Left (Left-aligned)',
                        value: 'left-left'
                    },
                    {
                        label: 'Left (Right-aligned)',
                        value: 'left-right'
                    },
                    {
                        label: 'Right (Left-aligned)',
                        value: 'right-left'
                    },
                    {
                        label: 'Right (Right-aligned)',
                        value: 'right-right'
                    },
                    {
                        label: 'Bottom',
                        value: 'bottom'
                    }
                ]
            }
        },
        {
            type: 'number',
            input: true,
            key: 'labelWidth',
            label: 'Label Width',
            tooltip: 'The width of label on line in percentages.',
            clearOnHide: false,
            weight: 30,
            placeholder: '30',
            suffix: '%',
            validate: {
                min: 0,
                max: 100
            },
            conditional: {
                json: {
                    and: [
                        {
                            '!==': [
                                { var: 'data.labelPosition' },
                                'top'
                            ]
                        },
                        {
                            '!==': [
                                { var: 'data.labelPosition' },
                                'bottom'
                            ]
                        }
                    ]
                }
            }
        },
        {
            type: 'number',
            input: true,
            key: 'labelMargin',
            label: 'Label Margin',
            tooltip: 'The width of label margin on line in percentages.',
            clearOnHide: false,
            weight: 30,
            placeholder: '3',
            suffix: '%',
            validate: {
                min: 0,
                max: 100
            },
            conditional: {
                json: {
                    and: [
                        {
                            '!==': [
                                { var: 'data.labelPosition' },
                                'top'
                            ]
                        },
                        {
                            '!==': [
                                { var: 'data.labelPosition' },
                                'bottom'
                            ]
                        }
                    ]
                }
            }
        },
        {
            weight: 100,
            type: 'textfield',
            input: true,
            key: 'placeholder',
            label: 'Placeholder',
            placeholder: 'Placeholder',
            tooltip: 'The placeholder text that will appear when this field is empty.'
        },
        {
            weight: 200,
            type: 'textarea',
            input: true,
            key: 'description',
            label: 'Description',
            placeholder: 'Description for this field.',
            tooltip: 'The description is text that will appear below the input field.',
            editor: 'ace',
            as: 'html',
            wysiwyg: { minLines: 3 }
        },
        {
            weight: 300,
            type: 'textarea',
            input: true,
            key: 'tooltip',
            label: 'Tooltip',
            placeholder: 'To add a tooltip to this field, enter text here.',
            tooltip: 'Adds a tooltip to the side of this field.',
            editor: 'ace',
            as: 'html',
            wysiwyg: { minLines: 3 }
        },
        {
            weight: 500,
            type: 'textfield',
            input: true,
            key: 'customClass',
            label: 'Custom CSS Class',
            placeholder: 'Custom CSS Class',
            tooltip: 'Custom CSS class to add to this component.'
        },
        {
            weight: 600,
            type: 'textfield',
            input: true,
            key: 'tabindex',
            label: 'Tab Index',
            placeholder: '0',
            tooltip: "Sets the tabindex attribute of this component to override the tab order of the form. See the <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex'>MDN documentation</a> on tabindex for more information."
        },
        {
            weight: 1100,
            type: 'checkbox',
            label: 'Hidden',
            tooltip: 'A hidden field is still a part of the form, but is hidden from view.',
            key: 'hidden',
            input: true
        },
        {
            weight: 1200,
            type: 'checkbox',
            label: 'Hide Label',
            tooltip: 'Hide the label of this component. This allows you to show the label in the form builder, but not when it is rendered.',
            key: 'hideLabel',
            input: true
        },
        {
            weight: 1350,
            type: 'checkbox',
            label: 'Initial Focus',
            tooltip: 'Make this field the initially focused element on this form.',
            key: 'autofocus',
            input: true
        },
        {
            weight: 1370,
            type: 'checkbox',
            label: 'Show Label in DataGrid',
            tooltip: 'Show the label when in a Datagrid.',
            key: 'dataGridLabel',
            input: true,
            customConditional(context) {
                return context.instance.options.editComponent.inDataGrid;
            }
        },
        {
            weight: 1400,
            type: 'checkbox',
            label: 'Disabled',
            tooltip: 'Disable the form input.',
            key: 'disabled',
            input: true
        },
        {
            weight: 1500,
            type: 'checkbox',
            label: 'Table View',
            tooltip: 'Shows this value within the table view of the submissions.',
            key: 'tableView',
            input: true
        },
        {
            weight: 1600,
            type: 'checkbox',
            label: 'Modal Edit',
            tooltip: 'Opens up a modal to edit the value of this component.',
            key: 'modalEdit',
            input: true
        }
    ];
});
define('skylark-formio/components/_classes/component/editForm/Component.edit.logic',['../../../../utils/utils'], function (a) {
    'use strict';
    return [{
            weight: 0,
            input: true,
            label: 'Advanced Logic',
            key: 'logic',
            templates: {
                header: '<div class="row"> \n  <div class="col-sm-6">\n    <strong>{{ value.length }} Advanced Logic Configured</strong>\n  </div>\n</div>',
                row: '<div class="row"> \n  <div class="col-sm-6">\n    <div>{{ row.name }} </div>\n  </div>\n  <div class="col-sm-2"> \n    <div class="btn-group pull-right"> \n      <div class="btn btn-default editRow">Edit</div> \n      <div class="btn btn-danger removeRow">Delete</div> \n    </div> \n  </div> \n</div>',
                footer: ''
            },
            type: 'editgrid',
            addAnother: 'Add Logic',
            saveRow: 'Save Logic',
            components: [
                {
                    weight: 0,
                    input: true,
                    inputType: 'text',
                    label: 'Logic Name',
                    key: 'name',
                    validate: { required: true },
                    type: 'textfield'
                },
                {
                    weight: 10,
                    key: 'triggerPanel',
                    input: false,
                    title: 'Trigger',
                    tableView: false,
                    components: [{
                            weight: 0,
                            input: true,
                            tableView: false,
                            components: [
                                {
                                    weight: 0,
                                    input: true,
                                    label: 'Type',
                                    key: 'type',
                                    tableView: false,
                                    data: {
                                        values: [
                                            {
                                                value: 'simple',
                                                label: 'Simple'
                                            },
                                            {
                                                value: 'javascript',
                                                label: 'Javascript'
                                            },
                                            {
                                                value: 'json',
                                                label: 'JSON Logic'
                                            },
                                            {
                                                value: 'event',
                                                label: 'Event'
                                            }
                                        ]
                                    },
                                    dataSrc: 'values',
                                    template: '<span>{{ item.label }}</span>',
                                    type: 'select'
                                },
                                {
                                    weight: 10,
                                    label: '',
                                    key: 'simple',
                                    type: 'container',
                                    tableView: false,
                                    customConditional({row}) {
                                        return row.type === 'simple';
                                    },
                                    components: [
                                        {
                                            input: true,
                                            key: 'show',
                                            label: 'Show',
                                            type: 'hidden',
                                            tableView: false,
                                            calculateValue() {
                                                return true;
                                            }
                                        },
                                        {
                                            type: 'select',
                                            input: true,
                                            label: 'When the form component:',
                                            key: 'when',
                                            dataSrc: 'custom',
                                            valueProperty: 'value',
                                            tableView: false,
                                            data: {
                                                custom(context) {
                                                    return a.getContextComponents(context);
                                                }
                                            }
                                        },
                                        {
                                            type: 'textfield',
                                            input: true,
                                            label: 'Has the value:',
                                            key: 'eq',
                                            tableView: false
                                        }
                                    ]
                                },
                                {
                                    weight: 10,
                                    type: 'textarea',
                                    key: 'javascript',
                                    rows: 5,
                                    editor: 'ace',
                                    input: true,
                                    tableView: false,
                                    placeholder: `result = (data['mykey'] > 1);`,
                                    description: '"row", "data", and "component" variables are available. Return "result".',
                                    customConditional({row}) {
                                        return row.type === 'javascript';
                                    }
                                },
                                {
                                    weight: 10,
                                    type: 'textarea',
                                    key: 'json',
                                    rows: 5,
                                    editor: 'ace',
                                    label: 'JSON Logic',
                                    as: 'json',
                                    input: true,
                                    tableView: false,
                                    placeholder: `{ ... }`,
                                    description: '"row", "data", "component" and "_" variables are available. Return the result to be passed to the action if truthy.',
                                    customConditional({row}) {
                                        return row.type === 'json';
                                    }
                                },
                                {
                                    weight: 10,
                                    type: 'textfield',
                                    key: 'event',
                                    label: 'Event Name',
                                    placeholder: 'event',
                                    description: 'The event that will trigger this logic. You can trigger events externally or via a button.',
                                    tableView: false,
                                    customConditional({row}) {
                                        return row.type === 'event';
                                    }
                                }
                            ],
                            key: 'trigger',
                            type: 'container'
                        }],
                    type: 'panel'
                },
                {
                    weight: 20,
                    input: true,
                    label: 'Actions',
                    key: 'actions',
                    tableView: false,
                    templates: {
                        header: '<div class="row"> \n  <div class="col-sm-6"><strong>{{ value.length }} actions</strong></div>\n</div>',
                        row: '<div class="row"> \n  <div class="col-sm-6">\n    <div>{{ row.name }} </div>\n  </div>\n  <div class="col-sm-2"> \n    <div class="btn-group pull-right"> \n      <div class="btn btn-default editRow">Edit</div> \n      <div class="btn btn-danger removeRow">Delete</div> \n    </div> \n  </div> \n</div>',
                        footer: ''
                    },
                    type: 'editgrid',
                    addAnother: 'Add Action',
                    saveRow: 'Save Action',
                    components: [{
                            weight: 0,
                            title: 'Action',
                            input: false,
                            key: 'actionPanel',
                            type: 'panel',
                            components: [
                                {
                                    weight: 0,
                                    input: true,
                                    inputType: 'text',
                                    label: 'Action Name',
                                    key: 'name',
                                    validate: { required: true },
                                    type: 'textfield'
                                },
                                {
                                    weight: 10,
                                    input: true,
                                    label: 'Type',
                                    key: 'type',
                                    data: {
                                        values: [
                                            {
                                                value: 'property',
                                                label: 'Property'
                                            },
                                            {
                                                value: 'value',
                                                label: 'Value'
                                            },
                                            {
                                                label: 'Merge Component Schema',
                                                value: 'mergeComponentSchema'
                                            }
                                        ]
                                    },
                                    dataSrc: 'values',
                                    template: '<span>{{ item.label }}</span>',
                                    type: 'select'
                                },
                                {
                                    weight: 20,
                                    type: 'select',
                                    template: '<span>{{ item.label }}</span>',
                                    dataSrc: 'json',
                                    tableView: false,
                                    data: {
                                        json: [
                                            {
                                                label: 'Hidden',
                                                value: 'hidden',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Required',
                                                value: 'validate.required',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Disabled',
                                                value: 'disabled',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Label',
                                                value: 'label',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Title',
                                                value: 'title',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Prefix',
                                                value: 'prefix',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Suffix',
                                                value: 'suffix',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Tooltip',
                                                value: 'tooltip',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Description',
                                                value: 'description',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Placeholder',
                                                value: 'placeholder',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Input Mask',
                                                value: 'inputMask',
                                                type: 'string'
                                            },
                                            {
                                                label: 'CSS Class',
                                                value: 'className',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Container Custom Class',
                                                value: 'customClass',
                                                type: 'string'
                                            }
                                        ]
                                    },
                                    key: 'property',
                                    label: 'Component Property',
                                    input: true,
                                    customConditional({row}) {
                                        return row.type === 'property';
                                    }
                                },
                                {
                                    weight: 30,
                                    input: true,
                                    label: 'Set State',
                                    key: 'state',
                                    tableView: false,
                                    data: {
                                        values: [
                                            {
                                                label: 'True',
                                                value: 'true'
                                            },
                                            {
                                                label: 'False',
                                                value: 'false'
                                            }
                                        ]
                                    },
                                    dataSrc: 'values',
                                    template: '<span>{{ item.label }}</span>',
                                    type: 'select',
                                    customConditional({row}) {
                                        return row.type === 'property' && row.hasOwnProperty('property') && row.property.type === 'boolean';
                                    }
                                },
                                {
                                    weight: 30,
                                    type: 'textfield',
                                    key: 'text',
                                    label: 'Text',
                                    inputType: 'text',
                                    input: true,
                                    tableView: false,
                                    description: 'Can use templating with {{ data.myfield }}. "data", "row", "component" and "result" variables are available.',
                                    customConditional({row}) {
                                        return row.type === 'property' && row.hasOwnProperty('property') && row.property.type === 'string' && !row.property.component;
                                    }
                                },
                                {
                                    weight: 20,
                                    input: true,
                                    label: 'Value (Javascript)',
                                    key: 'value',
                                    editor: 'ace',
                                    rows: 5,
                                    placeholder: `value = data.myfield;`,
                                    type: 'textarea',
                                    tableView: false,
                                    description: '"row", "data", "component", and "result" variables are available. Return the value.',
                                    customConditional({row}) {
                                        return row.type === 'value';
                                    }
                                },
                                {
                                    weight: 20,
                                    input: true,
                                    label: 'Schema Defenition',
                                    key: 'schemaDefinition',
                                    editor: 'ace',
                                    rows: 5,
                                    placeholder: `schema = { label: 'Updated' };`,
                                    type: 'textarea',
                                    tableView: false,
                                    description: '"row", "data", "component", and "result" variables are available. Return the schema.',
                                    customConditional({row}) {
                                        return row.type === 'mergeComponentSchema';
                                    }
                                }
                            ]
                        }]
                }
            ]
        }];
});
define('skylark-formio/components/_classes/component/editForm/Component.edit.validation',[
    './utils',
    '../../../../utils/Evaluator'
], function (EditFormUtils, Evaluator) {
    'use strict';
    return [
        {
            weight: 10,
            type: 'checkbox',
            label: 'Required',
            tooltip: 'A required field must be filled in before the form can be submitted.',
            key: 'validate.required',
            input: true
        },
        {
            weight: 100,
            type: 'checkbox',
            label: 'Unique',
            tooltip: 'Makes sure the data submitted for this field is unique, and has not been submitted before.',
            key: 'unique',
            input: true
        },
        {
            weight: 0,
            type: 'select',
            key: 'validateOn',
            defaultValue: 'change',
            input: true,
            label: 'Validate On',
            tooltip: 'Determines when this component should trigger front-end validation.',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Change',
                        value: 'change'
                    },
                    {
                        label: 'Blur',
                        value: 'blur'
                    }
                ]
            }
        },
        {
            weight: 190,
            type: 'textfield',
            input: true,
            key: 'errorLabel',
            label: 'Error Label',
            placeholder: 'Error Label',
            tooltip: 'The label for this field when an error occurs.'
        },
        {
            weight: 200,
            key: 'validate.customMessage',
            label: 'Custom Error Message',
            placeholder: 'Custom Error Message',
            type: 'textfield',
            tooltip: 'Error message displayed if any error occurred.',
            input: true
        },
        {
            type: 'panel',
            title: 'Custom Validation',
            collapsible: true,
            collapsed: true,
            style: { 'margin-bottom': '10px' },
            key: 'custom-validation-js',
            weight: 300,
            customConditional() {
                return !Evaluator.noeval;
            },
            components: [
                EditFormUtils.logicVariablesTable('<tr><th>input</th><td>The value that was input into this component</td></tr>'),
                {
                    type: 'textarea',
                    key: 'validate.custom',
                    rows: 5,
                    editor: 'ace',
                    hideLabel: true,
                    input: true
                },
                {
                    type: 'htmlelement',
                    tag: 'div',
                    content: `
          <small>
            <p>Enter custom validation code.</p>
            <p>You must assign the <strong>valid</strong> variable as either <strong>true</strong> or an error message if validation fails.</p>
            <h5>Example:</h5>
            <pre>valid = (input === 'Joe') ? true : 'Your name must be "Joe"';</pre>
          </small>`
                },
                {
                    type: 'well',
                    components: [{
                            weight: 100,
                            type: 'checkbox',
                            label: 'Secret Validation',
                            tooltip: 'Check this if you wish to perform the validation ONLY on the server side. This keeps your validation logic private and secret.',
                            description: 'Check this if you wish to perform the validation ONLY on the server side. This keeps your validation logic private and secret.',
                            key: 'validate.customPrivate',
                            input: true
                        }]
                }
            ]
        },
        {
            type: 'panel',
            title: 'JSONLogic Validation',
            collapsible: true,
            collapsed: true,
            key: 'json-validation-json',
            weight: 400,
            components: [
                {
                    type: 'htmlelement',
                    tag: 'div',
                    content: '<p>Execute custom logic using <a href="http://jsonlogic.com/" target="_blank">JSONLogic</a>.</p>' + '<h5>Example:</h5>' + '<pre>' + JSON.stringify({
                        'if': [
                            {
                                '===': [
                                    { 'var': 'input' },
                                    'Bob'
                                ]
                            },
                            true,
                            "Your name must be 'Bob'!"
                        ]
                    }, null, 2) + '</pre>'
                },
                {
                    type: 'textarea',
                    key: 'validate.json',
                    hideLabel: true,
                    rows: 5,
                    editor: 'ace',
                    as: 'json',
                    input: true
                }
            ]
        }
    ];
});
define('skylark-formio/components/_classes/component/editForm/Component.edit.layout',[],function () {
    'use strict';
    return [
        {
            label: 'HTML Attributes',
            type: 'datamap',
            input: true,
            key: 'attributes',
            keyLabel: 'Attribute Name',
            valueComponent: {
                type: 'textfield',
                key: 'value',
                label: 'Attribute Value',
                input: true
            },
            tooltip: "Provide a map of HTML attributes for component's input element (attributes provided by other component settings or other attributes generated by form.io take precedence over attributes in this grid)",
            addAnother: 'Add Attribute'
        },
        {
            type: 'panel',
            legend: 'PDF Overlay',
            title: 'PDF Overlay',
            key: 'overlay',
            weight: 2000,
            collapsible: true,
            collapsed: true,
            components: [
                {
                    type: 'textfield',
                    input: true,
                    key: 'overlay.style',
                    label: 'Style',
                    placeholder: '',
                    tooltip: 'Custom styles that should be applied to this component when rendered in PDF.'
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'overlay.page',
                    label: 'Page',
                    placeholder: '',
                    tooltip: 'The PDF page to place this component.'
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'overlay.left',
                    label: 'Left',
                    placeholder: '',
                    tooltip: 'The left margin within a page to place this component.'
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'overlay.top',
                    label: 'Top',
                    placeholder: '',
                    tooltip: 'The top margin within a page to place this component.'
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'overlay.width',
                    label: 'Width',
                    placeholder: '',
                    tooltip: 'The width of the component (in pixels).'
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'overlay.height',
                    label: 'Height',
                    placeholder: '',
                    tooltip: 'The height of the component (in pixels).'
                }
            ]
        }
    ];
});
define('skylark-formio/components/_classes/component/Component.form',[
    "skylark-langx",
    'skylark-lodash',
    './editForm/Component.edit.conditional',
    './editForm/Component.edit.data',
    './editForm/Component.edit.api',
    './editForm/Component.edit.display',
    './editForm/Component.edit.logic',
    './editForm/Component.edit.validation',
    './editForm/Component.edit.layout',
    './editForm/utils'
], function (langx,_, ComponentEditConditional, ComponentEditData, ComponentEditAPI, ComponentEditDisplay, ComponentEditLogic, ComponentEditValidation, ComponentEditLayout, EditFormUtils) {
    'use strict';
    return function (...extend) {
        const components = langx.clone([{  //_.cloneDeep
                type: 'tabs',
                key: 'tabs',
                components: [
                    {
                        label: 'Display',
                        key: 'display',
                        weight: 0,
                        components: ComponentEditDisplay
                    },
                    {
                        label: 'Data',
                        key: 'data',
                        weight: 10,
                        components: ComponentEditData
                    },
                    {
                        label: 'Validation',
                        key: 'validation',
                        weight: 20,
                        components: ComponentEditValidation
                    },
                    {
                        label: 'API',
                        key: 'api',
                        weight: 30,
                        components: ComponentEditAPI
                    },
                    {
                        label: 'Conditional',
                        key: 'conditional',
                        weight: 40,
                        components: ComponentEditConditional
                    },
                    {
                        label: 'Logic',
                        key: 'logic',
                        weight: 50,
                        components: ComponentEditLogic
                    },
                    {
                        label: 'Layout',
                        key: 'layout',
                        weight: 60,
                        components: ComponentEditLayout
                    }
                ]
            }]).concat(extend.map(items => ({
            type: 'tabs',
            key: 'tabs',
            components: langx.clone(items)  //_.cloneDeep
        })));
        return {
            components: _.unionWith(components, EditFormUtils.unifyComponents).concat({
                type: 'hidden',
                key: 'type'
            })
        };
    };
});
define('skylark-formio/components/address/editForm/Address.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            type: 'address',
            label: 'Default Value',
            key: 'defaultValue',
            weight: 5,
            placeholder: 'Default Value',
            tooltip: 'The will be the value for this field, before user interaction. Having a default value will override the placeholder text.',
            input: true,
            customDefaultValue: ({instance}) => instance.manualModeEnabled ? {
                mode: 'autocomplete',
                address: {}
            } : {}
        }
    ];
});
define('skylark-formio/components/address/editForm/Address.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            weight: 20,
            type: 'checkbox',
            input: true,
            key: 'enableManualMode',
            label: 'Enable Manual Mode',
            tooltip: 'Should Manual Mode be enabled for that component or not.'
        },
        {
            weight: 30,
            type: 'textfield',
            input: true,
            key: 'switchToManualModeLabel',
            label: 'Switch To Matual Mode Label',
            placeholder: 'Switch To Matual Mode Label',
            tooltip: 'The label for the checkbox used to switch to manual mode.',
            validate: { required: true },
            customConditional: ({data}) => Boolean(data.enableManualMode)
        },
        {
            weight: 40,
            type: 'checkbox',
            input: true,
            key: 'disableClearIcon',
            label: 'Disable Clear Icon',
            tooltip: "Clear Icon allows easily clear component's value."
        }
    ];
});
define('skylark-formio/components/address/editForm/Address.edit.provider',[
    'skylark-lodash',
    '../../../Formio'
], function (_, Formio) {
    'use strict';
    return [
        {
            type: 'select',
            input: true,
            key: 'provider',
            label: 'Provider',
            placeholder: 'Select your address search provider',
            weight: 0,
            tooltip: 'Which address search service should be used.',
            valueProperty: 'value',
            dataSrc: 'custom',
            data: {
                custom() {
                    return _.values(Formio.Providers.getProviders('address')).sort().map(provider => ({
                        label: provider.displayName,
                        value: provider.name
                    }));
                }
            },
            validate: { required: true }
        },
        {
            type: 'textfield',
            input: true,
            key: "providerOptions.params['subscription-key']",
            label: 'Subscription Key',
            placeholder: 'Enter Subscription Key',
            weight: 10,
            tooltip: 'Use your Azure Maps subscription key here.',
            validate: { required: true },
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'azure'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'providerOptions.url',
            label: 'Url',
            placeholder: 'Enter Url',
            weight: 10,
            tooltip: 'Url to the service which should be used to search addresses for autocomplete.',
            validate: { required: true },
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'custom'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'providerOptions.queryProperty',
            label: 'Query Property',
            defaultValue: 'query',
            placeholder: 'Enter Query Property',
            weight: 20,
            tooltip: 'Which query param should be used to pass as a search string. Default is `query`.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'custom'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'providerOptions.responseProperty',
            label: 'Response Property',
            placeholder: 'Enter Response Property',
            weight: 30,
            tooltip: 'The property within the response data, where iterable addresses reside. For example: results.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'custom'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'providerOptions.displayValueProperty',
            label: 'Display Value Property',
            placeholder: 'Display Value Property',
            weight: 40,
            tooltip: 'The property of each address in the response to use as the display value.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'custom'
                    ]
                }
            }
        },
        {
            type: 'textarea',
            input: true,
            key: 'providerOptions.params',
            label: 'Params',
            placeholder: '{ ... }',
            weight: 50,
            rows: 5,
            editor: 'ace',
            as: 'json',
            tooltip: 'Additional query params can be specified here in a way of JSON object.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'custom'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'providerOptions.params.key',
            label: 'API Key',
            placeholder: 'Enter API Key',
            weight: 10,
            tooltip: 'Use your Google API key here.',
            validate: { required: true },
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'google'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'providerOptions.params.region',
            label: 'Region',
            placeholder: 'Enter Region',
            weight: 20,
            tooltip: 'Specify Region for Google Maps APIs.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.provider' },
                        'google'
                    ]
                }
            }
        },
        {
            type: 'textarea',
            input: true,
            key: 'manualModeViewString',
            label: 'Manual Mode View String',
            placeholder: 'Enter Manual Mode View String',
            description: '"address" variable references component value, "data" - submission data and "component" - address component schema.',
            weight: 60,
            rows: 5,
            editor: 'ace',
            tooltip: 'Specify template which should be when quering view string for the component value entered in manual mode. This string is used in table view, CSV export and email rendering. When left blank combined value of all components joined with comma will be used.'
        }
    ];
});
define('skylark-formio/components/address/Address.form',[
    '../_classes/component/Component.form',
    './editForm/Address.edit.data',
    './editForm/Address.edit.display',
    './editForm/Address.edit.provider'
], function (baseEditForm, AddressEditData, AddressEditDisplay, AddressEditProvider) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'data',
                components: AddressEditData
            },
            {
                key: 'display',
                components: AddressEditDisplay
            },
            {
                label: 'Provider',
                key: 'provider',
                weight: 15,
                components: AddressEditProvider
            }
        ], ...extend);
    };
});
define('skylark-formio/components/button/editForm/Button.edit.display',[
    '../../../utils/builder',
    'skylark-lodash'
], function (BuilderUtils, _) {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            type: 'select',
            key: 'action',
            label: 'Action',
            input: true,
            dataSrc: 'values',
            weight: 110,
            tooltip: 'This is the action to be performed by this button.',
            data: {
                values: [
                    {
                        label: 'Submit',
                        value: 'submit'
                    },
                    {
                        label: 'Save in state',
                        value: 'saveState'
                    },
                    {
                        label: 'Event',
                        value: 'event'
                    },
                    {
                        label: 'Custom',
                        value: 'custom'
                    },
                    {
                        label: 'Reset',
                        value: 'reset'
                    },
                    {
                        label: 'OAuth',
                        value: 'oauth'
                    },
                    {
                        label: 'POST to URL',
                        value: 'url'
                    }
                ]
            }
        },
        {
            type: 'textfield',
            label: 'Save in state',
            key: 'state',
            weight: 112,
            tooltip: 'The state you wish to save the submission under when this button is pressed. Example "draft" would save the submission in Draft Mode.',
            placeholder: 'submitted',
            input: true,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.action' },
                        'saveState'
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            inputType: 'checkbox',
            key: 'showValidations',
            label: 'Show Validations',
            weight: 115,
            tooltip: 'When the button is pressed, show any validation errors on the form.',
            conditional: {
                json: {
                    '!==': [
                        { var: 'data.action' },
                        'submit'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            label: 'Button Event',
            key: 'event',
            input: true,
            weight: 120,
            tooltip: 'The event to fire when the button is clicked.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.action' },
                        'event'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            inputType: 'url',
            key: 'url',
            input: true,
            weight: 120,
            label: 'Button URL',
            tooltip: 'The URL where the submission will be sent.',
            placeholder: 'https://example.form.io',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.action' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'datagrid',
            key: 'headers',
            input: true,
            weight: 130,
            label: 'Headers',
            addAnother: 'Add Header',
            tooltip: 'Headers Properties and Values for your request',
            components: [
                {
                    key: 'header',
                    label: 'Header',
                    input: true,
                    type: 'textfield'
                },
                {
                    key: 'value',
                    label: 'Value',
                    input: true,
                    type: 'textfield'
                }
            ],
            conditional: {
                json: {
                    '===': [
                        { var: 'data.action' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textarea',
            key: 'custom',
            label: 'Button Custom Logic',
            tooltip: 'The custom logic to evaluate when the button is clicked.',
            rows: 5,
            editor: 'ace',
            input: true,
            weight: 120,
            placeholder: "data['mykey'] = data['anotherKey'];",
            conditional: {
                json: {
                    '===': [
                        { var: 'data.action' },
                        'custom'
                    ]
                }
            }
        },
        {
            type: 'select',
            key: 'theme',
            label: 'Theme',
            input: true,
            tooltip: 'The color theme of this button.',
            dataSrc: 'values',
            weight: 140,
            data: {
                values: [
                    {
                        label: 'Primary',
                        value: 'primary'
                    },
                    {
                        label: 'Secondary',
                        value: 'secondary'
                    },
                    {
                        label: 'Info',
                        value: 'info'
                    },
                    {
                        label: 'Success',
                        value: 'success'
                    },
                    {
                        label: 'Danger',
                        value: 'danger'
                    },
                    {
                        label: 'Warning',
                        value: 'warning'
                    }
                ]
            }
        },
        {
            type: 'select',
            key: 'size',
            label: 'Size',
            input: true,
            tooltip: 'The size of this button.',
            dataSrc: 'values',
            weight: 150,
            data: {
                values: [
                    {
                        label: 'Extra Small',
                        value: 'xs'
                    },
                    {
                        label: 'Small',
                        value: 'sm'
                    },
                    {
                        label: 'Medium',
                        value: 'md'
                    },
                    {
                        label: 'Large',
                        value: 'lg'
                    }
                ]
            }
        },
        {
            type: 'textfield',
            key: 'leftIcon',
            label: 'Left Icon',
            input: true,
            placeholder: 'Enter icon classes',
            tooltip: "This is the full icon class string to show the icon. Example: 'fa fa-plus'",
            weight: 160
        },
        {
            type: 'textfield',
            key: 'rightIcon',
            label: 'Right Icon',
            input: true,
            placeholder: 'Enter icon classes',
            tooltip: "This is the full icon class string to show the icon. Example: 'fa fa-plus'",
            weight: 170
        },
        {
            type: 'select',
            input: true,
            weight: 180,
            label: 'Shortcut',
            key: 'shortcut',
            tooltip: 'Shortcut for this component.',
            dataSrc: 'custom',
            valueProperty: 'value',
            customDefaultValue: () => '',
            template: '{{ item.label }}',
            data: {
                custom(context) {
                    return BuilderUtils.getAvailableShortcuts(_.get(context, 'instance.options.editForm', {}), _.get(context, 'instance.options.editComponent', {}));
                }
            }
        },
        {
            type: 'checkbox',
            key: 'block',
            label: 'Block Button',
            input: true,
            weight: 155,
            tooltip: 'This control should span the full width of the bounding container.'
        },
        {
            type: 'checkbox',
            key: 'disableOnInvalid',
            label: 'Disable on Form Invalid',
            tooltip: 'This will disable this field if the form is invalid.',
            input: true,
            weight: 620
        }
    ];
});
define('skylark-formio/components/button/Button.form',[
    '../_classes/component/Component.form',
    './editForm/Button.edit.display'
], function (baseEditForm, ButtonEditDisplay) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: ButtonEditDisplay
            },
            {
                key: 'data',
                ignore: true
            },
            {
                key: 'validation',
                ignore: true
            }
        ], ...extend);
    };
});
define('skylark-formio/components/checkbox/editForm/Checkbox.edit.data',[],function () {
    'use strict';
    return [{
            key: 'multiple',
            ignore: true
        }];
});
define('skylark-formio/components/checkbox/editForm/Checkbox.edit.display',[
    '../../../utils/builder',
    'skylark-lodash'
], function (BuilderUtils, _) {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            type: 'select',
            input: true,
            weight: 350,
            label: 'Shortcut',
            key: 'shortcut',
            tooltip: 'Shortcut for this component.',
            dataSrc: 'custom',
            valueProperty: 'value',
            customDefaultValue: () => '',
            template: '{{ item.label }}',
            data: {
                custom(context) {
                    return BuilderUtils.getAvailableShortcuts(_.get(context, 'instance.options.editForm', {}), _.get(context, 'instance.options.editComponent', {}));
                }
            }
        },
        {
            type: 'select',
            input: true,
            key: 'inputType',
            label: 'Input Type',
            tooltip: 'This is the input type used for this checkbox.',
            dataSrc: 'values',
            weight: 410,
            data: {
                values: [
                    {
                        label: 'Checkbox',
                        value: 'checkbox'
                    },
                    {
                        label: 'Radio',
                        value: 'radio'
                    }
                ]
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'name',
            label: 'Radio Key',
            tooltip: 'The key used to trigger the radio button toggle.',
            weight: 420,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.inputType' },
                        'radio'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            label: 'Radio Value',
            key: 'value',
            tooltip: 'The value used with this radio button.',
            weight: 430,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.inputType' },
                        'radio'
                    ]
                }
            }
        }
    ];
});
define('skylark-formio/components/checkbox/editForm/Checkbox.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'validateOn',
            ignore: true
        },
        {
            key: 'unique',
            ignore: true
        }
    ];
});
define('skylark-formio/components/checkbox/Checkbox.form',[
    '../_classes/component/Component.form',
    './editForm/Checkbox.edit.data',
    './editForm/Checkbox.edit.display',
    './editForm/Checkbox.edit.validation'
], function (baseEditForm, CheckboxEditData, CheckboxEditDisplay, CheckboxEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'data',
                components: CheckboxEditData
            },
            {
                key: 'display',
                components: CheckboxEditDisplay
            },
            {
                key: 'validation',
                components: CheckboxEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/_classes/nested/NestedComponent.form',['../component/Component.form'], function (baseEditForm) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'data',
                ignore: true
            },
            {
                key: 'validation',
                ignore: true
            }
        ], ...extend);
    };
});
define('skylark-formio/components/columns/editForm/Columns.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            key: 'disabled',
            ignore: true
        },
        {
            weight: 150,
            type: 'datagrid',
            input: true,
            key: 'columns',
            label: 'Column Properties',
            addAnother: 'Add Column',
            tooltip: 'The width, offset, push, and pull settings for each column.',
            reorder: true,
            components: [
                {
                    type: 'hidden',
                    key: 'components',
                    defaultValue: []
                },
                {
                    type: 'select',
                    key: 'size',
                    defaultValue: 'md',
                    label: 'Size',
                    data: {
                        values: [
                            {
                                label: 'xs',
                                value: 'xs'
                            },
                            {
                                label: 'sm',
                                value: 'sm'
                            },
                            {
                                label: 'md',
                                value: 'md'
                            },
                            {
                                label: 'lg',
                                value: 'lg'
                            },
                            {
                                label: 'xl',
                                value: 'xl'
                            }
                        ]
                    }
                },
                {
                    type: 'number',
                    key: 'width',
                    defaultValue: 6,
                    label: 'Width'
                },
                {
                    type: 'number',
                    key: 'offset',
                    defaultValue: 0,
                    label: 'Offset'
                },
                {
                    type: 'number',
                    key: 'push',
                    defaultValue: 0,
                    label: 'Push'
                },
                {
                    type: 'number',
                    key: 'pull',
                    defaultValue: 0,
                    label: 'Pull'
                }
            ]
        },
        {
            weight: 160,
            type: 'checkbox',
            label: 'Auto adjust columns',
            tooltip: 'Will automatically adjust columns based on if nested components are hidden.',
            key: 'autoAdjust',
            input: true
        },
        {
            weight: 161,
            type: 'checkbox',
            label: 'Hide Column when Children Hidden',
            key: 'hideOnChildrenHidden',
            tooltip: 'Check this if you would like to hide any column when the children within that column are also hidden',
            input: true
        }
    ];
});
define('skylark-formio/components/columns/Columns.form',[
    '../_classes/nested/NestedComponent.form',
    './editForm/Columns.edit.display'
], function (nestedComponentForm, ColumnsEditDisplay) {
    'use strict';
    return function (...extend) {
        return nestedComponentForm([{
                key: 'display',
                components: ColumnsEditDisplay
            }], ...extend);
    };
});
define('skylark-formio/components/container/editForm/Container.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        }
    ];
});
define('skylark-formio/components/container/editForm/Container.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            key: 'allowCalculateOverride',
            ignore: true
        },
        {
            key: 'defaultValue',
            ignore: true
        }
    ];
});
define('skylark-formio/components/container/Container.form',[
    '../_classes/component/Component.form',
    './editForm/Container.edit.display',
    './editForm/Container.edit.data'
], function (baseEditForm, ContainerEditDisplay, ContainerEditData) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: ContainerEditDisplay
            },
            {
                key: 'data',
                components: ContainerEditData
            }
        ], ...extend);
    };
});
define('skylark-formio/components/content/editForm/Content.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'disabled',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            weight: 700,
            type: 'checkbox',
            label: 'Refresh On Change',
            tooltip: 'Rerender the field whenever a value on the form changes.',
            key: 'refreshOnChange',
            input: true
        }
    ];
});
define('skylark-formio/components/content/editForm/Content.edit.logic',[],function () {
    'use strict';
    return [{
            key: 'logic',
            components: [{
                    key: 'actions',
                    components: [{
                            key: 'actionPanel',
                            components: [
                                {
                                    data: {
                                        json: [
                                            {
                                                label: 'Hidden',
                                                value: 'hidden',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Required',
                                                value: 'validate.required',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Disabled',
                                                value: 'disabled',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Label',
                                                value: 'label',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Title',
                                                value: 'title',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Tooltip',
                                                value: 'tooltip',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Description',
                                                value: 'description',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Placeholder',
                                                value: 'placeholder',
                                                type: 'string'
                                            },
                                            {
                                                label: 'CSS Class',
                                                value: 'className',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Container Custom Class',
                                                value: 'customClass',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Content',
                                                value: 'html',
                                                type: 'string',
                                                component: 'content'
                                            }
                                        ]
                                    },
                                    key: 'property'
                                },
                                {
                                    type: 'textarea',
                                    editor: 'ace',
                                    rows: 10,
                                    as: 'html',
                                    label: 'Content',
                                    tooltip: 'The content of this HTML element.',
                                    defaultValue: '<div class="well">Content</div>',
                                    key: 'content',
                                    weight: 30,
                                    input: true,
                                    customConditional(context) {
                                        return context.row.type === 'property' && context.row.hasOwnProperty('property') && context.row.property.type === 'string' && context.row.property.component === 'content';
                                    }
                                }
                            ]
                        }]
                }]
        }];
});
define('skylark-formio/components/content/Content.form',[
    '../_classes/component/Component.form',
    './editForm/Content.edit.display',
    './editForm/Content.edit.logic'
], function (baseEditForm, ContentEditDisplay, ContentEditLogic) {
    'use strict';
    return function (...extend) {
        const editForm = baseEditForm([
            {
                key: 'display',
                components: ContentEditDisplay
            },
            {
                key: 'data',
                ignore: true
            },
            {
                key: 'validation',
                ignore: true
            },
            {
                key: 'logic',
                components: ContentEditLogic
            }
        ], ...extend);
        editForm.components = [{
                weight: 0,
                type: 'textarea',
                editor: 'ckeditor',
                label: 'Content',
                hideLabel: true,
                input: true,
                key: 'html',
                as: 'html',
                rows: 3,
                tooltip: 'The HTML template for the result data items.'
            }].concat(editForm.components);
        return editForm;
    };
});
define('skylark-formio/components/textfield/editForm/TextField.edit.data',[],function () {
    'use strict';
    return [
        {
            type: 'select',
            label: 'Input Format',
            key: 'inputFormat',
            weight: 105,
            placeholder: 'Input Format',
            tooltip: 'Force the output of this field to be sanitized in a specific format.',
            template: '<span>{{ item.label }}</span>',
            data: {
                values: [
                    {
                        value: 'plain',
                        label: 'Plain'
                    },
                    {
                        value: 'html',
                        label: 'HTML'
                    },
                    {
                        value: 'raw',
                        label: 'Raw (Insecure)'
                    }
                ]
            },
            defaultValue: 'plain',
            input: true
        },
        {
            weight: 200,
            type: 'radio',
            label: 'Text Case',
            key: 'case',
            tooltip: 'When data is entered, you can change the case of the value.',
            input: true,
            values: [
                {
                    value: 'mixed',
                    label: 'Mixed (Allow upper and lower case)'
                },
                {
                    value: 'uppercase',
                    label: 'Uppercase'
                },
                {
                    value: 'lowercase',
                    label: 'Lowercase'
                }
            ]
        }
    ];
});
define('skylark-formio/components/textfield/editForm/TextField.edit.display',[
    '../../../widgets/index',
    'skylark-lodash'
], function (Widgets, _) {
    'use strict';
    return [
        {
            weight: 400,
            type: 'select',
            input: true,
            key: 'widget.type',
            label: 'Widget',
            placeholder: 'Select a widget',
            tooltip: 'The widget is the display UI used to input the value of the field.',
            defaultValue: 'input',
            onChange: context => {
                context.data.widget = _.pick(context.data.widget, 'type');
            },
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Input Field',
                        value: 'input'
                    },
                    {
                        label: 'Calendar Picker',
                        value: 'calendar'
                    }
                ]
            },
            conditional: {
                json: {
                    '===': [
                        { var: 'data.type' },
                        'textfield'
                    ]
                }
            }
        },
        {
            weight: 405,
            type: 'textarea',
            key: 'widget',
            label: 'Widget Settings',
            refreshOn: 'wiget.type',
            clearOnHide: false,
            calculateValue: context => {
                const {calculatedValue} = context.instance;
                const {type} = context.data.widget;
                if (_.isEmpty(_.omit(context.data.widget, 'type')) || _.isEmpty(_.omit(calculatedValue, 'type'))) {
                    if (calculatedValue && !calculatedValue.type) {
                        return context.data.widget;
                    }
                    const existWidget = context.instance._currentForm.options.editComponent.widget;
                    if (existWidget && !_.isEmpty(_.omit(existWidget, 'type')) && type === existWidget.type) {
                        return _.omit(existWidget, 'language');
                    } else if (type) {
                        return _.omit(Widgets[type].defaultSettings, 'language');
                    }
                }
                return context.data.widget;
            },
            input: true,
            rows: 5,
            editor: 'ace',
            as: 'json',
            conditional: {
                json: {
                    '!==': [
                        { var: 'data.widget.type' },
                        'input'
                    ]
                }
            }
        },
        {
            weight: 410,
            type: 'textfield',
            input: true,
            key: 'inputMask',
            label: 'Input Mask',
            tooltip: "An input mask helps the user with input by ensuring a predefined format.<br><br>9: numeric<br>a: alphabetical<br>*: alphanumeric<br><br>Example telephone mask: (999) 999-9999<br><br>See the <a target='_blank' href='https://github.com/RobinHerbots/jquery.inputmask'>jquery.inputmask documentation</a> for more information.</a>",
            customConditional(context) {
                return !context.data.allowMultipleMasks;
            }
        },
        {
            weight: 413,
            type: 'checkbox',
            input: true,
            key: 'allowMultipleMasks',
            label: 'Allow Multiple Masks'
        },
        {
            weight: 1350,
            type: 'checkbox',
            input: true,
            key: 'spellcheck',
            defaultValue: true,
            label: 'Allow Spellcheck'
        },
        {
            weight: 417,
            type: 'datagrid',
            input: true,
            key: 'inputMasks',
            label: 'Input Masks',
            customConditional(context) {
                return context.data.allowMultipleMasks === true;
            },
            reorder: true,
            components: [
                {
                    type: 'textfield',
                    key: 'label',
                    label: 'Label',
                    input: true
                },
                {
                    type: 'textfield',
                    key: 'mask',
                    label: 'Mask',
                    input: true
                }
            ]
        },
        {
            weight: 320,
            type: 'textfield',
            input: true,
            key: 'prefix',
            label: 'Prefix'
        },
        {
            weight: 330,
            type: 'textfield',
            input: true,
            key: 'suffix',
            label: 'Suffix'
        },
        {
            weight: 1300,
            type: 'checkbox',
            label: 'Hide Input',
            tooltip: 'Hide the input in the browser. This does not encrypt on the server. Do not use for passwords.',
            key: 'mask',
            input: true
        },
        {
            weight: 1200,
            type: 'checkbox',
            label: 'Show Word Counter',
            tooltip: 'Show a live count of the number of words.',
            key: 'showWordCount',
            input: true
        },
        {
            weight: 1201,
            type: 'checkbox',
            label: 'Show Character Counter',
            tooltip: 'Show a live count of the number of characters.',
            key: 'showCharCount',
            input: true
        }
    ];
});
define('skylark-formio/components/textfield/editForm/TextField.edit.validation',[],function () {
    'use strict';
    return [
        {
            weight: 110,
            key: 'validate.minLength',
            label: 'Minimum Length',
            placeholder: 'Minimum Length',
            type: 'number',
            tooltip: 'The minimum length requirement this field must meet.',
            input: true
        },
        {
            weight: 120,
            key: 'validate.maxLength',
            label: 'Maximum Length',
            placeholder: 'Maximum Length',
            type: 'number',
            tooltip: 'The maximum length requirement this field must meet.',
            input: true
        },
        {
            weight: 125,
            key: 'validate.minWords',
            label: 'Minimum Word Length',
            placeholder: 'Minimum Word Length',
            type: 'number',
            tooltip: 'The minimum amount of words that can be added to this field.',
            input: true
        },
        {
            weight: 126,
            key: 'validate.maxWords',
            label: 'Maximum Word Length',
            placeholder: 'Maximum Word Length',
            type: 'number',
            tooltip: 'The maximum amount of words that can be added to this field.',
            input: true
        },
        {
            weight: 130,
            key: 'validate.pattern',
            label: 'Regular Expression Pattern',
            placeholder: 'Regular Expression Pattern',
            type: 'textfield',
            tooltip: 'The regular expression pattern test that the field value must pass before the form can be submitted.',
            input: true
        }
    ];
});
define('skylark-formio/components/textfield/TextField.form',[
    '../_classes/component/Component.form',
    './editForm/TextField.edit.data',
    './editForm/TextField.edit.display',
    './editForm/TextField.edit.validation'
], function (baseEditForm, TextFieldEditData, TextFieldEditDisplay, TextFieldEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: TextFieldEditDisplay
            },
            {
                key: 'data',
                components: TextFieldEditData
            },
            {
                key: 'validation',
                components: TextFieldEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/currency/editForm/Currency.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'inputMask',
            ignore: true
        },
        {
            key: 'allowMultipleMasks',
            ignore: true
        },
        {
            key: 'showWordCount',
            ignore: true
        },
        {
            key: 'showCharCount',
            ignore: true
        },
        {
            type: 'textfield',
            input: true,
            weight: 310,
            key: 'prefix',
            label: 'prefix',
            tooltip: 'Specify the prefix symbol after the component (e.g.: USD, EUR)'
        },
        {
            type: 'textfield',
            input: true,
            weight: 320,
            key: 'suffix',
            label: 'suffix',
            tooltip: 'Specify the suffix symbol after the component (e.g.: USD, EUR).'
        }
    ];
});
define('skylark-formio/components/currency/editForm/Currency.edit.data',[],function(){

return [
  {
    type: 'select',
    input: true,
    weight: 50,
    key: 'currency',
    label: 'Currency',
    tooltip: 'The currency to use in currency formatting. Possible values are (ISO-4217) currency codes.',
    defaultValue: 'USD',
    dataSrc: 'values',
    data: {
      values: [
        { label: 'US Dollar (USD)', value: 'USD' },
        { label: 'Euro (EUR)', value: 'EUR' },
        { label: 'Pound Sterling (GBP)', value: 'GBP' },
        { label: 'Australian Dollar (AUD)', value: 'AUD' },
        { label: 'Afghani (AFN)', value: 'AFN' },
        { label: 'Lek (ALL)', value: 'ALL' },
        { label: 'Algerian Dinar (DZD)', value: 'DZD' },
        { label: 'Kwanza (AOA)', value: 'AOA' },
        { label: 'East Caribbean Dollar (XCD)', value: 'XCD' },
        { label: 'Argentine Peso (ARS)', value: 'ARS' },
        { label: 'Armenian Dram (AMD)', value: 'AMD' },
        { label: 'Aruban Florin (AWG)', value: 'AWG' },
        { label: 'Azerbaijan Manat (AZN)', value: 'AZN' },
        { label: 'Bahamian Dollar (BSD)', value: 'BSD' },
        { label: 'Bahraini Dinar (BHD)', value: 'BHD' },
        { label: 'Taka (BDT)', value: 'BDT' },
        { label: 'Barbados Dollar (BBD)', value: 'BBD' },
        { label: 'Belarusian Ruble (BYN)', value: 'BYN' },
        { label: 'Belize Dollar (BZD)', value: 'BZD' },
        { label: 'CFA Franc BCEAO (XOF)', value: 'XOF' },
        { label: 'Bermudian Dollar (BMD)', value: 'BMD' },
        { label: 'Indian Rupee (INR)', value: 'INR' },
        { label: 'Ngultrum (BTN)', value: 'BTN' },
        { label: 'Boliviano (BOB)', value: 'BOB' },
        { label: 'Mvdol (BOV)', value: 'BOV' },
        { label: 'Convertible Mark (BAM)', value: 'BAM' },
        { label: 'Pula (BWP)', value: 'BWP' },
        { label: 'Norwegian Krone (NOK)', value: 'NOK' },
        { label: 'Brazilian Real (BRL)', value: 'BRL' },
        { label: 'Brunei Dollar (BND)', value: 'BND' },
        { label: 'Bulgarian Lev (BGN)', value: 'BGN' },
        { label: 'Burundi Franc (BIF)', value: 'BIF' },
        { label: 'Cabo Verde Escudo (CVE)', value: 'CVE' },
        { label: 'Riel (KHR)', value: 'KHR' },
        { label: 'CFA Franc BEAC (XAF)', value: 'XAF' },
        { label: 'Canadian Dollar (CAD)', value: 'CAD' },
        { label: 'Cayman Islands Dollar (KYD)', value: 'KYD' },
        { label: 'Chilean Peso (CLP)', value: 'CLP' },
        { label: 'Unidad de Fomento (CLF)', value: 'CLF' },
        { label: 'Yuan Renminbi (CNY)', value: 'CNY' },
        { label: 'Colombian Peso (COP)', value: 'COP' },
        { label: 'Unidad de Valor Real (COU)', value: 'COU' },
        { label: 'Comorian Franc (KMF)', value: 'KMF' },
        { label: 'Congolese Franc (CDF)', value: 'CDF' },
        { label: 'New Zealand Dollar (NZD)', value: 'NZD' },
        { label: 'Costa Rican Colon (CRC)', value: 'CRC' },
        { label: 'Kuna (HRK)', value: 'HRK' },
        { label: 'Cuban Peso (CUP)', value: 'CUP' },
        { label: 'Peso Convertible (CUC)', value: 'CUC' },
        { label: 'Netherlands Antillean Guilder (ANG)', value: 'ANG' },
        { label: 'Czech Koruna (CZK)', value: 'CZK' },
        { label: 'Danish Krone (DKK)', value: 'DKK' },
        { label: 'Djibouti Franc (DJF)', value: 'DJF' },
        { label: 'Dominican Peso (DOP)', value: 'DOP' },
        { label: 'Egyptian Pound (EGP)', value: 'EGP' },
        { label: 'El Salvador Colon (SVC)', value: 'SVC' },
        { label: 'Nakfa (ERN)', value: 'ERN' },
        { label: 'Ethiopian Birr (ETB)', value: 'ETB' },
        { label: 'Falkland Islands Pound (FKP)', value: 'FKP' },
        { label: 'Fiji Dollar (FJD)', value: 'FJD' },
        { label: 'CFP Franc (XPF)', value: 'XPF' },
        { label: 'Dalasi (GMD)', value: 'GMD' },
        { label: 'Lari (GEL)', value: 'GEL' },
        { label: 'Ghana Cedi (GHS)', value: 'GHS' },
        { label: 'Gibraltar Pound (GIP)', value: 'GIP' },
        { label: 'Quetzal (GTQ)', value: 'GTQ' },
        { label: 'Guinean Franc (GNF)', value: 'GNF' },
        { label: 'Guyana Dollar (GYD)', value: 'GYD' },
        { label: 'Gourde (HTG)', value: 'HTG' },
        { label: 'Lempira (HNL)', value: 'HNL' },
        { label: 'Hong Kong Dollar (HKD)', value: 'HKD' },
        { label: 'Forint (HUF)', value: 'HUF' },
        { label: 'Iceland Krona (ISK)', value: 'ISK' },
        { label: 'Indian Rupee (INR)', value: 'INR' },
        { label: 'Rupiah (IDR)', value: 'IDR' },
        { label: 'SDR (Special Drawing Right) (XDR)', value: 'XDR' },
        { label: 'Iranian Rial (IRR)', value: 'IRR' },
        { label: 'Iraqi Dinar (IQD)', value: 'IQD' },
        { label: 'New Israeli Sheqel (ILS)', value: 'ILS' },
        { label: 'Jamaican Dollar (JMD)', value: 'JMD' },
        { label: 'Yen (JPY)', value: 'JPY' },
        { label: 'Jordanian Dinar (JOD)', value: 'JOD' },
        { label: 'Tenge (KZT)', value: 'KZT' },
        { label: 'Kenyan Shilling (KES)', value: 'KES' },
        { label: 'North Korean Won (KPW)', value: 'KPW' },
        { label: 'Won (KRW)', value: 'KRW' },
        { label: 'Kuwaiti Dinar (KWD)', value: 'KWD' },
        { label: 'Som (KGS)', value: 'KGS' },
        { label: 'Lao Kip (LAK)', value: 'LAK' },
        { label: 'Lebanese Pound (LBP)', value: 'LBP' },
        { label: 'Loti (LSL)', value: 'LSL' },
        { label: 'Rand (ZAR)', value: 'ZAR' },
        { label: 'Liberian Dollar (LRD)', value: 'LRD' },
        { label: 'Libyan Dinar (LYD)', value: 'LYD' },
        { label: 'Swiss Franc (CHF)', value: 'CHF' },
        { label: 'Pataca (MOP)', value: 'MOP' },
        { label: 'Denar (MKD)', value: 'MKD' },
        { label: 'Malagasy Ariary (MGA)', value: 'MGA' },
        { label: 'Malawi Kwacha (MWK)', value: 'MWK' },
        { label: 'Malaysian Ringgit (MYR)', value: 'MYR' },
        { label: 'Rufiyaa (MVR)', value: 'MVR' },
        { label: 'Ouguiya (MRU)', value: 'MRU' },
        { label: 'Mauritius Rupee (MUR)', value: 'MUR' },
        { label: 'ADB Unit of Account (XUA)', value: 'XUA' },
        { label: 'Mexican Peso (MXN)', value: 'MXN' },
        { label: 'Mexican Unidad de Inversion (UDI) (MXV)', value: 'MXV' },
        { label: 'Moldovan Leu (MDL)', value: 'MDL' },
        { label: 'Tugrik (MNT)', value: 'MNT' },
        { label: 'Moroccan Dirham (MAD)', value: 'MAD' },
        { label: 'Mozambique Metical (MZN)', value: 'MZN' },
        { label: 'Kyat (MMK)', value: 'MMK' },
        { label: 'Namibia Dollar (NAD)', value: 'NAD' },
        { label: 'Nepalese Rupee (NPR)', value: 'NPR' },
        { label: 'Cordoba Oro (NIO)', value: 'NIO' },
        { label: 'Naira (NGN)', value: 'NGN' },
        { label: 'Rial Omani (OMR)', value: 'OMR' },
        { label: 'Pakistan Rupee (PKR)', value: 'PKR' },
        { label: 'Balboa (PAB)', value: 'PAB' },
        { label: 'Kina (PGK)', value: 'PGK' },
        { label: 'Guarani (PYG)', value: 'PYG' },
        { label: 'Sol (PEN)', value: 'PEN' },
        { label: 'Philippine Peso (PHP)', value: 'PHP' },
        { label: 'Zloty (PLN)', value: 'PLN' },
        { label: 'Qatari Rial (QAR)', value: 'QAR' },
        { label: 'Romanian Leu (RON)', value: 'RON' },
        { label: 'Russian Ruble (RUB)', value: 'RUB' },
        { label: 'Rwanda Franc (RWF)', value: 'RWF' },
        { label: 'Saint Helena Pound (SHP)', value: 'SHP' },
        { label: 'Tala (WST)', value: 'WST' },
        { label: 'Dobra (STN)', value: 'STN' },
        { label: 'Saudi Riyal (SAR)', value: 'SAR' },
        { label: 'Serbian Dinar (RSD)', value: 'RSD' },
        { label: 'Seychelles Rupee (SCR)', value: 'SCR' },
        { label: 'Leone (SLL)', value: 'SLL' },
        { label: 'Singapore Dollar (SGD)', value: 'SGD' },
        { label: 'Sucre (XSU)', value: 'XSU' },
        { label: 'Solomon Islands Dollar (SBD)', value: 'SBD' },
        { label: 'Somali Shilling (SOS)', value: 'SOS' },
        { label: 'South Sudanese Pound (SSP)', value: 'SSP' },
        { label: 'Sri Lanka Rupee (LKR)', value: 'LKR' },
        { label: 'Sudanese Pound (SDG)', value: 'SDG' },
        { label: 'Surinam Dollar (SRD)', value: 'SRD' },
        { label: 'Lilangeni (SZL)', value: 'SZL' },
        { label: 'Swedish Krona (SEK)', value: 'SEK' },
        { label: 'WIR Euro (CHE)', value: 'CHE' },
        { label: 'WIR Franc (CHW)', value: 'CHW' },
        { label: 'Syrian Pound (SYP)', value: 'SYP' },
        { label: 'New Taiwan Dollar (TWD)', value: 'TWD' },
        { label: 'Somoni (TJS)', value: 'TJS' },
        { label: 'Tanzanian Shilling (TZS)', value: 'TZS' },
        { label: 'Baht (THB)', value: 'THB' },
        { label: 'Pa’anga (TOP)', value: 'TOP' },
        { label: 'Trinidad and Tobago Dollar (TTD)', value: 'TTD' },
        { label: 'Tunisian Dinar (TND)', value: 'TND' },
        { label: 'Turkish Lira (TRY)', value: 'TRY' },
        { label: 'Turkmenistan New Manat (TMT)', value: 'TMT' },
        { label: 'Uganda Shilling (UGX)', value: 'UGX' },
        { label: 'Hryvnia (UAH)', value: 'UAH' },
        { label: 'UAE Dirham (AED)', value: 'AED' },
        { label: 'US Dollar (Next day) (USN)', value: 'USN' },
        { label: 'Peso Uruguayo (UYU)', value: 'UYU' },
        { label: 'Uruguay Peso en Unidades Indexadas (UYI)', value: 'UYI' },
        { label: 'Unidad Previsional (UYW)', value: 'UYW' },
        { label: 'Uzbekistan Sum (UZS)', value: 'UZS' },
        { label: 'Vatu (VUV)', value: 'VUV' },
        { label: 'Bolívar Soberano (VES)', value: 'VES' },
        { label: 'Dong (VND)', value: 'VND' },
        { label: 'Yemeni Rial (YER)', value: 'YER' },
        { label: 'Zambian Kwacha (ZMW)', value: 'ZMW' },
        { label: 'Zimbabwe Dollar (ZWL),', value:  'ZWL' }
      ]
    }
  }
];

});
define('skylark-formio/components/currency/Currency.form',[
    '../textfield/TextField.form',
    './editForm/Currency.edit.display',
    './editForm/Currency.edit.data'
], function (baseEditForm, CurrencyEditDisplay, CurrencyEditData) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: CurrencyEditDisplay
            },
            {
                key: 'data',
                components: CurrencyEditData
            },
            {
                key: 'validation',
                components: [
                    {
                        key: 'validate.minLength',
                        ignore: true
                    },
                    {
                        key: 'validate.maxLength',
                        ignore: true
                    },
                    {
                        key: 'validate.minWords',
                        ignore: true
                    },
                    {
                        key: 'validate.maxWords',
                        ignore: true
                    },
                    {
                        key: 'validate.pattern',
                        ignore: true
                    }
                ]
            }
        ], ...extend);
    };
});
define('skylark-formio/components/datagrid/editForm/DataGrid.edit.data',[],function () {
    'use strict';
    return [{
            key: 'multiple',
            ignore: true
        }];
});
define('skylark-formio/components/datagrid/editForm/DataGrid.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'placeholder',
            ignore: true
        },
        {
            type: 'checkbox',
            label: 'Disable Adding / Removing Rows',
            key: 'disableAddingRemovingRows',
            tooltip: 'Check if you want to hide Add Another button and Remove Row button',
            weight: 405,
            input: true,
            clearOnHide: false,
            customConditional(context) {
                return !context.data.enableRowGroups;
            },
            calculateValue(context) {
                return context.data.enableRowGroups ? true : context.data.disableAddingRemovingRows;
            }
        },
        {
            weight: 406,
            type: 'textarea',
            input: true,
            key: 'conditionalAddButton',
            label: 'Conditional Add Button',
            placeholder: 'show = ...',
            tooltip: 'Specify condition when Add Button should be displayed.',
            editor: 'ace',
            as: 'js',
            wysiwyg: { minLines: 3 }
        },
        {
            type: 'checkbox',
            label: 'Allow Reorder',
            key: 'reorder',
            weight: 407,
            input: true
        },
        {
            type: 'textfield',
            label: 'Add Another Text',
            key: 'addAnother',
            tooltip: 'Set the text of the Add Another button.',
            placeholder: 'Add Another',
            weight: 410,
            input: true,
            customConditional(context) {
                return !context.data.disableAddingRemovingRows;
            }
        },
        {
            type: 'select',
            label: 'Add Another Position',
            key: 'addAnotherPosition',
            dataSrc: 'values',
            tooltip: 'Position for Add Another button with respect to Data Grid Array.',
            defaultValue: 'bottom',
            input: true,
            data: {
                values: [
                    {
                        label: 'Top',
                        value: 'top'
                    },
                    {
                        label: 'Bottom',
                        value: 'bottom'
                    },
                    {
                        label: 'Both',
                        value: 'both'
                    }
                ]
            },
            weight: 411,
            customConditional(context) {
                return !context.data.disableAddingRemovingRows;
            }
        },
        {
            type: 'checkbox',
            label: 'Default Open Rows',
            key: 'defaultOpen',
            tooltip: 'Check this if you would like for the rows of the edit grid to be defaulted to opened if values exist.',
            weight: 420,
            input: true
        },
        {
            type: 'checkbox',
            label: 'Equal column width',
            key: 'layoutFixed',
            weight: 430,
            input: true
        },
        {
            key: 'enableRowGroups',
            type: 'checkbox',
            label: 'Enable Row Groups',
            weight: 440,
            input: true
        },
        {
            label: 'Groups',
            disableAddingRemovingRows: false,
            defaultOpen: false,
            addAnother: '',
            addAnotherPosition: 'bottom',
            mask: false,
            tableView: true,
            alwaysEnabled: false,
            type: 'datagrid',
            input: true,
            key: 'rowGroups',
            reorder: true,
            components: [
                {
                    label: 'Label',
                    allowMultipleMasks: false,
                    showWordCount: false,
                    showCharCount: false,
                    tableView: true,
                    alwaysEnabled: false,
                    type: 'textfield',
                    input: true,
                    key: 'label',
                    widget: { type: '' },
                    row: '0-0'
                },
                {
                    label: 'Number of Rows',
                    mask: false,
                    tableView: true,
                    alwaysEnabled: false,
                    type: 'number',
                    input: true,
                    key: 'numberOfRows',
                    row: '0-1'
                }
            ],
            weight: 441,
            conditional: { json: { var: 'data.enableRowGroups' } }
        },
        {
            label: 'Hide Group on Header Click',
            type: 'checkbox',
            input: true,
            key: 'groupToggle',
            weight: 442,
            conditional: { json: { var: 'data.enableRowGroups' } }
        }
    ];
});
define('skylark-formio/components/datagrid/editForm/DataGrid.edit.validation',[],function () {
    'use strict';
    return [
        {
            weight: 110,
            key: 'validate.minLength',
            label: 'Minimum Length',
            placeholder: 'Minimum Length',
            type: 'number',
            tooltip: 'The minimum length requirement this field must meet.',
            input: true
        },
        {
            weight: 120,
            key: 'validate.maxLength',
            label: 'Maximum Length',
            placeholder: 'Maximum Length',
            type: 'number',
            tooltip: 'The maximum length requirement this field must meet.',
            input: true
        }
    ];
});
define('skylark-formio/components/datagrid/DataGrid.form',[
    '../_classes/component/Component.form',
    './editForm/DataGrid.edit.data',
    './editForm/DataGrid.edit.display',
    './editForm/DataGrid.edit.validation'
], function (baseEditForm, DataGridEditData, DataGridEditDisplay, DataGridEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: DataGridEditDisplay
            },
            {
                key: 'data',
                components: DataGridEditData
            },
            {
                key: 'validation',
                components: DataGridEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/datamap/editForm/DataMap.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            key: 'defaultValue',
            ignore: true
        }
    ];
});
define('skylark-formio/components/datamap/editForm/DataMap.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            type: 'textfield',
            label: 'Label for Key column',
            key: 'keyLabel',
            tooltip: "Provide a label text for Key column (otherwise 'Key' will be used)",
            weight: 404,
            input: true
        },
        {
            type: 'checkbox',
            label: 'Disable Adding / Removing Rows',
            key: 'disableAddingRemovingRows',
            tooltip: 'Check if you want to hide Add Another button and Remove Row button',
            weight: 405,
            input: true
        },
        {
            type: 'checkbox',
            label: 'Show key column before value',
            key: 'keyBeforeValue',
            tooltip: 'Check if you would like to show the Key before the Value column.',
            weight: 406,
            input: true
        },
        {
            type: 'textfield',
            label: 'Add Another Text',
            key: 'addAnother',
            tooltip: 'Set the text of the Add Another button.',
            placeholder: 'Add Another',
            weight: 410,
            input: true,
            customConditional(context) {
                return !context.data.disableAddingRemovingRows;
            }
        }
    ];
});
define('skylark-formio/components/datamap/DataMap.form',[
    '../_classes/component/Component.form',
    './editForm/DataMap.edit.data',
    './editForm/DataMap.edit.display'
], function (componentEditForm, DataMapEditData, DataMapEditDisplay) {
    'use strict';
    return function (...extend) {
        return componentEditForm([
            {
                key: 'display',
                components: DataMapEditDisplay
            },
            {
                key: 'data',
                components: DataMapEditData
            }
        ], ...extend);
    };
});
define('skylark-formio/components/datetime/editForm/DateTime.edit.data',[],function () {
    'use strict';
    return [
        {
            type: 'textfield',
            input: true,
            key: 'defaultDate',
            label: 'Default Date',
            placeholder: 'moment()',
            tooltip: "You can use Moment.js functions to set the default value to a specific date. For example: \n \n moment().subtract(10, 'days')",
            weight: 6
        },
        {
            type: 'textarea',
            as: 'json',
            editor: 'ace',
            weight: 28,
            input: true,
            key: 'customOptions',
            label: 'Flatpikr options',
            tooltip: 'A raw JSON object to use as options for the Date / Time component (Flatpickr).',
            defaultValue: {}
        }
    ];
});
define('skylark-formio/components/datetime/editForm/DateTime.edit.date',[
    '../../../utils/Evaluator',
    '../../_classes/component/editForm/utils'
], function (Evaluator, EditFormUtils) {
    'use strict';
    return [
        {
            type: 'checkbox',
            input: true,
            key: 'enableDate',
            label: 'Enable Date Input',
            weight: 0,
            tooltip: 'Enables date input for this field.'
        },
        {
            type: 'checkbox',
            input: true,
            key: 'enableMinDateInput',
            label: 'Use Input to add moment.js for minDate',
            persistent: false,
            weight: 0,
            tooltip: 'Enables to use input for moment functions instead of calendar.'
        },
        {
            type: 'datetime',
            input: true,
            key: 'datePicker.minDate',
            label: 'Use calendar to set minDate',
            weight: 10,
            tooltip: 'Enables to use calendar to set date.',
            customConditional({data, component}) {
                if (component.datePicker && component.datePicker.minDate && component.datePicker.minDate.indexOf('moment') !== -1) {
                    return false;
                }
                return !data.enableMinDateInput;
            }
        },
        {
            type: 'textfield',
            input: true,
            enableTime: false,
            key: 'datePicker.minDate',
            label: 'Minimum Date',
            tooltip: "The minimum date that can be picked. You can also use Moment.js functions. For example: \n \n moment().subtract(10, 'days')",
            customConditional({data, component}) {
                if (component.datePicker && component.datePicker.minDate && component.datePicker.minDate.indexOf('moment') !== -1) {
                    return true;
                }
                return data.enableMinDateInput;
            },
            weight: 10
        },
        {
            type: 'checkbox',
            input: true,
            key: 'enableMaxDateInput',
            label: 'Use Input to add moment.js for maxDate',
            persistent: false,
            weight: 20,
            tooltip: 'Enables to use input for moment functions instead of calendar.'
        },
        {
            type: 'textfield',
            input: true,
            enableTime: false,
            key: 'datePicker.maxDate',
            label: 'Maximum Date',
            tooltip: "The maximum date that can be picked. You can also use Moment.js functions. For example: \n \n moment().add(10, 'days')",
            weight: 20,
            customConditional({data, component}) {
                if (component.datePicker && component.datePicker.maxDate && component.datePicker.maxDate.indexOf('moment') !== -1) {
                    return true;
                }
                return data.enableMaxDateInput;
            }
        },
        {
            type: 'datetime',
            input: true,
            key: 'datePicker.maxDate',
            label: 'Use calendar to set maxDate',
            weight: 20,
            tooltip: 'Enables to use calendar to set date.',
            customConditional({data, component}) {
                if (component.datePicker && component.datePicker.maxDate && component.datePicker.maxDate.indexOf('moment') !== -1) {
                    return false;
                }
                return !data.enableMaxDateInput;
            }
        },
        {
            type: 'tags',
            input: true,
            key: 'datePicker.disable',
            label: 'Disable specific dates or dates by range',
            placeholder: '(yyyy-MM-dd) or (yyyy-MM-dd - yyyy-MM-dd)',
            tooltip: 'Add dates that you want to blacklist. For example: \n \n 2025-02-21',
            weight: 21
        },
        {
            type: 'panel',
            title: 'Custom Disabled Dates',
            collapsible: true,
            collapsed: true,
            style: { 'margin-bottom': '10px' },
            key: 'panel-disable-function',
            customConditional() {
                return !Evaluator.noeval;
            },
            components: [
                EditFormUtils.logicVariablesTable('<tr><th>date</th><td>The date object.</td></tr>'),
                {
                    type: 'textarea',
                    input: true,
                    editor: 'ace',
                    key: 'datePicker.disableFunction',
                    label: 'Disabling dates by a function',
                    description: 'For more information check out the <a href="https://flatpickr.js.org/examples/#disabling-dates" target="_blank">Docs</a>',
                    weight: 22
                },
                {
                    type: 'htmlelement',
                    tag: 'div',
                    content: '<h4>Example</h4>' + `<pre>// Disable all weekends<br>date.getDay() === 0 || date.getDay() === 6</pre>
          `
                }
            ]
        },
        {
            type: 'checkbox',
            input: true,
            key: 'datePicker.disableWeekends',
            label: 'Disable weekends',
            tooltip: 'Check to disable weekends',
            weight: 23
        },
        {
            type: 'checkbox',
            input: true,
            key: 'datePicker.disableWeekdays',
            label: 'Disable weekdays',
            tooltip: 'Check to disable weekdays',
            weight: 23
        }
    ];
});
define('skylark-formio/components/datetime/editForm/DateTime.edit.display',[],function () {
    'use strict';
    return [
        {
            type: 'select',
            input: true,
            key: 'displayInTimezone',
            label: 'Display in Timezone',
            tooltip: 'This will display the captured date time in the select timezone.',
            weight: 30,
            defaultValue: 'viewer',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'of Viewer',
                        value: 'viewer'
                    },
                    {
                        label: 'of Submission',
                        value: 'submission'
                    },
                    {
                        label: 'of Location',
                        value: 'location'
                    },
                    {
                        label: 'UTC',
                        value: 'utc'
                    }
                ]
            }
        },
        {
            type: 'select',
            input: true,
            key: 'timezone',
            label: 'Select Timezone',
            tooltip: 'Select the timezone you wish to display this Date',
            weight: 31,
            lazyLoad: true,
            defaultValue: '',
            valueProperty: 'name',
            dataSrc: 'url',
            data: { url: 'https://cdn.form.io/timezones.json' },
            template: '<span>{{ item.label }}</span>',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.displayInTimezone' },
                        'location'
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            key: 'useLocaleSettings',
            label: 'Use Locale Settings',
            tooltip: 'Use locale settings to display date and time.',
            weight: 51
        },
        {
            type: 'checkbox',
            input: true,
            key: 'allowInput',
            label: 'Allow Manual Input',
            tooltip: 'Check this if you would like to allow the user to manually enter in the date.',
            weight: 51
        },
        {
            type: 'textfield',
            input: true,
            key: 'format',
            label: 'Format',
            placeholder: 'Format',
            description: 'Use formats provided by <a href="https://github.com/angular-ui/bootstrap/tree/master/src/dateparser/docs#uibdateparsers-format-codes" target="_blank">DateParser Codes</a>',
            tooltip: 'The date format for displaying the datetime value.',
            weight: 52
        }
    ];
});
define('skylark-formio/components/datetime/editForm/DateTime.edit.time',[],function () {
    'use strict';
    return [
        {
            type: 'checkbox',
            input: true,
            key: 'enableTime',
            label: 'Enable Time Input',
            tooltip: 'Enables time input for this field.',
            weight: 0
        },
        {
            type: 'number',
            input: true,
            key: 'timePicker.hourStep',
            label: 'Hour Step Size',
            tooltip: 'The number of hours to increment/decrement in the time picker.',
            weight: 10
        },
        {
            type: 'number',
            input: true,
            key: 'timePicker.minuteStep',
            label: 'Minute Step Size',
            tooltip: 'The number of minutes to increment/decrement in the time picker.',
            weight: 20
        },
        {
            type: 'checkbox',
            input: true,
            key: 'timePicker.showMeridian',
            label: '12 Hour Time (AM/PM)',
            tooltip: 'Display time in 12 hour time with AM/PM.',
            weight: 30
        }
    ];
});
define('skylark-formio/components/datetime/DateTime.form',[
    '../_classes/component/Component.form',
    './editForm/DateTime.edit.data',
    './editForm/DateTime.edit.date',
    './editForm/DateTime.edit.display',
    './editForm/DateTime.edit.time'
], function (baseEditForm, DateTimeEditData, DateTimeEditDate, DateTimeEditDisplay, DateTimeEditTime) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: DateTimeEditDisplay
            },
            {
                label: 'Date',
                key: 'date',
                weight: 1,
                components: DateTimeEditDate
            },
            {
                label: 'Time',
                key: 'time',
                weight: 2,
                components: DateTimeEditTime
            },
            {
                key: 'data',
                components: DateTimeEditData
            }
        ], ...extend);
    };
});
define('skylark-formio/components/day/editForm/Day.edit.data',[],function () {
    'use strict';
    return [{
            key: 'multiple',
            ignore: true
        }];
});
define('skylark-formio/components/day/editForm/Day.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            weight: 15,
            type: 'checkbox',
            label: 'Hide Input Labels',
            tooltip: 'Hide the labels of component inputs. This allows you to show the labels in the form builder, but not when it is rendered.',
            key: 'hideInputLabels',
            input: true
        },
        {
            type: 'select',
            input: true,
            key: 'inputsLabelPosition',
            label: 'Inputs Label Position',
            tooltip: 'Position for the labels for inputs for this field.',
            weight: 40,
            defaultValue: 'top',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Top',
                        value: 'top'
                    },
                    {
                        label: 'Left',
                        value: 'left'
                    },
                    {
                        label: 'Right',
                        value: 'right'
                    },
                    {
                        label: 'Bottom',
                        value: 'bottom'
                    }
                ]
            }
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            weight: 213,
            type: 'checkbox',
            label: 'Use Locale Settings',
            tooltip: 'Use locale settings to display day.',
            key: 'useLocaleSettings',
            input: true
        }
    ];
});
define('skylark-formio/components/day/editForm/Day.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'validate.required',
            ignore: true
        },
        {
            key: 'validate.unique',
            ignore: true
        },
        {
            weight: 0,
            type: 'checkbox',
            label: 'Require Day',
            tooltip: 'A required field must be filled in before the form can be submitted.',
            key: 'fields.day.required',
            input: true
        },
        {
            weight: 10,
            type: 'checkbox',
            label: 'Require Month',
            tooltip: 'A required field must be filled in before the form can be submitted.',
            key: 'fields.month.required',
            input: true
        },
        {
            weight: 20,
            type: 'checkbox',
            label: 'Require Year',
            tooltip: 'A required field must be filled in before the form can be submitted.',
            key: 'fields.year.required',
            input: true
        },
        {
            weight: 40,
            type: 'textfield',
            label: 'Minimum Day',
            placeholder: 'yyyy-MM-dd',
            tooltip: "A minimum date that can be set. You can also use Moment.js functions. For example: \n \n moment().subtract(10, 'days')",
            key: 'minDate',
            input: true
        },
        {
            weight: 30,
            type: 'textfield',
            label: 'Maximum Day',
            placeholder: 'yyyy-MM-dd',
            tooltip: "A maximum day that can be set. You can also use Moment.js functions. For example: \n \n moment().add(10, 'days')",
            key: 'maxDate',
            input: true
        }
    ];
});
define('skylark-formio/components/day/editForm/Day.edit.day',[],function () {
    'use strict';
    return [
        {
            wieght: 200,
            type: 'select',
            datasrc: 'values',
            key: 'fields.day.type',
            title: 'Type',
            data: {
                values: [
                    {
                        label: 'Number',
                        value: 'number'
                    },
                    {
                        label: 'Select',
                        value: 'select'
                    }
                ]
            }
        },
        {
            weight: 210,
            type: 'textfield',
            input: true,
            key: 'fields.day.placeholder',
            label: 'Placeholder',
            placeholder: 'Day Placeholder',
            tooltip: 'The placeholder text that will appear when Day field is empty.'
        },
        {
            weight: 215,
            type: 'checkbox',
            label: 'Hidden',
            tooltip: 'Hide the Day part of the component.',
            key: 'fields.day.hide',
            input: true
        },
        {
            weight: 214,
            type: 'checkbox',
            label: 'Day First',
            tooltip: 'Display the Day field before the Month field.',
            key: 'dayFirst',
            input: true
        }
    ];
});
define('skylark-formio/components/day/editForm/Day.edit.month',[],function () {
    'use strict';
    return [
        {
            wieght: 200,
            type: 'select',
            datasrc: 'values',
            key: 'fields.month.type',
            title: 'Type',
            data: {
                values: [
                    {
                        label: 'Number',
                        value: 'number'
                    },
                    {
                        label: 'Select',
                        value: 'select'
                    }
                ]
            }
        },
        {
            weight: 210,
            type: 'textfield',
            input: true,
            key: 'fields.month.placeholder',
            label: 'Placeholder',
            placeholder: 'Month Placeholder',
            tooltip: 'The placeholder text that will appear when Month field is empty.'
        },
        {
            weight: 215,
            type: 'checkbox',
            label: 'Hidden',
            tooltip: 'Hide the Month part of the component.',
            key: 'fields.month.hide',
            input: true
        }
    ];
});
define('skylark-formio/components/day/editForm/Day.edit.year',[],function () {
    'use strict';
    return [
        {
            wieght: 200,
            type: 'select',
            datasrc: 'values',
            key: 'fields.year.type',
            title: 'Type',
            data: {
                values: [
                    {
                        label: 'Number',
                        value: 'number'
                    },
                    {
                        label: 'Select',
                        value: 'select'
                    }
                ]
            }
        },
        {
            weight: 203,
            type: 'number',
            input: true,
            key: 'fields.year.minYear',
            label: 'Minimum Year',
            placeholder: '1900',
            tooltip: 'The minimum year that can be entered.'
        },
        {
            weight: 204,
            type: 'number',
            input: true,
            key: 'fields.year.maxYear',
            label: 'Maximum Year',
            placeholder: '2030',
            tooltip: 'The maximum year that can be entered.'
        },
        {
            weight: 210,
            type: 'textfield',
            input: true,
            key: 'fields.year.placeholder',
            label: 'Placeholder',
            placeholder: 'Year Placeholder',
            tooltip: 'The placeholder text that will appear when Year field is empty.'
        },
        {
            weight: 215,
            type: 'checkbox',
            label: 'Hidden',
            tooltip: 'Hide the Year part of the component.',
            key: 'fields.year.hide',
            input: true
        }
    ];
});
define('skylark-formio/components/day/Day.form',[
    '../_classes/component/Component.form',
    './editForm/Day.edit.data',
    './editForm/Day.edit.display',
    './editForm/Day.edit.validation',
    './editForm/Day.edit.day',
    './editForm/Day.edit.month',
    './editForm/Day.edit.year'
], function (baseEditForm, DayEditData, DayEditDisplay, DayEditValidation, DayEditDay, DayEditMonth, DayEditYear) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: DayEditDisplay
            },
            {
                key: 'data',
                components: DayEditData
            },
            {
                key: 'validation',
                components: DayEditValidation
            },
            {
                key: 'day',
                label: 'Day',
                weight: 3,
                components: DayEditDay
            },
            {
                key: 'month',
                label: 'Month',
                weight: 3,
                components: DayEditMonth
            },
            {
                key: 'year',
                label: 'Year',
                weight: 3,
                components: DayEditYear
            }
        ], ...extend);
    };
});
define('skylark-formio/components/editgrid/editForm/EditGrid.edit.data',[],function () {
    'use strict';
    return [
        {
            type: 'checkbox',
            input: true,
            weight: 105,
            key: 'inlineEdit',
            label: 'Inline Editing',
            tooltip: 'Check this if you would like your changes within "edit" mode to be committed directly to the submission object as that row is being changed'
        },
        {
            key: 'defaultValue',
            ignore: true
        },
        {
            key: 'multiple',
            ignore: true
        }
    ];
});
define('skylark-formio/components/editgrid/editForm/EditGrid.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'placeholder',
            ignore: true
        },
        {
            type: 'checkbox',
            label: 'Open First Row when Empty',
            key: 'openWhenEmpty',
            tooltip: 'Check this if you would like to open up the first row when the EditGrid is empty',
            weight: 1000,
            input: true,
            conditional: {
                json: {
                    '!==': [
                        { var: 'data.modal' },
                        true
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            label: 'Disable Adding / Removing Rows',
            key: 'disableAddingRemovingRows',
            tooltip: 'Check if you want to hide Add Another button and Remove Row button',
            weight: 1001,
            input: true,
            clearOnHide: false,
            calculateValue: 'value = data.disableAddingRemovingRows;'
        },
        {
            weight: 1010,
            type: 'textarea',
            input: true,
            key: 'conditionalAddButton',
            label: 'Conditional Add Button',
            placeholder: 'show = ...',
            tooltip: 'Specify condition when Add Button should be displayed.',
            editor: 'ace',
            as: 'js',
            wysiwyg: { minLines: 3 }
        }
    ];
});
define('skylark-formio/components/editgrid/editForm/EditGrid.edit.templates',['../../../utils/Evaluator'], function (Evaluator) {
    'use strict';
    return [
        {
            type: 'textarea',
            label: 'Header Template',
            key: 'templates.header',
            rows: 5,
            editor: 'ace',
            as: 'handlebars',
            input: true,
            placeholder: '/*** Lodash Template Code ***/',
            description: 'Two available variables. "value" is the array of row data and "components" is the array of components in the grid.',
            tooltip: 'This is the <a href="https://lodash.com/docs/4.17.5#template">Lodash Template</a> used to render the header of the Edit grid.',
            customConditional() {
                return !Evaluator.noeval;
            }
        },
        {
            type: 'textarea',
            label: 'Row Template',
            key: 'templates.row',
            rows: 5,
            editor: 'ace',
            as: 'handlebars',
            input: true,
            placeholder: '/*** Lodash Template Code ***/',
            description: 'Two available variables. "row" is an object of one row\'s data and "components" is the array of components in the grid. To add click events, add the classes "editRow" and "removeRow" to elements.',
            tooltip: 'This is the <a href="https://lodash.com/docs/4.17.5#template">Lodash Template</a> used to render each row of the Edit grid.',
            customConditional() {
                return !Evaluator.noeval;
            }
        },
        {
            type: 'textarea',
            label: 'Footer Template',
            key: 'templates.footer',
            rows: 5,
            editor: 'ace',
            as: 'handlebars',
            input: true,
            placeholder: '/*** Lodash Template Code ***/',
            description: 'Two available variables. "value" is the array of row data and "components" is the array of components in the grid.',
            tooltip: 'This is the <a href="https://lodash.com/docs/4.17.5#template">Lodash Template</a> used to render the footer of the Edit grid.',
            customConditional() {
                return !Evaluator.noeval;
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'rowClass',
            label: 'Row CSS Class',
            placeholder: 'Row CSS Class',
            tooltip: 'CSS class to add to the edit row wrapper.'
        },
        {
            type: 'textfield',
            input: true,
            key: 'addAnother',
            label: 'Add Another Text',
            placeholder: 'Add Another',
            tooltip: 'Set the text of the Add Another button.'
        },
        {
            weight: 70,
            type: 'checkbox',
            label: 'Display as Modal',
            tooltip: 'Display a modal to add or edit entries in the table',
            key: 'modal',
            input: true
        },
        {
            type: 'textfield',
            input: true,
            key: 'saveRow',
            label: 'Save Row Text',
            placeholder: 'Save',
            tooltip: 'Set the text of the Save Row button.'
        },
        {
            type: 'textfield',
            input: true,
            key: 'removeRow',
            label: 'Remove Row Text',
            placeholder: 'Remove',
            tooltip: 'Set the text of the remove Row button.'
        }
    ];
});
define('skylark-formio/components/editgrid/editForm/EditGrid.edit.validation',[],function () {
    'use strict';
    return [
        {
            weight: 110,
            key: 'validate.minLength',
            label: 'Minimum Length',
            placeholder: 'Minimum Length',
            type: 'number',
            tooltip: 'The minimum length requirement this field must meet.',
            input: true
        },
        {
            weight: 120,
            key: 'validate.maxLength',
            label: 'Maximum Length',
            placeholder: 'Maximum Length',
            type: 'number',
            tooltip: 'The maximum length requirement this field must meet.',
            input: true
        }
    ];
});
define('skylark-formio/components/editgrid/EditGrid.form',[
    '../_classes/component/Component.form',
    './editForm/EditGrid.edit.data',
    './editForm/EditGrid.edit.display',
    './editForm/EditGrid.edit.templates',
    './editForm/EditGrid.edit.validation'
], function (baseEditForm, EditGridEditData, EditGridEditDisplay, EditGridEditTemplates, EditGridEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                label: 'Templates',
                key: 'templates',
                weight: 5,
                components: EditGridEditTemplates
            },
            {
                key: 'display',
                components: EditGridEditDisplay
            },
            {
                key: 'data',
                components: EditGridEditData
            },
            {
                key: 'validation',
                components: EditGridEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/email/editForm/Email.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'inputMask',
            ignore: true
        },
        {
            key: 'allowMultipleMasks',
            ignore: true
        },
        {
            key: 'showWordCount',
            ignore: true
        },
        {
            key: 'showCharCount',
            ignore: true
        }
    ];
});
define('skylark-formio/components/email/editForm/Email.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'validate.minWords',
            ignore: true
        },
        {
            key: 'validate.maxWords',
            ignore: true
        },
        {
            type: 'panel',
            label: 'Kickbox',
            title: 'Kickbox',
            weight: 102,
            key: 'kickbox',
            components: [{
                    type: 'checkbox',
                    label: 'Enable',
                    tooltip: 'Enable Kickbox validation for this email field.',
                    description: 'Validate this email using the Kickbox email validation service.',
                    key: 'kickbox.enabled'
                }]
        }
    ];
});
define('skylark-formio/components/email/Email.form',[
    '../textfield/TextField.form',
    './editForm/Email.edit.display',
    './editForm/Email.edit.validation'
], function (baseEditForm, EmailEditFormDisplay, EmailEditFormValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: EmailEditFormDisplay
            },
            {
                key: 'validation',
                components: EmailEditFormValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/fieldset/editForm/Fieldset.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'label',
            hidden: true,
            calculateValue(context) {
                return context.data.legend;
            }
        },
        {
            weight: 1,
            type: 'textfield',
            input: true,
            key: 'legend',
            label: 'Legend',
            placeholder: 'Legend',
            tooltip: 'The legend for this Fieldset.'
        }
    ];
});
define('skylark-formio/components/fieldset/Fieldset.form',[
    '../_classes/nested/NestedComponent.form',
    './editForm/Fieldset.edit.display'
], function (nestedComponentForm, FieldSetEditDisplay) {
    'use strict';
    return function (...extend) {
        return nestedComponentForm([{
                key: 'display',
                components: FieldSetEditDisplay
            }], ...extend);
    };
});
define('skylark-formio/components/file/editForm/File.edit.data',[],function () {
    'use strict';
    return [{
            key: 'defaultValue',
            ignore: true
        }];
});
define('skylark-formio/components/file/editForm/File.edit.display',[],function () {
    'use strict';
    return [{
            key: 'placeholder',
            ignore: true
        }];
});
define('skylark-formio/components/file/editForm/File.edit.file',[
    '../../../Formio',
    'skylark-lodash'
], function (Formio, _) {
    'use strict';
    return [
        {
            type: 'select',
            input: true,
            key: 'storage',
            label: 'Storage',
            placeholder: 'Select your file storage provider',
            weight: 0,
            tooltip: 'Which storage to save the files in.',
            valueProperty: 'value',
            dataSrc: 'custom',
            data: {
                custom() {
                    return _.map(Formio.Providers.getProviders('storage'), (storage, key) => ({
                        label: storage.title,
                        value: key
                    }));
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'url',
            label: 'Url',
            weight: 10,
            placeholder: 'Enter the url to post the files to.',
            tooltip: "See <a href='https://github.com/danialfarid/ng-file-upload#server-side' target='_blank'>https://github.com/danialfarid/ng-file-upload#server-side</a> for how to set up the server.",
            conditional: {
                json: {
                    '===': [
                        { var: 'data.storage' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'options.indexeddb',
            label: 'Database',
            weight: 10,
            placeholder: 'Enter the indexeddb database name',
            conditional: {
                json: {
                    in: [
                        { var: 'data.storage' },
                        ['indexeddb']
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            label: 'Table',
            key: 'options.indexeddbTable',
            weight: 10,
            placeholder: 'Enter the name for indexeddb table',
            conditional: {
                json: {
                    in: [
                        { var: 'data.storage' },
                        ['indexeddb']
                    ]
                }
            }
        },
        {
            type: 'textarea',
            key: 'options',
            label: 'Custom request options',
            tooltip: 'Pass your custom xhr options(optional)',
            rows: 5,
            editor: 'ace',
            input: true,
            weight: 15,
            placeholder: `{
  "withCredentials": true
}`,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.storage' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'fileKey',
            label: 'File\xA0form-data\xA0key',
            weight: 17,
            placeholder: 'Enter\xA0the\xA0key\xA0name\xA0of\xA0a\xA0file\xA0for\xA0form\xA0data.',
            tooltip: 'Key\xA0name\xA0that\xA0you\xA0would\xA0like\xA0to\xA0modify\xA0for\xA0the\xA0file\xA0while\xA0calling\xA0API\xA0request.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.storage' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'dir',
            label: 'Directory',
            placeholder: '(optional) Enter a directory for the files',
            tooltip: 'This will place all the files uploaded in this field in the directory',
            weight: 20
        },
        {
            type: 'textfield',
            input: true,
            key: 'fileNameTemplate',
            label: 'File Name Template',
            placeholder: '(optional) {{{name}}-{{guid}}}}}',
            tooltip: 'Specify template for name of uploaded file(s). Regular template variables are available (`data`, `component`, `user`, `value`, `moment` etc.), also `fileName`, `guid` variables are available. `guid` part must be present, if not found in template, will be added at the end.',
            weight: 25
        },
        {
            type: 'checkbox',
            input: true,
            key: 'image',
            label: 'Display as image(s)',
            tooltip: 'Instead of a list of linked files, images will be rendered in the view.',
            weight: 30
        },
        {
            type: 'checkbox',
            input: true,
            key: 'privateDownload',
            label: 'Private Download',
            tooltip: 'When this is checked, the file download will send a POST request to the download URL with the x-jwt-token header. This will allow your endpoint to create a Private download system.',
            weight: 31,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.storage' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'imageSize',
            label: 'Image Size',
            placeholder: '100',
            tooltip: 'The image size for previewing images.',
            weight: 40,
            conditional: {
                json: {
                    '==': [
                        { var: 'data.image' },
                        true
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            key: 'webcam',
            label: 'Enable web camera',
            tooltip: 'This will allow using an attached camera to directly take a picture instead of uploading an existing file.',
            weight: 32
        },
        {
            type: 'textfield',
            input: true,
            key: 'webcamSize',
            label: 'Webcam Width',
            placeholder: '320',
            tooltip: 'The webcam size for taking pictures.',
            weight: 38,
            conditional: {
                json: {
                    '==': [
                        { var: 'data.webcam' },
                        true
                    ]
                }
            }
        },
        {
            type: 'datagrid',
            input: true,
            label: 'File Types',
            key: 'fileTypes',
            tooltip: 'Specify file types to classify the uploads. This is useful if you allow multiple types of uploads but want to allow the user to specify which type of file each is.',
            weight: 11,
            components: [
                {
                    label: 'Label',
                    key: 'label',
                    input: true,
                    type: 'textfield'
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield'
                }
            ]
        },
        {
            type: 'textfield',
            input: true,
            key: 'filePattern',
            label: 'File Pattern',
            placeholder: '.pdf,.jpg',
            tooltip: "See <a href='https://github.com/danialfarid/ng-file-upload#full-reference' target='_blank'>https://github.com/danialfarid/ng-file-upload#full-reference</a> for how to specify file patterns.",
            weight: 50
        },
        {
            type: 'textfield',
            input: true,
            key: 'fileMinSize',
            label: 'File Minimum Size',
            placeholder: '1MB',
            tooltip: "See <a href='https://github.com/danialfarid/ng-file-upload#full-reference' target='_blank'>https://github.com/danialfarid/ng-file-upload#full-reference</a> for how to specify file sizes.",
            weight: 60
        },
        {
            type: 'textfield',
            input: true,
            key: 'fileMaxSize',
            label: 'File Maximum Size',
            placeholder: '10MB',
            tooltip: "See <a href='https://github.com/danialfarid/ng-file-upload#full-reference' target='_blank'>https://github.com/danialfarid/ng-file-upload#full-reference</a> for how to specify file sizes.",
            weight: 70
        }
    ];
});
define('skylark-formio/components/file/editForm/File.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'unique',
            ignore: true
        },
        {
            key: 'validateOn',
            ignore: true
        }
    ];
});
define('skylark-formio/components/file/File.form',[
    '../_classes/component/Component.form',
    './editForm/File.edit.data',
    './editForm/File.edit.display',
    './editForm/File.edit.file',
    './editForm/File.edit.validation'
], function (baseEditForm, FileEditData, FileEditDisplay, FileEditFile, FileEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: FileEditDisplay
            },
            {
                key: 'data',
                components: FileEditData
            },
            {
                label: 'File',
                key: 'file',
                weight: 5,
                components: FileEditFile
            },
            {
                key: 'validation',
                components: FileEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/form/editForm/Form.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'tabIndex',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        }
    ];
});
define('skylark-formio/components/form/editForm/Form.edit.form',[],function () {
    'use strict';
    return [
        {
            type: 'select',
            input: true,
            dataSrc: 'url',
            data: { url: '/form?limit=4294967295&select=_id,title' },
            searchField: 'title__regex',
            template: '<span>{{ item.title }}</span>',
            valueProperty: '_id',
            authenticate: true,
            label: 'Form',
            key: 'form',
            weight: 10,
            lazyLoad: false,
            tooltip: 'The form to load within this form component.',
            validate: { required: true }
        },
        {
            type: 'textfield',
            input: true,
            label: 'Form Revision',
            placeholder: 'Current',
            tooltip: 'You can lock the nested form to a specific revision by entering the revision number here.',
            key: 'revision',
            weight: 11
        },
        {
            type: 'checkbox',
            input: true,
            weight: 20,
            key: 'reference',
            label: 'Save as reference',
            tooltip: 'Using this option will save this field as a reference and link its value to the value of the origin record.'
        }
    ];
});
define('skylark-formio/components/form/editForm/Form.edit.data',['../../_classes/component/editForm/utils'], function (EditFormUtils) {
    'use strict';
    return [
        EditFormUtils.javaScriptValue('Custom Default Value', 'customDefaultValue', 'customDefaultValue', 120, '<p><h4>Example:</h4><pre>value = data.firstName + " " + data.lastName;</pre></p>', '<p><h4>Example:</h4><pre>{"cat": [{"var": "data.firstName"}, " ", {"var": "data.lastName"}]}</pre>'),
        EditFormUtils.javaScriptValue('Calculated Value', 'calculateValue', 'calculateValue', 130, '<p><h4>Example:</h4><pre>value = data.a + data.b + data.c;</pre></p>', '<p><h4>Example:</h4><pre>{"+": [{"var": "data.a"}, {"var": "data.b"}, {"var": "data.c"}]}</pre><p><a target="_blank" href="http://formio.github.io/formio.js/app/examples/calculated.html">Click here for an example</a></p>')
    ];
});
define('skylark-formio/components/form/Form.form',[
    '../_classes/nested/NestedComponent.form',
    './editForm/Form.edit.display',
    './editForm/Form.edit.form',
    './editForm/Form.edit.data'
], function (nestedComponentForm, FormEditDisplay, FormEditForm, FormEditData) {
    'use strict';
    return function (...extend) {
        return nestedComponentForm([
            {
                key: 'display',
                components: FormEditDisplay
            },
            {
                label: 'Form',
                key: 'form',
                weight: 10,
                components: FormEditForm
            },
            {
                label: 'Data',
                key: 'data',
                weight: 10,
                components: FormEditData
            }
        ], ...extend);
    };
});
define('skylark-formio/components/hidden/editForm/Hidden.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            key: 'hidden',
            ignore: true
        },
        {
            key: 'tableView',
            ignore: true
        },
        {
            key: 'disabled',
            ignore: true
        }
    ];
});
define('skylark-formio/components/hidden/editForm/Hidden.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            key: 'clearOnHide',
            ignore: true
        },
        {
            key: 'allowCalculateOverride',
            ignore: true
        }
    ];
});
define('skylark-formio/components/hidden/Hidden.form',[
    '../_classes/component/Component.form',
    './editForm/Hidden.edit.display',
    './editForm/Hidden.edit.data'
], function (baseEditForm, HiddenEditDisplay, HiddenEditData) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: HiddenEditDisplay
            },
            {
                key: 'data',
                components: HiddenEditData
            },
            {
                key: 'validation',
                ignore: true
            },
            {
                key: 'conditional',
                ignore: true
            }
        ], ...extend);
    };
});
define('skylark-formio/components/html/editForm/HTML.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'disabled',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            type: 'textfield',
            input: true,
            key: 'tag',
            weight: 50,
            label: 'HTML Tag',
            placeholder: 'HTML Element Tag',
            tooltip: 'The tag of this HTML element.'
        },
        {
            type: 'textfield',
            input: true,
            key: 'className',
            weight: 60,
            label: 'CSS Class',
            placeholder: 'CSS Class',
            tooltip: 'The CSS class for this HTML element.'
        },
        {
            type: 'datagrid',
            input: true,
            label: 'Attributes',
            key: 'attrs',
            tooltip: 'The attributes for this HTML element. Only safe attributes are allowed, such as src, href, and title.',
            weight: 70,
            components: [
                {
                    label: 'Attribute',
                    key: 'attr',
                    input: true,
                    type: 'textfield'
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield'
                }
            ]
        },
        {
            type: 'textarea',
            input: true,
            editor: 'ace',
            rows: 10,
            as: 'html',
            label: 'Content',
            tooltip: 'The content of this HTML element.',
            defaultValue: '<div class="well">Content</div>',
            key: 'content',
            weight: 80
        },
        {
            weight: 85,
            type: 'checkbox',
            label: 'Refresh On Change',
            tooltip: 'Rerender the field whenever a value on the form changes.',
            key: 'refreshOnChange',
            input: true
        }
    ];
});
define('skylark-formio/components/html/editForm/HTML.edit.logic',[],function () {
    'use strict';
    return [{
            key: 'logic',
            components: [{
                    key: 'actions',
                    components: [{
                            key: 'actionPanel',
                            components: [
                                {
                                    data: {
                                        json: [
                                            {
                                                label: 'Hidden',
                                                value: 'hidden',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Required',
                                                value: 'validate.required',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Disabled',
                                                value: 'disabled',
                                                type: 'boolean'
                                            },
                                            {
                                                label: 'Label',
                                                value: 'label',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Title',
                                                value: 'title',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Tooltip',
                                                value: 'tooltip',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Description',
                                                value: 'description',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Placeholder',
                                                value: 'placeholder',
                                                type: 'string'
                                            },
                                            {
                                                label: 'CSS Class',
                                                value: 'className',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Container Custom Class',
                                                value: 'customClass',
                                                type: 'string'
                                            },
                                            {
                                                label: 'Content',
                                                value: 'content',
                                                type: 'string',
                                                component: 'content'
                                            }
                                        ]
                                    },
                                    key: 'property'
                                },
                                {
                                    type: 'textarea',
                                    editor: 'ace',
                                    rows: 10,
                                    as: 'html',
                                    label: 'Content',
                                    tooltip: 'The content of this HTML element.',
                                    defaultValue: '<div class="well">Content</div>',
                                    key: 'content',
                                    weight: 30,
                                    input: true,
                                    customConditional(context) {
                                        return context.row.type === 'property' && context.row.hasOwnProperty('property') && context.row.property.type === 'string' && context.row.property.component === 'content';
                                    }
                                }
                            ]
                        }]
                }]
        }];
});
define('skylark-formio/components/html/HTML.form',[
    '../_classes/component/Component.form',
    './editForm/HTML.edit.display',
    './editForm/HTML.edit.logic'
], function (baseEditForm, HTMLEditDisplay, HTMLEditLogic) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: HTMLEditDisplay
            },
            {
                key: 'data',
                ignore: true
            },
            {
                key: 'validation',
                ignore: true
            },
            {
                key: 'logic',
                components: HTMLEditLogic
            }
        ], ...extend);
    };
});
define('skylark-formio/components/number/editForm/Number.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'inputMask',
            ignore: true
        },
        {
            key: 'allowMultipleMasks',
            ignore: true
        },
        {
            key: 'showWordCount',
            ignore: true
        },
        {
            key: 'showCharCount',
            ignore: true
        }
    ];
});
define('skylark-formio/components/number/editForm/Number.edit.data',[],function () {
    'use strict';
    return [
        {
            type: 'checkbox',
            input: true,
            weight: 70,
            key: 'delimiter',
            label: 'Use Thousands Separator',
            tooltip: 'Separate thousands by local delimiter.'
        },
        {
            type: 'number',
            input: true,
            weight: 80,
            key: 'decimalLimit',
            label: 'Decimal Places',
            tooltip: 'The maximum number of decimal places.'
        },
        {
            type: 'checkbox',
            input: true,
            weight: 90,
            key: 'requireDecimal',
            label: 'Require Decimal',
            tooltip: 'Always show decimals, even if trailing zeros.'
        },
        {
            key: 'case',
            ignore: true
        }
    ];
});
define('skylark-formio/components/number/editForm/Number.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'unique',
            ignore: true
        },
        {
            key: 'validate.minLength',
            ignore: true
        },
        {
            key: 'validate.maxLength',
            ignore: true
        },
        {
            key: 'validate.minWords',
            ignore: true
        },
        {
            key: 'validate.maxWords',
            ignore: true
        },
        {
            key: 'validate.pattern',
            ignore: true
        },
        {
            type: 'number',
            label: 'Minimum Value',
            key: 'validate.min',
            input: true,
            placeholder: 'Minimum Value',
            tooltip: 'The minimum value this field must have before the form can be submitted.',
            weight: 150
        },
        {
            type: 'number',
            label: 'Maximum Value',
            key: 'validate.max',
            input: true,
            placeholder: 'Maximum Value',
            tooltip: 'The maximum value this field can have before the form can be submitted.',
            weight: 160
        }
    ];
});
define('skylark-formio/components/number/Number.form',[
    '../textfield/TextField.form',
    './editForm/Number.edit.display',
    './editForm/Number.edit.data',
    './editForm/Number.edit.validation'
], function (textEditForm, NumberEditDisplay, NumberEditData, NumberEditValidation) {
    'use strict';
    return function (...extend) {
        return textEditForm([
            {
                key: 'display',
                components: NumberEditDisplay
            },
            {
                key: 'data',
                components: NumberEditData
            },
            {
                key: 'validation',
                components: NumberEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/panel/editForm/Panel.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'label',
            hidden: true,
            calculateValue(context) {
                return context.data.title;
            }
        },
        {
            key: 'tabindex',
            hidden: true
        },
        {
            weight: 1,
            type: 'textfield',
            input: true,
            placeholder: 'Panel Title',
            label: 'Title',
            key: 'title',
            tooltip: 'The title text that appears in the header of this panel.'
        },
        {
            weight: 20,
            type: 'textarea',
            input: true,
            key: 'tooltip',
            label: 'Tooltip',
            placeholder: 'To add a tooltip to this field, enter text here.',
            tooltip: 'Adds a tooltip to the side of this field.'
        },
        {
            weight: 30,
            type: 'select',
            input: true,
            label: 'Theme',
            key: 'theme',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Default',
                        value: 'default'
                    },
                    {
                        label: 'Primary',
                        value: 'primary'
                    },
                    {
                        label: 'Info',
                        value: 'info'
                    },
                    {
                        label: 'Success',
                        value: 'success'
                    },
                    {
                        label: 'Danger',
                        value: 'danger'
                    },
                    {
                        label: 'Warning',
                        value: 'warning'
                    }
                ]
            }
        },
        {
            weight: 40,
            type: 'fieldset',
            input: false,
            components: [
                {
                    type: 'select',
                    input: true,
                    label: 'Breadcrumb Type',
                    key: 'breadcrumb',
                    dataSrc: 'values',
                    data: {
                        values: [
                            {
                                label: 'Default',
                                value: 'default'
                            },
                            {
                                label: 'Condensed',
                                value: 'condensed'
                            },
                            {
                                label: 'Hidden',
                                value: 'none'
                            }
                        ]
                    }
                },
                {
                    input: true,
                    type: 'checkbox',
                    label: 'Allow click on Breadcrumb',
                    key: 'breadcrumbClickable',
                    defaultValue: true,
                    conditional: {
                        json: {
                            '!==': [
                                { var: 'data.breadcrumb' },
                                'none'
                            ]
                        }
                    }
                },
                {
                    weight: 50,
                    label: 'Panel Navigation Buttons',
                    optionsLabelPosition: 'right',
                    values: [
                        {
                            label: 'Previous',
                            value: 'previous'
                        },
                        {
                            label: 'Cancel',
                            value: 'cancel'
                        },
                        {
                            label: 'Next',
                            value: 'next'
                        }
                    ],
                    inline: true,
                    type: 'selectboxes',
                    key: 'buttonSettings',
                    input: true,
                    inputType: 'checkbox',
                    defaultValue: {
                        previous: true,
                        cancel: true,
                        next: true
                    }
                }
            ],
            customConditional(context) {
                return context.instance.options.editForm.display === 'wizard';
            }
        },
        {
            weight: 650,
            type: 'checkbox',
            label: 'Collapsible',
            tooltip: 'If checked, this will turn this Panel into a collapsible panel.',
            key: 'collapsible',
            input: true
        },
        {
            weight: 651,
            type: 'checkbox',
            label: 'Initially Collapsed',
            tooltip: 'Determines the initial collapsed state of this Panel.',
            key: 'collapsed',
            input: true,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.collapsible' },
                        true
                    ]
                }
            }
        }
    ];
});
define('skylark-formio/components/panel/editForm/Panel.edit.conditional',['../../_classes/component/editForm/utils'], function (EditFormUtils) {
    'use strict';
    const title = 'Advanced Next Page';
    const jsonProp = 'nextPage';
    const jsProp = 'nextPage';
    const jsDocHTML = `
  <p>You must assign the <strong>next</strong> variable with the API key of the next page.</p>
  <p>The global variable <strong>data</strong> is provided, and allows you to access the data of any form component, by using its API key.</p>
  <p>Also <strong>moment</strong> library is available, and allows you to manipulate dates in a convenient way.</p>
  <h5>Example</h5><pre>next = data.addComment ? 'page3' : 'page4';</pre>
`;
    const jsonDocHTML = `
  <p>Submission data is available as JsonLogic variables, with the same api key as your components.</p>
`;
    const settingComponent = EditFormUtils.javaScriptValue(title, jsProp, jsonProp, 110, jsDocHTML, jsonDocHTML);
    return [{
            ...settingComponent,
            customConditional(context) {
                return context.instance.options.editForm.display === 'wizard';
            }
        }];
});
define('skylark-formio/components/panel/Panel.form',[
    '../_classes/nested/NestedComponent.form',
    './editForm/Panel.edit.display',
    './editForm/Panel.edit.conditional'
], function (nestedComponentForm, PanelEditDisplay, PanelEditConditional) {
    'use strict';
    return function (...extend) {
        return nestedComponentForm([
            {
                key: 'display',
                components: PanelEditDisplay
            },
            {
                key: 'conditional',
                components: PanelEditConditional
            }
        ], ...extend);
    };
});
define('skylark-formio/components/password/editForm/Password.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'inputMask',
            ignore: true
        },
        {
            key: 'allowMultipleMasks',
            ignore: true
        }
    ];
});
define('skylark-formio/components/password/editForm/Password.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'inputFormat',
            ignore: true
        },
        {
            key: 'persistent',
            ignore: true
        },
        {
            key: 'protected',
            ignore: true
        },
        {
            key: 'dbIndex',
            ignore: true
        },
        {
            key: 'encrypted',
            ignore: true
        },
        {
            key: 'multiple',
            ignore: true
        },
        {
            key: 'defaultValue',
            ignore: true
        },
        {
            key: 'customDefaultValuePanel',
            ignore: true
        },
        {
            key: 'calculateValuePanel',
            ignore: true
        },
        {
            key: 'passwordInfo',
            weight: 0,
            type: 'htmlelement',
            tag: 'div',
            className: 'alert alert-info',
            content: 'Password fields are automatically encrypted using 1-way salted bcrypt hashes. These hashes are also protected and not returned in the API.'
        }
    ];
});
define('skylark-formio/components/password/editForm/Password.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'unique',
            ignore: true
        },
        {
            key: 'validate.minWords',
            ignore: true
        },
        {
            key: 'validate.maxWords',
            ignore: true
        }
    ];
});
define('skylark-formio/components/password/Password.form',[
    '../textfield/TextField.form',
    './editForm/Password.edit.display',
    './editForm/Password.edit.data',
    './editForm/Password.edit.validation'
], function (textEditForm, PasswordEditDisplay, PasswordEditData, PasswordEditValidation) {
    'use strict';
    return function (...extend) {
        return textEditForm([
            {
                key: 'data',
                components: PasswordEditData
            },
            {
                key: 'display',
                components: PasswordEditDisplay
            },
            {
                key: 'validation',
                components: PasswordEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/phonenumber/editForm/PhoneNumber.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'validate.minLength',
            ignore: true
        },
        {
            key: 'validate.maxLength',
            ignore: true
        },
        {
            key: 'validate.pattern',
            ignore: true
        },
        {
            key: 'validate.minWords',
            ignore: true
        },
        {
            key: 'validate.maxWords',
            ignore: true
        }
    ];
});
define('skylark-formio/components/phonenumber/PhoneNumber.form',[
    '../textfield/TextField.form',
    './editForm/PhoneNumber.edit.validation'
], function (textEditForm, PhoneNumberEditValidation) {
    'use strict';
    return function (...extend) {
        return textEditForm([
            {
                key: 'display',
                components: [
                    {
                        key: 'showWordCount',
                        ignore: true
                    },
                    {
                        key: 'showCharCount',
                        ignore: true
                    }
                ]
            },
            {
                key: 'validation',
                components: PhoneNumberEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/radio/editForm/Radio.edit.data',[
    '../../../utils/builder',
    'skylark-lodash'
], function (BuilderUtils, _) {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            type: 'datagrid',
            input: true,
            label: 'Values',
            key: 'values',
            tooltip: 'The radio button values that can be picked for this field. Values are text submitted with the form data. Labels are text that appears next to the radio buttons on the form.',
            weight: 10,
            reorder: true,
            defaultValue: [{
                    label: '',
                    value: ''
                }],
            components: [
                {
                    label: 'Label',
                    key: 'label',
                    input: true,
                    type: 'textfield'
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield',
                    allowCalculateOverride: true,
                    calculateValue: { _camelCase: [{ var: 'row.label' }] },
                    validate: { required: true }
                },
                {
                    type: 'select',
                    input: true,
                    weight: 180,
                    label: 'Shortcut',
                    key: 'shortcut',
                    tooltip: 'The shortcut key for this option.',
                    dataSrc: 'custom',
                    valueProperty: 'value',
                    customDefaultValue: () => '',
                    template: '{{ item.label }}',
                    data: {
                        custom(context) {
                            return BuilderUtils.getAvailableShortcuts(_.get(context, 'instance.options.editForm', {}), _.get(context, 'instance.options.editComponent', {}));
                        }
                    }
                }
            ]
        },
        {
            type: 'select',
            input: true,
            label: 'Storage Type',
            key: 'dataType',
            clearOnHide: true,
            tooltip: 'The type to store the data. If you select something other than autotype, it will force it to that type.',
            weight: 12,
            template: '<span>{{ item.label }}</span>',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Autotype',
                        value: 'auto'
                    },
                    {
                        label: 'String',
                        value: 'string'
                    },
                    {
                        label: 'Number',
                        value: 'number'
                    },
                    {
                        label: 'Boolean',
                        value: 'boolean'
                    },
                    {
                        label: 'Object',
                        value: 'object'
                    }
                ]
            }
        }
    ];
});
define('skylark-formio/components/radio/editForm/Radio.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'placeholder',
            ignore: true
        },
        {
            type: 'select',
            input: true,
            label: 'Options Label Position',
            key: 'optionsLabelPosition',
            tooltip: 'Position for the label for options for this field.',
            dataSrc: 'values',
            weight: 32,
            defaultValue: 'right',
            data: {
                values: [
                    {
                        label: 'Top',
                        value: 'top'
                    },
                    {
                        label: 'Left',
                        value: 'left'
                    },
                    {
                        label: 'Right',
                        value: 'right'
                    },
                    {
                        label: 'Bottom',
                        value: 'bottom'
                    }
                ]
            }
        },
        {
            type: 'checkbox',
            input: true,
            key: 'inline',
            label: 'Inline Layout',
            tooltip: 'Displays the checkboxes/radios horizontally.',
            weight: 650
        }
    ];
});
define('skylark-formio/components/radio/editForm/Radio.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'validateOn',
            ignore: true
        },
        {
            key: 'unique',
            ignore: true
        }
    ];
});
define('skylark-formio/components/radio/Radio.form',[
    '../_classes/component/Component.form',
    './editForm/Radio.edit.data',
    './editForm/Radio.edit.display',
    './editForm/Radio.edit.validation'
], function (baseEditForm, RadioEditData, RadioEditDisplay, RadioEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: RadioEditDisplay
            },
            {
                key: 'data',
                components: RadioEditData
            },
            {
                key: 'validation',
                components: RadioEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/recaptcha/editForm/ReCaptcha.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'eventType',
            label: 'Type of event',
            tooltip: 'Specify type of event that this reCAPTCHA would react to',
            type: 'radio',
            values: [
                {
                    label: 'Form Load',
                    value: 'formLoad'
                },
                {
                    label: 'Button Click',
                    value: 'buttonClick'
                }
            ],
            weight: 650
        },
        {
            key: 'buttonKey',
            label: 'Button Key',
            tooltip: 'Specify key of button on this form that this reCAPTCHA should react to',
            type: 'textfield',
            customConditional(context) {
                return context.data.eventType === 'buttonClick';
            },
            weight: 660
        },
        {
            key: 'label',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'errorLabel',
            ignore: true
        },
        {
            key: 'customClass',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            key: 'multiple',
            ignore: true
        },
        {
            key: 'clearOnHide',
            ignore: true
        },
        {
            key: 'hidden',
            ignore: true
        },
        {
            key: 'mask',
            ignore: true
        },
        {
            key: 'dataGridLabel',
            ignore: true
        },
        {
            key: 'disabled',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'tableView',
            ignore: true
        }
    ];
});
define('skylark-formio/components/recaptcha/ReCaptcha.form',[
    '../_classes/component/Component.form',
    './editForm/ReCaptcha.edit.display'
], function (baseEditForm, ReCaptchaEditDisplay) {
    'use strict';
    return function () {
        return baseEditForm([
            {
                key: 'display',
                components: ReCaptchaEditDisplay
            },
            {
                key: 'data',
                ignore: true
            },
            {
                key: 'validation',
                ignore: true
            },
            {
                key: 'conditional',
                ignore: true
            },
            {
                key: 'logic',
                ignore: true
            }
        ]);
    };
});
define('skylark-formio/components/resource/editForm/Resource.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'resourceInfo',
            weight: -10,
            type: 'htmlelement',
            tag: 'div',
            className: 'alert alert-danger',
            content: 'The Resource component is deprecated. Use the Select component with data source of "Resource" instead.'
        },
        {
            type: 'select',
            input: true,
            dataSrc: 'url',
            data: { url: '/form?type=resource&limit=4294967295&select=_id,title' },
            template: '<span>{{ item.title }}</span>',
            valueProperty: '_id',
            label: 'Resource',
            key: 'resource',
            weight: 50,
            tooltip: 'The resource to be used with this field.'
        },
        {
            type: 'tags',
            input: true,
            key: 'selectFields',
            label: 'Select Fields',
            tooltip: 'The properties on the resource to return as part of the options. If left blank, all properties will be returned.',
            placeholder: 'Enter the fields to select.',
            weight: 51
        },
        {
            type: 'tags',
            input: true,
            key: 'searchFields',
            label: 'Search Fields',
            tooltip: "A list of search filters based on the fields of the resource. See the <a target='_blank' href='https://github.com/travist/resourcejs#filtering-the-results'>Resource.js documentation</a> for the format of these filters.",
            placeholder: 'The fields to query on the server',
            weight: 52
        },
        {
            type: 'textfield',
            input: true,
            key: 'filter',
            label: 'Filter Query',
            weight: 53,
            description: 'The filter query for results.',
            tooltip: 'Use this to provide additional filtering using query parameters.'
        },
        {
            type: 'textfield',
            input: true,
            key: 'sort',
            label: 'Sort Query',
            weight: 53,
            description: 'The sort query for results',
            tooltip: 'Use this to provide additional sorting using query parameters'
        },
        {
            type: 'textarea',
            input: true,
            key: 'template',
            label: 'Item Template',
            editor: 'ace',
            as: 'html',
            rows: 3,
            weight: 53,
            tooltip: 'The HTML template for the result data items.'
        },
        {
            type: 'checkbox',
            input: true,
            weight: 54,
            key: 'addResource',
            label: 'Add Resource',
            tooltip: 'Allows to create a new resource while entering a submission.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'resource'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            label: 'Add Resource Label',
            key: 'addResourceLabel',
            tooltip: 'Set the text of the Add Resource button.',
            placeholder: 'Add Resource',
            weight: 55,
            input: true,
            conditional: {
                json: {
                    and: [
                        {
                            '===': [
                                { var: 'data.dataSrc' },
                                'resource'
                            ]
                        },
                        { '!!': { var: 'data.addResource' } }
                    ]
                }
            }
        }
    ];
});
define('skylark-formio/components/resource/Resource.form',[
    '../_classes/component/Component.form',
    './editForm/Resource.edit.display'
], function (baseEditForm, ResourceEditDisplay) {
    'use strict';
    return function (...extend) {
        return baseEditForm([{
                key: 'display',
                components: ResourceEditDisplay
            }], ...extend);
    };
});
define('skylark-formio/components/selectboxes/editForm/SelectBoxes.edit.validation',[],function () {
    'use strict';
    return [
        {
            type: 'number',
            input: true,
            key: 'validate.minSelectedCount',
            label: 'Minimum checked number',
            tooltip: 'Minimum checkboxes required before form can be submitted.',
            weight: 250
        },
        {
            type: 'number',
            input: true,
            key: 'validate.maxSelectedCount',
            label: 'Maximum checked number',
            tooltip: 'Maximum checkboxes possible before form can be submitted.',
            weight: 250
        },
        {
            type: 'textfield',
            input: true,
            key: 'minSelectedCountMessage',
            label: 'Minimum checked error message',
            tooltip: 'Error message displayed if minimum number of items not checked.',
            weight: 250
        },
        {
            type: 'textfield',
            input: true,
            key: 'maxSelectedCountMessage',
            label: 'Maximum checked error message',
            tooltip: 'Error message displayed if maximum number of items checked.',
            weight: 250
        }
    ];
});
define('skylark-formio/components/selectboxes/SelectBoxes.form',[
    '../radio/Radio.form',
    './editForm/SelectBoxes.edit.validation'
], function (radioEditForm, SelectBoxesEditValidation) {
    'use strict';
    return function (...extend) {
        return radioEditForm([
            {
                key: 'data',
                components: [{
                        key: 'dataType',
                        ignore: true
                    }]
            },
            {
                key: 'validation',
                components: SelectBoxesEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/select/editForm/Select.edit.data',['../../../utils/utils'], function (a) {
    'use strict';
    return [
        {
            type: 'select',
            input: true,
            weight: 0,
            tooltip: 'The source to use for the select data. Values lets you provide your own values and labels. JSON lets you provide raw JSON data. URL lets you provide a URL to retrieve the JSON data from.',
            key: 'dataSrc',
            defaultValue: 'values',
            label: 'Data Source Type',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Values',
                        value: 'values'
                    },
                    {
                        label: 'URL',
                        value: 'url'
                    },
                    {
                        label: 'Resource',
                        value: 'resource'
                    },
                    {
                        label: 'Custom',
                        value: 'custom'
                    },
                    {
                        label: 'Raw JSON',
                        value: 'json'
                    },
                    {
                        label: 'IndexedDB',
                        value: 'indexeddb'
                    }
                ]
            }
        },
        {
            type: 'textfield',
            weight: 10,
            input: true,
            key: 'indexeddb.database',
            label: 'Database name',
            tooltip: 'The name of the indexeddb database.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'indexeddb'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'indexeddb.table',
            label: 'Table name',
            weight: 16,
            tooltip: 'The name of table in the indexeddb database.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'indexeddb'
                    ]
                }
            }
        },
        {
            type: 'textarea',
            as: 'json',
            editor: 'ace',
            weight: 18,
            input: true,
            key: 'indexeddb.filter',
            label: 'Row Filter',
            tooltip: 'Filter table items that match the object.',
            defaultValue: {},
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'indexeddb'
                    ]
                }
            }
        },
        {
            type: 'textarea',
            as: 'json',
            editor: 'ace',
            weight: 10,
            input: true,
            key: 'data.json',
            label: 'Data Source Raw JSON',
            tooltip: 'A raw JSON array to use as a data source.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'json'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'data.url',
            weight: 10,
            label: 'Data Source URL',
            placeholder: 'Data Source URL',
            tooltip: 'A URL that returns a JSON array to use as the data source.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            label: 'Lazy Load Data',
            key: 'lazyLoad',
            tooltip: "When set, this will not fire off the request to the URL until this control is within focus. This can improve performance if you have many Select dropdowns on your form where the API's will only fire when the control is activated.",
            weight: 11,
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'resource',
                            'url'
                        ]
                    ]
                }
            }
        },
        {
            type: 'datagrid',
            input: true,
            label: 'Request Headers',
            key: 'data.headers',
            tooltip: 'Set any headers that should be sent along with the request to the url. This is useful for authentication.',
            weight: 11,
            components: [
                {
                    label: 'Key',
                    key: 'key',
                    input: true,
                    type: 'textfield'
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield'
                }
            ],
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'datagrid',
            input: true,
            label: 'Data Source Values',
            key: 'data.values',
            tooltip: 'Values to use as the data source. Labels are shown in the select field. Values are the corresponding values saved with the submission.',
            weight: 10,
            reorder: true,
            defaultValue: [{
                    label: '',
                    value: ''
                }],
            components: [
                {
                    label: 'Label',
                    key: 'label',
                    input: true,
                    type: 'textfield'
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield',
                    allowCalculateOverride: true,
                    calculateValue: { _camelCase: [{ var: 'row.label' }] }
                }
            ],
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'values'
                    ]
                }
            }
        },
        {
            type: 'select',
            input: true,
            dataSrc: 'url',
            data: { url: '/form?type=resource&limit=4294967295&select=_id,title' },
            authenticate: true,
            template: '<span>{{ item.title }}</span>',
            valueProperty: '_id',
            clearOnHide: false,
            label: 'Resource',
            key: 'data.resource',
            lazyLoad: false,
            weight: 10,
            tooltip: 'The resource to be used with this field.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'resource'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            label: 'Data Path',
            key: 'selectValues',
            weight: 12,
            description: 'The object path to the iterable items.',
            tooltip: 'The property within the source data, where iterable items reside. For example: results.items or results[0].items',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'select',
            input: true,
            label: 'Value Property',
            key: 'valueProperty',
            skipMerge: true,
            clearOnHide: false,
            tooltip: 'The field to use as the value.',
            weight: 11,
            refreshOn: 'data.resource',
            template: '<span>{{ item.label }}</span>',
            valueProperty: 'key',
            dataSrc: 'url',
            lazyLoad: false,
            onSetItems(component, form) {
                const newItems = [];
                a.eachComponent(form.components, (component, path) => {
                    if (component.input) {
                        newItems.push({
                            label: component.label || component.key,
                            key: `data.${ path }`
                        });
                    }
                });
                return newItems;
            },
            onChange(context) {
                if (context && context.flags && context.flags.modified) {
                    const valueProp = context.instance.data.valueProperty;
                    const templateProp = valueProp ? valueProp : 'data';
                    const template = `<span>{{ item.${ templateProp } }}</span>`;
                    const searchField = valueProp ? `${ valueProp }__regex` : '';
                    context.instance.root.getComponent('template').setValue(template);
                    context.instance.root.getComponent('searchField').setValue(searchField);
                }
            },
            data: { url: '/form/{{ data.data.resource }}' },
            conditional: {
                json: {
                    and: [
                        {
                            '===': [
                                { var: 'data.dataSrc' },
                                'resource'
                            ]
                        },
                        { var: 'data.data.resource' }
                    ]
                }
            }
        },
        {
            type: 'select',
            input: true,
            label: 'Storage Type',
            key: 'dataType',
            clearOnHide: true,
            tooltip: 'The type to store the data. If you select something other than autotype, it will force it to that type.',
            weight: 12,
            template: '<span>{{ item.label }}</span>',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Autotype',
                        value: 'auto'
                    },
                    {
                        label: 'String',
                        value: 'string'
                    },
                    {
                        label: 'Number',
                        value: 'number'
                    },
                    {
                        label: 'Boolean',
                        value: 'boolean'
                    },
                    {
                        label: 'Object',
                        value: 'object'
                    }
                ]
            }
        },
        {
            type: 'textfield',
            input: true,
            label: 'Value Property',
            key: 'valueProperty',
            skipMerge: true,
            clearOnHide: false,
            weight: 13,
            description: "The selected item's property to save.",
            tooltip: 'The property of each item in the data source to use as the select value. If not specified, the item itself will be used.',
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'json',
                            'url',
                            'custom'
                        ]
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            label: 'Select Fields',
            key: 'selectFields',
            tooltip: 'The properties on the resource to return as part of the options. Separate property names by commas. If left blank, all properties will be returned.',
            placeholder: 'Comma separated list of fields to select.',
            weight: 14,
            conditional: {
                json: {
                    and: [
                        {
                            '===': [
                                { var: 'data.dataSrc' },
                                'resource'
                            ]
                        },
                        {
                            '===': [
                                { var: 'data.valueProperty' },
                                ''
                            ]
                        }
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            key: 'disableLimit',
            label: 'Disable limiting response',
            tooltip: 'When enabled the request will not include the limit and skip options in the query string',
            weight: 15,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'searchField',
            label: 'Search Query Name',
            weight: 16,
            description: 'Name of URL query parameter',
            tooltip: 'The name of the search querystring parameter used when sending a request to filter results with. The server at the URL must handle this query parameter.',
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'url',
                            'resource'
                        ]
                    ]
                }
            }
        },
        {
            type: 'number',
            input: true,
            key: 'minSearch',
            weight: 17,
            label: 'Minimum Search Length',
            tooltip: 'The minimum amount of characters they must type before a search is made.',
            defaultValue: 0,
            conditional: {
                json: {
                    and: [
                        {
                            '===': [
                                { var: 'data.dataSrc' },
                                'url'
                            ]
                        },
                        {
                            '!=': [
                                { var: 'data.searchField' },
                                ''
                            ]
                        }
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'filter',
            label: 'Filter Query',
            weight: 18,
            description: 'The filter query for results.',
            tooltip: 'Use this to provide additional filtering using query parameters.',
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'url',
                            'resource'
                        ]
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'sort',
            label: 'Sort Query',
            weight: 18,
            description: 'The sort query for results',
            tooltip: 'Use this to provide additional sorting using query parameters',
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'url',
                            'resource'
                        ]
                    ]
                }
            }
        },
        {
            type: 'number',
            input: true,
            key: 'limit',
            label: 'Limit',
            weight: 18,
            defaultValue: 100,
            description: 'Maximum number of items to view per page of results.',
            tooltip: 'Use this to limit the number of items to request or view.',
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'url',
                            'resource'
                        ]
                    ]
                }
            }
        },
        {
            type: 'textarea',
            input: true,
            key: 'data.custom',
            label: 'Custom Values',
            editor: 'ace',
            rows: 10,
            weight: 14,
            placeholder: "values = data['mykey'];",
            tooltip: 'Write custom code to return the value options. The form data object is available.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'custom'
                    ]
                }
            }
        },
        {
            type: 'textarea',
            input: true,
            key: 'template',
            label: 'Item Template',
            editor: 'ace',
            as: 'html',
            rows: 3,
            weight: 18,
            tooltip: 'The HTML template for the result data items.',
            allowCalculateOverride: true,
            calculateValue: context => {
                if (!context.data.template) {
                    if (context.instance && context.instance._currentForm.options.editComponent) {
                        return context.instance._currentForm.options.editComponent.template;
                    }
                }
                return context.data.template;
            }
        },
        {
            type: 'select',
            input: true,
            key: 'refreshOn',
            label: 'Refresh Options On',
            weight: 19,
            tooltip: 'Refresh data when another field changes.',
            dataSrc: 'custom',
            valueProperty: 'value',
            data: {
                custom(context) {
                    var values = [];
                    values.push({
                        label: 'Any Change',
                        value: 'data'
                    });
                    context.utils.eachComponent(context.instance.options.editForm.components, function (component, path) {
                        if (component.key !== context.data.key) {
                            values.push({
                                label: component.label || component.key,
                                value: path
                            });
                        }
                    });
                    return values;
                }
            },
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'url',
                            'resource',
                            'values'
                        ]
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            weight: 20,
            key: 'clearOnRefresh',
            label: 'Clear Value On Refresh Options',
            defaultValue: false,
            tooltip: 'When the Refresh On field is changed, clear this components value.',
            conditional: {
                json: {
                    in: [
                        { var: 'data.dataSrc' },
                        [
                            'url',
                            'resource',
                            'values'
                        ]
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            weight: 21,
            key: 'searchEnabled',
            label: 'Enable Static Search',
            defaultValue: true,
            tooltip: 'When checked, the select dropdown will allow for searching within the static list of items provided.'
        },
        {
            label: 'Search Threshold',
            mask: false,
            tableView: true,
            alwaysEnabled: false,
            type: 'number',
            input: true,
            key: 'selectThreshold',
            validate: {
                min: 0,
                customMessage: '',
                json: '',
                max: 1
            },
            delimiter: false,
            requireDecimal: false,
            encrypted: false,
            defaultValue: 0.3,
            weight: 22,
            tooltip: 'At what point does the match algorithm give up. A threshold of 0.0 requires a perfect match, a threshold of 1.0 would match anything.'
        },
        {
            type: 'checkbox',
            input: true,
            weight: 23,
            key: 'addResource',
            label: 'Add Resource',
            tooltip: 'Allows to create a new resource while entering a submission.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'resource'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            label: 'Add Resource Label',
            key: 'addResourceLabel',
            tooltip: 'Set the text of the Add Resource button.',
            placeholder: 'Add Resource',
            weight: 24,
            input: true,
            conditional: {
                json: {
                    and: [
                        {
                            '===': [
                                { var: 'data.dataSrc' },
                                'resource'
                            ]
                        },
                        { '!!': { var: 'data.addResource' } }
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            weight: 25,
            key: 'reference',
            label: 'Save as reference',
            tooltip: 'Using this option will save this field as a reference and link its value to the value of the origin record.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'resource'
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            weight: 26,
            key: 'authenticate',
            label: 'Formio Authenticate',
            tooltip: 'Check this if you would like to use Formio Authentication with the request.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.dataSrc' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            weight: 27,
            key: 'readOnlyValue',
            label: 'Read Only Value',
            tooltip: 'Check this if you would like to show just the value when in Read Only mode.'
        },
        {
            type: 'textarea',
            as: 'json',
            editor: 'ace',
            weight: 28,
            input: true,
            key: 'customOptions',
            label: 'Choices.js options',
            tooltip: 'A raw JSON object to use as options for the Select component (Choices JS).',
            defaultValue: {}
        }
    ];
});
define('skylark-formio/components/select/editForm/Select.edit.display',[],function () {
    'use strict';
    return [{
            type: 'select',
            input: true,
            weight: 20,
            tooltip: "Select the type of widget you'd like to use.",
            key: 'widget',
            defaultValue: 'choicesjs',
            label: 'Widget Type',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'ChoicesJS',
                        value: 'choicesjs'
                    },
                    {
                        label: 'HTML 5',
                        value: 'html5'
                    }
                ]
            }
        }];
});
define('skylark-formio/components/select/editForm/Select.edit.validation',[],function () {
    'use strict';
    return [{
            weight: 50,
            type: 'checkbox',
            label: 'Perform server validation',
            tooltip: 'Check this if you would like for the server to perform a validation check to ensure the selected value is an available option. This requires a Search query to ensure a record is found.',
            key: 'validate.select',
            input: true,
            conditional: { json: { var: 'data.searchField' } }
        }];
});
define('skylark-formio/components/select/Select.form',[
    '../_classes/component/Component.form',
    './editForm/Select.edit.data',
    './editForm/Select.edit.display',
    './editForm/Select.edit.validation'
], function (baseEditForm, SelectEditData, SelectEditDisplay, SelectEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: SelectEditDisplay
            },
            {
                key: 'data',
                components: SelectEditData
            },
            {
                key: 'validation',
                components: SelectEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/signature/editForm/Signature.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            key: 'defaultValue',
            ignore: true
        },
        {
            key: 'dbIndex',
            ignore: true
        }
    ];
});
define('skylark-formio/components/signature/editForm/Signature.edit.display',[],function () {
    'use strict';
    return [
        {
            type: 'textfield',
            input: true,
            key: 'footer',
            label: 'Footer Label',
            tooltip: 'The footer text that appears below the signature area.',
            placeholder: 'Footer Label',
            weight: 10
        },
        {
            type: 'textfield',
            input: true,
            key: 'width',
            label: 'Width',
            tooltip: 'The width of the signature area.',
            placeholder: 'Width',
            weight: 50
        },
        {
            type: 'textfield',
            input: true,
            key: 'height',
            label: 'Height',
            tooltip: 'The height of the signature area.',
            placeholder: 'Height',
            weight: 51
        },
        {
            type: 'textfield',
            input: true,
            key: 'backgroundColor',
            label: 'Background Color',
            tooltip: 'The background color of the signature area.',
            placeholder: 'Background Color',
            weight: 52
        },
        {
            type: 'textfield',
            input: true,
            key: 'penColor',
            label: 'Pen Color',
            tooltip: 'The ink color for the signature area.',
            placeholder: 'Pen Color',
            weight: 53
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        }
    ];
});
define('skylark-formio/components/signature/editForm/Signature.edit.validation',[],function () {
    'use strict';
    return [
        {
            key: 'unique',
            ignore: true
        },
        {
            key: 'validateOn',
            ignore: true
        }
    ];
});
define('skylark-formio/components/signature/Signature.form',[
    '../_classes/component/Component.form',
    './editForm/Signature.edit.data',
    './editForm/Signature.edit.display',
    './editForm/Signature.edit.validation'
], function (baseEditForm, SignatureEditData, SignatureEditDisplay, SignatureEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: SignatureEditDisplay
            },
            {
                key: 'data',
                components: SignatureEditData
            },
            {
                key: 'validation',
                components: SignatureEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/survey/editForm/Survey.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            type: 'datagrid',
            input: true,
            label: 'Questions',
            key: 'questions',
            tooltip: 'The questions you would like to ask in this survey question.',
            weight: 0,
            reorder: true,
            defaultValue: [{
                    label: '',
                    value: ''
                }],
            components: [
                {
                    label: 'Label',
                    key: 'label',
                    input: true,
                    type: 'textfield'
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield',
                    allowCalculateOverride: true,
                    calculateValue: { _camelCase: [{ var: 'row.label' }] }
                }
            ]
        },
        {
            type: 'datagrid',
            input: true,
            label: 'Values',
            key: 'values',
            tooltip: "The values that can be selected per question. Example: 'Satisfied', 'Very Satisfied', etc.",
            weight: 1,
            reorder: true,
            defaultValue: [{
                    label: '',
                    value: ''
                }],
            components: [
                {
                    label: 'Label',
                    key: 'label',
                    input: true,
                    type: 'textfield'
                },
                {
                    label: 'Value',
                    key: 'value',
                    input: true,
                    type: 'textfield',
                    allowCalculateOverride: true,
                    calculateValue: { _camelCase: [{ var: 'row.label' }] }
                }
            ]
        }
    ];
});
define('skylark-formio/components/survey/editForm/Survey.edit.display',[],function () {
    'use strict';
    return [{
            key: 'placeholder',
            ignore: true
        }];
});
define('skylark-formio/components/survey/editForm/Survey.edit.validation',[],function () {
    'use strict';
    return [{
            key: 'validateOn',
            ignore: true
        }];
});
define('skylark-formio/components/survey/Survey.form',[
    '../_classes/component/Component.form',
    './editForm/Survey.edit.data',
    './editForm/Survey.edit.display',
    './editForm/Survey.edit.validation'
], function (baseEditForm, SurveyEditData, SurveyEditDisplay, SurveyEditValidation) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'display',
                components: SurveyEditDisplay
            },
            {
                key: 'data',
                components: SurveyEditData
            },
            {
                key: 'validation',
                components: SurveyEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/table/editForm/Table.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            key: 'disabled',
            ignore: true
        },
        {
            type: 'number',
            label: 'Number of Rows',
            key: 'numRows',
            input: true,
            weight: 1,
            placeholder: 'Number of Rows',
            tooltip: 'Enter the number or rows that should be displayed by this table.'
        },
        {
            type: 'number',
            label: 'Number of Columns',
            key: 'numCols',
            input: true,
            weight: 2,
            placeholder: 'Number of Columns',
            tooltip: 'Enter the number or columns that should be displayed by this table.'
        },
        {
            type: 'checkbox',
            label: 'Clone Row Components',
            key: 'cloneRows',
            input: true,
            weight: 3,
            tooltip: 'Check this if you would like to "clone" the first row of components to all additional empty rows of the table.'
        },
        {
            type: 'select',
            label: 'Cell Alignment',
            key: 'cellAlignment',
            input: true,
            tooltip: 'Horizontal alignment for cells of the table.',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'Left',
                        value: 'left'
                    },
                    {
                        label: 'Center',
                        value: 'center'
                    },
                    {
                        label: 'Right',
                        value: 'right'
                    }
                ]
            },
            defaultValue: 'left',
            weight: 3
        },
        {
            type: 'checkbox',
            label: 'Striped',
            key: 'striped',
            tooltip: 'This will stripe the table if checked.',
            input: true,
            weight: 701
        },
        {
            type: 'checkbox',
            label: 'Bordered',
            key: 'bordered',
            input: true,
            tooltip: 'This will border the table if checked.',
            weight: 702
        },
        {
            type: 'checkbox',
            label: 'Hover',
            key: 'hover',
            input: true,
            tooltip: 'Highlight a row on hover.',
            weight: 703
        },
        {
            type: 'checkbox',
            label: 'Condensed',
            key: 'condensed',
            input: true,
            tooltip: 'Condense the size of the table.',
            weight: 704
        }
    ];
});
define('skylark-formio/components/table/Table.form',[
    '../_classes/nested/NestedComponent.form',
    './editForm/Table.edit.display'
], function (nestedComponentForm, TableEditDisplay) {
    'use strict';
    return function (...extend) {
        return nestedComponentForm([{
                key: 'display',
                components: TableEditDisplay
            }], ...extend);
    };
});
define('skylark-formio/components/tabs/editForm/Tabs.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        },
        {
            key: 'disabled',
            ignore: true
        },
        {
            key: 'components',
            type: 'datagrid',
            input: true,
            label: 'Tabs',
            weight: 50,
            reorder: true,
            components: [
                {
                    type: 'textfield',
                    input: true,
                    key: 'label',
                    label: 'Label'
                },
                {
                    type: 'textfield',
                    input: true,
                    key: 'key',
                    label: 'Key',
                    allowCalculateOverride: true,
                    calculateValue: { _camelCase: [{ var: 'row.label' }] }
                }
            ]
        }
    ];
});
define('skylark-formio/components/tabs/Tabs.form',[
    '../_classes/nested/NestedComponent.form',
    './editForm/Tabs.edit.display'
], function (nestedComponentForm, TabsEditDisplay) {
    'use strict';
    return function (...extend) {
        return nestedComponentForm([{
                key: 'display',
                components: TabsEditDisplay
            }], ...extend);
    };
});
define('skylark-formio/components/tags/editForm/Tags.edit.data',[],function () {
    'use strict';
    return [
        {
            key: 'multiple',
            ignore: true
        },
        {
            weight: 20,
            type: 'textfield',
            input: true,
            key: 'delimeter',
            label: 'Delimiter',
            tooltip: 'What is used to separate the tags.</a>'
        },
        {
            weight: 22,
            type: 'number',
            input: true,
            key: 'maxTags',
            label: 'Max Tags',
            defaultValue: 0,
            tooltip: 'The maximum amount of tags that can be added. 0 for infinity.'
        },
        {
            weight: 24,
            type: 'select',
            input: true,
            key: 'storeas',
            label: 'Store As',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'String (CSV)',
                        value: 'string'
                    },
                    {
                        label: 'Array of Tags',
                        value: 'array'
                    }
                ]
            }
        }
    ];
});
define('skylark-formio/components/tags/Tags.form',[
    '../_classes/component/Component.form',
    './editForm/Tags.edit.data'
], function (baseEditForm, TagsEditData) {
    'use strict';
    return function (...extend) {
        return baseEditForm([{
                key: 'data',
                components: TagsEditData
            }], ...extend);
    };
});
define('skylark-formio/components/textarea/editForm/TextArea.edit.display',[
    'skylark-lodash',
    '../../../Formio'
], function (_, Formio) {
    'use strict';
    return [
        {
            key: 'inputMask',
            ignore: true
        },
        {
            key: 'allowMultipleMasks',
            ignore: true
        },
        {
            key: 'mask',
            ignore: true
        },
        {
            type: 'number',
            input: true,
            key: 'rows',
            label: 'Rows',
            weight: 210,
            tooltip: 'This allows control over how many rows are visible in the text area.',
            placeholder: 'Enter the amount of rows'
        },
        {
            weight: 1350,
            type: 'checkbox',
            input: true,
            key: 'spellcheck',
            defaultValue: true,
            label: 'Allow Spellcheck'
        },
        {
            type: 'select',
            input: true,
            key: 'editor',
            label: 'Editor',
            tooltip: 'Select the type of WYSIWYG editor to use for this text area.',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'None',
                        value: ''
                    },
                    {
                        label: 'ACE',
                        value: 'ace'
                    },
                    {
                        label: 'CKEditor',
                        value: 'ckeditor'
                    },
                    {
                        label: 'Quill',
                        value: 'quill'
                    },
                    {
                        label: 'TinyMCE',
                        value: 'tiny'
                    }
                ]
            },
            weight: 415
        },
        {
            type: 'textfield',
            input: true,
            key: 'tinyApiKey',
            label: 'TinyMCE Api Key',
            weight: 415.2,
            placeholder: 'If you have a TinyMCE APi Key, enter it here.',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.editor' },
                        'tiny'
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            key: 'autoExpand',
            label: 'Auto Expand',
            tooltip: "This will make the TextArea auto expand it's height as the user is typing into the area.",
            weight: 415,
            conditional: {
                json: {
                    '==': [
                        { var: 'data.editor' },
                        ''
                    ]
                }
            }
        },
        {
            type: 'checkbox',
            input: true,
            key: 'isUploadEnabled',
            label: 'Enable Image Upload',
            weight: 415.1,
            conditional: {
                json: {
                    or: [{
                            '===': [
                                { var: 'data.editor' },
                                'quill'
                            ]
                        }]
                }
            }
        },
        {
            type: 'select',
            input: true,
            key: 'uploadStorage',
            label: 'Image Upload Storage',
            placeholder: 'Select your file storage provider',
            weight: 415.2,
            tooltip: 'Which storage to save the files in.',
            valueProperty: 'value',
            dataSrc: 'custom',
            data: {
                custom() {
                    return _.map(Formio.Providers.getProviders('storage'), (storage, key) => ({
                        label: storage.title,
                        value: key
                    }));
                }
            },
            conditional: {
                json: {
                    '===': [
                        { var: 'data.isUploadEnabled' },
                        true
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'uploadUrl',
            label: 'Image Upload Url',
            weight: 415.3,
            placeholder: 'Enter the url to post the files to.',
            tooltip: "See <a href='https://github.com/danialfarid/ng-file-upload#server-side' target='_blank'>https://github.com/danialfarid/ng-file-upload#server-side</a> for how to set up the server.",
            conditional: {
                json: {
                    '===': [
                        { var: 'data.uploadStorage' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textarea',
            key: 'uploadOptions',
            label: 'Image Upload Custom request options',
            tooltip: 'Pass your custom xhr options(optional)',
            rows: 5,
            editor: 'ace',
            input: true,
            weight: 415.4,
            placeholder: `{
      "withCredentials": true
    }`,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.uploadStorage' },
                        'url'
                    ]
                }
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'uploadDir',
            label: 'Image Upload Directory',
            placeholder: '(optional) Enter a directory for the files',
            tooltip: 'This will place all the files uploaded in this field in the directory',
            weight: 415.5,
            conditional: {
                json: {
                    '===': [
                        { var: 'data.isUploadEnabled' },
                        true
                    ]
                }
            }
        },
        {
            type: 'textfield',
            key: 'fileKey',
            input: true,
            label: 'File\xA0form-data\xA0Key',
            tooltip: 'Key\xA0name\xA0that\xA0you\xA0would\xA0like\xA0to\xA0modify\xA0for\xA0the\xA0file\xA0while\xA0calling\xA0API\xA0request.',
            rows: 5,
            weight: 415.6,
            placeholder: 'Enter\xA0the\xA0key\xA0name\xA0of\xA0a\xA0file\xA0for\xA0form\xA0data.',
            conditional: {
                json: {
                    and: [
                        {
                            '===': [
                                { var: 'data.editor' },
                                'quill'
                            ]
                        },
                        {
                            '===': [
                                { var: 'data.isUploadEnabled' },
                                true
                            ]
                        },
                        {
                            '===': [
                                { var: 'data.uploadStorage' },
                                'url'
                            ]
                        }
                    ]
                }
            }
        },
        {
            type: 'select',
            input: true,
            key: 'as',
            label: 'Save As',
            dataSrc: 'values',
            tooltip: 'This setting determines how the value should be entered and stored in the database.',
            clearOnHide: true,
            data: {
                values: [
                    {
                        label: 'String',
                        value: 'string'
                    },
                    {
                        label: 'JSON',
                        value: 'json'
                    },
                    {
                        label: 'HTML',
                        value: 'html'
                    }
                ]
            },
            conditional: {
                json: {
                    or: [
                        {
                            '===': [
                                { var: 'data.editor' },
                                'quill'
                            ]
                        },
                        {
                            '===': [
                                { var: 'data.editor' },
                                'ace'
                            ]
                        }
                    ]
                }
            },
            weight: 416
        },
        {
            type: 'textarea',
            input: true,
            editor: 'ace',
            rows: 10,
            as: 'json',
            label: 'Editor Settings',
            tooltip: 'Enter the WYSIWYG editor JSON configuration.',
            key: 'wysiwyg',
            customDefaultValue(value, component, row, data, instance) {
                return instance ? instance.wysiwygDefault : '';
            },
            conditional: {
                json: {
                    or: [
                        {
                            '===': [
                                { var: 'data.editor' },
                                'ace'
                            ]
                        },
                        {
                            '===': [
                                { var: 'data.editor' },
                                'ckeditor'
                            ]
                        },
                        {
                            '===': [
                                { var: 'data.editor' },
                                'quill'
                            ]
                        },
                        {
                            '===': [
                                { var: 'data.editor' },
                                'tiny'
                            ]
                        }
                    ]
                }
            },
            weight: 417
        }
    ];
});
define('skylark-formio/components/textarea/editForm/TextArea.edit.validation',[],function () {
    'use strict';
    return [
        {
            weight: 125,
            key: 'validate.minWords',
            label: 'Minimum Word Length',
            placeholder: 'Minimum Word Length',
            type: 'number',
            tooltip: 'The minimum amount of words that can be added to this field.',
            input: true
        },
        {
            weight: 126,
            key: 'validate.maxWords',
            label: 'Maximum Word Length',
            placeholder: 'Maximum Word Length',
            type: 'number',
            tooltip: 'The maximum amount of words that can be added to this field.',
            input: true
        }
    ];
});
define('skylark-formio/components/textarea/TextArea.form',[
    '../textfield/TextField.form',
    './editForm/TextArea.edit.display',
    './editForm/TextArea.edit.validation'
], function (textEditForm, TextAreaEditDisplay, TextAreaEditValidation) {
    'use strict';
    return function (...extend) {
        return textEditForm([
            {
                key: 'display',
                components: TextAreaEditDisplay
            },
            {
                key: 'validation',
                components: TextAreaEditValidation
            }
        ], ...extend);
    };
});
define('skylark-formio/components/time/editForm/Time.edit.data',[],function () {
    'use strict';
    return [{
            type: 'textfield',
            input: true,
            key: 'dataFormat',
            label: 'Data Format',
            placeholder: 'HH:mm:ss',
            tooltip: 'The moment.js format for saving the value of this field.',
            weight: 25
        }];
});
define('skylark-formio/components/time/editForm/Time.edit.display',[],function () {
    'use strict';
    return [
        {
            type: 'select',
            input: true,
            weight: 40,
            tooltip: "Select the type of widget you'd like to use.",
            key: 'inputType',
            defaultValue: 'time',
            label: 'Input Type',
            dataSrc: 'values',
            data: {
                values: [
                    {
                        label: 'HTML5 Time Input',
                        value: 'time'
                    },
                    {
                        label: 'Text Input with Mask',
                        value: 'text'
                    }
                ]
            }
        },
        {
            type: 'textfield',
            input: true,
            key: 'format',
            label: 'Format',
            placeholder: 'Format',
            tooltip: 'The moment.js format for showing the value of this field.',
            weight: 50,
            defaultValue: 'HH:mm',
            conditional: {
                json: {
                    '===': [
                        { var: 'data.inputType' },
                        'text'
                    ]
                }
            }
        },
        {
            key: 'placeholder',
            ignore: true
        }
    ];
});
define('skylark-formio/components/time/Time.form',[
    '../_classes/component/Component.form',
    './editForm/Time.edit.data',
    './editForm/Time.edit.display'
], function (baseEditForm, TimeEditData, TimeEditDisplay) {
    'use strict';
    return function (...extend) {
        return baseEditForm([
            {
                key: 'data',
                components: TimeEditData
            },
            {
                key: 'display',
                components: TimeEditDisplay
            }
        ], ...extend);
    };
});
define('skylark-formio/components/tree/Tree.form',['../_classes/component/Component.form'], function (componentEditForm) {
    'use strict';
    return function (...extend) {
        return componentEditForm(...extend);
    };
});
define('skylark-formio/components/unknown/editForm/Unknown.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'customComponentDescription',
            label: 'Custom component description',
            input: false,
            tag: 'p',
            content: 'Custom components can be used to render special fields or widgets inside your app. ' + 'For information on how to display in an app, see ' + '<a href="http://help.form.io/userguide/#custom" target="_blank">' + 'custom component documentation' + '</a>.',
            type: 'htmlelement',
            weight: 5
        },
        {
            type: 'textarea',
            as: 'json',
            editor: 'ace',
            weight: 10,
            input: true,
            key: 'componentJson',
            label: 'Custom Element JSON',
            tooltip: 'Enter the JSON for this custom element.'
        }
    ];
});
define('skylark-formio/components/unknown/Unknown.form',['./editForm/Unknown.edit.display'], function (UnknownEditDisplay) {
    'use strict';
    return function () {
        return {
            components: [{
                    type: 'tabs',
                    key: 'tabs',
                    components: [{
                            label: 'Custom',
                            key: 'display',
                            weight: 0,
                            components: UnknownEditDisplay
                        }]
                }]
        };
    };
});
define('skylark-formio/components/url/editForm/Url.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'inputMask',
            ignore: true
        },
        {
            key: 'allowMultipleMasks',
            ignore: true
        },
        {
            key: 'showWordCount',
            ignore: true
        },
        {
            key: 'showCharCount',
            ignore: true
        }
    ];
});
define('skylark-formio/components/url/editForm/Url.edit.data',[],function () {
    'use strict';
    return [{
            key: 'case',
            ignore: true
        }];
});
define('skylark-formio/components/url/Url.form',[
    '../textfield/TextField.form',
    './editForm/Url.edit.display',
    './editForm/Url.edit.data'
], function (textEditForm, UrlEditDisplay, UrlEditData) {
    'use strict';
    return function (...extend) {
        return textEditForm([
            {
                key: 'display',
                components: UrlEditDisplay
            },
            {
                key: 'data',
                components: UrlEditData
            }
        ], ...extend);
    };
});
define('skylark-formio/components/well/editForm/Well.edit.display',[],function () {
    'use strict';
    return [
        {
            key: 'labelPosition',
            ignore: true
        },
        {
            key: 'placeholder',
            ignore: true
        },
        {
            key: 'description',
            ignore: true
        },
        {
            key: 'hideLabel',
            ignore: true
        },
        {
            key: 'autofocus',
            ignore: true
        },
        {
            key: 'tooltip',
            ignore: true
        },
        {
            key: 'tabindex',
            ignore: true
        }
    ];
});
define('skylark-formio/components/well/Well.form',[
    '../_classes/nested/NestedComponent.form',
    './editForm/Well.edit.display'
], function (nestedComponentForm, WellEditDisplay) {
    'use strict';
    return function (...extend) {
        return nestedComponentForm([{
                key: 'display',
                components: WellEditDisplay
            }], ...extend);
    };
});
define('skylark-formio/components/builder',[
    './index',
    './address/Address.form',
    './button/Button.form',
    './checkbox/Checkbox.form',
    './columns/Columns.form',
    './container/Container.form',
    './content/Content.form',
    './currency/Currency.form',
    './datagrid/DataGrid.form',
    './datamap/DataMap.form',
    './datetime/DateTime.form',
    './day/Day.form',
    './editgrid/EditGrid.form',
    './email/Email.form',
    './fieldset/Fieldset.form',
    './file/File.form',
    './form/Form.form',
    './hidden/Hidden.form',
    './html/HTML.form',
    './number/Number.form',
    './panel/Panel.form',
    './password/Password.form',
    './phonenumber/PhoneNumber.form',
    './radio/Radio.form',
    './recaptcha/ReCaptcha.form',
    './resource/Resource.form',
    './selectboxes/SelectBoxes.form',
    './select/Select.form',
    './signature/Signature.form',
    './survey/Survey.form',
    './table/Table.form',
    './tabs/Tabs.form',
    './tags/Tags.form',
    './textarea/TextArea.form',
    './textfield/TextField.form',
    './time/Time.form',
    './tree/Tree.form',
    './unknown/Unknown.form',
    './url/Url.form',
    './well/Well.form'
], function (Components, AddressForm, ButtonForm, CheckboxForm, ColumnsForm, ContainerForm, ContentForm, CurrencyForm, DataGridForm, DataMapForm, DateTimeForm, DayForm, EditGridForm, EmailForm, FieldsetForm, FileForm, FormForm, HiddenForm, HtmlElementForm, NumberForm, PanelForm, PasswordForm, PhoneNumberForm, RadioForm, ReCaptchaForm, ResourceForm, SelectboxesForm, SelectForm, SignatureForm, SurveyForm, TableForm, TabsForm, TagsForm, TextAreaForm, TextfieldForm, TimeForm, TreeForm, UnknownForm, UrlForm, WellForm) {
    'use strict';
    Components.address.editForm = AddressForm;
    Components.button.editForm = ButtonForm;
    Components.checkbox.editForm = CheckboxForm;
    Components.columns.editForm = ColumnsForm;
    Components.container.editForm = ContainerForm;
    Components.content.editForm = ContentForm;
    Components.currency.editForm = CurrencyForm;
    Components.datagrid.editForm = DataGridForm;
    Components.datamap.editForm = DataMapForm;
    Components.datetime.editForm = DateTimeForm;
    Components.day.editForm = DayForm;
    Components.editgrid.editForm = EditGridForm;
    Components.email.editForm = EmailForm;
    Components.fieldset.editForm = FieldsetForm;
    Components.file.editForm = FileForm;
    Components.form.editForm = FormForm;
    Components.hidden.editForm = HiddenForm;
    Components.htmlelement.editForm = HtmlElementForm;
    Components.number.editForm = NumberForm;
    Components.panel.editForm = PanelForm;
    Components.password.editForm = PasswordForm;
    Components.phoneNumber.editForm = PhoneNumberForm;
    Components.radio.editForm = RadioForm;
    Components.recaptcha.editForm = ReCaptchaForm;
    Components.resource.editForm = ResourceForm;
    Components.select.editForm = SelectForm;
    Components.selectboxes.editForm = SelectboxesForm;
    Components.signature.editForm = SignatureForm;
    Components.survey.editForm = SurveyForm;
    Components.table.editForm = TableForm;
    Components.tabs.editForm = TabsForm;
    Components.tags.editForm = TagsForm;
    Components.textarea.editForm = TextAreaForm;
    Components.textfield.editForm = TextfieldForm;
    Components.time.editForm = TimeForm;
    Components.tree.editForm = TreeForm;
    Components.unknown.editForm = UnknownForm;
    Components.url.editForm = UrlForm;
    Components.well.editForm = WellForm;
    return Components;
});
define('skylark-formio/WebformBuilder',[
    'skylark-langx/langx',
    './Webform',
    './components/_classes/component/Component',
    'skylark-dragula',
    './vendors/tooltip-js/tooltip',
    './vendors/getify/npo',
    './components/Components',
    './Formio',
    './utils/utils',
    './utils/formUtils',
    './utils/builder',
    'skylark-lodash',
    './templates/Templates',
    "./components/builder"
], function (langx,Webform, Component, dragula, Tooltip, NativePromise, Components, Formio, a, b, BuilderUtils, _, Templates) {
    'use strict';

    class WebformBuilder extends Component {
        constructor() {
            let element, options;
            if (arguments[0] instanceof HTMLElement || arguments[1]) {
                element = arguments[0];
                options = arguments[1];
            } else {
                options = arguments[0];
            }
            options.skipInit = false;
            super(null, options);
            this.element = element;
            this.builderHeight = 0;
            this.schemas = {};
            this.sideBarScroll = _.get(this.options, 'sideBarScroll', true);
            this.sideBarScrollOffset = _.get(this.options, 'sideBarScrollOffset', 0);
            const componentInfo = {};
            for (const type in Components.components) {
                const component = Components.components[type];
                if (component.builderInfo) {
                    component.type = type;
                    componentInfo[type] = component.builderInfo;
                }
            }
            this.dragDropEnabled = true;
            this.builder = _.defaultsDeep({}, this.options.builder, this.defaultGroups);
            langx.each(this.defaultGroups, (config, key) => {
                if (config === false) {
                    this.builder[key] = false;
                }
            });
            this.groups = {};
            this.groupOrder = [];
            for (const group in this.builder) {
                if (this.builder[group]) {
                    this.builder[group].key = group;
                    this.groups[group] = this.builder[group];
                    this.groups[group].components = this.groups[group].components || {};
                    this.groups[group].componentOrder = this.groups[group].componentOrder || [];
                    this.groups[group].subgroups = Object.keys(this.groups[group].groups || {}).map(groupKey => {
                        this.groups[group].groups[groupKey].componentOrder = Object.keys(this.groups[group].groups[groupKey].components).map(key => key);
                        return this.groups[group].groups[groupKey];
                    });
                    this.groupOrder.push(this.groups[group]);
                }
            }
            this.groupOrder = this.groupOrder.filter(group => group && !group.ignore).sort((a, b) => a.weight - b.weight).map(group => group.key);
            for (const type in Components.components) {
                const component = Components.components[type];
                if (component.builderInfo) {
                    this.schemas[type] = component.builderInfo.schema;
                    component.type = type;
                    const builderInfo = component.builderInfo;
                    builderInfo.key = component.type;
                    this.addBuilderComponentInfo(builderInfo);
                }
            }
            for (const group in this.groups) {
                const info = this.groups[group];
                for (const key in info.components) {
                    const comp = info.components[key];
                    if (comp) {
                        if (comp.schema) {
                            this.schemas[key] = comp.schema;
                        }
                        info.components[key] = comp === true ? componentInfo[key] : comp;
                        info.components[key].key = key;
                    }
                }
            }
            for (const group in this.groups) {
                if (this.groups[group] && this.groups[group].components) {
                    this.groups[group].componentOrder = Object.keys(this.groups[group].components).map(key => this.groups[group].components[key]).filter(component => component && !component.ignore).sort((a, b) => a.weight - b.weight).map(component => component.key);
                }
            }
            this.options.hooks = this.options.hooks || {};
            this.options.hooks.renderComponent = (html, {self}) => {
                if (self.type === 'form' && !self.key) {
                    return html.replace('formio-component-form', '');
                }
                if (this.options.disabled && this.options.disabled.includes(self.key) || self.parent.noDragDrop) {
                    return html;
                }
                return this.renderTemplate('builderComponent', { html });
            };
            this.options.hooks.renderComponents = (html, {components, self}) => {
                if (self.type === 'datagrid' && components.length > 0 || self.noDragDrop) {
                    return html;
                }
                if (!components || !components.length && !components.nodrop || self.type === 'form' && components.length <= 1 && (components.length === 0 || components[0].type === 'button')) {
                    html = this.renderTemplate('builderPlaceholder', { position: 0 }) + html;
                }
                return this.renderTemplate('builderComponents', {
                    key: self.key,
                    type: self.type,
                    html
                });
            };
            this.options.hooks.renderInput = (html, {self}) => {
                if (self.type === 'hidden') {
                    return html + self.name;
                }
                return html;
            };
            this.options.hooks.renderLoading = (html, {self}) => {
                if (self.type === 'form' && self.key) {
                    return self.name;
                }
                return html;
            };
            this.options.hooks.attachComponents = (element, components, container, component) => {
                if (!element) {
                    return;
                }
                if (component.noDragDrop) {
                    return element;
                }
                const containerElement = element.querySelector(`[ref="${ component.component.key }-container"]`) || element;
                containerElement.formioContainer = container;
                containerElement.formioComponent = component;
                if (this.dragula && this.allowDrop(element)) {
                    this.dragula.containers.push(containerElement);
                }
                if ((component.type === 'datagrid' || component.type === 'datamap') && components.length > 0) {
                    return element;
                }
                return element.children[0];
            };
            this.options.hooks.attachDatagrid = (element, component) => {
                component.loadRefs(element, { [`${ component.key }-container`]: 'single' });
                component.attachComponents(component.refs[`${ component.key }-container`].parentNode, [], component.component.components);
            };
            this.options.hooks.attachComponent = (element, component) => {
                element.formioComponent = component;
                component.loadRefs(element, {
                    removeComponent: 'single',
                    editComponent: 'single',
                    moveComponent: 'single',
                    copyComponent: 'single',
                    pasteComponent: 'single',
                    editJson: 'single'
                });
                if (component.refs.copyComponent) {
                    new Tooltip(component.refs.copyComponent, {
                        trigger: 'hover',
                        placement: 'top',
                        title: this.t('Copy')
                    });
                    component.addEventListener(component.refs.copyComponent, 'click', () => this.copyComponent(component));
                }
                if (component.refs.pasteComponent) {
                    const pasteToolTip = new Tooltip(component.refs.pasteComponent, {
                        trigger: 'hover',
                        placement: 'top',
                        title: this.t('Paste below')
                    });
                    component.addEventListener(component.refs.pasteComponent, 'click', () => {
                        pasteToolTip.hide();
                        this.pasteComponent(component);
                    });
                }
                if (component.refs.moveComponent) {
                    new Tooltip(component.refs.moveComponent, {
                        trigger: 'hover',
                        placement: 'top',
                        title: this.t('Move')
                    });
                }
                const parent = this.getParentElement(element);
                if (component.refs.editComponent) {
                    new Tooltip(component.refs.editComponent, {
                        trigger: 'hover',
                        placement: 'top',
                        title: this.t('Edit')
                    });
                    component.addEventListener(component.refs.editComponent, 'click', () => this.editComponent(component.schema, parent, false, false, component.component));
                }
                if (component.refs.editJson) {
                    new Tooltip(component.refs.editJson, {
                        trigger: 'hover',
                        placement: 'top',
                        title: this.t('Edit JSON')
                    });
                    component.addEventListener(component.refs.editJson, 'click', () => this.editComponent(component.schema, parent, false, true, component.component));
                }
                if (component.refs.removeComponent) {
                    new Tooltip(component.refs.removeComponent, {
                        trigger: 'hover',
                        placement: 'top',
                        title: this.t('Remove')
                    });
                    component.addEventListener(component.refs.removeComponent, 'click', () => this.removeComponent(component.schema, parent, component.component));
                }
                return element;
            };
            const query = {
                params: {
                    type: 'resource',
                    limit: 4294967295,
                    select: '_id,title,name,components'
                }
            };
            if (this.options && this.options.resourceTag) {
                query.params.tags = [this.options.resourceTag];
            } else if (!this.options || !this.options.hasOwnProperty('resourceTag')) {
                query.params.tags = ['builder'];
            }
            const formio = new Formio(Formio.projectUrl);
            const isResourcesDisabled = this.options.builder && this.options.builder.resource === false;
            if (!formio.noProject && !isResourcesDisabled) {
                const resourceOptions = this.options.builder && this.options.builder.resource;
                formio.loadForms(query).then(resources => {
                    if (resources.length) {
                        this.builder.resource = {
                            title: resourceOptions ? resourceOptions.title : 'Existing Resource Fields',
                            key: 'resource',
                            weight: resourceOptions ? resourceOptions.weight : 50,
                            subgroups: [],
                            components: [],
                            componentOrder: []
                        };
                        this.groups.resource = {
                            title: resourceOptions ? resourceOptions.title : 'Existing Resource Fields',
                            key: 'resource',
                            weight: resourceOptions ? resourceOptions.weight : 50,
                            subgroups: [],
                            components: [],
                            componentOrder: []
                        };
                        if (!this.groupOrder.includes('resource')) {
                            this.groupOrder.push('resource');
                        }
                        this.addExistingResourceFields(resources);
                    }
                });
            }
            this.options.attachMode = 'builder';
            this.webform = this.webform || this.createForm(this.options);
        }
        allowDrop() {
            return true;
        }
        addExistingResourceFields(resources) {
            langx.each(resources, (resource, index) => {
                const resourceKey = `resource-${ resource.name }`;
                const subgroup = {
                    key: resourceKey,
                    title: resource.title,
                    components: [],
                    componentOrder: [],
                    default: index === 0
                };
                b.eachComponent(resource.components, component => {
                    if (component.type === 'button')
                        return;
                    if (this.options && this.options.resourceFilter && (!component.tags || component.tags.indexOf(this.options.resourceFilter) === -1))
                        return;
                    let componentName = component.label;
                    if (!componentName && component.key) {
                        componentName = langx.upperFirst(component.key);
                    }
                    subgroup.componentOrder.push(component.key);
                    subgroup.components[component.key] = _.merge(a.fastCloneDeep(Components.components[component.type].builderInfo), { //_.merge
                        key: component.key,
                        title: componentName,
                        group: 'resource',
                        subgroup: resourceKey
                    }, {
                        schema: {
                            ...component,
                            label: component.label,
                            key: component.key,
                            lockKey: true,
                            source: !this.options.noSource ? resource._id : undefined,
                            isNew: true
                        }
                    });
                }, true);
                this.groups.resource.subgroups.push(subgroup);
            });
            this.triggerRedraw();
        }
        createForm(options) {
            this.webform = new Webform(this.element, options);
            if (this.element) {
                this.loadRefs(this.element, { form: 'single' });
                if (this.refs.form) {
                    this.webform.element = this.refs.form;
                }
            }
            return this.webform;
        }
        get ready() {
            return this.webform.ready;
        }
        get defaultGroups() {
            return {
                basic: {
                    title: 'Basic',
                    weight: 0,
                    default: true
                },
                advanced: {
                    title: 'Advanced',
                    weight: 10
                },
                layout: {
                    title: 'Layout',
                    weight: 20
                },
                data: {
                    title: 'Data',
                    weight: 30
                },
                premium: {
                    title: 'Premium',
                    weight: 40
                }
            };
        }
        redraw() {
            return Webform.prototype.redraw.call(this);
        }
        get form() {
            return this.webform.form;
        }
        get schema() {
            return this.webform.schema;
        }
        set form(value) {
            if (!value.components) {
                value.components = [];
            }
            const isShowSubmitButton = !this.options.noDefaultSubmitButton && !value.components.length;
            if (isShowSubmitButton) {
                value.components.push({
                    type: 'button',
                    label: 'Submit',
                    key: 'submit',
                    size: 'md',
                    block: false,
                    action: 'submit',
                    disableOnInvalid: true,
                    theme: 'primary'
                });
            }
            this.webform.form = value;
            this.rebuild();
        }
        get container() {
            return this.webform.form.components;
        }
        findNamespaceRoot(component) {
            const comp = b.getComponent(this.webform.form.components, component.key, true);
            const namespaceKey = this.recurseNamespace(comp);
            if (!namespaceKey || this.form.key === namespaceKey) {
                return this.form.components;
            }
            if (namespaceKey === component.key) {
                return [
                    ...component.components,
                    component
                ];
            }
            const namespaceComponent = b.getComponent(this.form.components, namespaceKey, true);
            return namespaceComponent.components;
        }
        recurseNamespace(component) {
            if (!component) {
                return null;
            }
            if ([
                    'container',
                    'datagrid',
                    'editgrid',
                    'tree'
                ].includes(component.type) || component.tree || component.arrayTree) {
                return component.key;
            }
            return this.recurseNamespace(component.parent);
        }
        render() {
            return this.renderTemplate('builder', {
                sidebar: this.renderTemplate('builderSidebar', {
                    scrollEnabled: this.sideBarScroll,
                    groupOrder: this.groupOrder,
                    groupId: `builder-sidebar-${ this.id }`,
                    groups: this.groupOrder.map(groupKey => this.renderTemplate('builderSidebarGroup', {
                        group: this.groups[groupKey],
                        groupKey,
                        groupId: `builder-sidebar-${ this.id }`,
                        subgroups: this.groups[groupKey].subgroups.map(group => this.renderTemplate('builderSidebarGroup', {
                            group,
                            groupKey: group.key,
                            groupId: `group-container-${ groupKey }`,
                            subgroups: []
                        }))
                    }))
                }),
                form: this.webform.render()
            });
        }
        attach(element) {
            this.on('change', form => {
                this.populateRecaptchaSettings(form);
            });
            return super.attach(element).then(() => {
                this.loadRefs(element, {
                    form: 'single',
                    sidebar: 'single',
                    'container': 'multiple',
                    'sidebar-anchor': 'multiple',
                    'sidebar-group': 'multiple',
                    'sidebar-container': 'multiple'
                });
                if (this.sideBarScroll && Templates.current.handleBuilderSidebarScroll) {
                    Templates.current.handleBuilderSidebarScroll.call(this, this);
                }
                if (window.sessionStorage) {
                    const data = window.sessionStorage.getItem('formio.clipboard');
                    if (data) {
                        this.addClass(this.refs.form, 'builder-paste-mode');
                    }
                }
                if (!a.bootstrapVersion(this.options)) {
                    this.refs['sidebar-group'].forEach(group => {
                        group.style.display = group.getAttribute('data-default') === 'true' ? 'inherit' : 'none';
                    });
                    this.refs['sidebar-anchor'].forEach((anchor, index) => {
                        this.addEventListener(anchor, 'click', () => {
                            const clickedParentId = anchor.getAttribute('data-parent').slice('#builder-sidebar-'.length);
                            const clickedId = anchor.getAttribute('data-target').slice('#group-'.length);
                            this.refs['sidebar-group'].forEach((group, groupIndex) => {
                                const openByDefault = group.getAttribute('data-default') === 'true';
                                const groupId = group.getAttribute('id').slice('group-'.length);
                                const groupParent = group.getAttribute('data-parent').slice('#builder-sidebar-'.length);
                                group.style.display = openByDefault && groupParent === clickedId || groupId === clickedParentId || groupIndex === index ? 'inherit' : 'none';
                            });
                        }, true);
                    });
                }
                if (this.dragDropEnabled) {
                    this.initDragula();
                }
                if (this.refs.form) {
                    return this.webform.attach(this.refs.form);
                }
            });
        }
        initDragula() {
            const options = this.options;
            if (this.dragula) {
                this.dragula.destroy();
            }
            const containersArray = Array.prototype.slice.call(this.refs['sidebar-container']).filter(item => {
                return item.id !== 'group-container-resource';
            });
            this.dragula = dragula(containersArray, {
                moves(el) {
                    let moves = true;
                    const list = Array.from(el.classList).filter(item => item.indexOf('formio-component-') === 0);
                    list.forEach(item => {
                        const key = item.slice('formio-component-'.length);
                        if (options.disabled && options.disabled.includes(key)) {
                            moves = false;
                        }
                    });
                    if (el.classList.contains('no-drag')) {
                        moves = false;
                    }
                    return moves;
                },
                copy(el) {
                    return el.classList.contains('drag-copy');
                },
                accepts(el, target) {
                    return !el.contains(target) && !target.classList.contains('no-drop');
                }
            }).on('drop', (element, target, source, sibling) => this.onDrop(element, target, source, sibling));
        }
        detach() {
            if (this.dragula) {
                this.dragula.destroy();
            }
            this.dragula = null;
            if (this.sideBarScroll && Templates.current.clearBuilderSidebarScroll) {
                Templates.current.clearBuilderSidebarScroll.call(this, this);
            }
            super.detach();
        }
        getComponentInfo(key, group) {
            let info;
            if (this.schemas.hasOwnProperty(key)) {
                info = a.fastCloneDeep(this.schemas[key]);
            } else if (this.groups.hasOwnProperty(group)) {
                const groupComponents = this.groups[group].components;
                if (groupComponents.hasOwnProperty(key)) {
                    info = a.fastCloneDeep(groupComponents[key].schema);
                }
            }
            if (group.slice(0, group.indexOf('-')) === 'resource') {
                const resourceGroups = this.groups.resource.subgroups;
                const resourceGroup = _.find(resourceGroups, { key: group });
                if (resourceGroup && resourceGroup.components.hasOwnProperty(key)) {
                    info = a.fastCloneDeep(resourceGroup.components[key].schema);
                }
            }
            if (info) {
                info.key = _.camelCase(info.title || info.label || info.placeholder || info.type);
            }
            return info;
        }
        getComponentsPath(component, parent) {
            let path = 'components';
            let columnIndex = 0;
            let tableRowIndex = 0;
            let tableColumnIndex = 0;
            let tabIndex = 0;
            switch (parent.type) {
            case 'table':
                tableRowIndex = _.findIndex(parent.rows, row => row.some(column => column.components.some(comp => comp.key === component.key)));
                tableColumnIndex = _.findIndex(parent.rows[tableRowIndex], column => column.components.some(comp => comp.key === component.key));
                path = `rows[${ tableRowIndex }][${ tableColumnIndex }].components`;
                break;
            case 'columns':
                columnIndex = _.findIndex(parent.columns, column => column.components.some(comp => comp.key === component.key));
                path = `columns[${ columnIndex }].components`;
                break;
            case 'tabs':
                tabIndex = _.findIndex(parent.components, tab => tab.components.some(comp => comp.key === component.key));
                path = `components[${ tabIndex }].components`;
                break;
            }
            return path;
        }
        onDrop(element, target, source, sibling) {
            if (!target) {
                return;
            }
            if (element.contains(target)) {
                return;
            }
            const key = element.getAttribute('data-key');
            const type = element.getAttribute('data-type');
            const group = element.getAttribute('data-group');
            let info, isNew, path, index;
            if (key) {
                info = this.getComponentInfo(key, group);
                if (!info && type) {
                    info = this.getComponentInfo(type, group);
                }
                isNew = true;
            } else if (source.formioContainer) {
                index = _.findIndex(source.formioContainer, { key: element.formioComponent.component.key });
                if (index !== -1) {
                    info = source.formioContainer.splice(_.findIndex(source.formioContainer, { key: element.formioComponent.component.key }), 1);
                    info = info[0];
                }
            }
            if (!info) {
                return;
            }
            if (target !== source) {
                BuilderUtils.uniquify(this.findNamespaceRoot(target.formioComponent.component), info);
            }
            const parent = target.formioComponent;
            if (target.formioContainer) {
                if (sibling) {
                    if (!sibling.getAttribute('data-noattach')) {
                        index = _.findIndex(target.formioContainer, { key: _.get(sibling, 'formioComponent.component.key') });
                        index = index === -1 ? 0 : index;
                    } else {
                        index = sibling.getAttribute('data-position');
                    }
                    if (index !== -1) {
                        target.formioContainer.splice(index, 0, info);
                    }
                } else {
                    target.formioContainer.push(info);
                }
                path = this.getComponentsPath(info, parent.component);
                index = _.findIndex(_.get(parent.schema, path), { key: info.key });
                if (index === -1) {
                    index = 0;
                }
            }
            if (parent && parent.addChildComponent) {
                parent.addChildComponent(info, element, target, source, sibling);
            }
            if (isNew && !this.options.noNewEdit) {
                this.editComponent(info, target, isNew);
            }
            let rebuild;
            if (target !== source) {
                if (source.formioContainer && source.contains(target)) {
                    rebuild = source.formioComponent.rebuild();
                } else if (target.contains(source)) {
                    rebuild = target.formioComponent.rebuild();
                } else {
                    if (source.formioContainer) {
                        rebuild = source.formioComponent.rebuild();
                    }
                    rebuild = target.formioComponent.rebuild();
                }
            } else {
                rebuild = target.formioComponent.rebuild();
            }
            if (!rebuild) {
                rebuild = NativePromise.resolve();
            }
            return rebuild.then(() => {
                this.emit('addComponent', info, parent, path, index, isNew);
            });
        }
        setForm(form) {
            this.emit('change', form);
            return super.setForm(form).then(retVal => {
                setTimeout(() => this.builderHeight = this.refs.form.offsetHeight, 200);
                return retVal;
            });
        }
        populateRecaptchaSettings(form) {
            var isRecaptchaEnabled = false;
            if (this.form.components) {
                b.eachComponent(form.components, component => {
                    if (isRecaptchaEnabled) {
                        return;
                    }
                    if (component.type === 'recaptcha') {
                        isRecaptchaEnabled = true;
                        return false;
                    }
                });
                if (isRecaptchaEnabled) {
                    _.set(form, 'settings.recaptcha.isEnabled', true);
                } else if (_.get(form, 'settings.recaptcha.isEnabled')) {
                    _.set(form, 'settings.recaptcha.isEnabled', false);
                }
            }
        }
        removeComponent(component, parent, original) {
            if (!parent) {
                return;
            }
            let remove = true;
            if (!component.skipRemoveConfirm && (Array.isArray(component.components) && component.components.length || Array.isArray(component.rows) && component.rows.length || Array.isArray(component.columns) && component.columns.length)) {
                const message = 'Removing this component will also remove all of its children. Are you sure you want to do this?';
                remove = window.confirm(this.t(message));
            }
            if (!original) {
                original = parent.formioContainer.find(comp => comp.key === component.key);
            }
            const index = parent.formioContainer ? parent.formioContainer.indexOf(original) : 0;
            if (remove && index !== -1) {
                const path = this.getComponentsPath(component, parent.formioComponent.component);
                if (parent.formioContainer) {
                    parent.formioContainer.splice(index, 1);
                } else if (parent.formioComponent && parent.formioComponent.removeChildComponent) {
                    parent.formioComponent.removeChildComponent(component);
                }
                const rebuild = parent.formioComponent.rebuild() || NativePromise.resolve();
                rebuild.then(() => {
                    this.emit('removeComponent', component, parent.formioComponent.schema, path, index);
                    this.emit('change', this.form);
                });
            }
            return remove;
        }
        updateComponent(component, changed) {
            if (this.preview) {
                this.preview.form = {
                    components: [_.omit(component, [
                            'hidden',
                            'conditional',
                            'calculateValue',
                            'logic',
                            'autofocus',
                            'customConditional'
                        ])]
                };
                const previewElement = this.componentEdit.querySelector('[ref="preview"]');
                if (previewElement) {
                    this.setContent(previewElement, this.preview.render());
                    this.preview.attach(previewElement);
                }
            }
            const defaultValueComponent = b.getComponent(this.editForm.components, 'defaultValue');
            if (defaultValueComponent) {
                const defaultChanged = changed && (changed.component && changed.component.key === 'defaultValue' || changed.instance && defaultValueComponent.hasComponent && defaultValueComponent.hasComponent(changed.instance));
                if (!defaultChanged) {
                    _.assign(defaultValueComponent.component, _.omit(component, [
                        'key',
                        'label',
                        'placeholder',
                        'tooltip',
                        'hidden',
                        'autofocus',
                        'validate',
                        'disabled',
                        'defaultValue',
                        'customDefaultValue',
                        'calculateValue',
                        'conditional',
                        'customConditional'
                    ]));
                    const parentComponent = defaultValueComponent.parent;
                    let tabIndex = -1;
                    let index = -1;
                    parentComponent.tabs.some((tab, tIndex) => {
                        tab.some((comp, compIndex) => {
                            if (comp.id === defaultValueComponent.id) {
                                tabIndex = tIndex;
                                index = compIndex;
                                return true;
                            }
                            return false;
                        });
                    });
                    if (tabIndex !== -1 && index !== -1) {
                        const sibling = parentComponent.tabs[tabIndex][index + 1];
                        parentComponent.removeComponent(defaultValueComponent);
                        const newComp = parentComponent.addComponent(defaultValueComponent.component, defaultValueComponent.data, sibling);
                        _.pull(newComp.validators, 'required');
                        parentComponent.tabs[tabIndex].splice(index, 1, newComp);
                        newComp.checkValidity = () => true;
                        newComp.build(defaultValueComponent.element);
                    }
                }
            }
            this.emit('updateComponent', component);
        }
        highlightInvalidComponents() {
            const repeatablePaths = [];
            const keys = new Map();
            b.eachComponent(this.form.components, (comp, path) => {
                if (!comp.key) {
                    return;
                }
                if (keys.has(comp.key)) {
                    if (keys.get(comp.key).includes(path)) {
                        repeatablePaths.push(path);
                    } else {
                        keys.set(comp.key, [
                            ...keys.get(comp.key),
                            path
                        ]);
                    }
                } else {
                    keys.set(comp.key, [path]);
                }
            });
            b.eachComponent(this.webform.getComponents(), (comp, path) => {
                if (repeatablePaths.includes(path)) {
                    comp.setCustomValidity(`API Key is not unique: ${ comp.key }`);
                }
            });
        }
        saveComponent(component, parent, isNew, original) {
            this.editForm.detach();
            const parentContainer = parent ? parent.formioContainer : this.container;
            const parentComponent = parent ? parent.formioComponent : this;
            this.dialog.close();
            const path = parentContainer ? this.getComponentsPath(component, parentComponent.component) : '';
            if (!original) {
                original = parent.formioContainer.find(comp => comp.key === component.key);
            }
            const index = parentContainer ? parentContainer.indexOf(original) : 0;
            if (index !== -1) {
                let submissionData = this.editForm.submission.data;
                submissionData = submissionData.componentJson || submissionData;
                if (parentContainer) {
                    parentContainer[index] = submissionData;
                } else if (parentComponent && parentComponent.saveChildComponent) {
                    parentComponent.saveChildComponent(submissionData);
                }
                const rebuild = parentComponent.rebuild() || NativePromise.resolve();
                return rebuild.then(() => {
                    let schema = parentContainer ? parentContainer[index] : [];
                    parentComponent.getComponents().forEach(component => {
                        if (component.key === schema.key) {
                            schema = component.schema;
                        }
                    });
                    this.emit('saveComponent', schema, component, parentComponent.schema, path, index, isNew);
                    this.emit('change', this.form);
                    this.highlightInvalidComponents();
                });
            }
            this.highlightInvalidComponents();
            return NativePromise.resolve();
        }
        editComponent(component, parent, isNew, isJsonEdit, original) {
            if (!component.key) {
                return;
            }
            let saved = false;
            const componentCopy = a.fastCloneDeep(component);
            let ComponentClass = Components.components[componentCopy.type];
            const isCustom = ComponentClass === undefined;
            isJsonEdit = isJsonEdit || isCustom;
            ComponentClass = isCustom ? Components.components.unknown : ComponentClass;
            if (this.dialog) {
                this.dialog.close();
                this.highlightInvalidComponents();
            }
            const editFormOptions = _.clone(_.get(this, 'options.editForm', {}));
            if (this.editForm) {
                this.editForm.destroy();
            }
            const overrides = _.get(this.options, `editForm.${ componentCopy.type }`, {});
            editFormOptions.editForm = this.form;
            editFormOptions.editComponent = component;
            this.editForm = new Webform({
                ..._.omit(this.options, [
                    'hooks',
                    'builder',
                    'events',
                    'attachMode',
                    'skipInit'
                ]),
                language: this.options.language,
                ...editFormOptions
            });
            this.editForm.form = isJsonEdit && !isCustom ? {
                components: [{
                        type: 'textarea',
                        as: 'json',
                        editor: 'ace',
                        weight: 10,
                        input: true,
                        key: 'componentJson',
                        label: 'Component JSON',
                        tooltip: 'Edit the JSON for this component.'
                    }]
            } : ComponentClass.editForm(_.cloneDeep(overrides));
            const instance = new ComponentClass(componentCopy);
            this.editForm.submission = isJsonEdit ? { data: { componentJson: instance.component } } : { data: instance.component };
            if (this.preview) {
                this.preview.destroy();
            }
            if (!ComponentClass.builderInfo.hasOwnProperty('preview') || ComponentClass.builderInfo.preview) {
                this.preview = new Webform(_.omit({
                    ...this.options,
                    preview: true
                }, [
                    'hooks',
                    'builder',
                    'events',
                    'attachMode',
                    'calculateValue'
                ]));
            }
            this.componentEdit = this.ce('div', { 'class': 'component-edit-container' });
            this.setContent(this.componentEdit, this.renderTemplate('builderEditForm', {
                componentInfo: ComponentClass.builderInfo,
                editForm: this.editForm.render(),
                preview: this.preview ? this.preview.render() : false
            }));
            this.dialog = this.createModal(this.componentEdit, _.get(this.options, 'dialogAttr', {}));
            this.editForm.attach(this.componentEdit.querySelector('[ref="editForm"]'));
            this.updateComponent(componentCopy);
            this.editForm.on('change', event => {
                if (event.changed) {
                    if (event.changed.component && event.changed.component.key === 'key' || isJsonEdit) {
                        componentCopy.keyModified = true;
                    }
                    if (event.changed.component && [
                            'label',
                            'title'
                        ].includes(event.changed.component.key)) {
                        if (isNew) {
                            if (!event.data.keyModified) {
                                this.editForm.everyComponent(component => {
                                    if (component.key === 'key' && component.parent.component.key === 'tabs') {
                                        component.setValue(_.camelCase(event.data.title || event.data.label || event.data.placeholder || event.data.type));
                                        return false;
                                    }
                                });
                            }
                            if (this.form) {
                                BuilderUtils.uniquify(this.findNamespaceRoot(parent.formioComponent.component), event.data);
                            }
                        }
                    }
                    this.updateComponent(event.data.componentJson || event.data, event.changed);
                }
            });
            this.addEventListener(this.componentEdit.querySelector('[ref="cancelButton"]'), 'click', event => {
                event.preventDefault();
                this.editForm.detach();
                this.emit('cancelComponent', component);
                this.dialog.close();
                this.highlightInvalidComponents();
            });
            this.addEventListener(this.componentEdit.querySelector('[ref="removeButton"]'), 'click', event => {
                event.preventDefault();
                saved = true;
                this.editForm.detach();
                this.removeComponent(component, parent, original);
                this.dialog.close();
                this.highlightInvalidComponents();
            });
            this.addEventListener(this.componentEdit.querySelector('[ref="saveButton"]'), 'click', event => {
                event.preventDefault();
                if (!this.editForm.checkValidity(this.editForm.data, true, this.editForm.data)) {
                    this.editForm.setPristine(false);
                    this.editForm.showErrors();
                    return false;
                }
                saved = true;
                this.saveComponent(component, parent, isNew, original);
            });
            const dialogClose = () => {
                this.editForm.destroy();
                if (this.preview) {
                    this.preview.destroy();
                    this.preview = null;
                }
                if (isNew && !saved) {
                    this.removeComponent(component, parent, original);
                    this.highlightInvalidComponents();
                }
                this.removeEventListener(this.dialog, 'close', dialogClose);
                this.dialog = null;
            };
            this.addEventListener(this.dialog, 'close', dialogClose);
            this.emit('editComponent', component);
        }
        copyComponent(component) {
            if (!window.sessionStorage) {
                return console.warn('Session storage is not supported in this browser.');
            }
            this.addClass(this.refs.form, 'builder-paste-mode');
            window.sessionStorage.setItem('formio.clipboard', JSON.stringify(component.schema));
        }
        pasteComponent(component) {
            if (!window.sessionStorage) {
                return console.warn('Session storage is not supported in this browser.');
            }
            this.removeClass(this.refs.form, 'builder-paste-mode');
            if (window.sessionStorage) {
                const data = window.sessionStorage.getItem('formio.clipboard');
                if (data) {
                    const schema = JSON.parse(data);
                    const parent = this.getParentElement(component.element);
                    BuilderUtils.uniquify(this.findNamespaceRoot(parent.formioComponent.component), schema);
                    let path = '';
                    let index = 0;
                    if (parent.formioContainer) {
                        index = parent.formioContainer.indexOf(component.component);
                        path = this.getComponentsPath(schema, parent.formioComponent.component);
                        parent.formioContainer.splice(index + 1, 0, schema);
                    } else if (parent.formioComponent && parent.formioComponent.saveChildComponent) {
                        parent.formioComponent.saveChildComponent(schema, false);
                    }
                    parent.formioComponent.rebuild();
                    this.emit('saveComponent', schema, schema, parent.formioComponent.components, path, index + 1, true);
                    this.emit('change', this.form);
                }
            }
        }
        getParentElement(element) {
            let container = element;
            do {
                container = container.parentNode;
            } while (container && !container.formioComponent);
            return container;
        }
        addBuilderComponentInfo(component) {
            if (!component || !component.group || !this.groups[component.group]) {
                return;
            }
            component = langx.clone(component); //_.clone lwf
            const groupInfo = this.groups[component.group];
            if (!groupInfo.components.hasOwnProperty(component.key)) {
                groupInfo.components[component.key] = component;
            }
            return component;
        }
        destroy() {
            if (this.webform.initialized) {
                this.webform.destroy();
            }
            super.destroy();
        }
        addBuilderGroup(name, group) {
            if (!this.groups[name]) {
                this.groups[name] = group;
                this.groupOrder.push(name);
                this.triggerRedraw();
            } else {
                this.updateBuilderGroup(name, group);
            }
        }
        updateBuilderGroup(name, group) {
            if (this.groups[name]) {
                this.groups[name] = group;
                this.triggerRedraw();
            }
        }
    };


    return WebformBuilder
});
define('skylark-formio/PDFBuilder',[
    'skylark-lodash',
    './vendors/getify/npo',
    './vendors/fetch-ponyfill/fetch',
    './Formio',
    './WebformBuilder',
    './utils/utils',
    './utils/builder',
    './PDF'
], function (_, NativePromise, fetchPonyfill, Formio, WebformBuilder, a, BuilderUtils, PDF) {
    'use strict';
    const {fetch, Headers} = fetchPonyfill({ Promise: NativePromise });
    return class PDFBuilder extends WebformBuilder {
        constructor() {
            let element, options;
            if (arguments[0] instanceof HTMLElement || arguments[1]) {
                element = arguments[0];
                options = arguments[1];
            } else {
                options = arguments[0];
            }
            options.skipInit = true;
            if (element) {
                super(element, options);
            } else {
                super(options);
            }
            this.dragDropEnabled = false;
        }
        get defaultGroups() {
            return {
                pdf: {
                    title: 'PDF Fields',
                    weight: 0,
                    default: true,
                    components: {
                        textfield: true,
                        number: true,
                        password: true,
                        email: true,
                        phoneNumber: true,
                        currency: true,
                        checkbox: true,
                        signature: true,
                        select: true,
                        textarea: true,
                        datetime: true,
                        file: true
                    }
                },
                basic: false,
                advanced: false,
                layout: false,
                data: false,
                premium: false,
                resource: false
            };
        }
        get hasPDF() {
            return _.has(this.webform.form, 'settings.pdf');
        }
        get projectUrl() {
            return this.options.projectUrl || Formio.getProjectUrl();
        }
        init() {
            this.options.attachMode = 'builder';
            this.webform = this.webform || this.createForm(this.options);
            this.webform.init();
        }
        render() {
            const result = this.renderTemplate('pdfBuilder', {
                sidebar: this.renderTemplate('builderSidebar', {
                    scrollEnabled: this.sideBarScroll,
                    groupOrder: this.groupOrder,
                    groupId: `builder-sidebar-${ this.id }`,
                    groups: this.groupOrder.map(groupKey => this.renderTemplate('builderSidebarGroup', {
                        group: this.groups[groupKey],
                        groupKey,
                        groupId: `builder-sidebar-${ this.id }`,
                        subgroups: this.groups[groupKey].subgroups.map(group => this.renderTemplate('builderSidebarGroup', {
                            group,
                            groupKey: group.key,
                            groupId: `builder-sidebar-${ groupKey }`,
                            subgroups: []
                        }))
                    }))
                }),
                form: this.hasPDF ? this.webform.render() : this.renderTemplate('pdfBuilderUpload', {})
            });
            return result;
        }
        attach(element) {
            if (!this.hasPDF) {
                this.loadRefs(element, {
                    'fileDrop': 'single',
                    'fileBrowse': 'single',
                    'hiddenFileInputElement': 'single',
                    'uploadError': 'single'
                });
                this.addEventListener(this.refs['pdf-upload-button'], 'click', event => {
                    event.preventDefault();
                });
                if (!this.projectUrl) {
                    this.setUploadError('Form options.projectUrl not set. Please set the "projectUrl" property of the options for this form or use Formio.setProjectUrl(). This setting is necessary to upload a pdf background.');
                } else {
                    this.setUploadError();
                }
                if (this.refs.fileDrop) {
                    const element = this;
                    this.addEventListener(this.refs.fileDrop, 'dragover', function (event) {
                        this.className = 'fileSelector fileDragOver';
                        event.preventDefault();
                    });
                    this.addEventListener(this.refs.fileDrop, 'dragleave', function (event) {
                        this.className = 'fileSelector';
                        event.preventDefault();
                    });
                    this.addEventListener(this.refs.fileDrop, 'drop', function (event) {
                        this.className = 'fileSelector';
                        event.preventDefault();
                        element.upload(event.dataTransfer.files[0]);
                        return false;
                    });
                }
                if (this.refs.fileBrowse && this.refs.hiddenFileInputElement) {
                    this.addEventListener(this.refs.fileBrowse, 'click', event => {
                        event.preventDefault();
                        if (typeof this.refs.hiddenFileInputElement.trigger === 'function') {
                            this.refs.hiddenFileInputElement.trigger('click');
                        } else {
                            this.refs.hiddenFileInputElement.click();
                        }
                    });
                    this.addEventListener(this.refs.hiddenFileInputElement, 'change', () => {
                        this.upload(this.refs.hiddenFileInputElement.files[0]);
                        this.refs.hiddenFileInputElement.value = '';
                    });
                }
                return NativePromise.resolve();
            }
            return super.attach(element).then(() => {
                this.loadRefs(this.element, {
                    iframeDropzone: 'single',
                    'sidebar-container': 'multiple'
                });
                this.afterAttach();
                return this.element;
            });
        }
        afterAttach() {
            this.initIframeEvents();
            this.updateDropzoneDimensions();
            this.initDropzoneEvents();
            this.prepSidebarComponentsForDrag();
        }
        upload(file) {
            const headers = new Headers({
                'Accept': 'application/json, text/plain, */*',
                'x-jwt-token': Formio.getToken()
            });
            const formData = new FormData();
            formData.append('file', file);
            fetch(`${ this.projectUrl }/upload`, {
                method: 'POST',
                headers,
                body: formData
            }).then(response => {
                if (response.status !== 201) {
                    response.text().then(info => {
                        this.setUploadError(`${ response.statusText } - ${ info }`);
                    });
                } else {
                    response.json().then(data => {
                        _.set(this.webform.form, 'settings.pdf', {
                            id: data.file,
                            src: `${ data.filesServer }${ data.path }`
                        });
                        this.emit('pdfUploaded', data);
                        this.redraw();
                    });
                }
            }).catch(() => {
                this.setUploadError('Upload failed.');
            });
        }
        setUploadError(message) {
            if (!this.refs.uploadError) {
                return;
            }
            this.refs.uploadError.style.display = message ? '' : 'none';
            this.refs.uploadError.innerHTML = message;
        }
        createForm(options) {
            options.skipInit = false;
            this.webform = new PDF(this.element, options);
            this.webform.on('attach', () => {
                if (this.refs.iframeDropzone && ![...this.refs.form.children].includes(this.refs.iframeDropzone)) {
                    this.prependTo(this.refs.iframeDropzone, this.refs.form);
                }
            });
            return this.webform;
        }
        setForm(form) {
            return super.setForm(form).then(() => {
                return this.ready.then(() => {
                    if (this.webform) {
                        this.webform.postMessage({
                            name: 'form',
                            data: form
                        });
                        return this.webform.setForm(form);
                    }
                    return form;
                });
            });
        }
        saveComponent(...args) {
            return super.saveComponent(...args).then(() => this.afterAttach());
        }
        destroy() {
            super.destroy();
            this.webform.destroy();
        }
        initIframeEvents() {
            if (!this.webform.iframeElement) {
                return;
            }
            this.webform.off('iframe-elementUpdate');
            this.webform.off('iframe-componentUpdate');
            this.webform.off('iframe-componentClick');
            this.webform.on('iframe-elementUpdate', schema => {
                const component = this.webform.getComponentById(schema.id);
                if (component && component.component) {
                    component.component.overlay = {
                        page: schema.page,
                        left: schema.left,
                        top: schema.top,
                        height: schema.height,
                        width: schema.width
                    };
                    this.editComponent(component.component, this.webform.iframeElement);
                    this.emit('updateComponent', component);
                }
                return component;
            });
            this.webform.on('iframe-componentUpdate', schema => {
                const component = this.webform.getComponentById(schema.id);
                if (component && component.component) {
                    component.component.overlay = {
                        page: schema.overlay.page,
                        left: schema.overlay.left,
                        top: schema.overlay.top,
                        height: schema.overlay.height,
                        width: schema.overlay.width
                    };
                    this.emit('updateComponent', component);
                    const localComponent = _.find(this.form.components, { id: schema.id });
                    if (localComponent) {
                        localComponent.overlay = _.clone(component.component.overlay);
                    }
                    this.emit('change', this.form);
                }
                return component;
            });
            this.webform.on('iframe-componentClick', schema => {
                const component = this.webform.getComponentById(schema.id);
                if (component) {
                    this.editComponent(component.component, this.webform.iframeElement);
                }
            }, true);
        }
        initDropzoneEvents() {
            if (!this.refs.iframeDropzone) {
                return;
            }
            this.removeEventListener(this.refs.iframeDropzone, 'dragover');
            this.removeEventListener(this.refs.iframeDropzone, 'drop');
            this.addEventListener(this.refs.iframeDropzone, 'dragover', e => {
                e.preventDefault();
                return false;
            });
            this.addEventListener(this.refs.iframeDropzone, 'drop', this.onDropzoneDrop.bind(this));
        }
        prepSidebarComponentsForDrag() {
            if (!this.refs['sidebar-container']) {
                return;
            }
            this.refs['sidebar-container'].forEach(container => {
                [...container.children].forEach(el => {
                    el.draggable = true;
                    el.setAttribute('draggable', true);
                    this.removeEventListener(el, 'dragstart');
                    this.removeEventListener(el, 'dragend');
                    this.addEventListener(el, 'dragstart', this.onDragStart.bind(this), true);
                    this.addEventListener(el, 'dragend', this.onDragEnd.bind(this), true);
                });
            });
        }
        updateDropzoneDimensions() {
            if (!this.refs.iframeDropzone) {
                return;
            }
            const iframeRect = a.getElementRect(this.webform.refs.iframeContainer);
            this.refs.iframeDropzone.style.height = iframeRect && iframeRect.height ? `${ iframeRect.height }px` : '1000px';
            this.refs.iframeDropzone.style.width = iframeRect && iframeRect.width ? `${ iframeRect.width }px` : '100%';
        }
        tryUpdateCustomComponentSchema(schema, key) {
            const comp = _.get(this, `groups.custom.components[${ key }]`);
            if (!comp) {
                return false;
            }
            schema.key = comp.schema && comp.schema.key || schema.key;
            schema.label = comp.schema && comp.schema.label || schema.label;
            schema.keyForShow = schema.key;
            schema.customField = true;
            return true;
        }
        onDragStart(e) {
            e.dataTransfer.setData('text/html', null);
            this.updateDropzoneDimensions();
            this.addClass(this.refs.iframeDropzone, 'enabled');
        }
        onDropzoneDrop(e) {
            this.dropEvent = e;
            e.preventDefault();
            return false;
        }
        onDragEnd(e) {
            const offsetX = this.dropEvent ? this.dropEvent.offsetX : null;
            const offsetY = this.dropEvent ? this.dropEvent.offsetY : null;
            this.removeClass(this.refs.iframeDropzone, 'enabled');
            if (!this.dropEvent) {
                return;
            }
            const element = e.target;
            const type = element.getAttribute('data-type');
            const group = element.getAttribute('data-group');
            const key = element.getAttribute('data-key');
            const schema = a.fastCloneDeep(this.schemas[type]);
            if (!(group === 'custom' && key && this.tryUpdateCustomComponentSchema(schema, key))) {
                schema.key = _.camelCase(schema.label || schema.placeholder || schema.type);
            }
            BuilderUtils.uniquify([this.webform.component], schema);
            this.webform.component.components.push(schema);
            this.emit('addComponent', schema);
            schema.overlay = {
                top: offsetY,
                left: offsetX,
                width: 100,
                height: 20
            };
            this.webform.addComponent(schema, {}, null, true);
            this.webform.postMessage({
                name: 'addElement',
                data: schema
            });
            this.dropEvent = null;
        }
    };
});
define('skylark-formio/WizardBuilder',[
    './WebformBuilder',
    './Webform',
    './utils/builder',
    'skylark-lodash'
], function (WebformBuilder, Webform, BuilderUtils, _) {
    'use strict';
    return class WizardBuilder extends WebformBuilder {
        constructor() {
            let element, options;
            if (arguments[0] instanceof HTMLElement || arguments[1]) {
                element = arguments[0];
                options = arguments[1];
            } else {
                options = arguments[0];
            }
            options.skipInit = false;
            super(element, options);
            this._form = { components: [this.getPageConfig(1)] };
            this.page = 0;
            this.options.hooks.attachPanel = (element, component) => {
                if (component.refs.removeComponent) {
                    this.addEventListener(component.refs.removeComponent, 'click', () => {
                        const pageIndex = this.pages.findIndex(page => page.key === component.key);
                        const componentIndex = this._form.components.findIndex(comp => comp.key === component.key);
                        if (pageIndex !== -1) {
                            this.removePage(pageIndex, componentIndex);
                        }
                    });
                }
            };
            const originalRenderComponentsHook = this.options.hooks.renderComponents;
            this.options.hooks.renderComponents = (html, {components, self}) => {
                if (self.type === 'form' && !self.root) {
                    return html;
                } else {
                    return originalRenderComponentsHook(html, {
                        components,
                        self
                    });
                }
            };
            const originalAttachComponentsHook = this.options.hooks.attachComponents;
            this.options.hooks.attachComponents = (element, components, container, component) => {
                if (component.type === 'form' && !component.root) {
                    return element;
                }
                return originalAttachComponentsHook(element, components, container, component);
            };
            this.on('saveComponent', (component, originalComponent) => {
                const webformComponents = this.webform.components.map(({component}) => component);
                if (this._form.components.includes(originalComponent)) {
                    this._form.components[this._form.components.indexOf(originalComponent)] = component;
                    this.rebuild();
                } else if (webformComponents.includes(originalComponent)) {
                    this._form.components.push(component);
                    this.rebuild();
                }
            }, true);
        }
        allowDrop(element) {
            return this.webform && this.webform.refs && this.webform.refs.webform === element ? false : true;
        }
        get pages() {
            return _.filter(this._form.components, { type: 'panel' });
        }
        get currentPage() {
            const pages = this.pages;
            return pages && pages.length >= this.page ? pages[this.page] : null;
        }
        set form(value) {
            this._form = value;
            if (!this._form.components || !Array.isArray(this._form.components)) {
                this._form.components = [];
            }
            if (this.pages.length === 0) {
                const components = this._form.components.filter(component => component.type !== 'button');
                this._form.components = [this.getPageConfig(1, components)];
            }
            this.rebuild();
        }
        get form() {
            return this._form;
        }
        get schema() {
            _.assign(this.currentPage, this.webform._form.components[0]);
            const webform = new Webform(this.options);
            webform.form = this._form;
            return webform.schema;
        }
        render() {
            return this.renderTemplate('builderWizard', {
                sidebar: this.renderTemplate('builderSidebar', {
                    scrollEnabled: this.sideBarScroll,
                    groupOrder: this.groupOrder,
                    groupId: `builder-sidebar-${ this.id }`,
                    groups: this.groupOrder.map(groupKey => this.renderTemplate('builderSidebarGroup', {
                        group: this.groups[groupKey],
                        groupKey,
                        groupId: `builder-sidebar-${ this.id }`,
                        subgroups: this.groups[groupKey].subgroups.map(group => this.renderTemplate('builderSidebarGroup', {
                            group,
                            groupKey: group.key,
                            groupId: `builder-sidebar-${ groupKey }`,
                            subgroups: []
                        }))
                    }))
                }),
                pages: this.pages,
                form: this.webform.render()
            });
        }
        attach(element) {
            this.loadRefs(element, {
                addPage: 'multiple',
                gotoPage: 'multiple'
            });
            this.refs.addPage.forEach(link => {
                this.addEventListener(link, 'click', event => {
                    event.preventDefault();
                    this.addPage();
                });
            });
            this.refs.gotoPage.forEach((link, index) => {
                this.addEventListener(link, 'click', event => {
                    event.preventDefault();
                    this.setPage(index);
                });
            });
            return super.attach(element);
        }
        rebuild() {
            const page = this.currentPage;
            this.webform.form = {
                display: 'form',
                type: 'form',
                components: page ? [page] : []
            };
            return this.redraw();
        }
        addPage() {
            const pageNum = this.pages.length + 1;
            const newPage = this.getPageConfig(pageNum);
            BuilderUtils.uniquify(this._form.components, newPage);
            this._form.components.push(newPage);
            this.emit('saveComponent', newPage);
            return this.rebuild();
        }
        removePage(pageIndex, componentIndex) {
            this._form.components.splice(componentIndex, 1);
            if (pageIndex === this.pages.length) {
                if (pageIndex === 0) {
                    this._form.components.push(this.getPageConfig(1));
                    return this.rebuild();
                } else {
                    return this.setPage(pageIndex - 1);
                }
            } else {
                return this.rebuild();
            }
        }
        setPage(index) {
            if (index === this.page) {
                return;
            }
            this.page = index;
            return this.rebuild();
        }
        getPageConfig(index, components = []) {
            return {
                title: `Page ${ index }`,
                label: `Page ${ index }`,
                type: 'panel',
                key: `page${ index }`,
                components
            };
        }
        pasteComponent(component) {
            if (component instanceof WizardBuilder) {
                return;
            }
            return super.pasteComponent(component);
        }
    };
});
define('skylark-formio/builders/Builders',[
    'skylark-lodash',
    '../PDFBuilder',
    '../WebformBuilder',
    '../WizardBuilder'
], function (_, pdf, webform, wizard) {
    'use strict';
    class Builders {
        static addBuilder(name, builder) {
            Builders.builders[name] = builder;
        }
        static addBuilders(builders) {
            Builders.builders = _.merge(Builders.builders, builders);
        }
        static getBuilder(name) {
            return Builders.builders[name];
        }
        static getBuilders() {
            return Builders.builders;
        }
    };
    Builders.builders = {
        pdf,
        webform,
        wizard
    };

    return Builders;
});
define('skylark-formio/formio.form',[
    './components/index',
    './builders/Builders',
    './components/Components',
    './displays/Displays',
    './templates/Templates',
    './providers/index',
    './validator/Rules',
    './Formio',
    './Form',
    './utils/index'
], function (AllComponents, Builders, Components, Displays, Templates, Providers, Rules, Formio, Form, Utils) {
    'use strict';
    Components.setComponents(AllComponents);
    const registerPlugin = plugin => {
        if (typeof plugin !== 'object') {
            return;
        }
        for (const key of Object.keys(plugin)) {
            const current = plugin.framework || Templates.framework || 'bootstrap';
            switch (key) {
            case 'options':
                Formio.options = plugin.options;
                break;
            case 'templates':
                for (const framework of Object.keys(plugin.templates)) {
                    Templates.extendTemplate(framework, plugin.templates[framework]);
                }
                if (plugin.templates[current]) {
                    Templates.current = plugin.templates[current];
                }
                break;
            case 'components':
                Components.setComponents(plugin.components);
                break;
            case 'framework':
                Templates.framework = plugin.framework;
                break;
            case 'fetch':
                for (const name of Object.keys(plugin.fetch)) {
                    Formio.registerPlugin(plugin.fetch[name], name);
                }
                break;
            case 'providers':
                for (const type of Object.keys(plugin.providers)) {
                    Providers.addProviders(type, plugin.providers[type]);
                }
                break;
            case 'displays':
                Displays.addDisplays(plugin.displays);
                break;
            case 'builders':
                Builders.addBuilders(plugin.builders);
                break;
            case 'rules':
                Rules.addRules(plugin.rules);
                break;
            default:
                console.log('Unknown plugin option', key);
            }
        }
    };
    Formio.use = (...plugins) => {
        plugins.forEach(plugin => {
            if (Array.isArray(plugin)) {
                plugin.forEach(p => registerPlugin(p));
            } else {
                registerPlugin(plugin);
            }
        });
    };
    Formio.loadModules = (path = `${ Formio.getApiUrl() }/externalModules.js`, name = 'externalModules') => {
        Formio.requireLibrary(name, name, path, true).then(modules => {
            Formio.use(modules);
        });
    };
    Formio.Components = Components;
    Formio.Templates = Templates;
    Formio.Builders = Builders;
    Formio.Utils = Utils;
    Formio.Form = Form;
    Formio.Displays = Displays;
    Formio.Providers = Providers;
    Formio.Formio = Formio;
    return {
        Builders,
        Components,
        Displays,
        Providers,
        Templates,
        Utils,
        Form,
        Formio
    };
});
define('skylark-formio/builders/index',['./Builders'], function (Builders) {
    'use strict';
    return Builders;
});
define('skylark-formio/FormBuilder',[
    './Formio',
    './builders/index',
    './Form'
], function (Formio, Builders, Form) {
    'use strict';

    class FormBuilder extends Form {
        constructor(element, form, options) {
            form = form || {};
            options = options || {};
            super(element, form, Object.assign(options, FormBuilder.options, Formio.options && Formio.options.builder ? Formio.options.builder : {}));
        }
        create(display) {
            if (Builders.builders[display]) {
                return new Builders.builders[display](this.element, this.options);
            } else {
                return new Builders.builders['webform'](this.element, this.options);
            }
        }
    };

    FormBuilder.options = {};
    Formio.builder = (...args) => {
        return new FormBuilder(...args).ready;
    };
    

    return Formio.FormBuilder = FormBuilder;

});
define('skylark-formio/main',[
	"./formio.form",
	"./FormBuilder"
],function(formios){
	return formios;
});
define('skylark-formio', ['skylark-formio/main'], function (main) { return main; });


},this);
//# sourceMappingURL=sourcemaps/skylark-formio-all.js.map
