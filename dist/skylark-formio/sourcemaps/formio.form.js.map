{"version":3,"sources":["formio.form.js"],"names":["define","AllComponents","Builders","Components","Displays","Templates","Providers","Rules","Formio","Form","Utils","setComponents","registerPlugin","plugin","key","Object","keys","current","framework","options","templates","extendTemplate","components","name","fetch","type","providers","addProviders","addDisplays","displays","addBuilders","builders","addRules","rules","console","log","use","plugins","forEach","Array","isArray","p","loadModules","path","getApiUrl","requireLibrary","then","modules"],"mappings":";;;;;;;AAAAA,QACI,qBACA,sBACA,0BACA,sBACA,wBACA,oBACA,oBACA,WACA,SACA,iBACD,SAAUC,EAAeC,EAAUC,EAAYC,EAAUC,EAAWC,EAAWC,EAAOC,EAAQC,EAAMC,GACnG,aACAP,EAAWQ,cAAcV,GACzB,MAAMW,EAAiBC,IACnB,GAAsB,iBAAXA,EAGX,IAAK,MAAMC,KAAOC,OAAOC,KAAKH,GAAS,CACnC,MAAMI,EAAUJ,EAAOK,WAAab,EAAUa,WAAa,YAC3D,OAAQJ,GACR,IAAK,UACDN,EAAOW,QAAUN,EAAOM,QACxB,MACJ,IAAK,YACD,IAAK,MAAMD,KAAaH,OAAOC,KAAKH,EAAOO,WACvCf,EAAUgB,eAAeH,EAAWL,EAAOO,UAAUF,IAErDL,EAAOO,UAAUH,KACjBZ,EAAUY,QAAUJ,EAAOO,UAAUH,IAEzC,MACJ,IAAK,aACDd,EAAWQ,cAAcE,EAAOS,YAChC,MACJ,IAAK,YACDjB,EAAUa,UAAYL,EAAOK,UAC7B,MACJ,IAAK,QACD,IAAK,MAAMK,KAAQR,OAAOC,KAAKH,EAAOW,OAClChB,EAAOI,eAAeC,EAAOW,MAAMD,GAAOA,GAE9C,MACJ,IAAK,YACD,IAAK,MAAME,KAAQV,OAAOC,KAAKH,EAAOa,WAClCpB,EAAUqB,aAAaF,EAAMZ,EAAOa,UAAUD,IAElD,MACJ,IAAK,WACDrB,EAASwB,YAAYf,EAAOgB,UAC5B,MACJ,IAAK,WACD3B,EAAS4B,YAAYjB,EAAOkB,UAC5B,MACJ,IAAK,QACDxB,EAAMyB,SAASnB,EAAOoB,OACtB,MACJ,QACIC,QAAQC,IAAI,wBAAyBrB,MA0BjD,OAtBAN,EAAO4B,IAAM,KAAIC,KACbA,EAAQC,QAAQzB,IACR0B,MAAMC,QAAQ3B,GACdA,EAAOyB,QAAQG,GAAK7B,EAAe6B,IAEnC7B,EAAeC,OAI3BL,EAAOkC,YAAc,EAACC,KAAWnC,EAAOoC,iCAAmCrB,EAAO,qBAC9Ef,EAAOqC,eAAetB,EAAMA,EAAMoB,GAAM,GAAMG,KAAKC,IAC/CvC,EAAO4B,IAAIW,OAGnBvC,EAAOL,WAAaA,EACpBK,EAAOH,UAAYA,EACnBG,EAAON,SAAWA,EAClBM,EAAOE,MAAQA,EACfF,EAAOC,KAAOA,EACdD,EAAOJ,SAAWA,EAClBI,EAAOF,UAAYA,EACnBE,EAAOA,OAASA,GAEZN,SAAAA,EACAC,WAAAA,EACAC,SAAAA,EACAE,UAAAA,EACAD,UAAAA,EACAK,MAAAA,EACAD,KAAAA,EACAD,OAAAA","file":"../formio.form.js","sourcesContent":["define([\n    './components/index',\n    './builders/Builders',\n    './components/Components',\n    './displays/Displays',\n    './templates/Templates',\n    './providers/index',\n    './validator/Rules',\n    './Formio',\n    './Form',\n    './utils/index'\n], function (AllComponents, Builders, Components, Displays, Templates, Providers, Rules, Formio, Form, Utils) {\n    'use strict';\n    Components.setComponents(AllComponents);\n    const registerPlugin = plugin => {\n        if (typeof plugin !== 'object') {\n            return;\n        }\n        for (const key of Object.keys(plugin)) {\n            const current = plugin.framework || Templates.framework || 'bootstrap';\n            switch (key) {\n            case 'options':\n                Formio.options = plugin.options;\n                break;\n            case 'templates':\n                for (const framework of Object.keys(plugin.templates)) {\n                    Templates.extendTemplate(framework, plugin.templates[framework]);\n                }\n                if (plugin.templates[current]) {\n                    Templates.current = plugin.templates[current];\n                }\n                break;\n            case 'components':\n                Components.setComponents(plugin.components);\n                break;\n            case 'framework':\n                Templates.framework = plugin.framework;\n                break;\n            case 'fetch':\n                for (const name of Object.keys(plugin.fetch)) {\n                    Formio.registerPlugin(plugin.fetch[name], name);\n                }\n                break;\n            case 'providers':\n                for (const type of Object.keys(plugin.providers)) {\n                    Providers.addProviders(type, plugin.providers[type]);\n                }\n                break;\n            case 'displays':\n                Displays.addDisplays(plugin.displays);\n                break;\n            case 'builders':\n                Builders.addBuilders(plugin.builders);\n                break;\n            case 'rules':\n                Rules.addRules(plugin.rules);\n                break;\n            default:\n                console.log('Unknown plugin option', key);\n            }\n        }\n    };\n    Formio.use = (...plugins) => {\n        plugins.forEach(plugin => {\n            if (Array.isArray(plugin)) {\n                plugin.forEach(p => registerPlugin(p));\n            } else {\n                registerPlugin(plugin);\n            }\n        });\n    };\n    Formio.loadModules = (path = `${ Formio.getApiUrl() }/externalModules.js`, name = 'externalModules') => {\n        Formio.requireLibrary(name, name, path, true).then(modules => {\n            Formio.use(modules);\n        });\n    };\n    Formio.Components = Components;\n    Formio.Templates = Templates;\n    Formio.Builders = Builders;\n    Formio.Utils = Utils;\n    Formio.Form = Form;\n    Formio.Displays = Displays;\n    Formio.Providers = Providers;\n    Formio.Formio = Formio;\n    return {\n        Builders,\n        Components,\n        Displays,\n        Providers,\n        Templates,\n        Utils,\n        Form,\n        Formio\n    };\n});"]}