{"version":3,"sources":["Wizard.js"],"names":["define","NativePromise","_","Webform","Formio","a","[object Object]","element","options","arguments","HTMLElement","super","this","pages","prefixComps","suffixComps","components","originalComponents","page","currentNextPage","_seenPages","next","getNextPage","isNumber","length","isNull","args","all","filter","identity","p","index","includes","submitting","getPages","isLastPage","getComponents","forEach","resetValue","setPristine","buttonSettings","defaults","showPrevious","showNext","showSubmit","showCancel","readOnly","breadcrumbSettings","clickable","onReady","init","setComponentSchema","wizardKey","id","form","wizard","value","buttons","name","method","button","hasButton","renderContext","isBreadcrumbClickable","panels","map","component","currentPage","ctx","renderTemplate","className","getClassName","wizardHeader","wizardNav","renderComponents","builderMode","navElement","querySelector","detachNav","outerHTML","loadRefs","attachNav","headerElement","detachHeader","attachHeader","promises","attachComponents","refs","then","emit","get","each","buttonElement","addEventListener","event","preventDefault","setAttribute","setLoading","removeAttribute","catch","link","setPage","removeEventListener","visible","currentPages","pageOptions","clone","type","key","title","item","isVisible","checkCondition","data","push","createComponent","eachComponent","removeComponent","establishPages","num","resolve","full","pageFieldLogic","concat","redraw","checkValidity","submission","reject","originalComponent","fastCloneDeep","fieldLogic","disabled","shouldDisabled","nextPage","evaluate","pageNum","parseInt","isNaN","isFinite","getPageIndexByKey","beforeSubmit","hook","err","showErrors","beforePage","checkData","comp","getPreviousPage","noconfirm","cancel","pageIndex","schema","pageKeys","uniqueKey","Object","keys","newPage","label","setForm","flags","changed","setValue","firstNonNil","show","undefined","pageId","modified","onChange","alert","submitted","currentPanels","panel","isEqual","redrawHeader","redrawNavigation","dirty","row","currentPageOnly","setCustomValidity","reduce","check","errors","getComponent","focusOnComponent"],"mappings":"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","file":"../Wizard.js","sourcesContent":["define([\n    './vendors/getify/npo',\n    'skylark-lodash',\n    './Webform',\n    './Formio',\n    './utils/utils'\n], function (NativePromise, _, Webform, Formio, a) {\n    'use strict';\n    return class Wizard extends Webform {\n        constructor() {\n            let element, options;\n            if (arguments[0] instanceof HTMLElement || arguments[1]) {\n                element = arguments[0];\n                options = arguments[1];\n            } else {\n                options = arguments[0];\n            }\n            super(element, options);\n            this.pages = [];\n            this.prefixComps = [];\n            this.suffixComps = [];\n            this.components = [];\n            this.originalComponents = [];\n            this.page = 0;\n            this.currentNextPage = 0;\n            this._seenPages = [0];\n        }\n        isLastPage() {\n            const next = this.getNextPage();\n            if (_.isNumber(next)) {\n                return 0 < next && next >= this.pages.length;\n            }\n            return _.isNull(next);\n        }\n        getPages(args = {}) {\n            const {\n                all = false\n            } = args;\n            const pages = this.pages.filter(all ? _.identity : (p, index) => this._seenPages.includes(index));\n            return pages;\n        }\n        getComponents() {\n            return this.submitting ? this.getPages({ all: this.isLastPage() }) : super.getComponents();\n        }\n        resetValue() {\n            this.getPages({ all: true }).forEach(page => page.resetValue());\n            this.setPristine(true);\n        }\n        init() {\n            this.options.buttonSettings = _.defaults(this.options.buttonSettings, {\n                showPrevious: true,\n                showNext: true,\n                showSubmit: true,\n                showCancel: !this.options.readOnly\n            });\n            this.options.breadcrumbSettings = _.defaults(this.options.breadcrumbSettings, { clickable: true });\n            this.page = 0;\n            const onReady = super.init();\n            this.setComponentSchema();\n            return onReady;\n        }\n        get wizardKey() {\n            return `wizard-${ this.id }`;\n        }\n        get form() {\n            return this.wizard;\n        }\n        set form(value) {\n            super.form = value;\n        }\n        get buttons() {\n            const buttons = {};\n            [\n                {\n                    name: 'cancel',\n                    method: 'cancel'\n                },\n                {\n                    name: 'previous',\n                    method: 'prevPage'\n                },\n                {\n                    name: 'next',\n                    method: 'nextPage'\n                },\n                {\n                    name: 'submit',\n                    method: 'submit'\n                }\n            ].forEach(button => {\n                if (this.hasButton(button.name)) {\n                    buttons[button.name] = button;\n                }\n            });\n            return buttons;\n        }\n        get renderContext() {\n            return {\n                wizardKey: this.wizardKey,\n                isBreadcrumbClickable: this.isBreadcrumbClickable(),\n                panels: this.pages.map(page => page.component),\n                buttons: this.buttons,\n                currentPage: this.page\n            };\n        }\n        render() {\n            const ctx = this.renderContext;\n            return this.renderTemplate('wizard', {\n                ...ctx,\n                className: super.getClassName(),\n                wizardHeader: this.renderTemplate('wizardHeader', ctx),\n                wizardNav: this.renderTemplate('wizardNav', ctx),\n                components: this.renderComponents([\n                    ...this.prefixComps,\n                    ...this.currentPage.components,\n                    ...this.suffixComps\n                ])\n            }, this.builderMode ? 'builder' : 'form');\n        }\n        redrawNavigation() {\n            if (this.element) {\n                let navElement = this.element.querySelector(`#${ this.wizardKey }-nav`);\n                if (navElement) {\n                    this.detachNav();\n                    navElement.outerHTML = this.renderTemplate('wizardNav', this.renderContext);\n                    navElement = this.element.querySelector(`#${ this.wizardKey }-nav`);\n                    this.loadRefs(navElement, {\n                        [`${ this.wizardKey }-cancel`]: 'single',\n                        [`${ this.wizardKey }-previous`]: 'single',\n                        [`${ this.wizardKey }-next`]: 'single',\n                        [`${ this.wizardKey }-submit`]: 'single'\n                    });\n                    this.attachNav();\n                }\n            }\n        }\n        redrawHeader() {\n            if (this.element) {\n                let headerElement = this.element.querySelector(`#${ this.wizardKey }-header`);\n                if (headerElement) {\n                    this.detachHeader();\n                    headerElement.outerHTML = this.renderTemplate('wizardHeader', this.renderContext);\n                    headerElement = this.element.querySelector(`#${ this.wizardKey }-header`);\n                    this.loadRefs(headerElement, { [`${ this.wizardKey }-link`]: 'multiple' });\n                    this.attachHeader();\n                }\n            }\n        }\n        attach(element) {\n            this.element = element;\n            this.loadRefs(element, {\n                [this.wizardKey]: 'single',\n                [`${ this.wizardKey }-cancel`]: 'single',\n                [`${ this.wizardKey }-previous`]: 'single',\n                [`${ this.wizardKey }-next`]: 'single',\n                [`${ this.wizardKey }-submit`]: 'single',\n                [`${ this.wizardKey }-link`]: 'multiple'\n            });\n            const promises = this.attachComponents(this.refs[this.wizardKey], [\n                ...this.prefixComps,\n                ...this.currentPage.components,\n                ...this.suffixComps\n            ]);\n            this.attachNav();\n            this.attachHeader();\n            return promises.then(() => this.emit('render'));\n        }\n        isBreadcrumbClickable() {\n            return _.get(this.options, 'breadcrumbSettings.clickable', true);\n        }\n        attachNav() {\n            _.each(this.buttons, button => {\n                const buttonElement = this.refs[`${ this.wizardKey }-${ button.name }`];\n                this.addEventListener(buttonElement, 'click', event => {\n                    event.preventDefault();\n                    buttonElement.setAttribute('disabled', 'disabled');\n                    this.setLoading(buttonElement, true);\n                    this[button.method]().then(() => {\n                        buttonElement.removeAttribute('disabled');\n                        this.setLoading(buttonElement, false);\n                    }).catch(() => {\n                        buttonElement.removeAttribute('disabled');\n                        this.setLoading(buttonElement, false);\n                    });\n                });\n            });\n        }\n        attachHeader() {\n            if (this.isBreadcrumbClickable()) {\n                this.refs[`${ this.wizardKey }-link`].forEach((link, index) => {\n                    this.addEventListener(link, 'click', event => {\n                        this.emit('wizardNavigationClicked', this.pages[index]);\n                        event.preventDefault();\n                        return this.setPage(index).then(() => {\n                            this.emit('wizardPageSelected', this.pages[index], index);\n                        });\n                    });\n                });\n            }\n        }\n        detachNav() {\n            _.each(this.buttons, button => {\n                this.removeEventListener(this.refs[`${ this.wizardKey }-${ button.name }`], 'click');\n            });\n        }\n        detachHeader() {\n            this.refs[`${ this.wizardKey }-link`].forEach(link => {\n                this.removeEventListener(link, 'click');\n            });\n        }\n        establishPages() {\n            this.pages = [];\n            this.prefixComps = [];\n            this.suffixComps = [];\n            const visible = [];\n            const currentPages = {};\n            const pageOptions = _.clone(this.options);\n            if (this.components && this.components.length) {\n                this.components.map(page => {\n                    if (page.component.type === 'panel') {\n                        currentPages[page.component.key || page.component.title] = page;\n                    }\n                });\n            }\n            if (this.originalComponents) {\n                this.originalComponents.forEach(item => {\n                    if (item.type === 'panel') {\n                        if (!item.key) {\n                            item.key = item.title;\n                        }\n                        let page = currentPages[item.key];\n                        const isVisible = a.checkCondition(item, this.data, this.data, this.component, this);\n                        if (isVisible) {\n                            visible.push(item);\n                            if (page) {\n                                this.pages.push(page);\n                            }\n                        }\n                        if (!page && isVisible) {\n                            page = this.createComponent(item, pageOptions);\n                            this.pages.push(page);\n                            page.eachComponent(component => {\n                                component.page = this.pages.length - 1;\n                            });\n                        } else if (page && !isVisible) {\n                            this.removeComponent(page);\n                        }\n                    } else if (item.type !== 'button') {\n                        if (!this.pages.length) {\n                            this.prefixComps.push(this.createComponent(item, pageOptions));\n                        } else {\n                            this.suffixComps.push(this.createComponent(item, pageOptions));\n                        }\n                    }\n                });\n            }\n            return visible;\n        }\n        addComponents() {\n            this.establishPages();\n        }\n        setPage(num) {\n            if (num === this.page) {\n                return NativePromise.resolve();\n            }\n            if (!this.wizard.full && num >= 0 && num < this.pages.length) {\n                this.page = num;\n                this.pageFieldLogic(num);\n                this.getNextPage();\n                if (!this._seenPages.includes(num)) {\n                    this._seenPages = this._seenPages.concat(num);\n                }\n                this.redraw().then(() => {\n                    if (!this.options.readOnly) {\n                        this.checkValidity(this.submission.data, false, this.submission.data, true);\n                    }\n                });\n                return NativePromise.resolve();\n            } else if (this.wizard.full || !this.pages.length) {\n                this.redraw();\n                return NativePromise.resolve();\n            }\n            return NativePromise.reject('Page not found');\n        }\n        pageFieldLogic(page) {\n            this.component = this.pages[page].component;\n            this.originalComponent = a.fastCloneDeep(this.component);\n            this.fieldLogic(this.data);\n            this.disabled = this.shouldDisabled;\n        }\n        get currentPage() {\n            return this.pages && this.pages.length >= this.page ? this.pages[this.page] : { components: [] };\n        }\n        getNextPage() {\n            const data = this.submission.data;\n            const form = this.pages[this.page].component;\n            if (form) {\n                const page = this.pages.length > this.page + 1 ? this.page + 1 : -1;\n                if (form.nextPage) {\n                    const next = this.evaluate(form.nextPage, {\n                        next: page,\n                        data,\n                        page,\n                        form\n                    }, 'next');\n                    if (next === null) {\n                        this.currentNextPage = null;\n                        return null;\n                    }\n                    const pageNum = parseInt(next, 10);\n                    if (!isNaN(parseInt(pageNum, 10)) && isFinite(pageNum)) {\n                        this.currentNextPage = pageNum;\n                        return pageNum;\n                    }\n                    this.currentNextPage = this.getPageIndexByKey(next);\n                    return this.currentNextPage;\n                }\n                this.currentNextPage = page;\n                return page;\n            }\n            this.currentNextPage = null;\n            return null;\n        }\n        getPreviousPage() {\n            return this.page - 1;\n        }\n        beforeSubmit() {\n            return NativePromise.all(this.getPages().map(page => {\n                page.options.beforeSubmit = true;\n                return page.beforeSubmit();\n            }));\n        }\n        beforePage(next) {\n            return new NativePromise((resolve, reject) => {\n                this.hook(next ? 'beforeNext' : 'beforePrev', this.currentPage, this.submission, err => {\n                    if (err) {\n                        this.showErrors(err, true);\n                        reject(err);\n                    }\n                    const form = this.currentPage;\n                    if (form) {\n                        form.beforePage(next).then(resolve).catch(reject);\n                    } else {\n                        resolve();\n                    }\n                });\n            });\n        }\n        nextPage() {\n            if (this.options.readOnly) {\n                return this.setPage(this.getNextPage()).then(() => {\n                    this.emit('nextPage', {\n                        page: this.page,\n                        submission: this.submission\n                    });\n                });\n            }\n            if (this.checkValidity(this.submission.data, true, this.submission.data, true)) {\n                this.checkData(this.submission.data);\n                return this.beforePage(true).then(() => {\n                    return this.setPage(this.getNextPage()).then(() => {\n                        this.emit('nextPage', {\n                            page: this.page,\n                            submission: this.submission\n                        });\n                    });\n                });\n            } else {\n                this.currentPage.components.forEach(comp => comp.setPristine(false));\n                return NativePromise.reject(this.showErrors([], true));\n            }\n        }\n        prevPage() {\n            return this.beforePage().then(() => {\n                return this.setPage(this.getPreviousPage()).then(() => {\n                    this.emit('prevPage', {\n                        page: this.page,\n                        submission: this.submission\n                    });\n                });\n            });\n        }\n        cancel(noconfirm) {\n            if (super.cancel(noconfirm)) {\n                this.setPristine(true);\n                return this.setPage(0).then(() => {\n                    this.redraw();\n                    return this.page;\n                });\n            }\n            return NativePromise.resolve();\n        }\n        getPageIndexByKey(key) {\n            let pageIndex = this.page;\n            this.pages.forEach((page, index) => {\n                if (page.component.key === key) {\n                    pageIndex = index;\n                    return false;\n                }\n            });\n            return pageIndex;\n        }\n        get schema() {\n            return this.wizard;\n        }\n        setComponentSchema() {\n            const pageKeys = {};\n            this.originalComponents = [];\n            this.component.components.map(item => {\n                if (item.type === 'panel') {\n                    item.key = a.uniqueKey(pageKeys, item.key || 'panel');\n                    pageKeys[item.key] = true;\n                }\n                this.originalComponents.push(_.clone(item));\n            });\n            if (!Object.keys(pageKeys).length) {\n                const newPage = {\n                    type: 'panel',\n                    title: 'Page 1',\n                    label: 'Page 1',\n                    key: 'page1',\n                    components: this.component.components\n                };\n                this.component.components = [newPage];\n                this.originalComponents.push(_.clone(newPage));\n            }\n        }\n        setForm(form) {\n            if (!form) {\n                return;\n            }\n            this.wizard = form;\n            this.component.components = form.components || [];\n            this.setComponentSchema();\n            return super.setForm(form);\n        }\n        setValue(submission, flags = {}) {\n            const changed = super.setValue(submission, flags);\n            this.pageFieldLogic(this.page);\n            return changed;\n        }\n        isClickable(page, index) {\n            return this.page !== index && a.firstNonNil([\n                _.get(page, 'breadcrumbClickable'),\n                this.options.breadcrumbSettings.clickable\n            ]);\n        }\n        hasButton(name, nextPage) {\n            const currentPage = this.currentPage;\n            if (name === 'previous') {\n                const show = a.firstNonNil([\n                    _.get(currentPage, 'buttonSettings.previous'),\n                    this.options.buttonSettings.showPrevious\n                ]);\n                return this.getPreviousPage() > -1 && show;\n            }\n            nextPage = nextPage === undefined ? this.getNextPage() : nextPage;\n            if (name === 'next') {\n                const show = a.firstNonNil([\n                    _.get(currentPage, 'buttonSettings.next'),\n                    this.options.buttonSettings.showNext\n                ]);\n                return nextPage !== null && nextPage !== -1 && show;\n            }\n            if (name === 'cancel') {\n                return a.firstNonNil([\n                    _.get(currentPage, 'buttonSettings.cancel'),\n                    this.options.buttonSettings.showCancel\n                ]);\n            }\n            if (name === 'submit') {\n                const show = a.firstNonNil([\n                    _.get(currentPage, 'buttonSettings.submit'),\n                    this.options.buttonSettings.showSubmit\n                ]);\n                return show && !this.options.readOnly && (nextPage === null || this.page === this.pages.length - 1);\n            }\n            return true;\n        }\n        pageId(page) {\n            if (page.key) {\n                return `${ page.key }-${ page.title }`;\n            } else if (page.components && page.components.length > 0) {\n                return this.pageId(page.components[0]);\n            } else {\n                return page.title;\n            }\n        }\n        onChange(flags, changed, modified) {\n            super.onChange(flags, changed, modified);\n            if (this.alert && !this.submitted) {\n                this.checkValidity(this.submission.data, false, this.submission.data, true);\n                this.showErrors([], true);\n            }\n            const currentPanels = this.pages.map(page => page.component.key);\n            const panels = this.establishPages().map(panel => panel.key);\n            const currentNextPage = this.currentNextPage;\n            if (!_.isEqual(panels, currentPanels)) {\n                this.redrawHeader();\n            }\n            if (currentNextPage !== this.getNextPage()) {\n                this.redrawNavigation();\n            }\n        }\n        checkValidity(data, dirty, row, currentPageOnly) {\n            if (!this.undefined(row, data)) {\n                this.setCustomValidity('');\n                return true;\n            }\n            const components = !currentPageOnly || this.isLastPage() ? this.getComponents() : this.currentPage.components;\n            return components.reduce((check, comp) => comp.checkValidity(data, dirty, row) && check, true);\n        }\n        get errors() {\n            if (!this.isLastPage()) {\n                return this.currentPage.errors;\n            }\n            return super.errors;\n        }\n        focusOnComponent(key) {\n            let pageIndex = 0;\n            const [page] = this.pages.filter((page, index) => {\n                if (page.getComponent(key)) {\n                    pageIndex = index;\n                    return true;\n                }\n                return false;\n            });\n            if (page && page !== this.currentPage) {\n                return this.setPage(pageIndex).then(() => {\n                    this.checkValidity(this.submission.data, true, this.submission.data);\n                    this.showErrors();\n                    super.focusOnComponent(key);\n                });\n            }\n            return super.focusOnComponent(key);\n        }\n    };\n    Wizard.setBaseUrl = Formio.setBaseUrl;\n    Wizard.setApiUrl = Formio.setApiUrl;\n    Wizard.setAppUrl = Formio.setAppUrl;\n});"]}