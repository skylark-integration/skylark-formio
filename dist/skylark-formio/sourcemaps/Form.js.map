{"version":3,"sources":["Form.js"],"names":["define","Element","Formio","Displays","templates","FormioUtils","NativePromise","Form","[object Object]","args","options","HTMLElement","form","Object","assign","super","this","ready","resolve","reject","readyResolve","readyReject","instance","element","events","setForm","then","catch","display","flatten","renderMode","displays","formParam","err","components","label","tag","className","attrs","attr","value","key","type","input","content","message","result","formio","error","getSubmission","submission","loadForm","errorForm","create","url","nosubmit","_form","submissionId","loadSubmission","destroy","firstChild","removeChild","embed","src","id","Math","random","toString","substring","class","code","styles","document","write","attempts","wait","setInterval","formElement","getElementById","clearInterval","dirty","sanitize","innerHTML","template","loader","bootstrap","setContent","render","html","attach","param","emit"],"mappings":"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","file":"../Form.js","sourcesContent":["define([\n    './Element',\n    './Formio',\n    './displays/index',\n    './templates/index',\n    './utils/utils',\n    './vendors/getify/npo'\n], function (Element, Formio, Displays, templates, FormioUtils, NativePromise) {\n    'use strict';\n    return class Form extends Element {\n        constructor(...args) {\n            let options = args[0] instanceof HTMLElement ? args[2] : args[1];\n            if (Formio.options && Formio.options.form) {\n                options = Object.assign(options, Formio.options.form);\n            }\n            super(options);\n            this.ready = new NativePromise((resolve, reject) => {\n                this.readyResolve = resolve;\n                this.readyReject = reject;\n            });\n            this.instance = null;\n            if (args[0] instanceof HTMLElement) {\n                this.element = args[0];\n                this.options = args[2] || {};\n                this.options.events = this.events;\n                this.setForm(args[1]).then(() => this.readyResolve(this.instance)).catch(this.readyReject);\n            } else if (args[0]) {\n                this.element = null;\n                this.options = args[1] || {};\n                this.options.events = this.events;\n                this.setForm(args[0]).then(() => this.readyResolve(this.instance)).catch(this.readyReject);\n            } else {\n                this.element = null;\n                this.options = {};\n                this.options.events = this.events;\n            }\n            this.display = '';\n        }\n        create(display) {\n            if (this.options && (this.options.flatten || this.options.renderMode === 'flat')) {\n                display = 'form';\n            }\n            this.display = display;\n            if (Displays.displays[display]) {\n                return new Displays.displays[display](this.element, this.options);\n            } else {\n                return new Displays.displays['webform'](this.element, this.options);\n            }\n        }\n        set form(formParam) {\n            return this.setForm(formParam);\n        }\n        errorForm(err) {\n            return {\n                components: [{\n                        'label': 'HTML',\n                        'tag': 'div',\n                        'className': 'error error-message alert alert-danger ui red message',\n                        'attrs': [{\n                                'attr': 'role',\n                                'value': 'alert'\n                            }],\n                        'key': 'errorMessage',\n                        'type': 'htmlelement',\n                        'input': false,\n                        'content': typeof err === 'string' ? err : err.message\n                    }]\n            };\n        }\n        setForm(formParam) {\n            let result;\n            formParam = formParam || this.form;\n            if (typeof formParam === 'string') {\n                const formio = new Formio(formParam);\n                let error;\n                result = this.getSubmission(formio).catch(err => {\n                    error = err;\n                }).then(submission => {\n                    return formio.loadForm().catch(err => {\n                        error = err;\n                    }).then(form => {\n                        if (error) {\n                            form = this.errorForm(error);\n                        }\n                        this.instance = this.instance || this.create(form.display);\n                        this.instance.url = formParam;\n                        this.instance.nosubmit = false;\n                        this._form = this.instance.form = form;\n                        if (submission) {\n                            this.instance.submission = submission;\n                        }\n                        if (error) {\n                            throw error;\n                        }\n                        return this.instance;\n                    });\n                });\n            } else {\n                this.instance = this.instance || this.create(formParam.display);\n                this._form = this.instance.form = formParam;\n                result = this.instance.ready;\n            }\n            return result.then(() => {\n                this.element = this.instance.element;\n                return this.instance;\n            });\n        }\n        getSubmission(formio) {\n            if (formio.submissionId) {\n                return formio.loadSubmission();\n            }\n            return NativePromise.resolve();\n        }\n        get form() {\n            return this._form;\n        }\n        setDisplay(display) {\n            if (this.display === display && this.instance) {\n                return NativePromise.resolve(this.instance);\n            }\n            this.form.display = display;\n            this.instance.destroy();\n            this.instance = this.create(display);\n            return this.setForm(this.form);\n        }\n        empty() {\n            if (this.element) {\n                while (this.element.firstChild) {\n                    this.element.removeChild(this.element.firstChild);\n                }\n            }\n        }\n        static embed(embed) {\n            return new NativePromise(resolve => {\n                if (!embed || !embed.src) {\n                    resolve();\n                }\n                const id = this.id || `formio-${ Math.random().toString(36).substring(7) }`;\n                const className = embed.class || 'formio-form-wrapper';\n                let code = embed.styles ? `<link rel=\"stylesheet\" href=\"${ embed.styles }\">` : '';\n                code += `<div id=\"${ id }\" class=\"${ className }\"></div>`;\n                document.write(code);\n                let attempts = 0;\n                const wait = setInterval(() => {\n                    attempts++;\n                    const formElement = document.getElementById(id);\n                    if (formElement || attempts > 10) {\n                        resolve(new Form(formElement, embed.src).ready);\n                        clearInterval(wait);\n                    }\n                }, 10);\n            });\n        }\n        sanitize(dirty) {\n            return FormioUtils.sanitize(dirty, this.options);\n        }\n        setContent(element, content) {\n            if (element instanceof HTMLElement) {\n                element.innerHTML = this.sanitize(content);\n                return true;\n            }\n            return false;\n        }\n        build() {\n            if (!this.instance) {\n                return NativePromise.reject('Form not ready. Use form.ready promise');\n            }\n            if (!this.element) {\n                return NativePromise.reject('No DOM element for form.');\n            }\n            const template = this.options && this.options.template ? this.options.template : 'bootstrap';\n            const loader = templates[template].loader || templates.bootstrap.loader;\n            this.setContent(this.element, loader.form);\n            return this.render().then(html => {\n                this.setContent(this.element, html);\n                return this.attach(this.element).then(() => this.instance);\n            }).then(param => {\n                this.emit('build', param);\n                return param;\n            });\n        }\n        render() {\n            if (!this.instance) {\n                return NativePromise.reject('Form not ready. Use form.ready promise');\n            }\n            return NativePromise.resolve(this.instance.render()).then(param => {\n                this.emit('render', param);\n                return param;\n            });\n        }\n        attach(element) {\n            if (!this.instance) {\n                return NativePromise.reject('Form not ready. Use form.ready promise');\n            }\n            this.element = element;\n            return this.instance.attach(this.element).then(param => {\n                this.emit('attach', param);\n                return param;\n            });\n        }\n    };\n    Formio.embedForm = embed => Form.embed(embed);\n    Formio.createForm = (...args) => {\n        return new Form(...args).ready;\n    };\n    Formio.Form = Form;\n});"]}