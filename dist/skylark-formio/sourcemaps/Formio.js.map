{"version":3,"sources":["Formio.js"],"names":["define","NativePromise","fetchPonyfill","EventEmitter","cookies","Providers","_","utils","jwtDecode","_intersection","intersection","_get","get","_cloneDeep","cloneDeep","_defaults","defaults","fetch","Headers","Promise","isBoolean","val","isNil","undefined","isObject","cloneResponse","response","copy","Array","isArray","skip","limit","serverCount","Formio","[object Object]","path","options","this","base","projectsUrl","projectUrl","projectId","roleUrl","rolesUrl","roleId","formUrl","formsUrl","formId","submissionsUrl","submissionUrl","submissionId","actionsUrl","actionId","actionUrl","vsUrl","vId","vUrl","query","hasOwnProperty","baseUrl","window","location","href","match","project","projectRegEx","isProjectUrl","search","noProject","indexOf","hostparts","getUrlParts","parts","hostName","queryparts","length","split","registerPath","name","regex","RegExp","registerItems","items","staticBase","i","item","newBase","replace","pathParts","shift","join","includes","test","subRegEx","subs","pathType","projectUrlSet","type","opts","_url","reject","cache","makeRequest","serialize","params","data","_id","method","reqUrl","args","load","save","delete","makeStaticRequest","index","then","currentForm","revisions","isNaN","parseInt","revisionForm","components","settings","Object","assign","catch","submission","_fvid","id","isObjectId","resolve","loadProject","loadForm","form","currentUser","accessInfo","getToken","formio","token","setToken","expire","allowed","authUrl","ignoreCache","header","x-expire","x-allow","_form","getDownloadUrl","apiUrl","download","getTempToken","tempToken","key","storage","file","fileName","dir","progressCallback","url","fileKey","requestArgs","provider","request","pluginWait","pluginGet","result","Provider","getProvider","uploadFile","pluginAlter","downloadFile","user","all","loadSubmission","results","roles","access","permMap","create","read","update","perms","edit","roleName","role","default","push","admin","submissionAccess","permission","perm","scope","owner","eachComponent","component","defaultPermission","value","forEach","group","userPermissions","getUser","anonPerms","setUser","obj","_interpolate","str","interpolate","p","encodeURIComponent","toUpperCase","getRequestArgs","headers","Accept","Content-type","cacheKey","btoa","noToken","append","headerObj","mode","body","JSON","stringify","namespace","requestToken","ok","status","events","emit","json","text","error","tokenIntroduced","external","console","warn","range","skipLimit","Number","getHeaders","err","message","networkError","tokens","formioToken","tokenName","fromUser","fromToken","localStorage","removeItem","erase","setItem","set","decodedTokenName","decode","getItem","e","userName","parse","setBaseUrl","getBaseUrl","plugin","beforeLength","plugins","filter","__name","deregister","noop","call","sort","a","b","priority","init","pluginFn","map","callPlugin","reduce","identity","clearCache","_pageQuery","paths","hashes","hash","substr","decodeURIComponent","Authorization","pageQuery","saml","retVal","uri","toString","substring","history","replaceState","document","title","relay","encodeURI","OktaAuth","errorMessage","Okta","authClient","tokenManager","accessToken","oAuthCurrentUser","parseFromUrl","add","getWithRedirect","responseType","scopes","samlInit","oktaInit","property","src","polling","libraries","ready","callbackName","lib","attrs","elementType","defer","async","referrerpolicy","rel","element","createElement","setAttribute","attr","head","appendChild","interval","setInterval","clearInterval","version","wildcard","maxListeners","global"],"mappings":"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","file":"../Formio.js","sourcesContent":["define([\n    './vendors/getify/npo',\n    './vendors/fetch-ponyfill/fetch',\n    './EventEmitter',\n    './vendors/browser-cookies/cookies',\n    './providers/index',\n    \"skylark-lodash\",\n    './utils/utils',\n    '../vendors/jwt-decode/decode',\n    './polyfills/index'\n], function (NativePromise, fetchPonyfill, EventEmitter, cookies, Providers, _ , utils, jwtDecode) {\n    'use strict';\n\n    const  _intersection = _.intersection, \n           _get = _.get, \n           _cloneDeep = _.cloneDeep, \n           _defaults = _.defaults;\n\n\n    const {fetch, Headers} = fetchPonyfill({ Promise: NativePromise });\n    const isBoolean = val => typeof val === typeof true;\n    const isNil = val => val === null || val === undefined;\n    const isObject = val => val && typeof val === 'object';\n    function cloneResponse(response) {\n        const copy = _cloneDeep(response);\n        if (Array.isArray(response)) {\n            copy.skip = response.skip;\n            copy.limit = response.limit;\n            copy.serverCount = response.serverCount;\n        }\n        return copy;\n    }\n    class Formio {\n        constructor(path, options = {}) {\n            if (!(this instanceof Formio)) {\n                return new Formio(path);\n            }\n            this.base = '';\n            this.projectsUrl = '';\n            this.projectUrl = '';\n            this.projectId = '';\n            this.roleUrl = '';\n            this.rolesUrl = '';\n            this.roleId = '';\n            this.formUrl = '';\n            this.formsUrl = '';\n            this.formId = '';\n            this.submissionsUrl = '';\n            this.submissionUrl = '';\n            this.submissionId = '';\n            this.actionsUrl = '';\n            this.actionId = '';\n            this.actionUrl = '';\n            this.vsUrl = '';\n            this.vId = '';\n            this.vUrl = '';\n            this.query = '';\n            this.path = path;\n            this.options = options;\n            if (options.hasOwnProperty('base')) {\n                this.base = options.base;\n            } else if (Formio.baseUrl) {\n                this.base = Formio.baseUrl;\n            } else {\n                this.base = window.location.href.match(/http[s]?:\\/\\/api./)[0];\n            }\n            if (!path) {\n                this.projectUrl = Formio.projectUrl || `${ this.base }/project`;\n                this.projectsUrl = `${ this.base }/project`;\n                this.projectId = false;\n                this.query = '';\n                return;\n            }\n            if (options.hasOwnProperty('project')) {\n                this.projectUrl = options.project;\n            }\n            const project = this.projectUrl || Formio.projectUrl;\n            const projectRegEx = /(^|\\/)(project)($|\\/[^/]+)/;\n            const isProjectUrl = path.search(projectRegEx) !== -1;\n            if (project && this.base === project && !isProjectUrl) {\n                this.noProject = true;\n                this.projectUrl = this.base;\n            }\n            if (path.indexOf('http') !== 0 && path.indexOf('//') !== 0) {\n                path = this.base + path;\n            }\n            const hostparts = this.getUrlParts(path);\n            let parts = [];\n            const hostName = hostparts[1] + hostparts[2];\n            path = hostparts.length > 3 ? hostparts[3] : '';\n            const queryparts = path.split('?');\n            if (queryparts.length > 1) {\n                path = queryparts[0];\n                this.query = `?${ queryparts[1] }`;\n            }\n            const registerPath = (name, base) => {\n                this[`${ name }sUrl`] = `${ base }/${ name }`;\n                const regex = new RegExp(`/${ name }/([^/]+)`);\n                if (path.search(regex) !== -1) {\n                    parts = path.match(regex);\n                    this[`${ name }Url`] = parts ? base + parts[0] : '';\n                    this[`${ name }Id`] = parts.length > 1 ? parts[1] : '';\n                    base += parts[0];\n                }\n                return base;\n            };\n            const registerItems = (items, base, staticBase) => {\n                for (const i in items) {\n                    if (items.hasOwnProperty(i)) {\n                        const item = items[i];\n                        if (Array.isArray(item)) {\n                            registerItems(item, base, true);\n                        } else {\n                            const newBase = registerPath(item, base);\n                            base = staticBase ? base : newBase;\n                        }\n                    }\n                }\n            };\n            if (!this.projectUrl || this.projectUrl === this.base) {\n                this.projectUrl = hostName;\n            }\n            if (!this.noProject) {\n                if (isProjectUrl) {\n                    registerItems(['project'], hostName);\n                    path = path.replace(projectRegEx, '');\n                } else if (hostName === this.base) {\n                    if (hostparts.length > 3 && path.split('/').length > 1) {\n                        const pathParts = path.split('/');\n                        pathParts.shift();\n                        this.projectId = pathParts.shift();\n                        path = `/${ pathParts.join('/') }`;\n                        this.projectUrl = `${ hostName }/${ this.projectId }`;\n                    }\n                } else {\n                    if (hostparts.length > 2 && (hostparts[2].split('.').length > 2 || hostName.includes('localhost'))) {\n                        this.projectUrl = hostName;\n                        this.projectId = hostparts[2].split('.')[0];\n                    }\n                }\n                this.projectsUrl = this.projectsUrl || `${ this.base }/project`;\n            }\n            registerItems(['role'], this.projectUrl);\n            if (/(^|\\/)(form)($|\\/)/.test(path)) {\n                registerItems([\n                    'form',\n                    [\n                        'submission',\n                        'action',\n                        'v'\n                    ]\n                ], this.projectUrl);\n            } else {\n                const subRegEx = new RegExp('/(submission|action|v)($|/.*)');\n                const subs = path.match(subRegEx);\n                this.pathType = subs && subs.length > 1 ? subs[1] : '';\n                path = path.replace(subRegEx, '');\n                path = path.replace(/\\/$/, '');\n                this.formsUrl = `${ this.projectUrl }/form`;\n                this.formUrl = path ? this.projectUrl + path : '';\n                this.formId = path.replace(/^\\/+|\\/+$/g, '');\n                const items = [\n                    'submission',\n                    'action',\n                    'v'\n                ];\n                for (const i in items) {\n                    if (items.hasOwnProperty(i)) {\n                        const item = items[i];\n                        this[`${ item }sUrl`] = `${ this.projectUrl + path }/${ item }`;\n                        if (this.pathType === item && subs.length > 2 && subs[2]) {\n                            this[`${ item }Id`] = subs[2].replace(/^\\/+|\\/+$/g, '');\n                            this[`${ item }Url`] = this.projectUrl + path + subs[0];\n                        }\n                    }\n                }\n            }\n            if (!Formio.projectUrlSet) {\n                Formio.projectUrl = this.projectUrl;\n            }\n        }\n        delete(type, opts) {\n            const _id = `${ type }Id`;\n            const _url = `${ type }Url`;\n            if (!this[_id]) {\n                NativePromise.reject('Nothing to delete');\n            }\n            Formio.cache = {};\n            return this.makeRequest(type, this[_url], 'delete', null, opts);\n        }\n        index(type, query, opts) {\n            const _url = `${ type }Url`;\n            query = query || '';\n            if (query && isObject(query)) {\n                query = `?${ Formio.serialize(query.params) }`;\n            }\n            return this.makeRequest(type, this[_url] + query, 'get', null, opts);\n        }\n        save(type, data, opts) {\n            const _id = `${ type }Id`;\n            const _url = `${ type }Url`;\n            const method = this[_id] || data._id ? 'put' : 'post';\n            let reqUrl = this[_id] ? this[_url] : this[`${ type }sUrl`];\n            if (!this[_id] && data._id && method === 'put' && !reqUrl.includes(data._id)) {\n                reqUrl += `/${ data._id }`;\n            }\n            Formio.cache = {};\n            return this.makeRequest(type, reqUrl + this.query, method, data, opts);\n        }\n        load(type, query, opts) {\n            const _id = `${ type }Id`;\n            const _url = `${ type }Url`;\n            if (query && isObject(query)) {\n                query = Formio.serialize(query.params);\n            }\n            if (query) {\n                query = this.query ? `${ this.query }&${ query }` : `?${ query }`;\n            } else {\n                query = this.query;\n            }\n            if (!this[_id]) {\n                return NativePromise.reject(`Missing ${ _id }`);\n            }\n            return this.makeRequest(type, this[_url] + query, 'get', null, opts);\n        }\n        makeRequest(...args) {\n            return Formio.makeRequest(this, ...args);\n        }\n        loadProject(query, opts) {\n            return this.load('project', query, opts);\n        }\n        saveProject(data, opts) {\n            return this.save('project', data, opts);\n        }\n        deleteProject(opts) {\n            return this.delete('project', opts);\n        }\n        static loadProjects(query, opts) {\n            query = query || '';\n            if (isObject(query)) {\n                query = `?${ Formio.serialize(query.params) }`;\n            }\n            return Formio.makeStaticRequest(`${ Formio.baseUrl }/project${ query }`, 'GET', null, opts);\n        }\n        loadRole(opts) {\n            return this.load('role', null, opts);\n        }\n        saveRole(data, opts) {\n            return this.save('role', data, opts);\n        }\n        deleteRole(opts) {\n            return this.delete('role', opts);\n        }\n        loadRoles(opts) {\n            return this.index('roles', null, opts);\n        }\n        loadForm(query, opts) {\n            return this.load('form', query, opts).then(currentForm => {\n                if (!currentForm.revisions || isNaN(parseInt(this.vId))) {\n                    return currentForm;\n                }\n                if (currentForm.revisions === 'current' && this.submissionId) {\n                    return currentForm;\n                }\n                if (query && isObject(query)) {\n                    query = Formio.serialize(query.params);\n                }\n                if (query) {\n                    query = this.query ? `${ this.query }&${ query }` : `?${ query }`;\n                } else {\n                    query = this.query;\n                }\n                return this.makeRequest('form', this.vUrl + query, 'get', null, opts).then(revisionForm => {\n                    currentForm.components = revisionForm.components;\n                    currentForm.settings = revisionForm.settings;\n                    return Object.assign({}, currentForm);\n                }).catch(() => Object.assign({}, currentForm));\n            });\n        }\n        saveForm(data, opts) {\n            return this.save('form', data, opts);\n        }\n        deleteForm(opts) {\n            return this.delete('form', opts);\n        }\n        loadForms(query, opts) {\n            return this.index('forms', query, opts);\n        }\n        loadSubmission(query, opts) {\n            return this.load('submission', query, opts).then(submission => {\n                this.vId = submission._fvid;\n                this.vUrl = `${ this.formUrl }/v/${ this.vId }`;\n                return submission;\n            });\n        }\n        saveSubmission(data, opts) {\n            if (!isNaN(parseInt(this.vId))) {\n                data._fvid = this.vId;\n            }\n            return this.save('submission', data, opts);\n        }\n        deleteSubmission(opts) {\n            return this.delete('submission', opts);\n        }\n        loadSubmissions(query, opts) {\n            return this.index('submissions', query, opts);\n        }\n        loadAction(query, opts) {\n            return this.load('action', query, opts);\n        }\n        saveAction(data, opts) {\n            return this.save('action', data, opts);\n        }\n        deleteAction(opts) {\n            return this.delete('action', opts);\n        }\n        loadActions(query, opts) {\n            return this.index('actions', query, opts);\n        }\n        availableActions() {\n            return this.makeRequest('availableActions', `${ this.formUrl }/actions`);\n        }\n        actionInfo(name) {\n            return this.makeRequest('actionInfo', `${ this.formUrl }/actions/${ name }`);\n        }\n        isObjectId(id) {\n            const checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n            return checkForHexRegExp.test(id);\n        }\n        getProjectId() {\n            if (!this.projectId) {\n                return NativePromise.resolve('');\n            }\n            if (this.isObjectId(this.projectId)) {\n                return NativePromise.resolve(this.projectId);\n            } else {\n                return this.loadProject().then(project => {\n                    return project._id;\n                });\n            }\n        }\n        getFormId() {\n            if (!this.formId) {\n                return NativePromise.resolve('');\n            }\n            if (this.isObjectId(this.formId)) {\n                return NativePromise.resolve(this.formId);\n            } else {\n                return this.loadForm().then(form => {\n                    return form._id;\n                });\n            }\n        }\n        currentUser(options) {\n            return Formio.currentUser(this, options);\n        }\n        accessInfo() {\n            return Formio.accessInfo(this);\n        }\n        getToken(options) {\n            return Formio.getToken(Object.assign({ formio: this }, this.options, options));\n        }\n        setToken(token, options) {\n            return Formio.setToken(token, Object.assign({ formio: this }, this.options, options));\n        }\n        getTempToken(expire, allowed, options) {\n            const token = Formio.getToken(options);\n            if (!token) {\n                return NativePromise.reject('You must be authenticated to generate a temporary auth token.');\n            }\n            const authUrl = Formio.authUrl || this.projectUrl;\n            return this.makeRequest('tempToken', `${ authUrl }/token`, 'GET', null, {\n                ignoreCache: true,\n                header: new Headers({\n                    'x-expire': expire,\n                    'x-allow': allowed\n                })\n            });\n        }\n        getDownloadUrl(form) {\n            if (!this.submissionId) {\n                return NativePromise.resolve('');\n            }\n            if (!form) {\n                return this.loadForm().then(_form => {\n                    if (!_form) {\n                        return '';\n                    }\n                    return this.getDownloadUrl(_form);\n                });\n            }\n            let apiUrl = `/project/${ form.project }`;\n            apiUrl += `/form/${ form._id }`;\n            apiUrl += `/submission/${ this.submissionId }`;\n            apiUrl += '/download';\n            let download = this.base + apiUrl;\n            return new NativePromise((resolve, reject) => {\n                this.getTempToken(3600, `GET:${ apiUrl }`).then(tempToken => {\n                    download += `?token=${ tempToken.key }`;\n                    resolve(download);\n                }, () => {\n                    resolve(download);\n                }).catch(reject);\n            });\n        }\n        uploadFile(storage, file, fileName, dir, progressCallback, url, options, fileKey) {\n            const requestArgs = {\n                provider: storage,\n                method: 'upload',\n                file: file,\n                fileName: fileName,\n                dir: dir\n            };\n            fileKey = fileKey || 'file';\n            const request = Formio.pluginWait('preRequest', requestArgs).then(() => {\n                return Formio.pluginGet('fileRequest', requestArgs).then(result => {\n                    if (storage && isNil(result)) {\n                        const Provider = Providers.getProvider('storage', storage);\n                        if (Provider) {\n                            const provider = new Provider(this);\n                            return provider.uploadFile(file, fileName, dir, progressCallback, url, options, fileKey);\n                        } else {\n                            throw 'Storage provider not found';\n                        }\n                    }\n                    return result || { url: '' };\n                });\n            });\n            return Formio.pluginAlter('wrapFileRequestPromise', request, requestArgs);\n        }\n        downloadFile(file, options) {\n            const requestArgs = {\n                method: 'download',\n                file: file\n            };\n            const request = Formio.pluginWait('preRequest', requestArgs).then(() => {\n                return Formio.pluginGet('fileRequest', requestArgs).then(result => {\n                    if (file.storage && isNil(result)) {\n                        const Provider = Providers.getProvider('storage', file.storage);\n                        if (Provider) {\n                            const provider = new Provider(this);\n                            return provider.downloadFile(file, options);\n                        } else {\n                            throw 'Storage provider not found';\n                        }\n                    }\n                    return result || { url: '' };\n                });\n            });\n            return Formio.pluginAlter('wrapFileRequestPromise', request, requestArgs);\n        }\n        userPermissions(user, form, submission) {\n            return NativePromise.all([\n                form !== undefined ? NativePromise.resolve(form) : this.loadForm(),\n                user !== undefined ? NativePromise.resolve(user) : this.currentUser(),\n                submission !== undefined || !this.submissionId ? NativePromise.resolve(submission) : this.loadSubmission(),\n                this.accessInfo()\n            ]).then(results => {\n                const form = results.shift();\n                const user = results.shift() || {\n                    _id: false,\n                    roles: []\n                };\n                const submission = results.shift();\n                const access = results.shift();\n                const permMap = {\n                    create: 'create',\n                    read: 'read',\n                    update: 'edit',\n                    delete: 'delete'\n                };\n                const perms = {\n                    user: user,\n                    form: form,\n                    access: access,\n                    create: false,\n                    read: false,\n                    edit: false,\n                    delete: false\n                };\n                for (const roleName in access.roles) {\n                    if (access.roles.hasOwnProperty(roleName)) {\n                        const role = access.roles[roleName];\n                        if (role.default && user._id === false) {\n                            user.roles.push(role._id);\n                        } else if (role.admin && user.roles.indexOf(role._id) !== -1) {\n                            perms.create = true;\n                            perms.read = true;\n                            perms.delete = true;\n                            perms.edit = true;\n                            return perms;\n                        }\n                    }\n                }\n                if (form && form.submissionAccess) {\n                    for (let i = 0; i < form.submissionAccess.length; i++) {\n                        const permission = form.submissionAccess[i];\n                        const [perm, scope] = permission.type.split('_');\n                        if ([\n                                'create',\n                                'read',\n                                'update',\n                                'delete'\n                            ].includes(perm)) {\n                            if (_intersection(permission.roles, user.roles).length) {\n                                perms[permMap[perm]] = scope === 'all' || (!submission || user._id === submission.owner);\n                            }\n                        }\n                    }\n                }\n                if (submission) {\n                    utils.eachComponent(form.components, (component, path) => {\n                        if (component && component.defaultPermission) {\n                            const value = _get(submission.data, path);\n                            const groups = Array.isArray(value) ? value : [value];\n                            groups.forEach(group => {\n                                if (group && group._id && user.roles.indexOf(group._id) > -1) {\n                                    if (component.defaultPermission === 'read') {\n                                        perms[permMap.read] = true;\n                                    }\n                                    if (component.defaultPermission === 'create') {\n                                        perms[permMap.create] = true;\n                                        perms[permMap.read] = true;\n                                    }\n                                    if (component.defaultPermission === 'write') {\n                                        perms[permMap.create] = true;\n                                        perms[permMap.read] = true;\n                                        perms[permMap.update] = true;\n                                    }\n                                    if (component.defaultPermission === 'admin') {\n                                        perms[permMap.create] = true;\n                                        perms[permMap.read] = true;\n                                        perms[permMap.update] = true;\n                                        perms[permMap.delete] = true;\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n                return perms;\n            });\n        }\n        canSubmit() {\n            return this.userPermissions().then(perms => {\n                if (!perms.create && Formio.getUser()) {\n                    return this.userPermissions(null).then(anonPerms => {\n                        if (anonPerms.create) {\n                            Formio.setUser(null);\n                            return true;\n                        }\n                        return false;\n                    });\n                }\n                return perms.create;\n            });\n        }\n        getUrlParts(url) {\n            return Formio.getUrlParts(url, this);\n        }\n        static getUrlParts(url, formio) {\n            const base = formio && formio.base ? formio.base : Formio.baseUrl;\n            let regex = '^(http[s]?:\\\\/\\\\/)';\n            if (base && url.indexOf(base) === 0) {\n                regex += `(${ base.replace(/^http[s]?:\\/\\//, '') })`;\n            } else {\n                regex += '([^/]+)';\n            }\n            regex += '($|\\\\/.*)';\n            return url.match(new RegExp(regex));\n        }\n        static serialize(obj, _interpolate) {\n            const str = [];\n            const interpolate = item => {\n                return _interpolate ? _interpolate(item) : item;\n            };\n            for (const p in obj) {\n                if (obj.hasOwnProperty(p)) {\n                    str.push(`${ encodeURIComponent(p) }=${ encodeURIComponent(interpolate(obj[p])) }`);\n                }\n            }\n            return str.join('&');\n        }\n        static getRequestArgs(formio, type, url, method, data, opts) {\n            method = (method || 'GET').toUpperCase();\n            if (!opts || !isObject(opts)) {\n                opts = {};\n            }\n            const requestArgs = {\n                url,\n                method,\n                data: data || null,\n                opts\n            };\n            if (type) {\n                requestArgs.type = type;\n            }\n            if (formio) {\n                requestArgs.formio = formio;\n            }\n            return requestArgs;\n        }\n        static makeStaticRequest(url, method, data, opts) {\n            const requestArgs = Formio.getRequestArgs(null, '', url, method, data, opts);\n            const request = Formio.pluginWait('preRequest', requestArgs).then(() => Formio.pluginGet('staticRequest', requestArgs).then(result => {\n                if (isNil(result)) {\n                    return Formio.request(url, method, requestArgs.data, requestArgs.opts.header, requestArgs.opts);\n                }\n                return result;\n            }));\n            return Formio.pluginAlter('wrapStaticRequestPromise', request, requestArgs);\n        }\n        static makeRequest(formio, type, url, method, data, opts) {\n            if (!formio) {\n                return Formio.makeStaticRequest(url, method, data, opts);\n            }\n            const requestArgs = Formio.getRequestArgs(formio, type, url, method, data, opts);\n            requestArgs.opts = requestArgs.opts || {};\n            requestArgs.opts.formio = formio;\n            if (!requestArgs.opts.headers) {\n                requestArgs.opts.headers = {};\n            }\n            requestArgs.opts.headers = _defaults(requestArgs.opts.headers, {\n                'Accept': 'application/json',\n                'Content-type': 'application/json'\n            });\n            const request = Formio.pluginWait('preRequest', requestArgs).then(() => Formio.pluginGet('request', requestArgs).then(result => {\n                if (isNil(result)) {\n                    return Formio.request(url, method, requestArgs.data, requestArgs.opts.header, requestArgs.opts);\n                }\n                return result;\n            }));\n            return Formio.pluginAlter('wrapRequestPromise', request, requestArgs);\n        }\n        static request(url, method, data, header, opts) {\n            if (!url) {\n                return NativePromise.reject('No url provided');\n            }\n            method = (method || 'GET').toUpperCase();\n            if (isBoolean(opts)) {\n                opts = { ignoreCache: opts };\n            }\n            if (!opts || !isObject(opts)) {\n                opts = {};\n            }\n            const cacheKey = btoa(url);\n            if (!opts.ignoreCache && method === 'GET' && Formio.cache.hasOwnProperty(cacheKey)) {\n                return NativePromise.resolve(cloneResponse(Formio.cache[cacheKey]));\n            }\n            const headers = header || new Headers(opts.headers || {\n                'Accept': 'application/json',\n                'Content-type': 'application/json'\n            });\n            const token = Formio.getToken(opts);\n            if (token && !opts.noToken) {\n                headers.append('x-jwt-token', token);\n            }\n            const headerObj = {};\n            headers.forEach(function (value, name) {\n                headerObj[name] = value;\n            });\n            let options = {\n                method: method,\n                headers: headerObj,\n                mode: 'cors'\n            };\n            if (data) {\n                options.body = JSON.stringify(data);\n            }\n            options = Formio.pluginAlter('requestOptions', options, url);\n            if (options.namespace || Formio.namespace) {\n                opts.namespace = options.namespace || Formio.namespace;\n            }\n            const requestToken = options.headers['x-jwt-token'];\n            const result = Formio.pluginAlter('wrapFetchRequestPromise', Formio.fetch(url, options), {\n                url,\n                method,\n                data,\n                opts\n            }).then(response => {\n                response = Formio.pluginAlter('requestResponse', response, Formio, data);\n                if (!response.ok) {\n                    if (response.status === 440) {\n                        Formio.setToken(null, opts);\n                        Formio.events.emit('formio.sessionExpired', response.body);\n                    } else if (response.status === 401) {\n                        Formio.events.emit('formio.unauthorized', response.body);\n                    }\n                    return (response.headers.get('content-type').includes('application/json') ? response.json() : response.text()).then(error => {\n                        return NativePromise.reject(error);\n                    });\n                }\n                const token = response.headers.get('x-jwt-token');\n                let tokenIntroduced = false;\n                if (method === 'GET' && !requestToken && token && !opts.external && !url.includes('token=') && !url.includes('x-jwt-token=')) {\n                    console.warn('Token was introduced in request.');\n                    tokenIntroduced = true;\n                }\n                if (response.status >= 200 && response.status < 300 && token && token !== '' && !tokenIntroduced) {\n                    Formio.setToken(token, opts);\n                }\n                if (response.status === 204) {\n                    return {};\n                }\n                const getResult = response.headers.get('content-type').includes('application/json') ? response.json() : response.text();\n                return getResult.then(result => {\n                    let range = response.headers.get('content-range');\n                    if (range && isObject(result)) {\n                        range = range.split('/');\n                        if (range[0] !== '*') {\n                            const skipLimit = range[0].split('-');\n                            result.skip = Number(skipLimit[0]);\n                            result.limit = skipLimit[1] - skipLimit[0] + 1;\n                        }\n                        result.serverCount = range[1] === '*' ? range[1] : Number(range[1]);\n                    }\n                    if (!opts.getHeaders) {\n                        return result;\n                    }\n                    const headers = {};\n                    response.headers.forEach((item, key) => {\n                        headers[key] = item;\n                    });\n                    return {\n                        result,\n                        headers\n                    };\n                });\n            }).then(result => {\n                if (opts.getHeaders) {\n                    return result;\n                }\n                if (method === 'GET') {\n                    Formio.cache[cacheKey] = result;\n                }\n                return cloneResponse(result);\n            }).catch(err => {\n                if (err === 'Bad Token') {\n                    Formio.setToken(null, opts);\n                    Formio.events.emit('formio.badToken', err);\n                }\n                if (err.message) {\n                    err.message = `Could not connect to API server (${ err.message })`;\n                    err.networkError = true;\n                }\n                if (method === 'GET') {\n                    delete Formio.cache[cacheKey];\n                }\n                return NativePromise.reject(err);\n            });\n            return result;\n        }\n        static get token() {\n            if (!Formio.tokens) {\n                Formio.tokens = {};\n            }\n            return Formio.tokens.formioToken ? Formio.tokens.formioToken : '';\n        }\n        static set token(token) {\n            if (!Formio.tokens) {\n                Formio.tokens = {};\n            }\n            return Formio.tokens.formioToken = token || '';\n        }\n        static setToken(token = '', opts) {\n            token = token || '';\n            opts = typeof opts === 'string' ? { namespace: opts } : opts || {};\n            var tokenName = `${ opts.namespace || Formio.namespace || 'formio' }Token`;\n            if (!Formio.tokens) {\n                Formio.tokens = {};\n            }\n            if (Formio.tokens[tokenName] && Formio.tokens[tokenName] === token) {\n                return;\n            }\n            Formio.tokens[tokenName] = token;\n            if (!token) {\n                if (!opts.fromUser) {\n                    opts.fromToken = true;\n                    Formio.setUser(null, opts);\n                }\n                try {\n                    return localStorage.removeItem(tokenName);\n                } catch (err) {\n                    return cookies.erase(tokenName, { path: '/' });\n                }\n            }\n            try {\n                localStorage.setItem(tokenName, token);\n            } catch (err) {\n                cookies.set(tokenName, token, { path: '/' });\n            }\n            return Formio.currentUser(opts.formio, opts);\n        }\n        static getToken(options) {\n            options = typeof options === 'string' ? { namespace: options } : options || {};\n            const tokenName = `${ options.namespace || Formio.namespace || 'formio' }Token`;\n            const decodedTokenName = options.decode ? `${ tokenName }Decoded` : tokenName;\n            if (!Formio.tokens) {\n                Formio.tokens = {};\n            }\n            if (Formio.tokens[decodedTokenName]) {\n                return Formio.tokens[decodedTokenName];\n            }\n            try {\n                Formio.tokens[tokenName] = localStorage.getItem(tokenName) || '';\n                if (options.decode) {\n                    Formio.tokens[decodedTokenName] = Formio.tokens[tokenName] ? jwtDecode(Formio.tokens[tokenName]) : {};\n                    return Formio.tokens[decodedTokenName];\n                }\n                return Formio.tokens[tokenName];\n            } catch (e) {\n                Formio.tokens[tokenName] = cookies.get(tokenName);\n                return Formio.tokens[tokenName];\n            }\n        }\n        static setUser(user, opts = {}) {\n            var userName = `${ opts.namespace || Formio.namespace || 'formio' }User`;\n            if (!user) {\n                if (!opts.fromToken) {\n                    opts.fromUser = true;\n                    Formio.setToken(null, opts);\n                }\n                Formio.events.emit('formio.user', null);\n                try {\n                    return localStorage.removeItem(userName);\n                } catch (err) {\n                    return cookies.erase(userName, { path: '/' });\n                }\n            }\n            try {\n                localStorage.setItem(userName, JSON.stringify(user));\n            } catch (err) {\n                cookies.set(userName, JSON.stringify(user), { path: '/' });\n            }\n            Formio.events.emit('formio.user', user);\n        }\n        static getUser(options) {\n            options = options || {};\n            var userName = `${ options.namespace || Formio.namespace || 'formio' }User`;\n            try {\n                return JSON.parse(localStorage.getItem(userName) || null);\n            } catch (e) {\n                return JSON.parse(cookies.get(userName));\n            }\n        }\n        static setBaseUrl(url) {\n            Formio.baseUrl = url;\n            if (!Formio.projectUrlSet) {\n                Formio.projectUrl = url;\n            }\n        }\n        static getBaseUrl() {\n            return Formio.baseUrl;\n        }\n        static setApiUrl(url) {\n            return Formio.setBaseUrl(url);\n        }\n        static getApiUrl() {\n            return Formio.getBaseUrl();\n        }\n        static setAppUrl(url) {\n            console.warn('Formio.setAppUrl() is deprecated. Use Formio.setProjectUrl instead.');\n            Formio.projectUrl = url;\n            Formio.projectUrlSet = true;\n        }\n        static setProjectUrl(url) {\n            Formio.projectUrl = url;\n            Formio.projectUrlSet = true;\n        }\n        static setAuthUrl(url) {\n            Formio.authUrl = url;\n        }\n        static getAppUrl() {\n            console.warn('Formio.getAppUrl() is deprecated. Use Formio.getProjectUrl instead.');\n            return Formio.projectUrl;\n        }\n        static getProjectUrl() {\n            return Formio.projectUrl;\n        }\n        static clearCache() {\n            Formio.cache = {};\n        }\n        static noop() {\n        }\n        static identity(value) {\n            return value;\n        }\n        static deregisterPlugin(plugin) {\n            const beforeLength = Formio.plugins.length;\n            Formio.plugins = Formio.plugins.filter(p => {\n                if (p !== plugin && p.__name !== plugin) {\n                    return true;\n                }\n                (p.deregister || Formio.noop).call(plugin, Formio);\n                return false;\n            });\n            return beforeLength !== Formio.plugins.length;\n        }\n        static registerPlugin(plugin, name) {\n            Formio.plugins.push(plugin);\n            Formio.plugins.sort((a, b) => (b.priority || 0) - (a.priority || 0));\n            plugin.__name = name;\n            (plugin.init || Formio.noop).call(plugin, Formio);\n        }\n        static getPlugin(name) {\n            for (const plugin of Formio.plugins) {\n                if (plugin.__name === name) {\n                    return plugin;\n                }\n            }\n            return null;\n        }\n        static pluginWait(pluginFn, ...args) {\n            return NativePromise.all(Formio.plugins.map(plugin => (plugin[pluginFn] || Formio.noop).call(plugin, ...args)));\n        }\n        static pluginGet(pluginFn, ...args) {\n            const callPlugin = index => {\n                const plugin = Formio.plugins[index];\n                if (!plugin) {\n                    return NativePromise.resolve(null);\n                }\n                return NativePromise.resolve((plugin[pluginFn] || Formio.noop).call(plugin, ...args)).then(result => {\n                    if (!isNil(result)) {\n                        return result;\n                    }\n                    return callPlugin(index + 1);\n                });\n            };\n            return callPlugin(0);\n        }\n        static pluginAlter(pluginFn, value, ...args) {\n            return Formio.plugins.reduce((value, plugin) => (plugin[pluginFn] || Formio.identity)(value, ...args), value);\n        }\n        static accessInfo(formio) {\n            const projectUrl = formio ? formio.projectUrl : Formio.projectUrl;\n            return Formio.makeRequest(formio, 'accessInfo', `${ projectUrl }/access`);\n        }\n        static projectRoles(formio) {\n            const projectUrl = formio ? formio.projectUrl : Formio.projectUrl;\n            return Formio.makeRequest(formio, 'projectRoles', `${ projectUrl }/role`);\n        }\n        static currentUser(formio, options) {\n            let authUrl = Formio.authUrl;\n            if (!authUrl) {\n                authUrl = formio ? formio.projectUrl : Formio.projectUrl || Formio.baseUrl;\n            }\n            authUrl += '/current';\n            const user = Formio.getUser(options);\n            if (user) {\n                return Formio.pluginAlter('wrapStaticRequestPromise', NativePromise.resolve(user), {\n                    url: authUrl,\n                    method: 'GET',\n                    options\n                });\n            }\n            const token = Formio.getToken(options);\n            if ((!options || !options.external) && !token) {\n                return Formio.pluginAlter('wrapStaticRequestPromise', NativePromise.resolve(null), {\n                    url: authUrl,\n                    method: 'GET',\n                    options\n                });\n            }\n            return Formio.makeRequest(formio, 'currentUser', authUrl, 'GET', null, options).then(response => {\n                Formio.setUser(response, options);\n                return response;\n            });\n        }\n        static logout(formio, options) {\n            options = options || {};\n            options.formio = formio;\n            Formio.setToken(null, options);\n            Formio.setUser(null, options);\n            Formio.clearCache();\n            const projectUrl = Formio.authUrl ? Formio.authUrl : formio ? formio.projectUrl : Formio.baseUrl;\n            return Formio.makeRequest(formio, 'logout', `${ projectUrl }/logout`);\n        }\n        static pageQuery() {\n            if (Formio._pageQuery) {\n                return Formio._pageQuery;\n            }\n            Formio._pageQuery = {};\n            Formio._pageQuery.paths = [];\n            const hashes = location.hash.substr(1).replace(/\\?/g, '&').split('&');\n            let parts = [];\n            location.search.substr(1).split('&').forEach(function (item) {\n                parts = item.split('=');\n                if (parts.length > 1) {\n                    Formio._pageQuery[parts[0]] = parts[1] && decodeURIComponent(parts[1]);\n                }\n            });\n            hashes.forEach(function (item) {\n                parts = item.split('=');\n                if (parts.length > 1) {\n                    Formio._pageQuery[parts[0]] = parts[1] && decodeURIComponent(parts[1]);\n                } else if (item.indexOf('/') === 0) {\n                    Formio._pageQuery.paths = item.substr(1).split('/');\n                }\n            });\n            return Formio._pageQuery;\n        }\n        static oAuthCurrentUser(formio, token) {\n            return Formio.currentUser(formio, {\n                external: true,\n                headers: { Authorization: `Bearer ${ token }` }\n            });\n        }\n        static samlInit(options) {\n            options = options || {};\n            const query = Formio.pageQuery();\n            if (query.saml) {\n                Formio.setUser(null);\n                const retVal = Formio.setToken(query.saml);\n                let uri = window.location.toString();\n                uri = uri.substring(0, uri.indexOf('?'));\n                if (window.location.hash) {\n                    uri += window.location.hash;\n                }\n                window.history.replaceState({}, document.title, uri);\n                return retVal;\n            }\n            if (!options.relay) {\n                options.relay = window.location.href;\n            }\n            const authUrl = Formio.authUrl || Formio.projectUrl;\n            window.location.href = `${ authUrl }/saml/sso?relay=${ encodeURI(options.relay) }`;\n            return false;\n        }\n        static oktaInit(options) {\n            options = options || {};\n            if (typeof OktaAuth !== undefined) {\n                options.OktaAuth = OktaAuth;\n            }\n            if (typeof options.OktaAuth === undefined) {\n                const errorMessage = 'Cannot find OktaAuth. Please include the Okta JavaScript SDK within your application. See https://developer.okta.com/code/javascript/okta_auth_sdk for an example.';\n                console.warn(errorMessage);\n                return NativePromise.reject(errorMessage);\n            }\n            return new NativePromise((resolve, reject) => {\n                const Okta = options.OktaAuth;\n                delete options.OktaAuth;\n                var authClient = new Okta(options);\n                authClient.tokenManager.get('accessToken').then(accessToken => {\n                    if (accessToken) {\n                        resolve(Formio.oAuthCurrentUser(options.formio, accessToken.accessToken));\n                    } else if (location.hash) {\n                        authClient.token.parseFromUrl().then(token => {\n                            authClient.tokenManager.add('accessToken', token);\n                            resolve(Formio.oAuthCurrentUser(options.formio, token.accessToken));\n                        }).catch(err => {\n                            console.warn(err);\n                            reject(err);\n                        });\n                    } else {\n                        authClient.token.getWithRedirect({\n                            responseType: 'token',\n                            scopes: options.scopes\n                        });\n                        resolve(false);\n                    }\n                }).catch(error => {\n                    reject(error);\n                });\n            });\n        }\n        static ssoInit(type, options) {\n            switch (type) {\n            case 'saml':\n                return Formio.samlInit(options);\n            case 'okta':\n                return Formio.oktaInit(options);\n            default:\n                console.warn('Unknown SSO type');\n                return NativePromise.reject('Unknown SSO type');\n            }\n        }\n        static requireLibrary(name, property, src, polling) {\n            if (!Formio.libraries.hasOwnProperty(name)) {\n                Formio.libraries[name] = {};\n                Formio.libraries[name].ready = new NativePromise((resolve, reject) => {\n                    Formio.libraries[name].resolve = resolve;\n                    Formio.libraries[name].reject = reject;\n                });\n                const callbackName = `${ name }Callback`;\n                if (!polling && !window[callbackName]) {\n                    window[callbackName] = () => Formio.libraries[name].resolve();\n                }\n                const plugin = _get(window, property);\n                if (plugin) {\n                    Formio.libraries[name].resolve(plugin);\n                } else {\n                    src = Array.isArray(src) ? src : [src];\n                    src.forEach(lib => {\n                        let attrs = {};\n                        let elementType = '';\n                        if (typeof lib === 'string') {\n                            lib = {\n                                type: 'script',\n                                src: lib\n                            };\n                        }\n                        switch (lib.type) {\n                        case 'script':\n                            elementType = 'script';\n                            attrs = {\n                                src: lib.src,\n                                type: 'text/javascript',\n                                defer: true,\n                                async: true,\n                                referrerpolicy: 'origin'\n                            };\n                            break;\n                        case 'styles':\n                            elementType = 'link';\n                            attrs = {\n                                href: lib.src,\n                                rel: 'stylesheet'\n                            };\n                            break;\n                        }\n                        const element = document.createElement(elementType);\n                        if (element.setAttribute) {\n                            for (const attr in attrs) {\n                                element.setAttribute(attr, attrs[attr]);\n                            }\n                        }\n                        const {head} = document;\n                        if (head) {\n                            head.appendChild(element);\n                        }\n                    });\n                    if (polling) {\n                        const interval = setInterval(() => {\n                            const plugin = _get(window, property);\n                            if (plugin) {\n                                clearInterval(interval);\n                                Formio.libraries[name].resolve(plugin);\n                            }\n                        }, 200);\n                    }\n                }\n            }\n            return Formio.libraries[name].ready;\n        }\n        static libraryReady(name) {\n            if (Formio.libraries.hasOwnProperty(name) && Formio.libraries[name].ready) {\n                return Formio.libraries[name].ready;\n            }\n            return NativePromise.reject(`${ name } library was not required.`);\n        }\n    };\n    Formio.libraries = {};\n    Formio.Promise = NativePromise;\n    Formio.fetch = fetch;\n    Formio.Headers = Headers;\n    Formio.baseUrl = 'https://api.form.io';\n    Formio.projectUrl = Formio.baseUrl;\n    Formio.authUrl = '';\n    Formio.projectUrlSet = false;\n    Formio.plugins = [];\n    Formio.cache = {};\n    Formio.Providers = Providers;\n    Formio.version = '---VERSION---';\n    Formio.events = new EventEmitter({\n        wildcard: false,\n        maxListeners: 0\n    });\n    if (typeof global === 'object' && !global.Formio) {\n        global.Formio = Formio;\n    }\n    if (typeof window === 'object' && !window.Formio) {\n        window.Formio = Formio;\n    }\n\n\n    return Formio;\n});"]}