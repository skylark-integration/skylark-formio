{"version":3,"sources":["Element.js"],"names":["define","EventEmitter","Formio","FormioUtils","i18next","_","moment","maskInput","[object Object]","options","this","Object","assign","language","highlightErrors","componentErrorClass","componentWarningClass","row","namespace","id","getRandomComponentId","eventHandlers","events","wildcard","maxListeners","defaultMask","event","cb","internal","once","type","on","onAny","each","listeners","listener","off","data","emit","obj","func","persistent","push","addEventListener","attachEvent","indexes","forEach","handler","index","removeEventListener","length","pullAt","includeExternal","_events","removeEventListeners","removeAllEvents","element","container","appendChild","firstChild","insertBefore","err","console","warn","contains","removeChild","attr","children","document","createElement","child","Array","isArray","oneChild","HTMLElement","Text","text","toString","mask","map","char","RegExp","join","input","inputMask","placeholder","getInputMask","destroy","inputElement","e","numeric","setAttribute","maskPlaceholder","params","nsSeparator","keySeparator","pluralSeparator","contextSeparator","t","createTextNode","value","key","indexOf","substr","toLowerCase","className","replace","classes","getAttribute","includes","cls","additional","utils","util","user","getUser","instance","self","token","getToken","decode","config","root","form","get","string","interpolate","evalContext","args","ret","tokenize","evaluate","name","arguments","hooks","apply","prototype","slice","call","fn"],"mappings":"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","file":"../Element.js","sourcesContent":["define([\n    './EventEmitter',\n    './Formio',\n    './utils/utils',\n    'skylark-i18next',\n    'skylark-lodash',\n    'skylark-moment',\n    './vendors/vanilla-text-mask/maskInput'\n], function (EventEmitter, Formio, FormioUtils, i18next, _, moment, maskInput) {\n    'use strict';\n    return class Element {\n        constructor(options) {\n            this.options = Object.assign({\n                language: 'en',\n                highlightErrors: true,\n                componentErrorClass: 'formio-error-wrapper',\n                componentWarningClass: 'formio-warning-wrapper',\n                row: '',\n                namespace: 'formio'\n            }, options || {});\n            this.id = FormioUtils.getRandomComponentId();\n            this.eventHandlers = [];\n            this.i18next = this.options.i18next || i18next;\n            this.events = options && options.events ? options.events : new EventEmitter({\n                wildcard: false,\n                maxListeners: 0\n            });\n            this.defaultMask = null;\n        }\n        on(event, cb, internal, once = false) {\n            if (!this.events) {\n                return;\n            }\n            const type = `${ this.options.namespace }.${ event }`;\n            cb.id = this.id;\n            cb.internal = internal;\n            return this.events[once ? 'once' : 'on'](type, cb);\n        }\n        once(event, cb, internal) {\n            return this.on(event, cb, internal, true);\n        }\n        onAny(cb) {\n            if (!this.events) {\n                return;\n            }\n            return this.events.onAny(cb);\n        }\n        off(event) {\n            if (!this.events) {\n                return;\n            }\n            const type = `${ this.options.namespace }.${ event }`;\n            _.each(this.events.listeners(type), listener => {\n                if (listener && listener.id === this.id) {\n                    this.events.off(type, listener);\n                }\n            });\n        }\n        emit(event, ...data) {\n            if (this.events) {\n                this.events.emit(`${ this.options.namespace }.${ event }`, ...data);\n            }\n        }\n        addEventListener(obj, type, func, persistent) {\n            if (!obj) {\n                return;\n            }\n            if (!persistent) {\n                this.eventHandlers.push({\n                    id: this.id,\n                    obj,\n                    type,\n                    func\n                });\n            }\n            if ('addEventListener' in obj) {\n                obj.addEventListener(type, func, false);\n            } else if ('attachEvent' in obj) {\n                obj.attachEvent(`on${ type }`, func);\n            }\n            return this;\n        }\n        removeEventListener(obj, type, func = null) {\n            const indexes = [];\n            this.eventHandlers.forEach((handler, index) => {\n                if (handler.id === this.id && obj.removeEventListener && handler.type === type && (!func || handler.func === func)) {\n                    obj.removeEventListener(type, handler.func);\n                    indexes.push(index);\n                }\n            });\n            if (indexes.length) {\n                _.pullAt(this.eventHandlers, indexes);\n            }\n            return this;\n        }\n        removeEventListeners() {\n            this.eventHandlers.forEach(handler => {\n                if (this.id === handler.id && handler.type && handler.obj && handler.obj.removeEventListener) {\n                    handler.obj.removeEventListener(handler.type, handler.func);\n                }\n            });\n            this.eventHandlers = [];\n        }\n        removeAllEvents(includeExternal) {\n            _.each(this.events._events, (events, type) => {\n                _.each(events, listener => {\n                    if (listener && this.id === listener.id && (includeExternal || listener.internal)) {\n                        this.events.off(type, listener);\n                    }\n                });\n            });\n        }\n        destroy() {\n            this.removeEventListeners();\n            this.removeAllEvents();\n        }\n        appendTo(element, container) {\n            container.appendChild(element);\n            return this;\n        }\n        prependTo(element, container) {\n            if (container) {\n                if (container.firstChild) {\n                    try {\n                        container.insertBefore(element, container.firstChild);\n                    } catch (err) {\n                        console.warn(err);\n                        container.appendChild(element);\n                    }\n                } else {\n                    container.appendChild(element);\n                }\n            }\n            return this;\n        }\n        removeChildFrom(element, container) {\n            if (container && container.contains(element)) {\n                try {\n                    container.removeChild(element);\n                } catch (err) {\n                    console.warn(err);\n                }\n            }\n            return this;\n        }\n        ce(type, attr, children = null) {\n            const element = document.createElement(type);\n            if (attr) {\n                this.attr(element, attr);\n            }\n            this.appendChild(element, children);\n            return element;\n        }\n        appendChild(element, child) {\n            if (Array.isArray(child)) {\n                child.forEach(oneChild => this.appendChild(element, oneChild));\n            } else if (child instanceof HTMLElement || child instanceof Text) {\n                element.appendChild(child);\n            } else if (child) {\n                element.appendChild(this.text(child.toString()));\n            }\n            return this;\n        }\n        maskPlaceholder(mask) {\n            return mask.map(char => char instanceof RegExp ? '_' : char).join('');\n        }\n        setInputMask(input, inputMask, placeholder) {\n            if (input && inputMask) {\n                const mask = FormioUtils.getInputMask(inputMask);\n                this.defaultMask = mask;\n                try {\n                    if (input.mask) {\n                        input.mask.destroy();\n                    }\n                    input.mask = maskInput({\n                        inputElement: input,\n                        mask\n                    });\n                } catch (e) {\n                    console.warn(e);\n                }\n                if (mask.numeric) {\n                    input.setAttribute('pattern', '\\\\d*');\n                }\n                if (placeholder) {\n                    input.setAttribute('placeholder', this.maskPlaceholder(mask));\n                }\n            }\n        }\n        t(text, params) {\n            params = params || {};\n            params.nsSeparator = '::';\n            params.keySeparator = '.|.';\n            params.pluralSeparator = '._.';\n            params.contextSeparator = '._.';\n            const translated = this.i18next.t(text, params);\n            return translated || text;\n        }\n        text(text) {\n            return document.createTextNode(this.t(text));\n        }\n        attr(element, attr) {\n            if (!element) {\n                return;\n            }\n            _.each(attr, (value, key) => {\n                if (typeof value !== 'undefined') {\n                    if (key.indexOf('on') === 0) {\n                        this.addEventListener(element, key.substr(2).toLowerCase(), value);\n                    } else {\n                        element.setAttribute(key, value);\n                    }\n                }\n            });\n        }\n        hasClass(element, className) {\n            if (!element) {\n                return false;\n            }\n            className = ` ${ className } `;\n            return ` ${ element.className } `.replace(/[\\n\\t\\r]/g, ' ').indexOf(className) > -1;\n        }\n        addClass(element, className) {\n            if (!element) {\n                return this;\n            }\n            const classes = element.getAttribute('class');\n            if (!classes.includes(className)) {\n                element.setAttribute('class', `${ classes } ${ className }`);\n            }\n            return this;\n        }\n        removeClass(element, className) {\n            if (!element || !className) {\n                return this;\n            }\n            let cls = element.getAttribute('class');\n            if (cls) {\n                cls = cls.replace(new RegExp(` ${ className }`, 'g'), '');\n                element.setAttribute('class', cls);\n            }\n            return this;\n        }\n        empty(element) {\n            if (element) {\n                while (element.firstChild) {\n                    element.removeChild(element.firstChild);\n                }\n            }\n        }\n        evalContext(additional) {\n            return Object.assign({\n                _,\n                utils: FormioUtils,\n                util: FormioUtils,\n                user: Formio.getUser(),\n                moment,\n                instance: this,\n                self: this,\n                token: Formio.getToken({ decode: true }),\n                config: this.root && this.root.form && this.root.form.config ? this.root.form.config : {}\n            }, additional, _.get(this.root, 'options.evalContext', {}));\n        }\n        interpolate(string, data) {\n            return FormioUtils.interpolate(string, this.evalContext(data));\n        }\n        evaluate(func, args, ret, tokenize) {\n            return FormioUtils.evaluate(func, this.evalContext(args), ret, tokenize);\n        }\n        hook() {\n            const name = arguments[0];\n            if (this.options && this.options.hooks && this.options.hooks[name]) {\n                return this.options.hooks[name].apply(this, Array.prototype.slice.call(arguments, 1));\n            } else {\n                const fn = typeof arguments[arguments.length - 1] === 'function' ? arguments[arguments.length - 1] : null;\n                if (fn) {\n                    return fn(null, arguments[1]);\n                } else {\n                    return arguments[1];\n                }\n            }\n        }\n    };\n});"]}