{"version":3,"sources":["vendors/tooltip-js/Tooltip.js"],"names":["define","Popper","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","DEFAULT_OPTIONS","container","delay","html","placement","title","template","trigger","offset","arrowSelector","innerSelector","_initialiseProps","this","show","_show","reference","options","hide","_hide","dispose","_dispose","toggle","_isOpen","updateTitleContent","_updateTitleContent","_events","_setTooltipNodeEvent","evt","relatedreference","toElement","relatedTarget","callback","evt2","relatedreference2","_tooltipNode","removeEventListener","type","contains","_scheduleHide","addEventListener","[object Object]","jquery","events","split","filter","indexOf","_popperOptions","_setEventListeners","allowHtml","tooltipGenerator","window","document","createElement","innerHTML","trim","tooltipNode","childNodes","id","Math","random","toString","substr","setAttribute","titleNode","querySelector","_addTitleContent","nodeType","appendChild","functionToCheck","titleText","textContent","_isOpening","style","visibility","popperInstance","update","getAttribute","_create","_findContainer","_append","popperOptions","modifiers","arrow","element","boundariesElement","preventOverflow","forEach","func","event","destroy","removeOnDestroy","parentNode","removeChild","directEvents","oppositeEvents","push","usedByTooltip","_scheduleShow","closeOnClickOutside","e","popper","computedDelay","_showTimeout","setTimeout","clearTimeout","body","_clearTitleContent","lastTitle"],"mappings":"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","file":"../../../vendors/tooltip-js/Tooltip.js","sourcesContent":["/**!\r\n * @fileOverview Kickass library to create and place poppers near their reference elements.\r\n * @version 1.3.1\r\n * @license\r\n * Copyright (c) 2016 Federico Zivolo and contributors\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\ndefine([\"skylark-popper\"],function(Popper){\r\n\r\n\r\n\r\n  /**\r\n   * Check if the given variable is a function\r\n   * @method\r\n   * @memberof Popper.Utils\r\n   * @argument {Any} functionToCheck - variable to check\r\n   * @returns {Boolean} answer to: is a function?\r\n   */\r\n  function isFunction(functionToCheck) {\r\n    const getType = {};\r\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\r\n  }\r\n\r\n  var _extends = Object.assign || function (target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n\r\n      for (var key in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n          target[key] = source[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return target;\r\n  };\r\n\r\n  const DEFAULT_OPTIONS = {\r\n    container: false,\r\n    delay: 0,\r\n    html: false,\r\n    placement: 'top',\r\n    title: '',\r\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\r\n    trigger: 'hover focus',\r\n    offset: 0,\r\n    arrowSelector: '.tooltip-arrow, .tooltip__arrow',\r\n    innerSelector: '.tooltip-inner, .tooltip__inner'\r\n  };\r\n\r\n  class Tooltip {\r\n    /**\r\n     * Create a new Tooltip.js instance\r\n     * @class Tooltip\r\n     * @param {HTMLElement} reference - The DOM node used as reference of the tooltip (it can be a jQuery element).\r\n     * @param {Object} options\r\n     * @param {String} options.placement='top'\r\n     *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -end),\r\n     *      left(-start, -end)`\r\n     * @param {String} options.arrowSelector='.tooltip-arrow, .tooltip__arrow' - className used to locate the DOM arrow element in the tooltip.\r\n     * @param {String} options.innerSelector='.tooltip-inner, .tooltip__inner' - className used to locate the DOM inner element in the tooltip.\r\n     * @param {HTMLElement|String|false} options.container=false - Append the tooltip to a specific element.\r\n     * @param {Number|Object} options.delay=0\r\n     *      Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type.\r\n     *      If a number is supplied, delay is applied to both hide/show.\r\n     *      Object structure is: `{ show: 500, hide: 100 }`\r\n     * @param {Boolean} options.html=false - Insert HTML into the tooltip. If false, the content will inserted with `textContent`.\r\n     * @param {String} [options.template='<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>']\r\n     *      Base HTML to used when creating the tooltip.\r\n     *      The tooltip's `title` will be injected into the `.tooltip-inner` or `.tooltip__inner`.\r\n     *      `.tooltip-arrow` or `.tooltip__arrow` will become the tooltip's arrow.\r\n     *      The outermost wrapper element should have the `.tooltip` class.\r\n     * @param {String|HTMLElement|TitleFunction} options.title='' - Default title value if `title` attribute isn't present.\r\n     * @param {String} [options.trigger='hover focus']\r\n     *      How tooltip is triggered - click, hover, focus, manual.\r\n     *      You may pass multiple triggers; separate them with a space. `manual` cannot be combined with any other trigger.\r\n     * @param {Boolean} options.closeOnClickOutside=false - Close a popper on click outside of the popper and reference element. This has effect only when options.trigger is 'click'.\r\n     * @param {String|HTMLElement} options.boundariesElement\r\n     *      The element used as boundaries for the tooltip. For more information refer to Popper.js'\r\n     *      [boundariesElement docs](https://popper.js.org/popper-documentation.html)\r\n     * @param {Number|String} options.offset=0 - Offset of the tooltip relative to its reference. For more information refer to Popper.js'\r\n     *      [offset docs](https://popper.js.org/popper-documentation.html)\r\n     * @param {Object} options.popperOptions={} - Popper options, will be passed directly to popper instance. For more information refer to Popper.js'\r\n     *      [options docs](https://popper.js.org/popper-documentation.html)\r\n     * @return {Object} instance - The generated tooltip instance\r\n     */\r\n    constructor(reference, options) {\r\n      _initialiseProps.call(this);\r\n\r\n      // apply user options over default ones\r\n      options = _extends({}, DEFAULT_OPTIONS, options);\r\n\r\n      reference.jquery && (reference = reference[0]);\r\n\r\n      // cache reference and options\r\n      this.reference = reference;\r\n      this.options = options;\r\n\r\n      // get events list\r\n      const events = typeof options.trigger === 'string' ? options.trigger.split(' ').filter(trigger => ['click', 'hover', 'focus'].indexOf(trigger) !== -1) : [];\r\n\r\n      // set initial state\r\n      this._isOpen = false;\r\n      this._popperOptions = {};\r\n\r\n      // set event listeners\r\n      this._setEventListeners(reference, events, options);\r\n    }\r\n\r\n    //\r\n    // Public methods\r\n    //\r\n\r\n    /**\r\n     * Reveals an element's tooltip. This is considered a \"manual\" triggering of the tooltip.\r\n     * Tooltips with zero-length titles are never displayed.\r\n     * @method Tooltip#show\r\n     * @memberof Tooltip\r\n     */\r\n\r\n\r\n    /**\r\n     * Hides an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n     * @method Tooltip#hide\r\n     * @memberof Tooltip\r\n     */\r\n\r\n\r\n    /**\r\n     * Hides and destroys an element’s tooltip.\r\n     * @method Tooltip#dispose\r\n     * @memberof Tooltip\r\n     */\r\n\r\n\r\n    /**\r\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.\r\n     * @method Tooltip#toggle\r\n     * @memberof Tooltip\r\n     */\r\n\r\n\r\n    /**\r\n     * Updates the tooltip's title content\r\n     * @method Tooltip#updateTitleContent\r\n     * @memberof Tooltip\r\n     * @param {String|HTMLElement} title - The new content to use for the title\r\n     */\r\n\r\n\r\n    //\r\n    // Private methods\r\n    //\r\n\r\n    /**\r\n     * Creates a new tooltip node\r\n     * @memberof Tooltip\r\n     * @private\r\n     * @param {HTMLElement} reference\r\n     * @param {String} template\r\n     * @param {String|HTMLElement|TitleFunction} title\r\n     * @param {Boolean} allowHtml\r\n     * @return {HTMLElement} tooltipNode\r\n     */\r\n    _create(reference, template, title, allowHtml) {\r\n      // create tooltip element\r\n      const tooltipGenerator = window.document.createElement('div');\r\n      tooltipGenerator.innerHTML = template.trim();\r\n      const tooltipNode = tooltipGenerator.childNodes[0];\r\n\r\n      // add unique ID to our tooltip (needed for accessibility reasons)\r\n      tooltipNode.id = `tooltip_${Math.random().toString(36).substr(2, 10)}`;\r\n\r\n      // set initial `aria-hidden` state to `false` (it's visible!)\r\n      tooltipNode.setAttribute('aria-hidden', 'false');\r\n\r\n      // add title to tooltip\r\n      const titleNode = tooltipGenerator.querySelector(this.options.innerSelector);\r\n      this._addTitleContent(reference, title, allowHtml, titleNode);\r\n\r\n      // return the generated tooltip node\r\n      return tooltipNode;\r\n    }\r\n\r\n    _addTitleContent(reference, title, allowHtml, titleNode) {\r\n      if (title.nodeType === 1 || title.nodeType === 11) {\r\n        // if title is a element node or document fragment, append it only if allowHtml is true\r\n        allowHtml && titleNode.appendChild(title);\r\n      } else if (isFunction(title)) {\r\n        // if title is a function, call it and set textContent or innerHtml depending by `allowHtml` value\r\n        const titleText = title.call(reference);\r\n        allowHtml ? titleNode.innerHTML = titleText : titleNode.textContent = titleText;\r\n      } else {\r\n        // if it's just a simple text, set textContent or innerHtml depending by `allowHtml` value\r\n        allowHtml ? titleNode.innerHTML = title : titleNode.textContent = title;\r\n      }\r\n    }\r\n\r\n    _show(reference, options) {\r\n      // don't show if it's already visible\r\n      // or if it's not being showed\r\n      if (this._isOpen && !this._isOpening) {\r\n        return this;\r\n      }\r\n      this._isOpen = true;\r\n\r\n      // if the tooltipNode already exists, just show it\r\n      if (this._tooltipNode) {\r\n        this._tooltipNode.style.visibility = 'visible';\r\n        this._tooltipNode.setAttribute('aria-hidden', 'false');\r\n        this.popperInstance.update();\r\n        return this;\r\n      }\r\n\r\n      // get title\r\n      const title = reference.getAttribute('title') || options.title;\r\n\r\n      // don't show tooltip if no title is defined\r\n      if (!title) {\r\n        return this;\r\n      }\r\n\r\n      // create tooltip node\r\n      const tooltipNode = this._create(reference, options.template, title, options.html);\r\n\r\n      // Add `aria-describedby` to our reference element for accessibility reasons\r\n      reference.setAttribute('aria-describedby', tooltipNode.id);\r\n\r\n      // append tooltip to container\r\n      const container = this._findContainer(options.container, reference);\r\n\r\n      this._append(tooltipNode, container);\r\n\r\n      this._popperOptions = _extends({}, options.popperOptions, {\r\n        placement: options.placement\r\n      });\r\n\r\n      this._popperOptions.modifiers = _extends({}, this._popperOptions.modifiers, {\r\n        arrow: {\r\n          element: this.options.arrowSelector\r\n        },\r\n        offset: {\r\n          offset: options.offset\r\n        }\r\n      });\r\n\r\n      if (options.boundariesElement) {\r\n        this._popperOptions.modifiers.preventOverflow = {\r\n          boundariesElement: options.boundariesElement\r\n        };\r\n      }\r\n\r\n      this.popperInstance = new Popper(reference, tooltipNode, this._popperOptions);\r\n\r\n      this._tooltipNode = tooltipNode;\r\n\r\n      return this;\r\n    }\r\n\r\n    _hide() /*reference, options*/{\r\n      // don't hide if it's already hidden\r\n      if (!this._isOpen) {\r\n        return this;\r\n      }\r\n\r\n      this._isOpen = false;\r\n\r\n      // hide tooltipNode\r\n      this._tooltipNode.style.visibility = 'hidden';\r\n      this._tooltipNode.setAttribute('aria-hidden', 'true');\r\n\r\n      return this;\r\n    }\r\n\r\n    _dispose() {\r\n      // remove event listeners first to prevent any unexpected behaviour\r\n      this._events.forEach(({ func, event }) => {\r\n        this.reference.removeEventListener(event, func);\r\n      });\r\n      this._events = [];\r\n\r\n      if (this._tooltipNode) {\r\n        this._hide();\r\n\r\n        // destroy instance\r\n        this.popperInstance.destroy();\r\n\r\n        // destroy tooltipNode if removeOnDestroy is not set, as popperInstance.destroy() already removes the element\r\n        if (!this.popperInstance.options.removeOnDestroy) {\r\n          this._tooltipNode.parentNode.removeChild(this._tooltipNode);\r\n          this._tooltipNode = null;\r\n        }\r\n      }\r\n      return this;\r\n    }\r\n\r\n    _findContainer(container, reference) {\r\n      // if container is a query, get the relative element\r\n      if (typeof container === 'string') {\r\n        container = window.document.querySelector(container);\r\n      } else if (container === false) {\r\n        // if container is `false`, set it to reference parent\r\n        container = reference.parentNode;\r\n      }\r\n      return container;\r\n    }\r\n\r\n    /**\r\n     * Append tooltip to container\r\n     * @memberof Tooltip\r\n     * @private\r\n     * @param {HTMLElement} tooltipNode\r\n     * @param {HTMLElement|String|false} container\r\n     */\r\n    _append(tooltipNode, container) {\r\n      container.appendChild(tooltipNode);\r\n    }\r\n\r\n    _setEventListeners(reference, events, options) {\r\n      const directEvents = [];\r\n      const oppositeEvents = [];\r\n\r\n      events.forEach(event => {\r\n        switch (event) {\r\n          case 'hover':\r\n            directEvents.push('mouseenter');\r\n            oppositeEvents.push('mouseleave');\r\n            break;\r\n          case 'focus':\r\n            directEvents.push('focus');\r\n            oppositeEvents.push('blur');\r\n            break;\r\n          case 'click':\r\n            directEvents.push('click');\r\n            oppositeEvents.push('click');\r\n            break;\r\n        }\r\n      });\r\n\r\n      // schedule show tooltip\r\n      directEvents.forEach(event => {\r\n        const func = evt => {\r\n          if (this._isOpening === true) {\r\n            return;\r\n          }\r\n          evt.usedByTooltip = true;\r\n          this._scheduleShow(reference, options.delay, options, evt);\r\n        };\r\n        this._events.push({ event, func });\r\n        reference.addEventListener(event, func);\r\n      });\r\n\r\n      // schedule hide tooltip\r\n      oppositeEvents.forEach(event => {\r\n        const func = evt => {\r\n          if (evt.usedByTooltip === true) {\r\n            return;\r\n          }\r\n          this._scheduleHide(reference, options.delay, options, evt);\r\n        };\r\n        this._events.push({ event, func });\r\n        reference.addEventListener(event, func);\r\n        if (event === 'click' && options.closeOnClickOutside) {\r\n          document.addEventListener('mousedown', e => {\r\n            if (!this._isOpening) {\r\n              return;\r\n            }\r\n            const popper = this.popperInstance.popper;\r\n            if (reference.contains(e.target) || popper.contains(e.target)) {\r\n              return;\r\n            }\r\n            func(e);\r\n          }, true);\r\n        }\r\n      });\r\n    }\r\n\r\n    _scheduleShow(reference, delay, options /*, evt */) {\r\n      this._isOpening = true;\r\n      // defaults to 0\r\n      const computedDelay = delay && delay.show || delay || 0;\r\n      this._showTimeout = window.setTimeout(() => this._show(reference, options), computedDelay);\r\n    }\r\n\r\n    _scheduleHide(reference, delay, options, evt) {\r\n      this._isOpening = false;\r\n      // defaults to 0\r\n      const computedDelay = delay && delay.hide || delay || 0;\r\n      window.setTimeout(() => {\r\n        window.clearTimeout(this._showTimeout);\r\n        if (this._isOpen === false) {\r\n          return;\r\n        }\r\n        if (!document.body.contains(this._tooltipNode)) {\r\n          return;\r\n        }\r\n\r\n        // if we are hiding because of a mouseleave, we must check that the new\r\n        // reference isn't the tooltip, because in this case we don't want to hide it\r\n        if (evt.type === 'mouseleave') {\r\n          const isSet = this._setTooltipNodeEvent(evt, reference, delay, options);\r\n\r\n          // if we set the new event, don't hide the tooltip yet\r\n          // the new event will take care to hide it if necessary\r\n          if (isSet) {\r\n            return;\r\n          }\r\n        }\r\n\r\n        this._hide(reference, options);\r\n      }, computedDelay);\r\n    }\r\n\r\n    _updateTitleContent(title) {\r\n      if (typeof this._tooltipNode === 'undefined') {\r\n        if (typeof this.options.title !== 'undefined') {\r\n          this.options.title = title;\r\n        }\r\n        return;\r\n      }\r\n      const titleNode = this._tooltipNode.parentNode.querySelector(this.options.innerSelector);\r\n      this._clearTitleContent(titleNode, this.options.html, this.reference.getAttribute('title') || this.options.title);\r\n      this._addTitleContent(this.reference, title, this.options.html, titleNode);\r\n      this.options.title = title;\r\n      this.popperInstance.update();\r\n    }\r\n\r\n    _clearTitleContent(titleNode, allowHtml, lastTitle) {\r\n      if (lastTitle.nodeType === 1 || lastTitle.nodeType === 11) {\r\n        allowHtml && titleNode.removeChild(lastTitle);\r\n      } else {\r\n        allowHtml ? titleNode.innerHTML = '' : titleNode.textContent = '';\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Title function, its context is the Tooltip instance.\r\n   * @memberof Tooltip\r\n   * @callback TitleFunction\r\n   * @return {String} placement - The desired title.\r\n   */\r\n\r\n  var _initialiseProps = function () {\r\n    this.show = () => this._show(this.reference, this.options);\r\n\r\n    this.hide = () => this._hide();\r\n\r\n    this.dispose = () => this._dispose();\r\n\r\n    this.toggle = () => {\r\n      if (this._isOpen) {\r\n        return this.hide();\r\n      } else {\r\n        return this.show();\r\n      }\r\n    };\r\n\r\n    this.updateTitleContent = title => this._updateTitleContent(title);\r\n\r\n    this._events = [];\r\n\r\n    this._setTooltipNodeEvent = (evt, reference, delay, options) => {\r\n      const relatedreference = evt.relatedreference || evt.toElement || evt.relatedTarget;\r\n\r\n      const callback = evt2 => {\r\n        const relatedreference2 = evt2.relatedreference || evt2.toElement || evt2.relatedTarget;\r\n\r\n        // Remove event listener after call\r\n        this._tooltipNode.removeEventListener(evt.type, callback);\r\n\r\n        // If the new reference is not the reference element\r\n        if (!reference.contains(relatedreference2)) {\r\n          // Schedule to hide tooltip\r\n          this._scheduleHide(reference, options.delay, options, evt2);\r\n        }\r\n      };\r\n\r\n      if (this._tooltipNode.contains(relatedreference)) {\r\n        // listen to mouseleave on the tooltip element to be able to hide the tooltip\r\n        this._tooltipNode.addEventListener(evt.type, callback);\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    };\r\n  };\r\n\r\n  return Tooltip;\r\n\r\n});"]}