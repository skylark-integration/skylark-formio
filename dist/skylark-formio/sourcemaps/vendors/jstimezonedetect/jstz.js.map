{"version":3,"sources":["vendors/jstimezonedetect/jstz.js"],"names":["define","jstz","consts","DAY","HOUR","MINUTE","SECOND","BASELINE_YEAR","MAX_SCORE","AMBIGUITIES","America/Denver","America/Chicago","America/Asuncion","America/Montevideo","Asia/Beirut","Pacific/Auckland","America/Los_Angeles","America/New_York","America/Halifax","America/Godthab","Asia/Dubai","Asia/Jakarta","Asia/Shanghai","Australia/Sydney","Asia/Tokyo","Asia/Dhaka","Asia/Baku","Australia/Brisbane","Pacific/Noumea","Pacific/Majuro","Pacific/Tongatapu","Asia/Baghdad","Asia/Karachi","Africa/Johannesburg","get_date_offset","date","offset","getTimezoneOffset","get_offsets","offsets","month","currentOffset","Date","length","push","dst_dates","year","yearstart","getTime","yearend","current","dst_start","dst_end","dateToCheck","dateToCheckOffset","s","find_dst_fold","e","a_date","padding","iterator","date_start","date_end","dst_change","get_by_dst","preliminary_timezone","rules","rule_list","i","olson","dst_rules","years","year_rules","get_rules","check_has_dst","score_sample","sample","score","j","Math","abs","name","windows7_adaptations","scoreboard","dst_zones","zones","dst_zones_length","ambiguities","tz","hasOwnProperty","best_dst_match","determine","using_intl","diff","preliminary_tz","needle","format","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","indexOf","get_from_internationalization_api","timezones","-720,0","-660,0","-660,1,s","-600,1","-600,0","-570,0","-540,0","-540,1","-480,1","-480,0","-420,0","-420,1","-360,0","-360,1","-360,1,s","-300,0","-300,1","-270,0","-240,1","-240,0","-240,1,s","-210,1","-180,1","-180,0","-180,1,s","-120,0","-120,1","-60,1","-60,0","0,0","0,1","0,1,weird","60,1","60,0","60,1,weird","120,1","120,1,weird","120,0","180,0","180,1","210,1","240,0","240,1","270,0","300,1","300,0","330,0","345,0","360,0","360,1","390,0","420,1","420,0","480,0","480,1","525,0","525,1,s","540,1","540,0","570,0","570,1,s","600,0","600,1","600,1,s","630,1,s","660,1","660,0","690,0","720,1,s","720,0","765,1,s","780,0","780,1,s","840,0"],"mappings":"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","file":"../../../vendors/jstimezonedetect/jstz.js","sourcesContent":["define([], function() {\r\n\r\n\r\n/*global exports, Intl*/\r\n/**\r\n * This script gives you the zone info key representing your device's time zone setting.\r\n *\r\n * @name jsTimezoneDetect\r\n * @version 1.0.6\r\n * @author Jon Nylander\r\n * @license MIT License - https://bitbucket.org/pellepim/jstimezonedetect/src/default/LICENCE.txt\r\n *\r\n * For usage and examples, visit:\r\n * http://pellepim.bitbucket.org/jstz/\r\n *\r\n * Copyright (c) Jon Nylander\r\n */\r\n\r\n\r\n/**\r\n * Namespace to hold all the code for timezone detection.\r\n */\r\n    var jstz = (function () {\r\n        'use strict';\r\n        var HEMISPHERE_SOUTH = 's',\r\n\r\n            consts = {\r\n                DAY: 86400000,\r\n                HOUR: 3600000,\r\n                MINUTE: 60000,\r\n                SECOND: 1000,\r\n                BASELINE_YEAR: 2014,\r\n                MAX_SCORE: 864000000, // 10 days\r\n                AMBIGUITIES: {\r\n                    'America/Denver':       ['America/Mazatlan'],\r\n                    'America/Chicago':      ['America/Mexico_City'],\r\n                    'America/Asuncion':     ['America/Campo_Grande', 'America/Santiago'],\r\n                    'America/Montevideo':   ['America/Sao_Paulo', 'America/Santiago'],\r\n                    'Asia/Beirut':          ['Asia/Amman', 'Asia/Jerusalem', 'Europe/Helsinki', 'Asia/Damascus', 'Africa/Cairo', 'Asia/Gaza', 'Europe/Minsk', 'Africa/Windhoek'],\r\n                    'Pacific/Auckland':     ['Pacific/Fiji'],\r\n                    'America/Los_Angeles':  ['America/Santa_Isabel'],\r\n                    'America/New_York':     ['America/Havana'],\r\n                    'America/Halifax':      ['America/Goose_Bay'],\r\n                    'America/Godthab':      ['America/Miquelon'],\r\n                    'Asia/Dubai':           ['Asia/Yerevan'],\r\n                    'Asia/Jakarta':         ['Asia/Krasnoyarsk'],\r\n                    'Asia/Shanghai':        ['Asia/Irkutsk', 'Australia/Perth'],\r\n                    'Australia/Sydney':     ['Australia/Lord_Howe'],\r\n                    'Asia/Tokyo':           ['Asia/Yakutsk'],\r\n                    'Asia/Dhaka':           ['Asia/Omsk'],\r\n                    'Asia/Baku':            ['Asia/Yerevan'],\r\n                    'Australia/Brisbane':   ['Asia/Vladivostok'],\r\n                    'Pacific/Noumea':       ['Asia/Vladivostok'],\r\n                    'Pacific/Majuro':       ['Asia/Kamchatka', 'Pacific/Fiji'],\r\n                    'Pacific/Tongatapu':    ['Pacific/Apia'],\r\n                    'Asia/Baghdad':         ['Europe/Minsk', 'Europe/Moscow'],\r\n                    'Asia/Karachi':         ['Asia/Yekaterinburg'],\r\n                    'Africa/Johannesburg':  ['Asia/Gaza', 'Africa/Cairo']\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Gets the offset in minutes from UTC for a certain date.\r\n             * @param {Date} date\r\n             * @returns {Number}\r\n             */\r\n            get_date_offset = function get_date_offset(date) {\r\n                var offset = -date.getTimezoneOffset();\r\n                return (offset !== null ? offset : 0);\r\n            },\r\n\r\n\r\n            get_offsets = function get_offsets() {\r\n                var offsets = [];\r\n\r\n                for (var month = 0; month <= 11; month++) {\r\n                    for (var date = 1; date <= 28; date++) {\r\n                        var currentOffset = get_date_offset(new Date(consts.BASELINE_YEAR, month, date));\r\n                        if (!offsets) {\r\n                            offsets.push();\r\n                        } else if (offsets && offsets[offsets.length-1] !== currentOffset) {\r\n                            offsets.push(currentOffset);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return offsets;\r\n            },\r\n\r\n            /**\r\n             * This function does some basic calculations to create information about\r\n             * the user's timezone. It uses REFERENCE_YEAR as a solid year for which\r\n             * the script has been tested rather than depend on the year set by the\r\n             * client device.\r\n             *\r\n             * Returns a key that can be used to do lookups in jstz.olson.timezones.\r\n             * eg: \"720,1,2\".\r\n             *\r\n             * @returns {String}\r\n             */\r\n            lookup_key = function lookup_key() {\r\n                var diff = 0;\r\n                var offsets = get_offsets();\r\n\r\n                if (offsets.length > 1) {\r\n                    diff = offsets[0] - offsets[1];\r\n                }\r\n\r\n                if (offsets.length > 3) {\r\n                    return offsets[0] + \",1,weird\";\r\n                } else if (diff < 0) {\r\n                    return offsets[0] + \",1\";\r\n                } else if (diff > 0) {\r\n                    return offsets[1] + \",1,\" + HEMISPHERE_SOUTH;\r\n                }\r\n\r\n                return offsets[0] + \",0\";\r\n            },\r\n\r\n\r\n            /**\r\n             * Tries to get the time zone key directly from the operating system for those\r\n             * environments that support the ECMAScript Internationalization API.\r\n             */\r\n            get_from_internationalization_api = function get_from_internationalization_api() {\r\n                var format, timezone;\r\n                if (!Intl || typeof Intl === \"undefined\" || typeof Intl.DateTimeFormat === \"undefined\") {\r\n                    return;\r\n                }\r\n\r\n                format = Intl.DateTimeFormat();\r\n\r\n                if (typeof format === \"undefined\" || typeof format.resolvedOptions === \"undefined\") {\r\n                    return;\r\n                }\r\n\r\n                timezone = format.resolvedOptions().timeZone;\r\n\r\n                if (timezone && (timezone.indexOf(\"/\") > -1 || timezone === 'UTC')) {\r\n                    return timezone;\r\n                }\r\n\r\n            },\r\n\r\n            /**\r\n             * Starting point for getting all the DST rules for a specific year\r\n             * for the current timezone (as described by the client system).\r\n             *\r\n             * Returns an object with start and end attributes, or false if no\r\n             * DST rules were found for the year.\r\n             *\r\n             * @param year\r\n             * @returns {Object} || {Boolean}\r\n             */\r\n            dst_dates = function dst_dates(year) {\r\n                var yearstart = new Date(year, 0, 1, 0, 0, 1, 0).getTime();\r\n                var yearend = new Date(year, 12, 31, 23, 59, 59).getTime();\r\n                var current = yearstart;\r\n                var offset = (new Date(current)).getTimezoneOffset();\r\n                var dst_start = null;\r\n                var dst_end = null;\r\n\r\n                while (current < yearend - 86400000) {\r\n                    var dateToCheck = new Date(current);\r\n                    var dateToCheckOffset = dateToCheck.getTimezoneOffset();\r\n\r\n                    if (dateToCheckOffset !== offset) {\r\n                        if (dateToCheckOffset < offset) {\r\n                            dst_start = dateToCheck;\r\n                        }\r\n                        if (dateToCheckOffset > offset) {\r\n                            dst_end = dateToCheck;\r\n                        }\r\n                        offset = dateToCheckOffset;\r\n                    }\r\n\r\n                    current += 86400000;\r\n                }\r\n\r\n                if (dst_start && dst_end) {\r\n                    return {\r\n                        s: find_dst_fold(dst_start).getTime(),\r\n                        e: find_dst_fold(dst_end).getTime()\r\n                    };\r\n                }\r\n\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * Probably completely unnecessary function that recursively finds the\r\n             * exact (to the second) time when a DST rule was changed.\r\n             *\r\n             * @param a_date - The candidate Date.\r\n             * @param padding - integer specifying the padding to allow around the candidate\r\n             *                  date for finding the fold.\r\n             * @param iterator - integer specifying how many milliseconds to iterate while\r\n             *                   searching for the fold.\r\n             *\r\n             * @returns {Date}\r\n             */\r\n            find_dst_fold = function find_dst_fold(a_date, padding, iterator) {\r\n                if (typeof padding === 'undefined') {\r\n                    padding = consts.DAY;\r\n                    iterator = consts.HOUR;\r\n                }\r\n\r\n                var date_start = new Date(a_date.getTime() - padding).getTime();\r\n                var date_end = a_date.getTime() + padding;\r\n                var offset = new Date(date_start).getTimezoneOffset();\r\n\r\n                var current = date_start;\r\n\r\n                var dst_change = null;\r\n                while (current < date_end - iterator) {\r\n                    var dateToCheck = new Date(current);\r\n                    var dateToCheckOffset = dateToCheck.getTimezoneOffset();\r\n\r\n                    if (dateToCheckOffset !== offset) {\r\n                        dst_change = dateToCheck;\r\n                        break;\r\n                    }\r\n                    current += iterator;\r\n                }\r\n\r\n                if (padding === consts.DAY) {\r\n                    return find_dst_fold(dst_change, consts.HOUR, consts.MINUTE);\r\n                }\r\n\r\n                if (padding === consts.HOUR) {\r\n                    return find_dst_fold(dst_change, consts.MINUTE, consts.SECOND);\r\n                }\r\n\r\n                return dst_change;\r\n            },\r\n\r\n            windows7_adaptations = function windows7_adaptions(rule_list, preliminary_timezone, score, sample) {\r\n                if (score !== 'N/A') {\r\n                    return score;\r\n                }\r\n                if (preliminary_timezone === 'Asia/Beirut') {\r\n                    if (sample.name === 'Africa/Cairo') {\r\n                        if (rule_list[6].s === 1398376800000 && rule_list[6].e === 1411678800000) {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                    if (sample.name === 'Asia/Jerusalem') {\r\n                        if (rule_list[6].s === 1395964800000 && rule_list[6].e === 1411858800000) {\r\n                            return 0;\r\n                    }\r\n                }\r\n                } else if (preliminary_timezone === 'America/Santiago') {\r\n                    if (sample.name === 'America/Asuncion') {\r\n                        if (rule_list[6].s === 1412481600000 && rule_list[6].e === 1397358000000) {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                    if (sample.name === 'America/Campo_Grande') {\r\n                        if (rule_list[6].s === 1413691200000 && rule_list[6].e === 1392519600000) {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                } else if (preliminary_timezone === 'America/Montevideo') {\r\n                    if (sample.name === 'America/Sao_Paulo') {\r\n                        if (rule_list[6].s === 1413687600000 && rule_list[6].e === 1392516000000) {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                } else if (preliminary_timezone === 'Pacific/Auckland') {\r\n                    if (sample.name === 'Pacific/Fiji') {\r\n                        if (rule_list[6].s === 1414245600000 && rule_list[6].e === 1396101600000) {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return score;\r\n            },\r\n\r\n            /**\r\n             * Takes the DST rules for the current timezone, and proceeds to find matches\r\n             * in the jstz.olson.dst_rules.zones array.\r\n             *\r\n             * Compares samples to the current timezone on a scoring basis.\r\n             *\r\n             * Candidates are ruled immediately if either the candidate or the current zone\r\n             * has a DST rule where the other does not.\r\n             *\r\n             * Candidates are ruled out immediately if the current zone has a rule that is\r\n             * outside the DST scope of the candidate.\r\n             *\r\n             * Candidates are included for scoring if the current zones rules fall within the\r\n             * span of the samples rules.\r\n             *\r\n             * Low score is best, the score is calculated by summing up the differences in DST\r\n             * rules and if the consts.MAX_SCORE is overreached the candidate is ruled out.\r\n             *\r\n             * Yah follow? :)\r\n             *\r\n             * @param rule_list\r\n             * @param preliminary_timezone\r\n             * @returns {*}\r\n             */\r\n            best_dst_match = function best_dst_match(rule_list, preliminary_timezone) {\r\n                var score_sample = function score_sample(sample) {\r\n                    var score = 0;\r\n\r\n                    for (var j = 0; j < rule_list.length; j++) {\r\n\r\n                        // Both sample and current time zone report DST during the year.\r\n                        if (!!sample.rules[j] && !!rule_list[j]) {\r\n\r\n                            // The current time zone's DST rules are inside the sample's. Include.\r\n                            if (rule_list[j].s >= sample.rules[j].s && rule_list[j].e <= sample.rules[j].e) {\r\n                                score = 0;\r\n                                score += Math.abs(rule_list[j].s - sample.rules[j].s);\r\n                                score += Math.abs(sample.rules[j].e - rule_list[j].e);\r\n\r\n                            // The current time zone's DST rules are outside the sample's. Discard.\r\n                            } else {\r\n                                score = 'N/A';\r\n                                break;\r\n                            }\r\n\r\n                            // The max score has been reached. Discard.\r\n                            if (score > consts.MAX_SCORE) {\r\n                                score = 'N/A';\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    score = windows7_adaptations(rule_list, preliminary_timezone, score, sample);\r\n\r\n                    return score;\r\n                };\r\n                var scoreboard = {};\r\n                var dst_zones = jstz.olson.dst_rules.zones;\r\n                var dst_zones_length = dst_zones.length;\r\n                var ambiguities = consts.AMBIGUITIES[preliminary_timezone];\r\n\r\n                for (var i = 0; i < dst_zones_length; i++) {\r\n                    var sample = dst_zones[i];\r\n                    var score = score_sample(dst_zones[i]);\r\n\r\n                    if (score !== 'N/A') {\r\n                        scoreboard[sample.name] = score;\r\n                    }\r\n                }\r\n\r\n                for (var tz in scoreboard) {\r\n                    if (scoreboard.hasOwnProperty(tz)) {\r\n                        for (var j = 0; j < ambiguities.length; j++) {\r\n                            if (ambiguities[j] === tz) {\r\n                                return tz;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return preliminary_timezone;\r\n            },\r\n\r\n            /**\r\n             * Takes the preliminary_timezone as detected by lookup_key().\r\n             *\r\n             * Builds up the current timezones DST rules for the years defined\r\n             * in the jstz.olson.dst_rules.years array.\r\n             *\r\n             * If there are no DST occurences for those years, immediately returns\r\n             * the preliminary timezone. Otherwise proceeds and tries to solve\r\n             * ambiguities.\r\n             *\r\n             * @param preliminary_timezone\r\n             * @returns {String} timezone_name\r\n             */\r\n            get_by_dst = function get_by_dst(preliminary_timezone) {\r\n                var get_rules = function get_rules() {\r\n                    var rule_list = [];\r\n                    for (var i = 0; i < jstz.olson.dst_rules.years.length; i++) {\r\n                        var year_rules = dst_dates(jstz.olson.dst_rules.years[i]);\r\n                        rule_list.push(year_rules);\r\n                    }\r\n                    return rule_list;\r\n                };\r\n                var check_has_dst = function check_has_dst(rules) {\r\n                    for (var i = 0; i < rules.length; i++) {\r\n                        if (rules[i] !== false) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                };\r\n                var rules = get_rules();\r\n                var has_dst = check_has_dst(rules);\r\n\r\n                if (has_dst) {\r\n                    return best_dst_match(rules, preliminary_timezone);\r\n                }\r\n\r\n                return preliminary_timezone;\r\n            },\r\n\r\n            /**\r\n             * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.\r\n             *\r\n             * Returns an object with one function \".name()\"\r\n             *\r\n             * @returns Object\r\n             */\r\n            determine = function determine(using_intl) {\r\n                var preliminary_tz = false;\r\n                var needle = lookup_key();\r\n                if (using_intl || typeof using_intl === 'undefined') {\r\n                    preliminary_tz = get_from_internationalization_api();\r\n                }\r\n\r\n                if (!preliminary_tz) {\r\n                    preliminary_tz = jstz.olson.timezones[needle];\r\n\r\n                    if (typeof consts.AMBIGUITIES[preliminary_tz] !== 'undefined') {\r\n                        preliminary_tz = get_by_dst(preliminary_tz);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    name: function () {\r\n                        return preliminary_tz;\r\n                    },\r\n                    using_intl: using_intl || typeof using_intl === 'undefined',\r\n                    needle: needle,\r\n                    offsets: get_offsets()\r\n                };\r\n            };\r\n\r\n        return {\r\n            determine: determine\r\n        };\r\n    }());\r\n\r\n\r\n    jstz.olson = jstz.olson || {};\r\n\r\n    /**\r\n     * The keys in this dictionary are comma separated as such:\r\n     *\r\n     * First the offset compared to UTC time in minutes.\r\n     *\r\n     * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it\r\n     * does.\r\n     *\r\n     * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,\r\n     * only interesting for timezones with DST.\r\n     *\r\n     * The mapped arrays is used for constructing the jstz.TimeZone object from within\r\n     * jstz.determine();\r\n     */\r\n    jstz.olson.timezones = {\r\n        '-720,0': 'Etc/GMT+12',\r\n        '-660,0': 'Pacific/Pago_Pago',\r\n        '-660,1,s': 'Pacific/Apia', // Why? Because windows... cry!\r\n        '-600,1': 'America/Adak',\r\n        '-600,0': 'Pacific/Honolulu',\r\n        '-570,0': 'Pacific/Marquesas',\r\n        '-540,0': 'Pacific/Gambier',\r\n        '-540,1': 'America/Anchorage',\r\n        '-480,1': 'America/Los_Angeles',\r\n        '-480,0': 'Pacific/Pitcairn',\r\n        '-420,0': 'America/Phoenix',\r\n        '-420,1': 'America/Denver',\r\n        '-360,0': 'America/Guatemala',\r\n        '-360,1': 'America/Chicago',\r\n        '-360,1,s': 'Pacific/Easter',\r\n        '-300,0': 'America/Bogota',\r\n        '-300,1': 'America/New_York',\r\n        '-270,0': 'America/Caracas',\r\n        '-240,1': 'America/Halifax',\r\n        '-240,0': 'America/Santo_Domingo',\r\n        '-240,1,s': 'America/Asuncion',\r\n        '-210,1': 'America/St_Johns',\r\n        '-180,1': 'America/Godthab',\r\n        '-180,0': 'America/Buenos_Aires',\r\n        '-180,1,s': 'America/Montevideo',\r\n        '-120,0': 'America/Noronha',\r\n        '-120,1': 'America/Noronha',\r\n        '-60,1': 'Atlantic/Azores',\r\n        '-60,0': 'Atlantic/Cape_Verde',\r\n        '0,0': 'UTC',\r\n        '0,1': 'Europe/London',\r\n        '0,1,weird': 'Africa/Casablanca',\r\n        '60,1': 'Europe/Berlin',\r\n        '60,0': 'Africa/Lagos',\r\n        '60,1,weird': 'Africa/Casablanca',\r\n        '120,1': 'Asia/Beirut',\r\n        '120,1,weird': 'Africa/Cairo',\r\n        '120,0': 'Africa/Johannesburg',\r\n        '180,0': 'Asia/Baghdad',\r\n        '180,1': 'Europe/Moscow',\r\n        '210,1': 'Asia/Tehran',\r\n        '240,0': 'Asia/Dubai',\r\n        '240,1': 'Asia/Baku',\r\n        '270,0': 'Asia/Kabul',\r\n        '300,1': 'Asia/Yekaterinburg',\r\n        '300,0': 'Asia/Karachi',\r\n        '330,0': 'Asia/Calcutta',\r\n        '345,0': 'Asia/Katmandu',\r\n        '360,0': 'Asia/Dhaka',\r\n        '360,1': 'Asia/Omsk',\r\n        '390,0': 'Asia/Rangoon',\r\n        '420,1': 'Asia/Krasnoyarsk',\r\n        '420,0': 'Asia/Jakarta',\r\n        '480,0': 'Asia/Shanghai',\r\n        '480,1': 'Asia/Irkutsk',\r\n        '525,0': 'Australia/Eucla',\r\n        '525,1,s': 'Australia/Eucla',\r\n        '540,1': 'Asia/Yakutsk',\r\n        '540,0': 'Asia/Tokyo',\r\n        '570,0': 'Australia/Darwin',\r\n        '570,1,s': 'Australia/Adelaide',\r\n        '600,0': 'Australia/Brisbane',\r\n        '600,1': 'Asia/Vladivostok',\r\n        '600,1,s': 'Australia/Sydney',\r\n        '630,1,s': 'Australia/Lord_Howe',\r\n        '660,1': 'Asia/Kamchatka',\r\n        '660,0': 'Pacific/Noumea',\r\n        '690,0': 'Pacific/Norfolk',\r\n        '720,1,s': 'Pacific/Auckland',\r\n        '720,0': 'Pacific/Majuro',\r\n        '765,1,s': 'Pacific/Chatham',\r\n        '780,0': 'Pacific/Tongatapu',\r\n        '780,1,s': 'Pacific/Apia',\r\n        '840,0': 'Pacific/Kiritimati'\r\n    };\r\n\r\n    /* Build time: 2019-09-09 11:29:41Z Build by invoking python utilities/dst.py generate */\r\n    jstz.olson.dst_rules = {\r\n        \"years\": [\r\n            2008,\r\n            2009,\r\n            2010,\r\n            2011,\r\n            2012,\r\n            2013,\r\n            2014\r\n        ],\r\n        \"zones\": [\r\n            {\r\n                \"name\": \"Africa/Cairo\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1219957200000,\r\n                        \"s\": 1209074400000\r\n                    },\r\n                    {\r\n                        \"e\": 1250802000000,\r\n                        \"s\": 1240524000000\r\n                    },\r\n                    {\r\n                        \"e\": 1285880400000,\r\n                        \"s\": 1284069600000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    {\r\n                        \"e\": 1411678800000,\r\n                        \"s\": 1406844000000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Asuncion\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1205031600000,\r\n                        \"s\": 1224388800000\r\n                    },\r\n                    {\r\n                        \"e\": 1236481200000,\r\n                        \"s\": 1255838400000\r\n                    },\r\n                    {\r\n                        \"e\": 1270954800000,\r\n                        \"s\": 1286078400000\r\n                    },\r\n                    {\r\n                        \"e\": 1302404400000,\r\n                        \"s\": 1317528000000\r\n                    },\r\n                    {\r\n                        \"e\": 1333854000000,\r\n                        \"s\": 1349582400000\r\n                    },\r\n                    {\r\n                        \"e\": 1364094000000,\r\n                        \"s\": 1381032000000\r\n                    },\r\n                    {\r\n                        \"e\": 1395543600000,\r\n                        \"s\": 1412481600000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Campo_Grande\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1203217200000,\r\n                        \"s\": 1224388800000\r\n                    },\r\n                    {\r\n                        \"e\": 1234666800000,\r\n                        \"s\": 1255838400000\r\n                    },\r\n                    {\r\n                        \"e\": 1266721200000,\r\n                        \"s\": 1287288000000\r\n                    },\r\n                    {\r\n                        \"e\": 1298170800000,\r\n                        \"s\": 1318737600000\r\n                    },\r\n                    {\r\n                        \"e\": 1330225200000,\r\n                        \"s\": 1350792000000\r\n                    },\r\n                    {\r\n                        \"e\": 1361070000000,\r\n                        \"s\": 1382241600000\r\n                    },\r\n                    {\r\n                        \"e\": 1392519600000,\r\n                        \"s\": 1413691200000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Goose_Bay\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1225594860000,\r\n                        \"s\": 1205035260000\r\n                    },\r\n                    {\r\n                        \"e\": 1257044460000,\r\n                        \"s\": 1236484860000\r\n                    },\r\n                    {\r\n                        \"e\": 1289098860000,\r\n                        \"s\": 1268539260000\r\n                    },\r\n                    {\r\n                        \"e\": 1320555600000,\r\n                        \"s\": 1299988860000\r\n                    },\r\n                    {\r\n                        \"e\": 1352005200000,\r\n                        \"s\": 1331445600000\r\n                    },\r\n                    {\r\n                        \"e\": 1383454800000,\r\n                        \"s\": 1362895200000\r\n                    },\r\n                    {\r\n                        \"e\": 1414904400000,\r\n                        \"s\": 1394344800000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Havana\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224997200000,\r\n                        \"s\": 1205643600000\r\n                    },\r\n                    {\r\n                        \"e\": 1256446800000,\r\n                        \"s\": 1236488400000\r\n                    },\r\n                    {\r\n                        \"e\": 1288501200000,\r\n                        \"s\": 1268542800000\r\n                    },\r\n                    {\r\n                        \"e\": 1321160400000,\r\n                        \"s\": 1300597200000\r\n                    },\r\n                    {\r\n                        \"e\": 1352005200000,\r\n                        \"s\": 1333256400000\r\n                    },\r\n                    {\r\n                        \"e\": 1383454800000,\r\n                        \"s\": 1362891600000\r\n                    },\r\n                    {\r\n                        \"e\": 1414904400000,\r\n                        \"s\": 1394341200000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Mazatlan\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1225008000000,\r\n                        \"s\": 1207472400000\r\n                    },\r\n                    {\r\n                        \"e\": 1256457600000,\r\n                        \"s\": 1238922000000\r\n                    },\r\n                    {\r\n                        \"e\": 1288512000000,\r\n                        \"s\": 1270371600000\r\n                    },\r\n                    {\r\n                        \"e\": 1319961600000,\r\n                        \"s\": 1301821200000\r\n                    },\r\n                    {\r\n                        \"e\": 1351411200000,\r\n                        \"s\": 1333270800000\r\n                    },\r\n                    {\r\n                        \"e\": 1382860800000,\r\n                        \"s\": 1365325200000\r\n                    },\r\n                    {\r\n                        \"e\": 1414310400000,\r\n                        \"s\": 1396774800000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Mexico_City\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1225004400000,\r\n                        \"s\": 1207468800000\r\n                    },\r\n                    {\r\n                        \"e\": 1256454000000,\r\n                        \"s\": 1238918400000\r\n                    },\r\n                    {\r\n                        \"e\": 1288508400000,\r\n                        \"s\": 1270368000000\r\n                    },\r\n                    {\r\n                        \"e\": 1319958000000,\r\n                        \"s\": 1301817600000\r\n                    },\r\n                    {\r\n                        \"e\": 1351407600000,\r\n                        \"s\": 1333267200000\r\n                    },\r\n                    {\r\n                        \"e\": 1382857200000,\r\n                        \"s\": 1365321600000\r\n                    },\r\n                    {\r\n                        \"e\": 1414306800000,\r\n                        \"s\": 1396771200000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Miquelon\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1225598400000,\r\n                        \"s\": 1205038800000\r\n                    },\r\n                    {\r\n                        \"e\": 1257048000000,\r\n                        \"s\": 1236488400000\r\n                    },\r\n                    {\r\n                        \"e\": 1289102400000,\r\n                        \"s\": 1268542800000\r\n                    },\r\n                    {\r\n                        \"e\": 1320552000000,\r\n                        \"s\": 1299992400000\r\n                    },\r\n                    {\r\n                        \"e\": 1352001600000,\r\n                        \"s\": 1331442000000\r\n                    },\r\n                    {\r\n                        \"e\": 1383451200000,\r\n                        \"s\": 1362891600000\r\n                    },\r\n                    {\r\n                        \"e\": 1414900800000,\r\n                        \"s\": 1394341200000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Santa_Isabel\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1225011600000,\r\n                        \"s\": 1207476000000\r\n                    },\r\n                    {\r\n                        \"e\": 1256461200000,\r\n                        \"s\": 1238925600000\r\n                    },\r\n                    {\r\n                        \"e\": 1289120400000,\r\n                        \"s\": 1268560800000\r\n                    },\r\n                    {\r\n                        \"e\": 1320570000000,\r\n                        \"s\": 1300010400000\r\n                    },\r\n                    {\r\n                        \"e\": 1352019600000,\r\n                        \"s\": 1331460000000\r\n                    },\r\n                    {\r\n                        \"e\": 1383469200000,\r\n                        \"s\": 1362909600000\r\n                    },\r\n                    {\r\n                        \"e\": 1414918800000,\r\n                        \"s\": 1394359200000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Santiago\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1206846000000,\r\n                        \"s\": 1223784000000\r\n                    },\r\n                    {\r\n                        \"e\": 1237086000000,\r\n                        \"s\": 1255233600000\r\n                    },\r\n                    {\r\n                        \"e\": 1270350000000,\r\n                        \"s\": 1286683200000\r\n                    },\r\n                    {\r\n                        \"e\": 1304823600000,\r\n                        \"s\": 1313899200000\r\n                    },\r\n                    {\r\n                        \"e\": 1335668400000,\r\n                        \"s\": 1346558400000\r\n                    },\r\n                    {\r\n                        \"e\": 1367118000000,\r\n                        \"s\": 1378612800000\r\n                    },\r\n                    {\r\n                        \"e\": 1398567600000,\r\n                        \"s\": 1410062400000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"America/Sao_Paulo\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1203213600000,\r\n                        \"s\": 1224385200000\r\n                    },\r\n                    {\r\n                        \"e\": 1234663200000,\r\n                        \"s\": 1255834800000\r\n                    },\r\n                    {\r\n                        \"e\": 1266717600000,\r\n                        \"s\": 1287284400000\r\n                    },\r\n                    {\r\n                        \"e\": 1298167200000,\r\n                        \"s\": 1318734000000\r\n                    },\r\n                    {\r\n                        \"e\": 1330221600000,\r\n                        \"s\": 1350788400000\r\n                    },\r\n                    {\r\n                        \"e\": 1361066400000,\r\n                        \"s\": 1382238000000\r\n                    },\r\n                    {\r\n                        \"e\": 1392516000000,\r\n                        \"s\": 1413687600000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Amman\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1225404000000,\r\n                        \"s\": 1206655200000\r\n                    },\r\n                    {\r\n                        \"e\": 1256853600000,\r\n                        \"s\": 1238104800000\r\n                    },\r\n                    {\r\n                        \"e\": 1288303200000,\r\n                        \"s\": 1269554400000\r\n                    },\r\n                    {\r\n                        \"e\": 1319752800000,\r\n                        \"s\": 1301608800000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    {\r\n                        \"e\": 1414706400000,\r\n                        \"s\": 1395957600000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Damascus\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1225486800000,\r\n                        \"s\": 1207260000000\r\n                    },\r\n                    {\r\n                        \"e\": 1256850000000,\r\n                        \"s\": 1238104800000\r\n                    },\r\n                    {\r\n                        \"e\": 1288299600000,\r\n                        \"s\": 1270159200000\r\n                    },\r\n                    {\r\n                        \"e\": 1319749200000,\r\n                        \"s\": 1301608800000\r\n                    },\r\n                    {\r\n                        \"e\": 1351198800000,\r\n                        \"s\": 1333058400000\r\n                    },\r\n                    {\r\n                        \"e\": 1382648400000,\r\n                        \"s\": 1364508000000\r\n                    },\r\n                    {\r\n                        \"e\": 1414702800000,\r\n                        \"s\": 1395957600000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Dubai\",\r\n                \"rules\": [\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Gaza\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1219957200000,\r\n                        \"s\": 1206655200000\r\n                    },\r\n                    {\r\n                        \"e\": 1252015200000,\r\n                        \"s\": 1238104800000\r\n                    },\r\n                    {\r\n                        \"e\": 1281474000000,\r\n                        \"s\": 1269640860000\r\n                    },\r\n                    {\r\n                        \"e\": 1312146000000,\r\n                        \"s\": 1301608860000\r\n                    },\r\n                    {\r\n                        \"e\": 1348178400000,\r\n                        \"s\": 1333058400000\r\n                    },\r\n                    {\r\n                        \"e\": 1380229200000,\r\n                        \"s\": 1364508000000\r\n                    },\r\n                    {\r\n                        \"e\": 1414098000000,\r\n                        \"s\": 1395957600000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Irkutsk\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224957600000,\r\n                        \"s\": 1206813600000\r\n                    },\r\n                    {\r\n                        \"e\": 1256407200000,\r\n                        \"s\": 1238263200000\r\n                    },\r\n                    {\r\n                        \"e\": 1288461600000,\r\n                        \"s\": 1269712800000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Jerusalem\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1223161200000,\r\n                        \"s\": 1206662400000\r\n                    },\r\n                    {\r\n                        \"e\": 1254006000000,\r\n                        \"s\": 1238112000000\r\n                    },\r\n                    {\r\n                        \"e\": 1284246000000,\r\n                        \"s\": 1269561600000\r\n                    },\r\n                    {\r\n                        \"e\": 1317510000000,\r\n                        \"s\": 1301616000000\r\n                    },\r\n                    {\r\n                        \"e\": 1348354800000,\r\n                        \"s\": 1333065600000\r\n                    },\r\n                    {\r\n                        \"e\": 1382828400000,\r\n                        \"s\": 1364515200000\r\n                    },\r\n                    {\r\n                        \"e\": 1414278000000,\r\n                        \"s\": 1395964800000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Kamchatka\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224943200000,\r\n                        \"s\": 1206799200000\r\n                    },\r\n                    {\r\n                        \"e\": 1256392800000,\r\n                        \"s\": 1238248800000\r\n                    },\r\n                    {\r\n                        \"e\": 1288450800000,\r\n                        \"s\": 1269698400000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Krasnoyarsk\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224961200000,\r\n                        \"s\": 1206817200000\r\n                    },\r\n                    {\r\n                        \"e\": 1256410800000,\r\n                        \"s\": 1238266800000\r\n                    },\r\n                    {\r\n                        \"e\": 1288465200000,\r\n                        \"s\": 1269716400000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Omsk\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224964800000,\r\n                        \"s\": 1206820800000\r\n                    },\r\n                    {\r\n                        \"e\": 1256414400000,\r\n                        \"s\": 1238270400000\r\n                    },\r\n                    {\r\n                        \"e\": 1288468800000,\r\n                        \"s\": 1269720000000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Vladivostok\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224950400000,\r\n                        \"s\": 1206806400000\r\n                    },\r\n                    {\r\n                        \"e\": 1256400000000,\r\n                        \"s\": 1238256000000\r\n                    },\r\n                    {\r\n                        \"e\": 1288454400000,\r\n                        \"s\": 1269705600000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Yakutsk\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224954000000,\r\n                        \"s\": 1206810000000\r\n                    },\r\n                    {\r\n                        \"e\": 1256403600000,\r\n                        \"s\": 1238259600000\r\n                    },\r\n                    {\r\n                        \"e\": 1288458000000,\r\n                        \"s\": 1269709200000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Yekaterinburg\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224968400000,\r\n                        \"s\": 1206824400000\r\n                    },\r\n                    {\r\n                        \"e\": 1256418000000,\r\n                        \"s\": 1238274000000\r\n                    },\r\n                    {\r\n                        \"e\": 1288472400000,\r\n                        \"s\": 1269723600000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Asia/Yerevan\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224972000000,\r\n                        \"s\": 1206828000000\r\n                    },\r\n                    {\r\n                        \"e\": 1256421600000,\r\n                        \"s\": 1238277600000\r\n                    },\r\n                    {\r\n                        \"e\": 1288476000000,\r\n                        \"s\": 1269727200000\r\n                    },\r\n                    {\r\n                        \"e\": 1319925600000,\r\n                        \"s\": 1301176800000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Australia/Lord_Howe\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1207407600000,\r\n                        \"s\": 1223134200000\r\n                    },\r\n                    {\r\n                        \"e\": 1238857200000,\r\n                        \"s\": 1254583800000\r\n                    },\r\n                    {\r\n                        \"e\": 1270306800000,\r\n                        \"s\": 1286033400000\r\n                    },\r\n                    {\r\n                        \"e\": 1301756400000,\r\n                        \"s\": 1317483000000\r\n                    },\r\n                    {\r\n                        \"e\": 1333206000000,\r\n                        \"s\": 1349537400000\r\n                    },\r\n                    {\r\n                        \"e\": 1365260400000,\r\n                        \"s\": 1380987000000\r\n                    },\r\n                    {\r\n                        \"e\": 1396710000000,\r\n                        \"s\": 1412436600000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Australia/Perth\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1206813600000,\r\n                        \"s\": 1224957600000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Europe/Helsinki\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224982800000,\r\n                        \"s\": 1206838800000\r\n                    },\r\n                    {\r\n                        \"e\": 1256432400000,\r\n                        \"s\": 1238288400000\r\n                    },\r\n                    {\r\n                        \"e\": 1288486800000,\r\n                        \"s\": 1269738000000\r\n                    },\r\n                    {\r\n                        \"e\": 1319936400000,\r\n                        \"s\": 1301187600000\r\n                    },\r\n                    {\r\n                        \"e\": 1351386000000,\r\n                        \"s\": 1332637200000\r\n                    },\r\n                    {\r\n                        \"e\": 1382835600000,\r\n                        \"s\": 1364691600000\r\n                    },\r\n                    {\r\n                        \"e\": 1414285200000,\r\n                        \"s\": 1396141200000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Europe/Minsk\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224979200000,\r\n                        \"s\": 1206835200000\r\n                    },\r\n                    {\r\n                        \"e\": 1256428800000,\r\n                        \"s\": 1238284800000\r\n                    },\r\n                    {\r\n                        \"e\": 1288483200000,\r\n                        \"s\": 1269734400000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Europe/Moscow\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224975600000,\r\n                        \"s\": 1206831600000\r\n                    },\r\n                    {\r\n                        \"e\": 1256425200000,\r\n                        \"s\": 1238281200000\r\n                    },\r\n                    {\r\n                        \"e\": 1288479600000,\r\n                        \"s\": 1269730800000\r\n                    },\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    false\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Pacific/Apia\",\r\n                \"rules\": [\r\n                    false,\r\n                    false,\r\n                    false,\r\n                    {\r\n                        \"e\": 1301752800000,\r\n                        \"s\": 1316872800000\r\n                    },\r\n                    {\r\n                        \"e\": 1333202400000,\r\n                        \"s\": 1348927200000\r\n                    },\r\n                    {\r\n                        \"e\": 1365256800000,\r\n                        \"s\": 1380376800000\r\n                    },\r\n                    {\r\n                        \"e\": 1396706400000,\r\n                        \"s\": 1411826400000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Pacific/Fiji\",\r\n                \"rules\": [\r\n                    false,\r\n                    false,\r\n                    {\r\n                        \"e\": 1269698400000,\r\n                        \"s\": 1287842400000\r\n                    },\r\n                    {\r\n                        \"e\": 1327154400000,\r\n                        \"s\": 1319292000000\r\n                    },\r\n                    {\r\n                        \"e\": 1358604000000,\r\n                        \"s\": 1350741600000\r\n                    },\r\n                    {\r\n                        \"e\": 1390050000000,\r\n                        \"s\": 1382796000000\r\n                    },\r\n                    {\r\n                        \"e\": 1421503200000,\r\n                        \"s\": 1414850400000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Europe/London\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1224982800000,\r\n                        \"s\": 1206838800000\r\n                    },\r\n                    {\r\n                        \"e\": 1256432400000,\r\n                        \"s\": 1238288400000\r\n                    },\r\n                    {\r\n                        \"e\": 1288486800000,\r\n                        \"s\": 1269738000000\r\n                    },\r\n                    {\r\n                        \"e\": 1319936400000,\r\n                        \"s\": 1301187600000\r\n                    },\r\n                    {\r\n                        \"e\": 1351386000000,\r\n                        \"s\": 1332637200000\r\n                    },\r\n                    {\r\n                        \"e\": 1382835600000,\r\n                        \"s\": 1364691600000\r\n                    },\r\n                    {\r\n                        \"e\": 1414285200000,\r\n                        \"s\": 1396141200000\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"name\": \"Africa/Windhoek\",\r\n                \"rules\": [\r\n                    {\r\n                        \"e\": 1220749200000,\r\n                        \"s\": 1207440000000\r\n                    },\r\n                    {\r\n                        \"e\": 1252198800000,\r\n                        \"s\": 1238889600000\r\n                    },\r\n                    {\r\n                        \"e\": 1283648400000,\r\n                        \"s\": 1270339200000\r\n                    },\r\n                    {\r\n                        \"e\": 1315098000000,\r\n                        \"s\": 1301788800000\r\n                    },\r\n                    {\r\n                        \"e\": 1346547600000,\r\n                        \"s\": 1333238400000\r\n                    },\r\n                    {\r\n                        \"e\": 1377997200000,\r\n                        \"s\": 1365292800000\r\n                    },\r\n                    {\r\n                        \"e\": 1410051600000,\r\n                        \"s\": 1396742400000\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n\r\n    return jstz;\r\n});\r\n"]}