{"version":3,"sources":["vendors/browser-cookies/cookies.js"],"names":["define","exports","set","name","value","options","opts","defaults","expires","domain","path","undefined","secure","httponly","samesite","expDate","Date","getTime","document","cookie","replace","encodeURIComponent","toUTCString","get","cookies","split","length","pop","separatorIndex","indexOf","decodeURIComponent","slice","erase","all"],"mappings":";;;;;;;AAAAA,UAAU,WACR,IAAIC,SAIJC,IAAc,SAASC,EAAMC,EAAOC,GAElC,IAAIC,EAAOD,MACPE,EAAWN,QAAQM,SAGnBC,EAAWF,EAAKE,SAAYD,EAASC,QACrCC,EAAWH,EAAKG,QAAYF,EAASE,OACrCC,OAA6BC,IAAlBL,EAAKI,KAAyBJ,EAAKI,UAA8BC,IAAlBJ,EAASG,KAAqBH,EAASG,KAAO,IACxGE,OAA6BD,IAAlBL,EAAKM,OAAyBN,EAAKM,OAAWL,EAASK,OAClEC,OAA6BF,IAAlBL,EAAKO,SAAyBP,EAAKO,SAAWN,EAASM,SAClEC,OAA6BH,IAAlBL,EAAKQ,SAAyBR,EAAKQ,SAAWP,EAASO,SAIlEC,EAAUP,EAAU,IAAIQ,KAEL,iBAAZR,GAAuB,IAAIQ,MAAOC,UAAuB,MAAVT,EAEtDA,GACA,EAGJU,SAASC,OAAShB,EAAKiB,QAAQ,cAAeC,oBAC7CD,QAAQ,IAAK,OACbA,QAAQ,IAAK,OACd,IAAMhB,EAAMgB,QAAQ,qBAAsBC,qBACzCN,GAAWA,EAAQE,WAAa,EAAI,YAAcF,EAAQO,cAAgB,KAC1Eb,EAAW,WAAaA,EAAa,KACrCC,EAAW,SAAaA,EAAa,KACrCE,EAAW,UAA0B,KACrCC,EAAW,YAA0B,KACrCC,EAAW,aAAeA,EAAW,KAGxCS,IAAc,SAASpB,GAIrB,IAHA,IAAIqB,EAAUN,SAASC,OAAOM,MAAM,KAG9BD,EAAQE,QAAQ,CACpB,IAAIP,EAASK,EAAQG,MAGjBC,EAAiBT,EAAOU,QAAQ,KAQpC,GALAD,EAAiBA,EAAiB,EAAIT,EAAOO,OAASE,EAEpCE,mBAAmBX,EAAOY,MAAM,EAAGH,GAAgBR,QAAQ,OAAQ,OAGjEjB,EAClB,OAAO2B,mBAAmBX,EAAOY,MAAMH,EAAiB,IAK5D,OAAO,MAGTI,MAAgB,SAAS7B,EAAME,GAC7BJ,QAAQC,IAAIC,EAAM,IAChBK,SAAW,EACXC,OAAUJ,GAAWA,EAAQI,OAC7BC,KAAUL,GAAWA,EAAQK,KAC7BE,OAAU,EACVC,SAAU,KAIdoB,IAAc,WAKZ,IAJA,IAAIA,KACAT,EAAUN,SAASC,OAAOM,MAAM,KAG9BD,EAAQE,QAAQ,CACpB,IAAIP,EAASK,EAAQG,MAGjBC,EAAiBT,EAAOU,QAAQ,KAGpCD,EAAiBA,EAAiB,EAAIT,EAAOO,OAASE,EAItDK,EADkBH,mBAAmBX,EAAOY,MAAM,EAAGH,GAAgBR,QAAQ,OAAQ,MAClEU,mBAAmBX,EAAOY,MAAMH,EAAiB,IAGtE,OAAOK,IAGT,OAAOhC","file":"../../../vendors/browser-cookies/cookies.js","sourcesContent":["define([],function(){\r\n  var exports = {\r\n\r\n  };\r\n\r\n  exports.set = function(name, value, options) {\r\n    // Retrieve options and defaults\r\n    var opts = options || {};\r\n    var defaults = exports.defaults;\r\n\r\n    // Apply default value for unspecified options\r\n    var expires  = opts.expires  || defaults.expires;\r\n    var domain   = opts.domain   || defaults.domain;\r\n    var path     = opts.path     !== undefined ? opts.path     : (defaults.path !== undefined ? defaults.path : '/');\r\n    var secure   = opts.secure   !== undefined ? opts.secure   : defaults.secure;\r\n    var httponly = opts.httponly !== undefined ? opts.httponly : defaults.httponly;\r\n    var samesite = opts.samesite !== undefined ? opts.samesite : defaults.samesite;\r\n\r\n    // Determine cookie expiration date\r\n    // If succesful the result will be a valid Date, otherwise it will be an invalid Date or false(ish)\r\n    var expDate = expires ? new Date(\r\n        // in case expires is an integer, it should specify the number of days till the cookie expires\r\n        typeof expires === 'number' ? new Date().getTime() + (expires * 864e5) :\r\n        // else expires should be either a Date object or in a format recognized by Date.parse()\r\n        expires\r\n    ) : 0;\r\n\r\n    // Set cookie\r\n    document.cookie = name.replace(/[^+#$&^`|]/g, encodeURIComponent)                // Encode cookie name\r\n    .replace('(', '%28')\r\n    .replace(')', '%29') +\r\n    '=' + value.replace(/[^+#$&/:<-\\[\\]-}]/g, encodeURIComponent) +                  // Encode cookie value (RFC6265)\r\n    (expDate && expDate.getTime() >= 0 ? ';expires=' + expDate.toUTCString() : '') + // Add expiration date\r\n    (domain   ? ';domain=' + domain     : '') +                                      // Add domain\r\n    (path     ? ';path='   + path       : '') +                                      // Add path\r\n    (secure   ? ';secure'               : '') +                                      // Add secure option\r\n    (httponly ? ';httponly'             : '') +                                      // Add httponly option\r\n    (samesite ? ';samesite=' + samesite : '');                                       // Add samesite option\r\n  };\r\n\r\n  exports.get = function(name) {\r\n    var cookies = document.cookie.split(';');\r\n    \r\n    // Iterate all cookies\r\n    while(cookies.length) {\r\n      var cookie = cookies.pop();\r\n\r\n      // Determine separator index (\"name=value\")\r\n      var separatorIndex = cookie.indexOf('=');\r\n\r\n      // IE<11 emits the equal sign when the cookie value is empty\r\n      separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;\r\n\r\n      var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, ''));\r\n\r\n      // Return cookie value if the name matches\r\n      if (cookie_name === name) {\r\n        return decodeURIComponent(cookie.slice(separatorIndex + 1));\r\n      }\r\n    }\r\n\r\n    // Return `null` as the cookie was not found\r\n    return null;\r\n  };\r\n\r\n  exports.erase = function(name, options) {\r\n    exports.set(name, '', {\r\n      expires:  -1,\r\n      domain:   options && options.domain,\r\n      path:     options && options.path,\r\n      secure:   0,\r\n      httponly: 0}\r\n    );\r\n  };\r\n\r\n  exports.all = function() {\r\n    var all = {};\r\n    var cookies = document.cookie.split(';');\r\n\r\n    // Iterate all cookies\r\n    while(cookies.length) {\r\n      var cookie = cookies.pop();\r\n\r\n      // Determine separator index (\"name=value\")\r\n      var separatorIndex = cookie.indexOf('=');\r\n\r\n      // IE<11 emits the equal sign when the cookie value is empty\r\n      separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;\r\n\r\n      // add the cookie name and value to the `all` object\r\n      var cookie_name = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\\s+/, ''));\r\n      all[cookie_name] = decodeURIComponent(cookie.slice(separatorIndex + 1));\r\n    }\r\n\r\n    return all;\r\n  };\r\n\r\n  return exports;\r\n});\r\n\r\n\r\n"]}