{"version":3,"sources":["vendors/moment/timezone.js"],"names":["define","moment","undefined","version","default","cachedGuess","zones","links","countries","names","guesses","logError","momentVersion","split","major","minor","charCodeToInt","charCode","unpackBase60","string","i","parts","whole","fractional","multiplier","out","sign","charCodeAt","length","arrayToInt","array","mapIndices","source","indices","unpack","data","offsets","untils","Math","round","Infinity","intToUntil","name","abbrs","population","Zone","packedString","this","_set","Country","country_name","zone_names","OffsetAt","at","timeString","toTimeString","abbr","match","join","offset","getTimezoneOffset","ZoneScore","zone","offsetScore","abbrScore","findChange","low","high","mid","diff","Date","sortZoneScores","a","b","localeCompare","addToGuesses","guessesForUserOffsets","j","guessesOffset","offsetsLength","filteredGuesses","hasOwnProperty","push","rebuildGuess","intlName","Intl","DateTimeFormat","resolvedOptions","timeZone","normalizeName","e","zoneScore","change","next","startYear","getFullYear","last","userOffsets","zoneScores","getZone","scoreOffsetAt","sort","toLowerCase","replace","addZone","packed","normalized","caller","link","addLink","aliases","alias","normal0","normal1","needsOffset","m","isUnixTimestamp","_f","_a","_tzm","message","console","error","tz","input","args","Array","prototype","slice","call","arguments","utc","apply","isMoment","add","parse","unpacked","_index","timestamp","target","zone_name","Object","keys","filter","country_code","indexOf","offsetNext","offsetPrev","max","moveAmbiguousForward","moveInvalidForward","mom","utcOffset","offsetAt","abs","dataVersion","_zones","_links","_names","_countries","load","country_zones","toUpperCase","addCountries","zoneExists","didShowError","guess","ignoreCache","zonesForCountry","country","with_offset","map","old","fn","abbrWrap","_z","resetZoneWrap","defaultZone","updateOffset","keepTime","_isUTC","_d","z","Error","zoneName","zoneAbbr","local","setDefault","momentProperties","toString"],"mappings":"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","file":"../../../vendors/moment/timezone.js","sourcesContent":["define(['skylark-moment'], function (moment) {\r\n\t\"use strict\";\r\n\r\n\t// Resolves es6 module loading issue\r\n\tif (moment.version === undefined && moment.default) {\r\n\t\tmoment = moment.default;\r\n\t}\r\n\r\n\t// Do not load moment-timezone a second time.\r\n\t// if (moment.tz !== undefined) {\r\n\t// \tlogError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);\r\n\t// \treturn moment;\r\n\t// }\r\n\r\n\tvar VERSION = \"0.5.31\",\r\n\t\tzones = {},\r\n\t\tlinks = {},\r\n\t\tcountries = {},\r\n\t\tnames = {},\r\n\t\tguesses = {},\r\n\t\tcachedGuess;\r\n\r\n\tif (!moment || typeof moment.version !== 'string') {\r\n\t\tlogError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');\r\n\t}\r\n\r\n\tvar momentVersion = moment.version.split('.'),\r\n\t\tmajor = +momentVersion[0],\r\n\t\tminor = +momentVersion[1];\r\n\r\n\t// Moment.js version check\r\n\tif (major < 2 || (major === 2 && minor < 6)) {\r\n\t\tlogError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');\r\n\t}\r\n\r\n\t/************************************\r\n\t\tUnpacking\r\n\t************************************/\r\n\r\n\tfunction charCodeToInt(charCode) {\r\n\t\tif (charCode > 96) {\r\n\t\t\treturn charCode - 87;\r\n\t\t} else if (charCode > 64) {\r\n\t\t\treturn charCode - 29;\r\n\t\t}\r\n\t\treturn charCode - 48;\r\n\t}\r\n\r\n\tfunction unpackBase60(string) {\r\n\t\tvar i = 0,\r\n\t\t\tparts = string.split('.'),\r\n\t\t\twhole = parts[0],\r\n\t\t\tfractional = parts[1] || '',\r\n\t\t\tmultiplier = 1,\r\n\t\t\tnum,\r\n\t\t\tout = 0,\r\n\t\t\tsign = 1;\r\n\r\n\t\t// handle negative numbers\r\n\t\tif (string.charCodeAt(0) === 45) {\r\n\t\t\ti = 1;\r\n\t\t\tsign = -1;\r\n\t\t}\r\n\r\n\t\t// handle digits before the decimal\r\n\t\tfor (i; i < whole.length; i++) {\r\n\t\t\tnum = charCodeToInt(whole.charCodeAt(i));\r\n\t\t\tout = 60 * out + num;\r\n\t\t}\r\n\r\n\t\t// handle digits after the decimal\r\n\t\tfor (i = 0; i < fractional.length; i++) {\r\n\t\t\tmultiplier = multiplier / 60;\r\n\t\t\tnum = charCodeToInt(fractional.charCodeAt(i));\r\n\t\t\tout += num * multiplier;\r\n\t\t}\r\n\r\n\t\treturn out * sign;\r\n\t}\r\n\r\n\tfunction arrayToInt (array) {\r\n\t\tfor (var i = 0; i < array.length; i++) {\r\n\t\t\tarray[i] = unpackBase60(array[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction intToUntil (array, length) {\r\n\t\tfor (var i = 0; i < length; i++) {\r\n\t\t\tarray[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds\r\n\t\t}\r\n\r\n\t\tarray[length - 1] = Infinity;\r\n\t}\r\n\r\n\tfunction mapIndices (source, indices) {\r\n\t\tvar out = [], i;\r\n\r\n\t\tfor (i = 0; i < indices.length; i++) {\r\n\t\t\tout[i] = source[indices[i]];\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction unpack (string) {\r\n\t\tvar data = string.split('|'),\r\n\t\t\toffsets = data[2].split(' '),\r\n\t\t\tindices = data[3].split(''),\r\n\t\t\tuntils  = data[4].split(' ');\r\n\r\n\t\tarrayToInt(offsets);\r\n\t\tarrayToInt(indices);\r\n\t\tarrayToInt(untils);\r\n\r\n\t\tintToUntil(untils, indices.length);\r\n\r\n\t\treturn {\r\n\t\t\tname       : data[0],\r\n\t\t\tabbrs      : mapIndices(data[1].split(' '), indices),\r\n\t\t\toffsets    : mapIndices(offsets, indices),\r\n\t\t\tuntils     : untils,\r\n\t\t\tpopulation : data[5] | 0\r\n\t\t};\r\n\t}\r\n\r\n\t/************************************\r\n\t\tZone object\r\n\t************************************/\r\n\r\n\tfunction Zone (packedString) {\r\n\t\tif (packedString) {\r\n\t\t\tthis._set(unpack(packedString));\r\n\t\t}\r\n\t}\r\n\r\n\tZone.prototype = {\r\n\t\t_set : function (unpacked) {\r\n\t\t\tthis.name       = unpacked.name;\r\n\t\t\tthis.abbrs      = unpacked.abbrs;\r\n\t\t\tthis.untils     = unpacked.untils;\r\n\t\t\tthis.offsets    = unpacked.offsets;\r\n\t\t\tthis.population = unpacked.population;\r\n\t\t},\r\n\r\n\t\t_index : function (timestamp) {\r\n\t\t\tvar target = +timestamp,\r\n\t\t\t\tuntils = this.untils,\r\n\t\t\t\ti;\r\n\r\n\t\t\tfor (i = 0; i < untils.length; i++) {\r\n\t\t\t\tif (target < untils[i]) {\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcountries : function () {\r\n\t\t\tvar zone_name = this.name;\r\n\t\t\treturn Object.keys(countries).filter(function (country_code) {\r\n\t\t\t\treturn countries[country_code].zones.indexOf(zone_name) !== -1;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tparse : function (timestamp) {\r\n\t\t\tvar target  = +timestamp,\r\n\t\t\t\toffsets = this.offsets,\r\n\t\t\t\tuntils  = this.untils,\r\n\t\t\t\tmax     = untils.length - 1,\r\n\t\t\t\toffset, offsetNext, offsetPrev, i;\r\n\r\n\t\t\tfor (i = 0; i < max; i++) {\r\n\t\t\t\toffset     = offsets[i];\r\n\t\t\t\toffsetNext = offsets[i + 1];\r\n\t\t\t\toffsetPrev = offsets[i ? i - 1 : i];\r\n\r\n\t\t\t\tif (offset < offsetNext && tz.moveAmbiguousForward) {\r\n\t\t\t\t\toffset = offsetNext;\r\n\t\t\t\t} else if (offset > offsetPrev && tz.moveInvalidForward) {\r\n\t\t\t\t\toffset = offsetPrev;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (target < untils[i] - (offset * 60000)) {\r\n\t\t\t\t\treturn offsets[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn offsets[max];\r\n\t\t},\r\n\r\n\t\tabbr : function (mom) {\r\n\t\t\treturn this.abbrs[this._index(mom)];\r\n\t\t},\r\n\r\n\t\toffset : function (mom) {\r\n\t\t\tlogError(\"zone.offset has been deprecated in favor of zone.utcOffset\");\r\n\t\t\treturn this.offsets[this._index(mom)];\r\n\t\t},\r\n\r\n\t\tutcOffset : function (mom) {\r\n\t\t\treturn this.offsets[this._index(mom)];\r\n\t\t}\r\n\t};\r\n\r\n\t/************************************\r\n\t\tCountry object\r\n\t************************************/\r\n\r\n\tfunction Country (country_name, zone_names) {\r\n\t\tthis.name = country_name;\r\n\t\tthis.zones = zone_names;\r\n\t}\r\n\r\n\t/************************************\r\n\t\tCurrent Timezone\r\n\t************************************/\r\n\r\n\tfunction OffsetAt(at) {\r\n\t\tvar timeString = at.toTimeString();\r\n\t\tvar abbr = timeString.match(/\\([a-z ]+\\)/i);\r\n\t\tif (abbr && abbr[0]) {\r\n\t\t\t// 17:56:31 GMT-0600 (CST)\r\n\t\t\t// 17:56:31 GMT-0600 (Central Standard Time)\r\n\t\t\tabbr = abbr[0].match(/[A-Z]/g);\r\n\t\t\tabbr = abbr ? abbr.join('') : undefined;\r\n\t\t} else {\r\n\t\t\t// 17:56:31 CST\r\n\t\t\t// 17:56:31 GMT+0800 (台北標準時間)\r\n\t\t\tabbr = timeString.match(/[A-Z]{3,5}/g);\r\n\t\t\tabbr = abbr ? abbr[0] : undefined;\r\n\t\t}\r\n\r\n\t\tif (abbr === 'GMT') {\r\n\t\t\tabbr = undefined;\r\n\t\t}\r\n\r\n\t\tthis.at = +at;\r\n\t\tthis.abbr = abbr;\r\n\t\tthis.offset = at.getTimezoneOffset();\r\n\t}\r\n\r\n\tfunction ZoneScore(zone) {\r\n\t\tthis.zone = zone;\r\n\t\tthis.offsetScore = 0;\r\n\t\tthis.abbrScore = 0;\r\n\t}\r\n\r\n\tZoneScore.prototype.scoreOffsetAt = function (offsetAt) {\r\n\t\tthis.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);\r\n\t\tif (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {\r\n\t\t\tthis.abbrScore++;\r\n\t\t}\r\n\t};\r\n\r\n\tfunction findChange(low, high) {\r\n\t\tvar mid, diff;\r\n\r\n\t\twhile ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {\r\n\t\t\tmid = new OffsetAt(new Date(low.at + diff));\r\n\t\t\tif (mid.offset === low.offset) {\r\n\t\t\t\tlow = mid;\r\n\t\t\t} else {\r\n\t\t\t\thigh = mid;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn low;\r\n\t}\r\n\r\n\tfunction userOffsets() {\r\n\t\tvar startYear = new Date().getFullYear() - 2,\r\n\t\t\tlast = new OffsetAt(new Date(startYear, 0, 1)),\r\n\t\t\toffsets = [last],\r\n\t\t\tchange, next, i;\r\n\r\n\t\tfor (i = 1; i < 48; i++) {\r\n\t\t\tnext = new OffsetAt(new Date(startYear, i, 1));\r\n\t\t\tif (next.offset !== last.offset) {\r\n\t\t\t\tchange = findChange(last, next);\r\n\t\t\t\toffsets.push(change);\r\n\t\t\t\toffsets.push(new OffsetAt(new Date(change.at + 6e4)));\r\n\t\t\t}\r\n\t\t\tlast = next;\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));\r\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));\r\n\t\t}\r\n\r\n\t\treturn offsets;\r\n\t}\r\n\r\n\tfunction sortZoneScores (a, b) {\r\n\t\tif (a.offsetScore !== b.offsetScore) {\r\n\t\t\treturn a.offsetScore - b.offsetScore;\r\n\t\t}\r\n\t\tif (a.abbrScore !== b.abbrScore) {\r\n\t\t\treturn a.abbrScore - b.abbrScore;\r\n\t\t}\r\n\t\tif (a.zone.population !== b.zone.population) {\r\n\t\t\treturn b.zone.population - a.zone.population;\r\n\t\t}\r\n\t\treturn b.zone.name.localeCompare(a.zone.name);\r\n\t}\r\n\r\n\tfunction addToGuesses (name, offsets) {\r\n\t\tvar i, offset;\r\n\t\tarrayToInt(offsets);\r\n\t\tfor (i = 0; i < offsets.length; i++) {\r\n\t\t\toffset = offsets[i];\r\n\t\t\tguesses[offset] = guesses[offset] || {};\r\n\t\t\tguesses[offset][name] = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction guessesForUserOffsets (offsets) {\r\n\t\tvar offsetsLength = offsets.length,\r\n\t\t\tfilteredGuesses = {},\r\n\t\t\tout = [],\r\n\t\t\ti, j, guessesOffset;\r\n\r\n\t\tfor (i = 0; i < offsetsLength; i++) {\r\n\t\t\tguessesOffset = guesses[offsets[i].offset] || {};\r\n\t\t\tfor (j in guessesOffset) {\r\n\t\t\t\tif (guessesOffset.hasOwnProperty(j)) {\r\n\t\t\t\t\tfilteredGuesses[j] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i in filteredGuesses) {\r\n\t\t\tif (filteredGuesses.hasOwnProperty(i)) {\r\n\t\t\t\tout.push(names[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\tfunction rebuildGuess () {\r\n\r\n\t\t// use Intl API when available and returning valid time zone\r\n\t\ttry {\r\n\t\t\tvar intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\t\t\tif (intlName && intlName.length > 3) {\r\n\t\t\t\tvar name = names[normalizeName(intlName)];\r\n\t\t\t\tif (name) {\r\n\t\t\t\t\treturn name;\r\n\t\t\t\t}\r\n\t\t\t\tlogError(\"Moment Timezone found \" + intlName + \" from the Intl api, but did not have that data loaded.\");\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\t// Intl unavailable, fall back to manual guessing.\r\n\t\t}\r\n\r\n\t\tvar offsets = userOffsets(),\r\n\t\t\toffsetsLength = offsets.length,\r\n\t\t\tguesses = guessesForUserOffsets(offsets),\r\n\t\t\tzoneScores = [],\r\n\t\t\tzoneScore, i, j;\r\n\r\n\t\tfor (i = 0; i < guesses.length; i++) {\r\n\t\t\tzoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);\r\n\t\t\tfor (j = 0; j < offsetsLength; j++) {\r\n\t\t\t\tzoneScore.scoreOffsetAt(offsets[j]);\r\n\t\t\t}\r\n\t\t\tzoneScores.push(zoneScore);\r\n\t\t}\r\n\r\n\t\tzoneScores.sort(sortZoneScores);\r\n\r\n\t\treturn zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;\r\n\t}\r\n\r\n\tfunction guess (ignoreCache) {\r\n\t\tif (!cachedGuess || ignoreCache) {\r\n\t\t\tcachedGuess = rebuildGuess();\r\n\t\t}\r\n\t\treturn cachedGuess;\r\n\t}\r\n\r\n\t/************************************\r\n\t\tGlobal Methods\r\n\t************************************/\r\n\r\n\tfunction normalizeName (name) {\r\n\t\treturn (name || '').toLowerCase().replace(/\\//g, '_');\r\n\t}\r\n\r\n\tfunction addZone (packed) {\r\n\t\tvar i, name, split, normalized;\r\n\r\n\t\tif (typeof packed === \"string\") {\r\n\t\t\tpacked = [packed];\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < packed.length; i++) {\r\n\t\t\tsplit = packed[i].split('|');\r\n\t\t\tname = split[0];\r\n\t\t\tnormalized = normalizeName(name);\r\n\t\t\tzones[normalized] = packed[i];\r\n\t\t\tnames[normalized] = name;\r\n\t\t\taddToGuesses(normalized, split[2].split(' '));\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getZone (name, caller) {\r\n\r\n\t\tname = normalizeName(name);\r\n\r\n\t\tvar zone = zones[name];\r\n\t\tvar link;\r\n\r\n\t\tif (zone instanceof Zone) {\r\n\t\t\treturn zone;\r\n\t\t}\r\n\r\n\t\tif (typeof zone === 'string') {\r\n\t\t\tzone = new Zone(zone);\r\n\t\t\tzones[name] = zone;\r\n\t\t\treturn zone;\r\n\t\t}\r\n\r\n\t\t// Pass getZone to prevent recursion more than 1 level deep\r\n\t\tif (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {\r\n\t\t\tzone = zones[name] = new Zone();\r\n\t\t\tzone._set(link);\r\n\t\t\tzone.name = names[name];\r\n\t\t\treturn zone;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfunction getNames () {\r\n\t\tvar i, out = [];\r\n\r\n\t\tfor (i in names) {\r\n\t\t\tif (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {\r\n\t\t\t\tout.push(names[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn out.sort();\r\n\t}\r\n\r\n\tfunction getCountryNames () {\r\n\t\treturn Object.keys(countries);\r\n\t}\r\n\r\n\tfunction addLink (aliases) {\r\n\t\tvar i, alias, normal0, normal1;\r\n\r\n\t\tif (typeof aliases === \"string\") {\r\n\t\t\taliases = [aliases];\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < aliases.length; i++) {\r\n\t\t\talias = aliases[i].split('|');\r\n\r\n\t\t\tnormal0 = normalizeName(alias[0]);\r\n\t\t\tnormal1 = normalizeName(alias[1]);\r\n\r\n\t\t\tlinks[normal0] = normal1;\r\n\t\t\tnames[normal0] = alias[0];\r\n\r\n\t\t\tlinks[normal1] = normal0;\r\n\t\t\tnames[normal1] = alias[1];\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addCountries (data) {\r\n\t\tvar i, country_code, country_zones, split;\r\n\t\tif (!data || !data.length) return;\r\n\t\tfor (i = 0; i < data.length; i++) {\r\n\t\t\tsplit = data[i].split('|');\r\n\t\t\tcountry_code = split[0].toUpperCase();\r\n\t\t\tcountry_zones = split[1].split(' ');\r\n\t\t\tcountries[country_code] = new Country(\r\n\t\t\t\tcountry_code,\r\n\t\t\t\tcountry_zones\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getCountry (name) {\r\n\t\tname = name.toUpperCase();\r\n\t\treturn countries[name] || null;\r\n\t}\r\n\r\n\tfunction zonesForCountry(country, with_offset) {\r\n\t\tcountry = getCountry(country);\r\n\r\n\t\tif (!country) return null;\r\n\r\n\t\tvar zones = country.zones.sort();\r\n\r\n\t\tif (with_offset) {\r\n\t\t\treturn zones.map(function (zone_name) {\r\n\t\t\t\tvar zone = getZone(zone_name);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: zone_name,\r\n\t\t\t\t\toffset: zone.utcOffset(new Date())\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn zones;\r\n\t}\r\n\r\n\tfunction loadData (data) {\r\n\t\taddZone(data.zones);\r\n\t\taddLink(data.links);\r\n\t\taddCountries(data.countries);\r\n\t\ttz.dataVersion = data.version;\r\n\t}\r\n\r\n\tfunction zoneExists (name) {\r\n\t\tif (!zoneExists.didShowError) {\r\n\t\t\tzoneExists.didShowError = true;\r\n\t\t\t\tlogError(\"moment.tz.zoneExists('\" + name + \"') has been deprecated in favor of !moment.tz.zone('\" + name + \"')\");\r\n\t\t}\r\n\t\treturn !!getZone(name);\r\n\t}\r\n\r\n\tfunction needsOffset (m) {\r\n\t\tvar isUnixTimestamp = (m._f === 'X' || m._f === 'x');\r\n\t\treturn !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);\r\n\t}\r\n\r\n\tfunction logError (message) {\r\n\t\tif (typeof console !== 'undefined' && typeof console.error === 'function') {\r\n\t\t\tconsole.error(message);\r\n\t\t}\r\n\t}\r\n\r\n\t/************************************\r\n\t\tmoment.tz namespace\r\n\t************************************/\r\n\r\n\tfunction tz (input) {\r\n\t\tvar args = Array.prototype.slice.call(arguments, 0, -1),\r\n\t\t\tname = arguments[arguments.length - 1],\r\n\t\t\tzone = getZone(name),\r\n\t\t\tout  = moment.utc.apply(null, args);\r\n\r\n\t\tif (zone && !moment.isMoment(input) && needsOffset(out)) {\r\n\t\t\tout.add(zone.parse(out), 'minutes');\r\n\t\t}\r\n\r\n\t\tout.tz(name);\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\ttz.version      = VERSION;\r\n\ttz.dataVersion  = '';\r\n\ttz._zones       = zones;\r\n\ttz._links       = links;\r\n\ttz._names       = names;\r\n\ttz._countries\t= countries;\r\n\ttz.add          = addZone;\r\n\ttz.link         = addLink;\r\n\ttz.load         = loadData;\r\n\ttz.zone         = getZone;\r\n\ttz.zoneExists   = zoneExists; // deprecated in 0.1.0\r\n\ttz.guess        = guess;\r\n\ttz.names        = getNames;\r\n\ttz.Zone         = Zone;\r\n\ttz.unpack       = unpack;\r\n\ttz.unpackBase60 = unpackBase60;\r\n\ttz.needsOffset  = needsOffset;\r\n\ttz.moveInvalidForward   = true;\r\n\ttz.moveAmbiguousForward = false;\r\n\ttz.countries    = getCountryNames;\r\n\ttz.zonesForCountry = zonesForCountry;\r\n\r\n\t/************************************\r\n\t\tInterface with Moment.js\r\n\t************************************/\r\n\r\n\tvar fn = moment.fn;\r\n\r\n\tmoment.tz = tz;\r\n\r\n\tmoment.defaultZone = null;\r\n\r\n\tmoment.updateOffset = function (mom, keepTime) {\r\n\t\tvar zone = moment.defaultZone,\r\n\t\t\toffset;\r\n\r\n\t\tif (mom._z === undefined) {\r\n\t\t\tif (zone && needsOffset(mom) && !mom._isUTC) {\r\n\t\t\t\tmom._d = moment.utc(mom._a)._d;\r\n\t\t\t\tmom.utc().add(zone.parse(mom), 'minutes');\r\n\t\t\t}\r\n\t\t\tmom._z = zone;\r\n\t\t}\r\n\t\tif (mom._z) {\r\n\t\t\toffset = mom._z.utcOffset(mom);\r\n\t\t\tif (Math.abs(offset) < 16) {\r\n\t\t\t\toffset = offset / 60;\r\n\t\t\t}\r\n\t\t\tif (mom.utcOffset !== undefined) {\r\n\t\t\t\tvar z = mom._z;\r\n\t\t\t\tmom.utcOffset(-offset, keepTime);\r\n\t\t\t\tmom._z = z;\r\n\t\t\t} else {\r\n\t\t\t\tmom.zone(offset, keepTime);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tfn.tz = function (name, keepTime) {\r\n\t\tif (name) {\r\n\t\t\tif (typeof name !== 'string') {\r\n\t\t\t\tthrow new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');\r\n\t\t\t}\r\n\t\t\tthis._z = getZone(name);\r\n\t\t\tif (this._z) {\r\n\t\t\t\tmoment.updateOffset(this, keepTime);\r\n\t\t\t} else {\r\n\t\t\t\tlogError(\"Moment Timezone has no data for \" + name + \". See http://momentjs.com/timezone/docs/#/data-loading/.\");\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif (this._z) { return this._z.name; }\r\n\t};\r\n\r\n\tfunction abbrWrap (old) {\r\n\t\treturn function () {\r\n\t\t\tif (this._z) { return this._z.abbr(this); }\r\n\t\t\treturn old.call(this);\r\n\t\t};\r\n\t}\r\n\r\n\tfunction resetZoneWrap (old) {\r\n\t\treturn function () {\r\n\t\t\tthis._z = null;\r\n\t\t\treturn old.apply(this, arguments);\r\n\t\t};\r\n\t}\r\n\r\n\tfunction resetZoneWrap2 (old) {\r\n\t\treturn function () {\r\n\t\t\tif (arguments.length > 0) this._z = null;\r\n\t\t\treturn old.apply(this, arguments);\r\n\t\t};\r\n\t}\r\n\r\n\tfn.zoneName  = abbrWrap(fn.zoneName);\r\n\tfn.zoneAbbr  = abbrWrap(fn.zoneAbbr);\r\n\tfn.utc       = resetZoneWrap(fn.utc);\r\n\tfn.local     = resetZoneWrap(fn.local);\r\n\tfn.utcOffset = resetZoneWrap2(fn.utcOffset);\r\n\r\n\tmoment.tz.setDefault = function(name) {\r\n\t\tif (major < 2 || (major === 2 && minor < 9)) {\r\n\t\t\tlogError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');\r\n\t\t}\r\n\t\tmoment.defaultZone = name ? getZone(name) : null;\r\n\t\treturn moment;\r\n\t};\r\n\r\n\t// Cloning a moment should include the _z property.\r\n\tvar momentProperties = moment.momentProperties;\r\n\tif (Object.prototype.toString.call(momentProperties) === '[object Array]') {\r\n\t\t// moment 2.8.1+\r\n\t\tmomentProperties.push('_z');\r\n\t\tmomentProperties.push('_a');\r\n\t} else if (momentProperties) {\r\n\t\t// moment 2.7.0\r\n\t\tmomentProperties._z = null;\r\n\t}\r\n\r\n\t// INJECT DATA\r\n\r\n\treturn moment;\r\n});"]}