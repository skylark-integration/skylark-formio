{"version":3,"sources":["vendors/vanilla-text-mask/utilities.js"],"names":["define","constants","defaultPlaceholderChar","placeholderChar","emptyArray","isArray","value","Array","strCaretTrap","convertMaskToPlaceholder","mask","Error","indexOf","JSON","stringify","map","char","RegExp","join","isString","String","isNumber","undefined","length","isNaN","isNil","processCaretTraps","indexes","indexOfCaretTrap","push","splice","maskWithoutCaretTraps"],"mappings":";;;;;;;AAAAA,QACE,eACA,SAASC,GAET,MAAMC,EAA0BD,EAAUE,gBAEpCC,KAuBN,SAASC,EAAQC,GACf,OAAQC,MAAMF,SAAWE,MAAMF,QAAQC,IAAWA,aAAiBC,MAerE,MAAMC,EAAe,KAerB,OACEC,yBArDF,SAAkCC,EAAON,EAAYD,EAAkBD,GACrE,IAAKG,EAAQK,GACX,MAAM,IAAIC,MACR,2EAIJ,IAAuC,IAAnCD,EAAKE,QAAQT,GACf,MAAM,IAAIQ,MACR,gNAEmDE,KAAKC,UAAUX,2CAChCU,KAAKC,UAAUJ,MAIrD,OAAOA,EAAKK,IAAKC,GACPA,aAAgBC,OAAUd,EAAkBa,GACnDE,KAAK,KAoCRb,QAAAA,EACAc,SA9BF,SAAkBb,GAChB,MAAwB,iBAAVA,GAAsBA,aAAiBc,QA8BrDC,SA3BF,SAAkBf,GAChB,MAAwB,iBAAVA,QAAuCgB,IAAjBhB,EAAMiB,SAAyBC,MAAMlB,IA2BzEmB,MAxBF,SAAenB,GACb,YAAwB,IAAVA,GAAmC,OAAVA,GAwBvCoB,kBApBF,SAA2BhB,GACzB,MAAMiB,KAEN,IAAIC,EACJ,MAA2E,KAArEA,EAAmBlB,EAAKE,QAAQJ,KACpCmB,EAAQE,KAAKD,GAEblB,EAAKoB,OAAOF,EAAkB,GAGhC,OAAQG,sBAAuBrB,EAAMiB,QAAAA","file":"../../../vendors/vanilla-text-mask/utilities.js","sourcesContent":["define([\r\n  './constants'\r\n],function(constants) {\r\n\r\n  const defaultPlaceholderChar  = constants.placeholderChar; \r\n\r\n  const emptyArray = []\r\n\r\n  function convertMaskToPlaceholder(mask = emptyArray, placeholderChar = defaultPlaceholderChar) {\r\n    if (!isArray(mask)) {\r\n      throw new Error(\r\n        'Text-mask:convertMaskToPlaceholder; The mask property must be an array.'\r\n      )\r\n    }\r\n\r\n    if (mask.indexOf(placeholderChar) !== -1) {\r\n      throw new Error(\r\n        'Placeholder character must not be used as part of the mask. Please specify a character ' +\r\n        'that is not present in your mask as your placeholder character.\\n\\n' +\r\n        `The placeholder character that was received is: ${JSON.stringify(placeholderChar)}\\n\\n` +\r\n        `The mask that was received is: ${JSON.stringify(mask)}`\r\n      )\r\n    }\r\n\r\n    return mask.map((char) => {\r\n      return (char instanceof RegExp) ? placeholderChar : char\r\n    }).join('')\r\n  }\r\n\r\n  function isArray(value) {\r\n    return (Array.isArray && Array.isArray(value)) || value instanceof Array\r\n  }\r\n\r\n  function isString(value) {\r\n    return typeof value === 'string' || value instanceof String\r\n  }\r\n\r\n  function isNumber(value) {\r\n    return typeof value === 'number' && value.length === undefined && !isNaN(value)\r\n  }\r\n\r\n  function isNil(value) {\r\n    return typeof value === 'undefined' || value === null\r\n  }\r\n\r\n  const strCaretTrap = '[]'\r\n  function processCaretTraps(mask) {\r\n    const indexes = []\r\n\r\n    let indexOfCaretTrap\r\n    while(indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) { // eslint-disable-line\r\n      indexes.push(indexOfCaretTrap)\r\n\r\n      mask.splice(indexOfCaretTrap, 1)\r\n    }\r\n\r\n    return {maskWithoutCaretTraps: mask, indexes}\r\n  }\r\n\r\n\r\n  return {\r\n    convertMaskToPlaceholder,\r\n    isArray,\r\n    isString,\r\n    isNumber,\r\n    isNil,\r\n    processCaretTraps\r\n  }\r\n});\r\n\r\n"]}