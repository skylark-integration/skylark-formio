{"version":3,"sources":["vendors/text-mask-addons/emailMask.js"],"names":["define","emailPipe","asterisk","dot","emptyString","atSymbol","caretTrap","space","g","anyNonWhitespaceRegExp","anyNonDotOrWhitespaceRegExp","allWhitespaceRegExp","getConnector","rawValue","indexOfConnection","connectionSymbol","connector","push","convertToMask","str","noDots","split","map","char","config","replace","placeholderChar","currentCaretPosition","indexOfFirstAtSymbol","indexOf","indexOfLastDot","lastIndexOf","indexOfTopLevelDomainDot","localPartToDomainConnector","domainNameToTopLevelDomainConnector","localPart","slice","getLocalPart","domainName","length","RegExp","getDomainName","topLevelDomain","getTopLevelDomain","concat"],"mappings":";;;;;;;AAAAA,QAAQ,eAAe,SAASC,GAC9B,MAAMC,EAAW,IACXC,EAAM,IACNC,EAAc,GACdC,EAAW,IACXC,EAAY,KACZC,EAAQ,IACRC,EAAI,IACJC,EAAyB,QACzBC,EAA8B,SAC9BC,EAAsB,MA8B5B,SAASC,EAAaC,EAAUC,EAAmBC,GACjD,MAAMC,KAUN,OARIH,EAASC,KAAuBC,EAClCC,EAAUC,KAAKF,GAEfC,EAAUC,KAAKX,EAAWS,GAG5BC,EAAUC,KAAKX,GAERU,EAqDT,SAASE,EAAcC,EAAKC,GAC1B,OAAOD,EACJE,MAAMjB,GACNkB,IAAKC,GAASA,IAAShB,EAAQgB,EAAO,EAAWb,EAA8BD,GAGpF,OAlGA,SAAmBI,EAAUW,GAC3BX,EAAWA,EAASY,QAAQd,EAAqBP,GAEjD,MAAMsB,gBAACA,EAAeC,qBAAEA,GAAwBH,EAC1CI,EAAuBf,EAASgB,QAAQxB,GACxCyB,EAAiBjB,EAASkB,YAAY5B,GACtC6B,EAA4BF,EAAiBF,GAAyB,EAAIE,EAEhF,IAAIG,EAA6BrB,EAAaC,EAAUe,EAAuB,EAAGvB,GAC9E6B,EAAsCtB,EAAaC,EAAUmB,EAA2B,EAAG7B,GAE3FgC,EA+BN,SAAsBtB,EAAUe,GAC9B,OAA8B,IAA1BA,EACKf,EAEAA,EAASuB,MAAM,EAAGR,GAnCXS,CAAaxB,EAAUe,GACnCU,EAsCN,SAAuBzB,EAAUe,EAAsBI,EAA0BN,GAC/E,IAAIY,EAAalC,EAYjB,OAV8B,IAA1BwB,IAEAU,GADgC,IAA9BN,EACWnB,EAASuB,MAAMR,EAAuB,EAAGf,EAAS0B,QAElD1B,EAASuB,MAAMR,EAAuB,EAAGI,KAI1DM,EAAaA,EAAWb,QAAQ,IAAIe,cAAcd,KAAoBlB,GAAIJ,MAEvDC,EACVH,EACEoC,EAAWC,OAAS,EACtBhC,EACE+B,EAAWA,EAAWC,OAAS,KAAOpC,EACxCmC,EAAWF,MAAM,EAAGE,EAAWC,OAAS,GAExCD,EA1DQG,CAAc5B,EAAUe,EAAsBI,EAA0BN,GACrFgB,EA6DN,SAA2B7B,EAAUmB,EAA0BN,EAAiBC,GAC9E,IAAIe,EAAiBtC,EAQrB,OANkC,IAA9B4B,IACFU,EAAiB7B,EAASuB,MAAMJ,EAA2B,EAAGnB,EAAS0B,SAK3C,KAF9BG,EAAiBA,EAAejB,QAAQ,IAAIe,cAAcd,MAAqBlB,GAAIJ,IAEhEmC,OACT1B,EAASmB,EAA2B,KAAO7B,GAAOwB,IAAyBd,EAAS0B,OAC1FrC,EACAE,EAEKsC,EA3EYC,CAAkB9B,EAAUmB,EAA0BN,EAAiBC,GAY5F,OAVAQ,EAAYjB,EAAciB,GAC1BG,EAAapB,EAAcoB,GAC3BI,EAAiBxB,EAAcwB,GAAgB,GAElCP,EACVS,OAAOX,GACPW,OAAON,GACPM,OAAOV,GACPU,OAAOF","file":"../../../vendors/text-mask-addons/emailMask.js","sourcesContent":["define(['./emailPipe'],function(emailPipe){\n  const asterisk = '*'\n  const dot = '.'\n  const emptyString = ''\n  const atSymbol = '@'\n  const caretTrap = '[]'\n  const space = ' '\n  const g = 'g'\n  const anyNonWhitespaceRegExp = /[^\\s]/\n  const anyNonDotOrWhitespaceRegExp = /[^.\\s]/\n  const allWhitespaceRegExp = /\\s/g\n\n  function emailMask(rawValue, config) {\n    rawValue = rawValue.replace(allWhitespaceRegExp, emptyString)\n\n    const {placeholderChar, currentCaretPosition} = config\n    const indexOfFirstAtSymbol = rawValue.indexOf(atSymbol)\n    const indexOfLastDot = rawValue.lastIndexOf(dot)\n    const indexOfTopLevelDomainDot = (indexOfLastDot < indexOfFirstAtSymbol) ? -1 : indexOfLastDot\n\n    let localPartToDomainConnector = getConnector(rawValue, indexOfFirstAtSymbol + 1, atSymbol)\n    let domainNameToTopLevelDomainConnector = getConnector(rawValue, indexOfTopLevelDomainDot - 1, dot)\n\n    let localPart = getLocalPart(rawValue, indexOfFirstAtSymbol, placeholderChar)\n    let domainName = getDomainName(rawValue, indexOfFirstAtSymbol, indexOfTopLevelDomainDot, placeholderChar)\n    let topLevelDomain = getTopLevelDomain(rawValue, indexOfTopLevelDomainDot, placeholderChar, currentCaretPosition)\n\n    localPart = convertToMask(localPart)\n    domainName = convertToMask(domainName)\n    topLevelDomain = convertToMask(topLevelDomain, true)\n\n    const mask = localPart\n      .concat(localPartToDomainConnector)\n      .concat(domainName)\n      .concat(domainNameToTopLevelDomainConnector)\n      .concat(topLevelDomain)\n\n    return mask\n  }\n\n  function getConnector(rawValue, indexOfConnection, connectionSymbol) {\n    const connector = []\n\n    if (rawValue[indexOfConnection] === connectionSymbol) {\n      connector.push(connectionSymbol)\n    } else {\n      connector.push(caretTrap, connectionSymbol)\n    }\n\n    connector.push(caretTrap)\n\n    return connector\n  }\n\n  function getLocalPart(rawValue, indexOfFirstAtSymbol) {\n    if (indexOfFirstAtSymbol === -1) {\n      return rawValue\n    } else {\n      return rawValue.slice(0, indexOfFirstAtSymbol)\n    }\n  }\n\n  function getDomainName(rawValue, indexOfFirstAtSymbol, indexOfTopLevelDomainDot, placeholderChar) {\n    let domainName = emptyString\n\n    if (indexOfFirstAtSymbol !== -1) {\n      if (indexOfTopLevelDomainDot === -1) {\n        domainName = rawValue.slice(indexOfFirstAtSymbol + 1, rawValue.length)\n      } else {\n        domainName = rawValue.slice(indexOfFirstAtSymbol + 1, indexOfTopLevelDomainDot)\n      }\n    }\n\n    domainName = domainName.replace(new RegExp(`[\\\\s${placeholderChar}]`, g), emptyString)\n\n    if (domainName === atSymbol) {\n      return asterisk\n    } else if (domainName.length < 1) {\n      return space\n    } else if (domainName[domainName.length - 1] === dot) {\n      return domainName.slice(0, domainName.length - 1)\n    } else {\n      return domainName\n    }\n  }\n\n  function getTopLevelDomain(rawValue, indexOfTopLevelDomainDot, placeholderChar, currentCaretPosition) {\n    let topLevelDomain = emptyString\n\n    if (indexOfTopLevelDomainDot !== -1) {\n      topLevelDomain = rawValue.slice(indexOfTopLevelDomainDot + 1, rawValue.length)\n    }\n\n    topLevelDomain = topLevelDomain.replace(new RegExp(`[\\\\s${placeholderChar}.]`, g), emptyString)\n\n    if (topLevelDomain.length === 0) {\n      return (rawValue[indexOfTopLevelDomainDot - 1] === dot && currentCaretPosition !== rawValue.length) ?\n        asterisk :\n        emptyString\n    } else {\n      return topLevelDomain\n    }\n  }\n\n  function convertToMask(str, noDots) {\n    return str\n      .split(emptyString)\n      .map((char) => char === space ? char : (noDots) ? anyNonDotOrWhitespaceRegExp : anyNonWhitespaceRegExp)\n  }\n\n  return emailMask;\n});\n\n"]}