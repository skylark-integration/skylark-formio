{"version":3,"sources":["vendors/text-mask-addons/createNumberMask.js"],"names":["define","dollarSign","emptyString","comma","period","minus","minusRegExp","nonDigitsRegExp","number","digitRegExp","caretTrap","convertToMask","strNumber","split","map","char","test","prefix","suffix","includeThousandsSeparator","thousandsSeparatorSymbol","allowDecimal","decimalSymbol","decimalLimit","requireDecimal","allowNegative","allowLeadingZeroes","integerLimit","prefixLength","length","suffixLength","thousandsSeparatorSymbolLength","numberMask","rawValue","rawValueLength","concat","isNegative","toString","substr","indexOfLastDecimal","lastIndexOf","hasDecimal","integer","fraction","mask","slice","replace","thousandsSeparatorRegex","numberOfThousandSeparators","match","RegExp","n","addThousandsSeparator","push","instanceOf"],"mappings":"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","file":"../../../vendors/text-mask-addons/createNumberMask.js","sourcesContent":["define([],function(){\n  const dollarSign = '$'\n  const emptyString = ''\n  const comma = ','\n  const period = '.'\n  const minus = '-'\n  const minusRegExp = /-/\n  const nonDigitsRegExp = /\\D+/g\n  const number = 'number'\n  const digitRegExp = /\\d/\n  const caretTrap = '[]'\n\n  function createNumberMask({\n    prefix = dollarSign,\n    suffix = emptyString,\n    includeThousandsSeparator = true,\n    thousandsSeparatorSymbol = comma,\n    allowDecimal = false,\n    decimalSymbol = period,\n    decimalLimit = 2,\n    requireDecimal = false,\n    allowNegative = false,\n    allowLeadingZeroes = false,\n    integerLimit = null\n  } = {}) {\n    const prefixLength = prefix && prefix.length || 0\n    const suffixLength = suffix && suffix.length || 0\n    const thousandsSeparatorSymbolLength = thousandsSeparatorSymbol && thousandsSeparatorSymbol.length || 0\n\n    function numberMask(rawValue = emptyString) {\n      const rawValueLength = rawValue.length\n\n      if (\n        rawValue === emptyString ||\n        (rawValue[0] === prefix[0] && rawValueLength === 1)\n      ) {\n        return prefix.split(emptyString).concat([digitRegExp]).concat(suffix.split(emptyString))\n      } else if(\n        rawValue === decimalSymbol &&\n        allowDecimal\n      ) {\n        return prefix.split(emptyString).concat(['0', decimalSymbol, digitRegExp]).concat(suffix.split(emptyString))\n      }\n\n      const isNegative = (rawValue[0] === minus) && allowNegative\n      //If negative remove \"-\" sign\n      if(isNegative) {\n        rawValue = rawValue.toString().substr(1)\n      }\n\n      const indexOfLastDecimal = rawValue.lastIndexOf(decimalSymbol)\n      const hasDecimal = indexOfLastDecimal !== -1\n\n      let integer\n      let fraction\n      let mask\n\n      // remove the suffix\n      if (rawValue.slice(suffixLength * -1) === suffix) {\n        rawValue = rawValue.slice(0, suffixLength * -1)\n      }\n\n      if (hasDecimal && (allowDecimal || requireDecimal)) {\n        integer = rawValue.slice(rawValue.slice(0, prefixLength) === prefix ? prefixLength : 0, indexOfLastDecimal)\n\n        fraction = rawValue.slice(indexOfLastDecimal + 1, rawValueLength)\n        fraction = convertToMask(fraction.replace(nonDigitsRegExp, emptyString))\n      } else {\n        if (rawValue.slice(0, prefixLength) === prefix) {\n          integer = rawValue.slice(prefixLength)\n        } else {\n          integer = rawValue\n        }\n      }\n\n      if (integerLimit && typeof integerLimit === number) {\n        const thousandsSeparatorRegex = thousandsSeparatorSymbol === '.' ? '[.]' : `${thousandsSeparatorSymbol}`\n        const numberOfThousandSeparators = (integer.match(new RegExp(thousandsSeparatorRegex, 'g')) || []).length\n\n        integer = integer.slice(0, integerLimit + (numberOfThousandSeparators * thousandsSeparatorSymbolLength))\n      }\n\n      integer = integer.replace(nonDigitsRegExp, emptyString)\n\n      if (!allowLeadingZeroes) {\n        integer = integer.replace(/^0+(0$|[^0])/, '$1')\n      }\n\n      integer = (includeThousandsSeparator) ? addThousandsSeparator(integer, thousandsSeparatorSymbol) : integer\n\n      mask = convertToMask(integer)\n\n      if ((hasDecimal && allowDecimal) || requireDecimal === true) {\n        if (rawValue[indexOfLastDecimal - 1] !== decimalSymbol) {\n          mask.push(caretTrap)\n        }\n\n        mask.push(decimalSymbol, caretTrap)\n\n        if (fraction) {\n          if (typeof decimalLimit === number) {\n            fraction = fraction.slice(0, decimalLimit)\n          }\n\n          mask = mask.concat(fraction)\n        }\n\n        if (requireDecimal === true && rawValue[indexOfLastDecimal - 1] === decimalSymbol) {\n          mask.push(digitRegExp)\n        }\n      }\n\n      if (prefixLength > 0) {\n        mask = prefix.split(emptyString).concat(mask)\n      }\n\n      if (isNegative) {\n        // If user is entering a negative number, add a mask placeholder spot to attract the caret to it.\n        if (mask.length === prefixLength) {\n          mask.push(digitRegExp)\n        }\n\n        mask = [minusRegExp].concat(mask)\n      }\n\n      if (suffix.length > 0) {\n        mask = mask.concat(suffix.split(emptyString))\n      }\n\n      return mask\n    }\n\n    numberMask.instanceOf = 'createNumberMask'\n\n    return numberMask\n  }\n\n  function convertToMask(strNumber) {\n    return strNumber\n      .split(emptyString)\n      .map((char) => digitRegExp.test(char) ? digitRegExp : char)\n  }\n\n  // http://stackoverflow.com/a/10899795/604296\n  function addThousandsSeparator(n, thousandsSeparatorSymbol) {\n    return n.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandsSeparatorSymbol)\n  }\n\n  return createNumberMask;\n\n});\n\n"]}