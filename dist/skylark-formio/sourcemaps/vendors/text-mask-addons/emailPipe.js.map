{"version":3,"sources":["vendors/text-mask-addons/emailPipe.js"],"names":["define","atSymbol","allAtSymbolsRegExp","emptyString","atDot","dot","dotDot","emptyArray","allDotsRegExp","conformedValue","config","currentCaretPosition","rawValue","previousConformedValue","placeholderChar","value","indexOfAtDot","str","atSymbolCount","replace","removeAllAtSymbolsButFirst","indexOf","match","RegExp","indexOfAtSymbol","slice","length","substr"],"mappings":";;;;;;;AAAAA,UAAU,WACR,MAAMC,EAAW,IACXC,EAAqB,KACrBC,EAAc,GACdC,EAAQ,KACRC,EAAM,IACNC,EAAS,KACTC,KACAC,EAAgB,MAiDtB,OA/CA,SAAmBC,EAAgBC,GACjC,MAAMC,qBAACA,EAAoBC,SAAEA,EAAQC,uBAAEA,EAAsBC,gBAAEA,GAAmBJ,EAElF,IAAIK,EAAQN,EAIZ,MAAMO,GAFND,EAgCF,SAAoCE,GAClC,IAAIC,EAAgB,EAEpB,OAAOD,EAAIE,QAAQjB,EAAoB,IAGX,KAF1BgB,EAE+BjB,EAAWE,GAtCpCiB,CAA2BL,IAERM,QAAQjB,GAInC,GAFgF,OAA7DQ,EAASU,MAAM,IAAIC,iBAAiBT,OAGrD,OAAOX,EAGT,IAC6B,IAA3BY,EAAMM,QAAQf,KACI,IAAlBU,GAAuBL,IAA0BK,EAAe,IAChC,IAAhCJ,EAASS,QAAQpB,IAAoBY,IAA2BV,IAA0C,IAA3BS,EAASS,QAAQhB,GAEhG,OAAO,EAGT,MAAMmB,EAAkBT,EAAMM,QAAQpB,GAWtC,OAVmBc,EAAMU,MAAMD,EAAkB,EAAGT,EAAMW,QAG5CJ,MAAMd,IAAkBD,GAAYmB,OAAS,GACzDX,EAAMY,QAAQ,KAAOtB,GACrBM,IAAyBC,EAASc,SAElCX,EAAQA,EAAMU,MAAM,EAAGV,EAAMW,OAAS,IAGjCX","file":"../../../vendors/text-mask-addons/emailPipe.js","sourcesContent":["define([],function(){\n  const atSymbol = '@'\n  const allAtSymbolsRegExp = /@/g\n  const emptyString = ''\n  const atDot = '@.'\n  const dot = '.'\n  const dotDot = '..'\n  const emptyArray = []\n  const allDotsRegExp = /\\./g\n\n  function emailPipe(conformedValue, config) {\n    const {currentCaretPosition, rawValue, previousConformedValue, placeholderChar} = config\n\n    let value = conformedValue\n\n    value = removeAllAtSymbolsButFirst(value)\n\n    const indexOfAtDot = value.indexOf(atDot)\n\n    const emptyEmail = rawValue.match(new RegExp(`[^@\\\\s.${placeholderChar}]`)) === null\n\n    if (emptyEmail) {\n      return emptyString\n    }\n\n    if (\n      value.indexOf(dotDot) !== -1 ||\n      indexOfAtDot !== -1 && currentCaretPosition !== (indexOfAtDot + 1) ||\n      rawValue.indexOf(atSymbol) === -1 && previousConformedValue !== emptyString && rawValue.indexOf(dot) !== -1\n    ) {\n      return false\n    }\n\n    const indexOfAtSymbol = value.indexOf(atSymbol)\n    const domainPart = value.slice(indexOfAtSymbol + 1, value.length)\n\n    if (\n      (domainPart.match(allDotsRegExp) || emptyArray).length > 1 &&\n      value.substr(-1) === dot &&\n      currentCaretPosition !== rawValue.length\n    ) {\n      value = value.slice(0, value.length - 1)\n    }\n\n    return value\n  }\n\n  function removeAllAtSymbolsButFirst(str) {\n    let atSymbolCount = 0\n\n    return str.replace(allAtSymbolsRegExp, () => {\n      atSymbolCount++\n\n      return (atSymbolCount === 1) ? atSymbol : emptyString\n    })\n  }\n\n  return emailPipe;\n});\n\n"]}