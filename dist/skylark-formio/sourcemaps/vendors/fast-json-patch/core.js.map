{"version":3,"sources":["vendors/fast-json-patch/core.js"],"names":["define","_","helpers_1","areEquals","a","b","isEqual","objOps","add","obj","key","document","this","value","newDocument","remove","removed","replace","move","getValueByPointer","path","_deepClone","originalValue","applyOperation","op","from","copy","valueToCopy","test","_get","arrOps","arr","i","isInteger","splice","index","pointer","getOriginalDestination","operation","validateOperation","mutateDocument","validator","returnValue","JsonPatchError","keys","split","t","len","length","existingPathFragment","undefined","validateFunction","slice","join","Array","isArray","call","indexOf","unescapePathComponent","applyPatch","patch","results","length_1","hasUndefined","pathLen","existingPathLen","error","validate","name","sequence","externalValidator","e","PatchError","deepClone","applyReducer","operationResult"],"mappings":"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","file":"../../../vendors/fast-json-patch/core.js","sourcesContent":["define([\r\n    \"skylark-lodash\",\r\n    \"./helpers\"\r\n],function(\r\n    _,\r\n    helpers_1\r\n){\r\n    var areEquals = function (a, b) {\r\n        return _.isEqual(a, b);\r\n    };\r\n\r\n    /* We use a Javascript hash to store each\r\n     function. Each hash entry (property) uses\r\n     the operation identifiers specified in rfc6902.\r\n     In this way, we can map each patch operation\r\n     to its dedicated function in efficient way.\r\n     */\r\n    /* The operations applicable to an object */\r\n    var objOps = {\r\n        add: function (obj, key, document) {\r\n            obj[key] = this.value;\r\n            return { newDocument: document };\r\n        },\r\n        remove: function (obj, key, document) {\r\n            var removed = obj[key];\r\n            delete obj[key];\r\n            return { newDocument: document, removed: removed };\r\n        },\r\n        replace: function (obj, key, document) {\r\n            var removed = obj[key];\r\n            obj[key] = this.value;\r\n            return { newDocument: document, removed: removed };\r\n        },\r\n        move: function (obj, key, document) {\r\n            /* in case move target overwrites an existing value,\r\n            return the removed value, this can be taxing performance-wise,\r\n            and is potentially unneeded */\r\n            var removed = getValueByPointer(document, this.path);\r\n            if (removed) {\r\n                removed = helpers_1._deepClone(removed);\r\n            }\r\n            var originalValue = applyOperation(document, { op: \"remove\", path: this.from }).removed;\r\n            applyOperation(document, { op: \"add\", path: this.path, value: originalValue });\r\n            return { newDocument: document, removed: removed };\r\n        },\r\n        copy: function (obj, key, document) {\r\n            var valueToCopy = getValueByPointer(document, this.from);\r\n            // enforce copy by value so further operations don't affect source (see issue #177)\r\n            applyOperation(document, { op: \"add\", path: this.path, value: helpers_1._deepClone(valueToCopy) });\r\n            return { newDocument: document };\r\n        },\r\n        test: function (obj, key, document) {\r\n            return { newDocument: document, test: areEquals(obj[key], this.value) };\r\n        },\r\n        _get: function (obj, key, document) {\r\n            this.value = obj[key];\r\n            return { newDocument: document };\r\n        }\r\n    };\r\n    /* The operations applicable to an array. Many are the same as for the object */\r\n    var arrOps = {\r\n        add: function (arr, i, document) {\r\n            if (helpers_1.isInteger(i)) {\r\n                arr.splice(i, 0, this.value);\r\n            }\r\n            else {\r\n                arr[i] = this.value;\r\n            }\r\n            // this may be needed when using '-' in an array\r\n            return { newDocument: document, index: i };\r\n        },\r\n        remove: function (arr, i, document) {\r\n            var removedList = arr.splice(i, 1);\r\n            return { newDocument: document, removed: removedList[0] };\r\n        },\r\n        replace: function (arr, i, document) {\r\n            var removed = arr[i];\r\n            arr[i] = this.value;\r\n            return { newDocument: document, removed: removed };\r\n        },\r\n        move: objOps.move,\r\n        copy: objOps.copy,\r\n        test: objOps.test,\r\n        _get: objOps._get\r\n    };\r\n    /**\r\n     * Retrieves a value from a JSON document by a JSON pointer.\r\n     * Returns the value.\r\n     *\r\n     * @param document The document to get the value from\r\n     * @param pointer an escaped JSON pointer\r\n     * @return The retrieved value\r\n     */\r\n    function getValueByPointer(document, pointer) {\r\n        if (pointer == '') {\r\n            return document;\r\n        }\r\n        var getOriginalDestination = { op: \"_get\", path: pointer };\r\n        applyOperation(document, getOriginalDestination);\r\n        return getOriginalDestination.value;\r\n    }\r\n    /**\r\n     * Apply a single JSON Patch Operation on a JSON document.\r\n     * Returns the {newDocument, result} of the operation.\r\n     * It modifies the `document` and `operation` objects - it gets the values by reference.\r\n     * If you would like to avoid touching your values, clone them:\r\n     * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\r\n     *\r\n     * @param document The document to patch\r\n     * @param operation The operation to apply\r\n     * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\r\n     * @param mutateDocument Whether to mutate the original document or clone it before applying\r\n     * @return `{newDocument, result}` after the operation\r\n     */\r\n    function applyOperation(document, operation, validateOperation, mutateDocument) {\r\n        if (validateOperation === void 0) { validateOperation = false; }\r\n        if (mutateDocument === void 0) { mutateDocument = true; }\r\n        if (validateOperation) {\r\n            if (typeof validateOperation == 'function') {\r\n                validateOperation(operation, 0, document, operation.path);\r\n            }\r\n            else {\r\n                validator(operation, 0);\r\n            }\r\n        }\r\n        /* ROOT OPERATIONS */\r\n        if (operation.path === \"\") {\r\n            var returnValue = { newDocument: document };\r\n            if (operation.op === 'add') {\r\n                returnValue.newDocument = operation.value;\r\n                return returnValue;\r\n            }\r\n            else if (operation.op === 'replace') {\r\n                returnValue.newDocument = operation.value;\r\n                returnValue.removed = document; //document we removed\r\n                return returnValue;\r\n            }\r\n            else if (operation.op === 'move' || operation.op === 'copy') {\r\n                returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\r\n                if (operation.op === 'move') {\r\n                    returnValue.removed = document;\r\n                }\r\n                return returnValue;\r\n            }\r\n            else if (operation.op === 'test') {\r\n                returnValue.test = areEquals(document, operation.value);\r\n                if (returnValue.test === false) {\r\n                    throw new helpers_1.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n                }\r\n                returnValue.newDocument = document;\r\n                return returnValue;\r\n            }\r\n            else if (operation.op === 'remove') {\r\n                returnValue.removed = document;\r\n                returnValue.newDocument = null;\r\n                return returnValue;\r\n            }\r\n            else if (operation.op === '_get') {\r\n                operation.value = document;\r\n                return returnValue;\r\n            }\r\n            else {\r\n                if (validateOperation) {\r\n                    throw new helpers_1.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', 0, operation, document);\r\n                }\r\n                else {\r\n                    return returnValue;\r\n                }\r\n            }\r\n        } /* END ROOT OPERATIONS */\r\n        else {\r\n            if (!mutateDocument) {\r\n                document = helpers_1._deepClone(document);\r\n            }\r\n            var path = operation.path || \"\";\r\n            var keys = path.split('/');\r\n            var obj = document;\r\n            var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\r\n            var len = keys.length;\r\n            var existingPathFragment = undefined;\r\n            var key = void 0;\r\n            var validateFunction = void 0;\r\n            if (typeof validateOperation == 'function') {\r\n                validateFunction = validateOperation;\r\n            }\r\n            else {\r\n                validateFunction = validator;\r\n            }\r\n            while (true) {\r\n                key = keys[t];\r\n                if (validateOperation) {\r\n                    if (existingPathFragment === undefined) {\r\n                        if (obj[key] === undefined) {\r\n                            existingPathFragment = keys.slice(0, t).join('/');\r\n                        }\r\n                        else if (t == len - 1) {\r\n                            existingPathFragment = operation.path;\r\n                        }\r\n                        if (existingPathFragment !== undefined) {\r\n                            validateFunction(operation, 0, document, existingPathFragment);\r\n                        }\r\n                    }\r\n                }\r\n                t++;\r\n                if (Array.isArray(obj)) {\r\n                    if (key === '-') {\r\n                        key = obj.length;\r\n                    }\r\n                    else {\r\n                        if (validateOperation && !helpers_1.isInteger(key)) {\r\n                            throw new helpers_1.JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", 0, operation.path, operation);\r\n                        } // only parse key when it's an integer for `arr.prop` to work\r\n                        else if (helpers_1.isInteger(key)) {\r\n                            key = ~~key;\r\n                        }\r\n                    }\r\n                    if (t >= len) {\r\n                        if (validateOperation && operation.op === \"add\" && key > obj.length) {\r\n                            throw new helpers_1.JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", 0, operation.path, operation);\r\n                        }\r\n                        var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\r\n                        if (returnValue.test === false) {\r\n                            throw new helpers_1.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n                        }\r\n                        return returnValue;\r\n                    }\r\n                }\r\n                else {\r\n                    if (key && key.indexOf('~') != -1) {\r\n                        key = helpers_1.unescapePathComponent(key);\r\n                    }\r\n                    if (t >= len) {\r\n                        var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\r\n                        if (returnValue.test === false) {\r\n                            throw new helpers_1.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n                        }\r\n                        return returnValue;\r\n                    }\r\n                }\r\n                obj = obj[key];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Apply a full JSON Patch array on a JSON document.\r\n     * Returns the {newDocument, result} of the patch.\r\n     * It modifies the `document` object and `patch` - it gets the values by reference.\r\n     * If you would like to avoid touching your values, clone them:\r\n     * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\r\n     *\r\n     * @param document The document to patch\r\n     * @param patch The patch to apply\r\n     * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\r\n     * @param mutateDocument Whether to mutate the original document or clone it before applying\r\n     * @return An array of `{newDocument, result}` after the patch\r\n     */\r\n    function applyPatch(document, patch, validateOperation, mutateDocument) {\r\n        if (mutateDocument === void 0) { mutateDocument = true; }\r\n        if (validateOperation) {\r\n            if (!Array.isArray(patch)) {\r\n                throw new helpers_1.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\r\n            }\r\n        }\r\n        if (!mutateDocument) {\r\n            document = helpers_1._deepClone(document);\r\n        }\r\n        var results = new Array(patch.length);\r\n        for (var i = 0, length_1 = patch.length; i < length_1; i++) {\r\n            results[i] = applyOperation(document, patch[i], validateOperation);\r\n            document = results[i].newDocument; // in case root was replaced\r\n        }\r\n        results.newDocument = document;\r\n        return results;\r\n    }\r\n    /**\r\n     * Apply a single JSON Patch Operation on a JSON document.\r\n     * Returns the updated document.\r\n     * Suitable as a reducer.\r\n     *\r\n     * @param document The document to patch\r\n     * @param operation The operation to apply\r\n     * @return The updated document\r\n     */\r\n    function applyReducer(document, operation) {\r\n        var operationResult = applyOperation(document, operation);\r\n        if (operationResult.test === false) {\r\n            throw new helpers_1.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', 0, operation, document);\r\n        }\r\n        return operationResult.newDocument;\r\n    }\r\n    /**\r\n     * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\r\n     * @param {object} operation - operation object (patch)\r\n     * @param {number} index - index of operation in the sequence\r\n     * @param {object} [document] - object where the operation is supposed to be applied\r\n     * @param {string} [existingPathFragment] - comes along with `document`\r\n     */\r\n    function validator(operation, index, document, existingPathFragment) {\r\n        if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {\r\n            throw new helpers_1.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);\r\n        }\r\n        else if (!objOps[operation.op]) {\r\n            throw new helpers_1.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\r\n        }\r\n        else if (typeof operation.path !== 'string') {\r\n            throw new helpers_1.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);\r\n        }\r\n        else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {\r\n            // paths that aren't empty string should start with \"/\"\r\n            throw new helpers_1.JsonPatchError('Operation `path` property must start with \"/\"', 'OPERATION_PATH_INVALID', index, operation, document);\r\n        }\r\n        else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {\r\n            throw new helpers_1.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);\r\n        }\r\n        else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {\r\n            throw new helpers_1.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);\r\n        }\r\n        else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {\r\n            throw new helpers_1.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);\r\n        }\r\n        else if (document) {\r\n            if (operation.op == \"add\") {\r\n                var pathLen = operation.path.split(\"/\").length;\r\n                var existingPathLen = existingPathFragment.split(\"/\").length;\r\n                if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\r\n                    throw new helpers_1.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);\r\n                }\r\n            }\r\n            else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {\r\n                if (operation.path !== existingPathFragment) {\r\n                    throw new helpers_1.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);\r\n                }\r\n            }\r\n            else if (operation.op === 'move' || operation.op === 'copy') {\r\n                var existingValue = { op: \"_get\", path: operation.from, value: undefined };\r\n                var error = validate([existingValue], document);\r\n                if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {\r\n                    throw new helpers_1.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\r\n     * If error is encountered, returns a JsonPatchError object\r\n     * @param sequence\r\n     * @param document\r\n     * @returns {JsonPatchError|undefined}\r\n     */\r\n    function validate(sequence, document, externalValidator) {\r\n        try {\r\n            if (!Array.isArray(sequence)) {\r\n                throw new helpers_1.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\r\n            }\r\n            if (document) {\r\n                //clone document and sequence so that we can safely try applying operations\r\n                applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);\r\n            }\r\n            else {\r\n                externalValidator = externalValidator || validator;\r\n                for (var i = 0; i < sequence.length; i++) {\r\n                    externalValidator(sequence[i], i, document, undefined);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (e instanceof helpers_1.JsonPatchError) {\r\n                return e;\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        JsonPatchError : helpers_1.PatchError,\r\n        deepClone : helpers_1._deepClone,\r\n        getValueByPointer,\r\n        applyOperation,\r\n        applyPatch,\r\n        applyReducer,\r\n        validator,\r\n        validate\r\n    };\r\n});"]}