{"version":3,"sources":["contrib/edittable/EditTable.js"],"names":["define","_","DataGridComponent","ModalEdit","EditTableForm","EditTableComponent","[object Object]","extend","schema","label","key","type","input","tree","components","columns","builderInfo","title","icon","group","weight","args","super","groups","get","this","component","hasColumns","componentComponents","groupsMode","addEmptyRows","totalRowsNumber","getColumns","length","hasAddButton","rows","editor","hideLabel","cols","filter","map","c","pick","isEqual","emptyColumn","sum","n","dataValue","range","componentSchema","tableClass","defaultClass","join","className","isString","forEach","prop","state","build","tableElement","builderMode","element","appendChild","builderView","setMeta","buildRows","buildGroups","ranges","querySelectorAll","tbody","querySelector","firstElements","getRowChunks","head","g","buildGroup","elt","index","row","insertBefore","coll","chunks","reduce","startIndex","acc","size","endIndex","slice","colsNumber","cell","ce","colspan","class","colSchemes","lastIndex","col","colIndex","colContainer","buildComponent","getComponentState","hasRemoveButtons","append","removeButton","button","iconClass","addEventListener","event","preventDefault","removeValue","t","getGroups","info","numberOfRows","data","getMeta","set","root"],"mappings":"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","file":"../../../contrib/edittable/EditTable.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../../components/datagrid/DataGrid',\n    '../modaledit/ModalEdit',\n    './EditTable.form'\n], function (_, DataGridComponent, ModalEdit, EditTableForm) {\n    'use strict';\n    return class EditTableComponent extends DataGridComponent {\n        static schema(...extend) {\n            return DataGridComponent.schema({\n                label: 'Edit Table',\n                key: 'editTable',\n                type: 'edittable',\n                input: true,\n                tree: true,\n                components: [],\n                columns: []\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Edit Table',\n                icon: 'th',\n                group: 'data',\n                weight: 50,\n                schema: EditTableComponent.schema()\n            };\n        }\n        constructor(...args) {\n            super(...args);\n            const groups = _.get(this.component, 'rowGroups', []);\n            if (this.hasColumns()) {\n                this.component.components = this.componentComponents;\n            }\n            if (this.groupsMode) {\n                this.addEmptyRows(this.totalRowsNumber(groups));\n            }\n        }\n        hasColumns() {\n            return this.getColumns().length > 0;\n        }\n        hasExtraColumn() {\n            return false;\n        }\n        hasAddButton() {\n            return super.hasAddButton() && this.hasColumns();\n        }\n        componentSchema(...extend) {\n            return ModalEdit.schema({\n                rows: 0,\n                editor: 'ckeditor',\n                hideLabel: true\n            }, ...extend);\n        }\n        getColumns() {\n            const cols = _.get(this, 'component.columns', []);\n            return _.filter(_.map(cols, c => _.pick(c, [\n                'label',\n                'key'\n            ])), c => !_.isEqual(c, this.emptyColumn));\n        }\n        getGroups() {\n            return _.get(this.component, 'rowGroups', []);\n        }\n        totalRowsNumber(groups) {\n            return _.sum(_.map(groups, 'numberOfRows'));\n        }\n        addEmptyRows(n) {\n            this.dataValue = _.range(n).map(() => ({}));\n        }\n        get emptyColumn() {\n            return {\n                label: '',\n                key: ''\n            };\n        }\n        get componentComponents() {\n            return this.getColumns().map(({label, key}) => {\n                return this.componentSchema({\n                    label,\n                    key\n                });\n            });\n        }\n        get tableClass() {\n            const type = _.get(this.component, 'type', 'edittable');\n            const defaultClass = [\n                'table',\n                'table-bordered',\n                `table-${ type }`,\n                'form-group',\n                `formio-${ type }-table`\n            ].join(' ');\n            let className = _.get(this.component, 'tableClass');\n            if (className === '' || !_.isString(className)) {\n                className = defaultClass;\n            }\n            [\n                'striped',\n                'bordered',\n                'hover',\n                'condensed'\n            ].forEach(prop => {\n                if (this.component[prop]) {\n                    className = `${ className } table-${ prop }`;\n                }\n            });\n            return className;\n        }\n        get groupsMode() {\n            return _.get(this.component, 'enableRowGroups', false);\n        }\n        build(state = {}) {\n            super.build(state);\n            this.tableElement.className = this.tableClass;\n            if (this.builderMode && !this.hasColumns()) {\n                this.element.appendChild(this.builderView());\n            }\n            this.setMeta();\n        }\n        buildRows() {\n            super.buildRows();\n            if (this.groupsMode) {\n                this.buildGroups();\n            }\n        }\n        buildGroups() {\n            const groups = _.get(this.component, 'rowGroups', []);\n            const ranges = _.map(groups, 'numberOfRows');\n            const rows = this.tableElement.querySelectorAll('tbody>tr');\n            const tbody = this.tableElement.querySelector('tbody');\n            const chunks = this.getRowChunks(ranges, rows);\n            const firstElements = chunks.map(_.head);\n            const groupElements = groups.map(g => this.buildGroup(g));\n            groupElements.forEach((elt, index) => {\n                const row = firstElements[index];\n                if (row) {\n                    tbody.insertBefore(elt, row);\n                }\n            });\n        }\n        getRowChunks(groups, coll) {\n            const [, chunks] = groups.reduce(([startIndex, acc], size) => {\n                const endIndex = startIndex + size;\n                return [\n                    endIndex,\n                    [\n                        ...acc,\n                        [\n                            startIndex,\n                            endIndex\n                        ]\n                    ]\n                ];\n            }, [\n                0,\n                []\n            ]);\n            return chunks.map(range => _.slice(coll, ...range));\n        }\n        buildGroup({label}) {\n            const colsNumber = this.getColumns().length;\n            const cell = this.ce('td', {\n                colspan: colsNumber,\n                class: 'edittable-group-label'\n            }, label);\n            return this.ce('tr', null, cell);\n        }\n        buildRow(row, index, state = {}) {\n            if (this.builderMode) {\n                return null;\n            }\n            this.rows[index] = {};\n            const colSchemes = this.componentComponents;\n            const lastIndex = colSchemes.length - 1;\n            const columns = colSchemes.map((col, colIndex) => {\n                const colContainer = this.buildComponent(col, colIndex, row, index, this.getComponentState(col, state));\n                if (this.hasRemoveButtons() && colIndex === lastIndex) {\n                    colContainer.append(this.removeButton(index));\n                }\n                return colContainer;\n            });\n            return this.ce('tr', null, columns);\n        }\n        removeButton(index) {\n            const type = _.get(this.component, 'type', 'edittable');\n            const button = this.ce('button', {\n                type: 'button',\n                class: `btn btn-xxs btn-danger formio-${ type }-remove`\n            }, this.ce('i', { class: this.iconClass('remove') }));\n            this.addEventListener(button, 'click', event => {\n                event.preventDefault();\n                this.removeValue(index);\n            });\n            return button;\n        }\n        builderView() {\n            return this.ce('div', { class: 'well edittable-placeholder' }, [\n                this.ce('i', { class: this.iconClass('warning-sign') }),\n                ' ',\n                this.t('No columns provided')\n            ]);\n        }\n        getMeta() {\n            const groups = this.getGroups();\n            if (this.hasColumns && groups.length) {\n                return groups.reduce((info, g) => {\n                    info[g.label] = g.numberOfRows;\n                    return info;\n                }, {});\n            } else {\n                return null;\n            }\n        }\n        setMeta() {\n            const key = _.get(this.component, 'key');\n            const data = this.getMeta();\n            if (key && data) {\n                _.set(this.root, [\n                    '_submission',\n                    'metadata',\n                    key\n                ], data);\n            }\n        }\n    };\n    EditTableComponent.editForm = EditTableForm;\n});"]}