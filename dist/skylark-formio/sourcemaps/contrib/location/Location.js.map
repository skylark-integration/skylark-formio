{"version":3,"sources":["contrib/location/Location.js"],"names":["define","TextFieldComponent","Formio","LocationComponent","[object Object]","extend","schema","type","label","key","map","region","gmapId","autocompleteOptions","builderInfo","title","group","icon","weight","super","init","src","this","component","requireLibrary","defaultSchema","emptyValue","inputInfo","info","attr","class","value","index","renderElement","renderTemplate","mapId","element","ret","attach","loadRefs","gmapElement","attachElement","libraryReady","then","defaultLatlng","google","maps","LatLng","options","zoom","center","mapTypeId","MapTypeId","ROADMAP","styles","featureType","stylers","visibility","refs","Map","addMarker","autocomplete","places","Autocomplete","addListener","place","getPlace","geometry","viewport","fitBounds","setCenter","location","setZoom","marker","setIcon","url","size","Size","origin","Point","anchor","scaledSize","setPosition","setValue","name","console","log","latlng","Marker","position","draggable","event","geocoder","Geocoder","lat","parseFloat","latLng","lng","geocode","results","status","GeocoderStatus","OK","formatted_address"],"mappings":"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","file":"../../../contrib/location/Location.js","sourcesContent":["define([\n    '../../components/textfield/TextField',\n    '../../Formio'\n], function (TextFieldComponent, Formio) {\n    'use strict';\n    return class LocationComponent extends TextFieldComponent {\n        static schema(...extend) {\n            return TextFieldComponent.schema({\n                type: 'location',\n                label: 'Location',\n                key: 'location',\n                map: {\n                    key: '',\n                    region: '',\n                    gmapId: '',\n                    autocompleteOptions: {}\n                }\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Location',\n                group: 'advanced',\n                icon: 'map',\n                weight: 36,\n                schema: LocationComponent.schema()\n            };\n        }\n        init() {\n            super.init();\n            let src = 'https://maps.googleapis.com/maps/api/js?v=3&libraries=places&callback=googleMapsCallback';\n            if (this.component.map && this.component.map.key) {\n                src += `&key=${ this.component.map.key }`;\n            }\n            if (this.component.map && this.component.map.region) {\n                src += `&region=${ this.component.map.region }`;\n            }\n            Formio.requireLibrary('googleMaps', 'google.maps.places', src);\n        }\n        get defaultSchema() {\n            return LocationComponent.schema();\n        }\n        get emptyValue() {\n            return '';\n        }\n        get inputInfo() {\n            const info = super.inputInfo;\n            info.attr.class += ' Gmap-search';\n            return info;\n        }\n        renderElement(value, index) {\n            return super.renderElement(value, index) + this.renderTemplate('map', { mapId: this.component.map.gmapId });\n        }\n        attach(element) {\n            const ret = super.attach(element);\n            this.loadRefs(element, { gmapElement: 'multiple' });\n            return ret;\n        }\n        attachElement(element, index) {\n            super.attachElement(element, index);\n            Formio.libraryReady('googleMaps').then(() => {\n                const defaultLatlng = new google.maps.LatLng(45.5041482, -73.5574125);\n                const options = {\n                    zoom: 19,\n                    center: defaultLatlng,\n                    mapTypeId: google.maps.MapTypeId.ROADMAP,\n                    styles: [\n                        {\n                            'featureType': 'poi',\n                            'stylers': [{ 'visibility': 'off' }]\n                        },\n                        {\n                            'featureType': 'transit',\n                            'stylers': [{ 'visibility': 'off' }]\n                        }\n                    ]\n                };\n                if (!this.refs.gmapElement[index]) {\n                    return;\n                }\n                element.map = new google.maps.Map(this.refs.gmapElement[index], options);\n                this.addMarker(defaultLatlng, 'Default Marker', element);\n                let autocompleteOptions = {};\n                if (this.component.map) {\n                    autocompleteOptions = this.component.map.autocompleteOptions || {};\n                }\n                const autocomplete = new google.maps.places.Autocomplete(element, autocompleteOptions);\n                autocomplete.addListener('place_changed', () => {\n                    const place = autocomplete.getPlace();\n                    if (!place.geometry) {\n                        console.log(\"Autocomplete's returned place contains no geometry\");\n                        return;\n                    }\n                    if (place.geometry.viewport) {\n                        element.map.fitBounds(place.geometry.viewport);\n                    } else {\n                        element.map.setCenter(place.geometry.location);\n                        element.map.setZoom(17);\n                    }\n                    element.marker.setIcon({\n                        url: place.icon,\n                        size: new google.maps.Size(71, 71),\n                        origin: new google.maps.Point(0, 0),\n                        anchor: new google.maps.Point(17, 34),\n                        scaledSize: new google.maps.Size(35, 35)\n                    });\n                    element.marker.setPosition(place.geometry.location);\n                    this.setValue(place.name);\n                });\n            });\n        }\n        addMarker(latlng, title, element) {\n            element.marker = new google.maps.Marker({\n                position: latlng,\n                map: element.map,\n                title: title,\n                draggable: true\n            });\n            element.marker.addListener('dragend', event => {\n                const geocoder = new google.maps.Geocoder();\n                const latlng = {\n                    lat: parseFloat(event.latLng.lat()),\n                    lng: parseFloat(event.latLng.lng())\n                };\n                geocoder.geocode({ 'location': latlng }, (results, status) => {\n                    if (status === google.maps.GeocoderStatus.OK) {\n                        if (results[1]) {\n                            this.setValue(results[0].formatted_address);\n                        } else {\n                            console.log('No results found');\n                        }\n                    } else {\n                        console.log(`Geocoder failed due to: ${ status }`);\n                    }\n                });\n            });\n        }\n    };\n});"]}