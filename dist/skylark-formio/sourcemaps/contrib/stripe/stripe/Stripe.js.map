{"version":3,"sources":["contrib/stripe/stripe/Stripe.js"],"names":["define","_","Validator","Component","Formio","NativePromise","validators","stripe","key","[object Object]","component","stripeMessage","lastResult","error","message","t","errorMessage","field","errorLabel","stripeError","data","check","setting","value","paymentDone","isEmpty","options","super","this","stripeReady","requireLibrary","push","info","elementInfo","type","attr","changeEvent","addClass","element","removeClass","resultError","setValue","getValue","changed","result","stripeSuccess","style","display","payButton","enable","stripeElementPayButton","stripeSeparator","stripeElementCard","token","id","that","resolve","reject","authorizePending","cardData","cloneDeep","each","createToken","stripeCard","then","authorizeError","authorizeDone","empty","validate","required","complete","code","authorize","build","successLabel","ce","class","appendChild","separatorLabel","Stripe","apiKey","stripeElementsOptions","locale","language","elements","stripeElementOptions","create","mount","addEventListener","onElementCardChange","bind","paymentRequest","stripeOptionsPayButton","stripeOptions","paymentRequestElement","canMakePayment"],"mappings":"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","file":"../../../../contrib/stripe/stripe/Stripe.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../../../validator/Validator',\n    '../../../components/_classes/component/Component',\n    '../../../Formio',\n    '../../vendors/getify/npo'\n], function (_, Validator, Component, Formio, NativePromise) {\n    'use strict';\n    if (typeof Validator.validators.stripe === 'undefined') {\n        Validator.validators.stripe = {\n            key: 'validate.stripe',\n            message(component) {\n                let stripeMessage = '';\n                if (component.lastResult && component.lastResult.error) {\n                    stripeMessage = component.lastResult.error.message;\n                }\n                return component.t(component.errorMessage('stripe'), {\n                    field: component.errorLabel,\n                    stripe: stripeMessage,\n                    stripeError: component.lastResult.error,\n                    data: component.data\n                });\n            },\n            check(component, setting, value) {\n                if (!component.paymentDone && component.lastResult) {\n                    return !component.lastResult.error && !component.isEmpty(value);\n                }\n                return true;\n            }\n        };\n    }\n    return class StripeComponent extends Component {\n        constructor(component, options, data) {\n            super(component, options, data);\n            const src = 'https://js.stripe.com/v3/';\n            this.stripeReady = Formio.requireLibrary('stripe', 'Stripe', src, true);\n            this.lastResult = null;\n            this.paymentDone = false;\n            this.validators.push('stripe');\n        }\n        elementInfo() {\n            const info = super.elementInfo();\n            info.type = 'input';\n            info.attr.type = 'hidden';\n            info.changeEvent = 'change';\n            return info;\n        }\n        authorizePending() {\n            this.addClass(this.element, 'stripe-submitting');\n            this.removeClass(this.element, 'stripe-error');\n            this.removeClass(this.element, 'stripe-submitted');\n        }\n        authorizeError(resultError) {\n            this.removeClass(this.element, 'stripe-submitting');\n            this.addClass(this.element, 'stripe-submit-error');\n            this.removeClass(this.element, 'stripe-submitted');\n            if (!this.lastResult) {\n                this.lastResult = {};\n            }\n            this.lastResult.error = resultError;\n            this.setValue(this.getValue(), { changed: true });\n        }\n        authorizeDone(result) {\n            this.removeClass(this.element, 'stripe-submit-error');\n            this.removeClass(this.element, 'stripe-submitting');\n            this.addClass(this.element, 'stripe-submitted');\n            this.stripeSuccess.style.display = 'block';\n            if (this.component.stripe.payButton && this.component.stripe.payButton.enable) {\n                this.stripeElementPayButton.style.display = 'none';\n                this.stripeSeparator.style.display = 'none';\n            }\n            this.stripeElementCard.style.display = 'none';\n            this.setValue(result.token.id);\n            this.paymentDone = true;\n        }\n        authorize() {\n            if (this.paymentDone) {\n                return;\n            }\n            const that = this;\n            return new NativePromise((resolve, reject) => {\n                that.authorizePending();\n                const cardData = _.cloneDeep(that.component.stripe.cardData) || {};\n                _.each(cardData, (value, key) => {\n                    cardData[key] = that.t(value);\n                });\n                return that.stripe.createToken(that.stripeCard, cardData).then(result => {\n                    if (result.error) {\n                        that.authorizeError(result.error);\n                        reject(result.error);\n                    } else {\n                        that.authorizeDone(result);\n                        resolve();\n                    }\n                });\n            });\n        }\n        onElementCardChange(result) {\n            if (result.empty && (!this.component.validate || !this.component.validate.required)) {\n                delete result.error;\n            }\n            const changed = result.complete || this.lastResult && !!this.lastResult.error !== !!result.error || this.lastResult && this.lastResult.error && result.error && this.lastResult.error.code !== result.error.code || false;\n            this.lastResult = result;\n            const value = result.empty ? '' : '.';\n            this.setValue(value, { changed: changed });\n        }\n        beforeSubmit() {\n            if (this.lastResult && !this.lastResult.empty || this.component.validate && this.component.validate.required) {\n                return this.authorize();\n            }\n        }\n        build() {\n            super.build();\n            const successLabel = this.component.stripe.payButton.successLabel || 'Payment successful';\n            this.stripeSuccess = this.ce('div', {\n                class: 'Stripe-success',\n                style: 'display: none'\n            }, this.t(successLabel));\n            this.element.appendChild(this.stripeSuccess);\n            if (this.component.stripe.payButton && this.component.stripe.payButton.enable) {\n                this.stripeElementPayButton = this.ce('div', { class: 'Stripe-paybutton' });\n                this.element.appendChild(this.stripeElementPayButton);\n                const separatorLabel = this.component.stripe.payButton.separatorLabel || 'Or';\n                this.stripeSeparator = this.ce('div', {\n                    class: 'Stripe-separator',\n                    style: 'display: none'\n                }, this.t(separatorLabel));\n                this.element.appendChild(this.stripeSeparator);\n            }\n            this.stripeElementCard = this.ce('div');\n            this.element.appendChild(this.stripeElementCard);\n            this.stripeReady.then(() => {\n                this.stripe = new Stripe(this.component.stripe.apiKey);\n                let stripeElementsOptions = {};\n                if (this.component.stripe) {\n                    stripeElementsOptions = _.cloneDeep(this.component.stripe.stripeElementsOptions) || {};\n                }\n                if (typeof stripeElementsOptions.locale === 'undefined') {\n                    stripeElementsOptions.locale = this.options.language;\n                }\n                const elements = this.stripe.elements(stripeElementsOptions);\n                let stripeElementOptions = {};\n                if (this.component.stripe) {\n                    stripeElementOptions = this.component.stripe.stripeElementOptions || {};\n                }\n                this.stripeCard = elements.create('card', stripeElementOptions);\n                this.stripeCard.mount(this.stripeElementCard);\n                this.addEventListener(this.stripeCard, 'change', this.onElementCardChange.bind(this));\n                if (this.component.stripe.payButton && this.component.stripe.payButton.enable) {\n                    const paymentRequest = this.stripe.paymentRequest(this.component.stripe.payButton.paymentRequest);\n                    this.addEventListener(paymentRequest, 'token', result => {\n                        this.authorizeDone(result, true);\n                        result.complete('success');\n                    });\n                    let stripeOptionsPayButton = {};\n                    if (this.component.stripe.payButton) {\n                        stripeOptionsPayButton = this.component.stripe.payButton.stripeOptions || {};\n                    }\n                    stripeOptionsPayButton.paymentRequest = paymentRequest;\n                    const paymentRequestElement = elements.create('paymentRequestButton', stripeOptionsPayButton);\n                    paymentRequest.canMakePayment().then(result => {\n                        if (result) {\n                            this.stripeSeparator.style.display = 'block';\n                            paymentRequestElement.mount(this.stripeElementPayButton);\n                        }\n                    });\n                }\n            });\n        }\n    };\n    if (typeof global === 'object' && global.Formio && global.Formio.registerComponent) {\n        global.Formio.registerComponent('stripe', StripeComponent);\n    }\n});"]}