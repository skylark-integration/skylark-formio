{"version":3,"sources":["contrib/modaledit/ModalEdit.js"],"names":["define","_","TextAreaComponent","ModalEditForm","ModalEditComponent","[object Object]","extend","schema","type","label","key","modalLayout","builderInfo","title","group","icon","weight","content","this","renderTemplate","element","loadRefs","container","edit","super","attach","Object","defineProperty","get","innerHTML","set","value","show","showModal","bind","addEventListener","refs","self","dialog","ce","setContent","call","overlay","inner","close","rect","getElementRect","layout","getModalLayout","styles","getModalStyle","assign","style","appendChild","event","preventDefault","removeChildFrom","document","body","dispatchEvent","CustomEvent","flags","changed","updateOnChange","updateContentView","dataValue","elt","renderElement","editor","children","isPlain","resize","attachElement","createModal","view","getBoundingClientRect","args","overrides","mapValues","pick","p","position","height","width","minHeight","getModalSize","left","top","currentWidth","currentHeight","dw","dh","defaultModalSize","component","widthProp","heightProp","layoutProps","Math","max","fixed","fluid"],"mappings":"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","file":"../../../contrib/modaledit/ModalEdit.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../../components/textarea/TextArea',\n    './ModalEdit.form'\n], function (_, TextAreaComponent, ModalEditForm) {\n    'use strict';\n    return class ModalEditComponent extends TextAreaComponent {\n        static schema(...extend) {\n            return TextAreaComponent.schema({\n                type: 'modaledit',\n                label: 'Modal Edit',\n                key: 'modalEdit',\n                modalLayout: 'fixed'\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Modal Edit',\n                group: 'data',\n                icon: 'font',\n                weight: 40,\n                schema: ModalEditComponent.schema()\n            };\n        }\n        renderElement(content = '') {\n            return this.renderTemplate('modaledit', { content });\n        }\n        attach(element) {\n            this.loadRefs(element, {\n                container: 'single',\n                edit: 'single'\n            });\n            return super.attach(element);\n        }\n        attachElement(element) {\n            Object.defineProperty(element, 'value', {\n                get: function () {\n                    return this.innerHTML;\n                },\n                set: function (value) {\n                    this.innerHTML = value;\n                }\n            });\n            const show = this.showModal.bind(this);\n            this.addEventListener(this.refs.container, 'dblclick', show);\n            this.addEventListener(this.refs.edit, 'click', show);\n        }\n        createModal(element) {\n            const self = this;\n            const dialog = this.ce('div');\n            this.setContent(dialog, this.renderTemplate('modaldialog'));\n            dialog.refs = {};\n            this.loadRefs.call(dialog, dialog, {\n                overlay: 'single',\n                content: 'single',\n                inner: 'single',\n                close: 'single'\n            });\n            const rect = this.getElementRect(this.refs.container);\n            const layout = this.getModalLayout(rect);\n            const styles = this.getModalStyle(layout);\n            Object.assign(dialog.refs.content.style, styles);\n            dialog.refs.inner.appendChild(element);\n            this.addEventListener(dialog.refs.overlay, 'click', event => {\n                event.preventDefault();\n                dialog.close();\n            });\n            this.addEventListener(dialog.refs.close, 'click', event => {\n                event.preventDefault();\n                dialog.close();\n            });\n            this.addEventListener(dialog, 'close', () => {\n                this.removeChildFrom(dialog, document.body);\n            });\n            dialog.close = function () {\n                dialog.dispatchEvent(new CustomEvent('close'));\n                self.removeChildFrom(dialog, document.body);\n            };\n            document.body.appendChild(dialog);\n            return dialog;\n        }\n        updateOnChange(flags, changed = false) {\n            if (super.updateOnChange(flags, changed)) {\n                this.updateContentView(this.dataValue);\n            }\n        }\n        showModal() {\n            const elt = this.ce('div');\n            this.setContent(elt, super.renderElement(this.dataValue));\n            const editor = elt.children[0];\n            if (this.isPlain) {\n                editor.style.resize = 'vertical';\n            }\n            super.attachElement(editor);\n            this.createModal(editor);\n        }\n        updateContentView(content = '') {\n            const view = _.get(this, 'refs.input[0]', null);\n            return this.setContent(view, content);\n        }\n        getElementRect(elt) {\n            return elt.getBoundingClientRect();\n        }\n        getModalStyle(args, overrides = {}) {\n            const defaultStyles = {\n                position: 'absolute',\n                height: 'auto'\n            };\n            const layout = _.mapValues(_.pick(args, [\n                'top',\n                'left',\n                'width'\n            ]), p => `${ p }px`);\n            return {\n                ...defaultStyles,\n                ...overrides,\n                ...layout\n            };\n        }\n        getModalLayout(rect) {\n            const {\n                width,\n                height: minHeight\n            } = this.getModalSize(rect.width, rect.height);\n            return {\n                left: rect.left,\n                minHeight,\n                top: rect.top,\n                width\n            };\n        }\n        getModalSize(currentWidth, currentHeight) {\n            const [dw, dh] = this.defaultModalSize;\n            const type = _.get(this.component, 'modalLayout', 'fixed');\n            const {widthProp, heightProp} = this.layoutProps[type];\n            const width = _.get(this.component, widthProp, dw);\n            const height = _.get(this.component, heightProp, dh);\n            if (type === 'fluid') {\n                return {\n                    width: Math.max(currentWidth, width),\n                    height: Math.max(currentHeight, height)\n                };\n            }\n            return {\n                width,\n                height\n            };\n        }\n        get defaultModalSize() {\n            return [\n                475,\n                300\n            ];\n        }\n        get layoutProps() {\n            return {\n                fixed: {\n                    widthProp: 'width',\n                    heightProp: 'height'\n                },\n                fluid: {\n                    widthProp: 'minWidth',\n                    heightProp: 'minHeight'\n                }\n            };\n        }\n    };\n    ModalEditComponent.editForm = ModalEditForm;\n});"]}