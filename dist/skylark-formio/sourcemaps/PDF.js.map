{"version":3,"sources":["PDF.js"],"names":["define","NativePromise","Formio","Webform","a","window","addEventListener","event","eventData","JSON","parse","data","err","name","formId","forms","hasOwnProperty","emit","[object Object]","element","options","super","this","components","init","on","submission","setValue","fromIframe","iframeBoundingClientRect","document","querySelector","getBoundingClientRect","postMessage","iframe","top","scrollY","pageYOffset","iframeReadyResolve","renderTemplate","classes","children","renderComponents","redraw","attach","then","loadRefs","submitButton","zoomIn","zoomOut","iframeContainer","iframeReady","resolve","reject","iframeReadyReject","iframeElement","ce","src","getSrc","id","seamless","class","formioContainer","component","formioComponent","empty","refs","appendChild","form","find","c","classList","toggle","visible","submit","preventDefault","fastCloneDeep","formio","projectUrl","url","formUrl","base","getToken","once","getSubmission","submitForm","_form","settings","pdf","iframeSrc","params","readOnly","push","zoom","builderMode","length","join","setForm","flags","changed","setSubmission","getDownloadUrl","downloadButton","primaryProject","href","target","style","require","insertBefore","message","type","contentWindow","stringify","key","error","triggerEvent","helpBlock","getElementById","p","setContent","t","scrollTo","div","appendTo","errors","remove","focusOnComponent","showErrors"],"mappings":"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","file":"../PDF.js","sourcesContent":["define([\n    './vendors/getify/npo',\n    './Formio',\n    './Webform',\n    './utils/utils'\n], function (NativePromise, Formio, Webform, a) {\n    'use strict';\n    class PDF extends Webform {\n        constructor(element, options) {\n            super(element, options);\n            this.components = [];\n        }\n        init() {\n            super.init();\n            this.on('iframe-submission', submission => this.setValue(submission, { fromIframe: true }), true);\n            this.on('iframe-change', submission => this.setValue(submission, { fromIframe: true }), true);\n            this.on('iframe-getIframePositions', () => {\n                const iframeBoundingClientRect = document.querySelector('iframe').getBoundingClientRect();\n                this.postMessage({\n                    name: 'iframePositions',\n                    data: {\n                        iframe: { top: iframeBoundingClientRect.top },\n                        scrollY: window.scrollY || window.pageYOffset\n                    }\n                });\n            });\n            this.on('iframe-ready', () => this.iframeReadyResolve(), true);\n        }\n        render() {\n            return this.renderTemplate('pdf', {\n                classes: 'formio-form-pdf',\n                children: this.renderComponents()\n            });\n        }\n        redraw() {\n            return super.redraw();\n        }\n        attach(element) {\n            return super.attach(element).then(() => {\n                this.loadRefs(element, {\n                    submitButton: 'single',\n                    zoomIn: 'single',\n                    zoomOut: 'single',\n                    iframeContainer: 'single'\n                });\n                this.iframeReady = new NativePromise((resolve, reject) => {\n                    this.iframeReadyResolve = resolve;\n                    this.iframeReadyReject = reject;\n                });\n                this.iframeElement = this.ce('iframe', {\n                    src: this.getSrc(),\n                    id: `iframe-${ this.id }`,\n                    seamless: true,\n                    class: 'formio-iframe'\n                });\n                this.iframeElement.formioContainer = this.component.components;\n                this.iframeElement.formioComponent = this;\n                this.empty(this.refs.iframeContainer);\n                this.appendChild(this.refs.iframeContainer, this.iframeElement);\n                this.postMessage({\n                    name: 'form',\n                    data: this.form\n                });\n                const submitButton = this.components.find(c => c.element === this.refs.submitButton);\n                this.refs.submitButton.classList.toggle('hidden', !submitButton.visible);\n                this.addEventListener(this.refs.submitButton, 'click', () => {\n                    this.postMessage({ name: 'getErrors' });\n                    return this.submit();\n                });\n                this.addEventListener(this.refs.zoomIn, 'click', event => {\n                    event.preventDefault();\n                    this.postMessage({ name: 'zoomIn' });\n                });\n                this.addEventListener(this.refs.zoomOut, 'click', event => {\n                    event.preventDefault();\n                    this.postMessage({ name: 'zoomOut' });\n                });\n                const form = a.fastCloneDeep(this.form);\n                if (this.formio) {\n                    form.projectUrl = this.formio.projectUrl;\n                    form.url = this.formio.formUrl;\n                    form.base = this.formio.base;\n                    this.postMessage({\n                        name: 'token',\n                        data: this.formio.getToken()\n                    });\n                }\n                this.emit('attach');\n            });\n        }\n        getSubmission() {\n            return new NativePromise(resolve => {\n                this.once('iframe-submission', resolve);\n                this.postMessage({ name: 'getSubmission' });\n            });\n        }\n        submitForm(options = {}) {\n            return this.getSubmission().then(() => super.submitForm(options));\n        }\n        getSrc() {\n            if (!this._form || !this._form.settings || !this._form.settings.pdf) {\n                return '';\n            }\n            let iframeSrc = `${ this._form.settings.pdf.src }.html`;\n            const params = [`id=${ this.id }`];\n            if (this.options.readOnly) {\n                params.push('readonly=1');\n            }\n            if (this.options.zoom) {\n                params.push(`zoom=${ this.options.zoom }`);\n            }\n            if (this.builderMode) {\n                params.push('builder=1');\n            }\n            if (params.length) {\n                iframeSrc += `?${ params.join('&') }`;\n            }\n            return iframeSrc;\n        }\n        setForm(form) {\n            return super.setForm(form).then(() => {\n                if (this.formio) {\n                    form.projectUrl = this.formio.projectUrl;\n                    form.url = this.formio.formUrl;\n                    form.base = this.formio.base;\n                    this.postMessage({\n                        name: 'token',\n                        data: this.formio.getToken()\n                    });\n                }\n                this.postMessage({\n                    name: 'form',\n                    data: form\n                });\n            });\n        }\n        setValue(submission, flags = {}) {\n            const changed = super.setValue(submission, flags);\n            if (!flags || !flags.fromIframe) {\n                this.once('iframe-ready', () => {\n                    this.postMessage({\n                        name: 'submission',\n                        data: submission\n                    });\n                });\n            }\n            return changed;\n        }\n        setSubmission(submission) {\n            submission.readOnly = !!this.options.readOnly;\n            return super.setSubmission(submission).then(() => {\n                if (this.formio) {\n                    this.formio.getDownloadUrl().then(url => {\n                        if (!url) {\n                            return;\n                        }\n                        if (!this.downloadButton) {\n                            if (this.options.primaryProject) {\n                                url += `&project=${ this.options.primaryProject }`;\n                            }\n                            this.downloadButton = this.ce('a', {\n                                href: url,\n                                target: '_blank',\n                                style: 'position:absolute;right:10px;top:110px;cursor:pointer;'\n                            }, this.ce('img', {\n                                src: require('./pdf.image'),\n                                style: 'width:3em;'\n                            }));\n                            this.element.insertBefore(this.downloadButton, this.iframe);\n                        }\n                    });\n                }\n            });\n        }\n        postMessage(message) {\n            if (!this.iframeReady) {\n                return;\n            }\n            if (!message.type) {\n                message.type = 'iframe-data';\n            }\n            this.iframeReady.then(() => {\n                if (this.iframeElement && this.iframeElement.contentWindow) {\n                    this.iframeElement.contentWindow.postMessage(JSON.stringify(message), '*');\n                }\n            });\n        }\n        focusOnComponent(key) {\n            this.postMessage({\n                name: 'focusErroredField',\n                data: key\n            });\n        }\n        clear() {\n        }\n        showErrors(error, triggerEvent) {\n            const helpBlock = document.getElementById('submit-error');\n            if (!helpBlock) {\n                const p = this.ce('p', { class: 'help-block' });\n                this.setContent(p, this.t('submitError'));\n                p.addEventListener('click', () => {\n                    window.scrollTo(0, 0);\n                });\n                const div = this.ce('div', {\n                    id: 'submit-error',\n                    class: 'has-error'\n                });\n                this.appendTo(p, div);\n                this.appendTo(div, this.element);\n            }\n            if (!this.errors.length && helpBlock) {\n                helpBlock.remove();\n            }\n            if (this.errors.length) {\n                this.focusOnComponent(this.errors[0].component.key);\n            }\n            if (this.errors.length) {\n                this.focusOnComponent(this.errors[0].component.key);\n            }\n            super.showErrors(error, triggerEvent);\n        }\n    };\n    window.addEventListener('message', event => {\n        let eventData = null;\n        try {\n            eventData = JSON.parse(event.data);\n        } catch (err) {\n            eventData = null;\n        }\n        if (eventData && eventData.name && eventData.formId && Formio.forms.hasOwnProperty(eventData.formId)) {\n            Formio.forms[eventData.formId].emit(`iframe-${ eventData.name }`, eventData.data);\n        }\n    });\n\n\n    return PDF;\n});"]}