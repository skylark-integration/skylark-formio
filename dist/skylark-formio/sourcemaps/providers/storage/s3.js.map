{"version":3,"sources":["providers/storage/s3.js"],"names":["define","NativePromise","XHR","s3","formio","uploadFile","file","fileName","dir","progressCallback","upload","xhr","response","data","key","path","signed","open","setRequestHeader","type","fd","FormData","append","url","then","storage","name","bucket","acl","size","downloadFile","makeRequest","formUrl","trim","resolve","title"],"mappings":";;;;;;;AAAAA,QACI,2BACA,SACD,SAAUC,EAAeC,GACxB,aACA,MAAMC,EAAKC,KACPC,WAAU,CAACC,EAAMC,EAAUC,EAAKC,IACrBP,EAAIQ,OAAON,EAAQ,KAAM,CAACO,EAAKC,KAOlC,GANAA,EAASC,KAAKN,SAAWA,EACzBK,EAASC,KAAKC,IAAMZ,EAAIa,MACpBH,EAASC,KAAKC,IACdN,EACAD,IAEAK,EAASI,OAGT,OAFAL,EAAIM,KAAK,MAAOL,EAASI,QACzBL,EAAIO,iBAAiB,eAAgBZ,EAAKa,MACnCb,EACJ,CACH,MAAMc,EAAK,IAAIC,SACf,IAAK,MAAMP,KAAOF,EAASC,KACvBO,EAAGE,OAAOR,EAAKF,EAASC,KAAKC,IAIjC,OAFAM,EAAGE,OAAO,OAAQhB,GAClBK,EAAIM,KAAK,OAAQL,EAASW,KACnBH,IAEZd,EAAMC,EAAUC,EAAKC,GAAkBe,KAAKZ,KAEvCa,QAAS,KACTC,KAAMnB,EACNoB,OAAQf,EAASe,OACjBb,IAAKF,EAASC,KAAKC,IACnBS,IAAKrB,EAAIa,MACLH,EAASW,IACTX,EAASC,KAAKC,MAElBc,IAAKhB,EAASC,KAAKe,IACnBC,KAAMvB,EAAKuB,KACXV,KAAMb,EAAKa,QAIvBW,aAAaxB,GACQ,gBAAbA,EAAKsB,IACExB,EAAO2B,YAAY,UAAY3B,EAAO4B,6BAA+B9B,EAAI+B,KAAK3B,EAAKqB,eAAiBzB,EAAI+B,KAAK3B,EAAKQ,OAAS,OAE3Hb,EAAciC,QAAQ5B,KAKzC,OADAH,EAAGgC,MAAQ,KACJhC","file":"../../../providers/storage/s3.js","sourcesContent":["define([\n    '../../vendors/getify/npo',\n    './xhr'\n], function (NativePromise, XHR) {\n    'use strict';\n    const s3 = formio => ({\n        uploadFile(file, fileName, dir, progressCallback) {\n            return XHR.upload(formio, 's3', (xhr, response) => {\n                response.data.fileName = fileName;\n                response.data.key = XHR.path([\n                    response.data.key,\n                    dir,\n                    fileName\n                ]);\n                if (response.signed) {\n                    xhr.open('PUT', response.signed);\n                    xhr.setRequestHeader('Content-Type', file.type);\n                    return file;\n                } else {\n                    const fd = new FormData();\n                    for (const key in response.data) {\n                        fd.append(key, response.data[key]);\n                    }\n                    fd.append('file', file);\n                    xhr.open('POST', response.url);\n                    return fd;\n                }\n            }, file, fileName, dir, progressCallback).then(response => {\n                return {\n                    storage: 's3',\n                    name: fileName,\n                    bucket: response.bucket,\n                    key: response.data.key,\n                    url: XHR.path([\n                        response.url,\n                        response.data.key\n                    ]),\n                    acl: response.data.acl,\n                    size: file.size,\n                    type: file.type\n                };\n            });\n        },\n        downloadFile(file) {\n            if (file.acl !== 'public-read') {\n                return formio.makeRequest('file', `${ formio.formUrl }/storage/s3?bucket=${ XHR.trim(file.bucket) }&key=${ XHR.trim(file.key) }`, 'GET');\n            } else {\n                return NativePromise.resolve(file);\n            }\n        }\n    });\n    s3.title = 'S3';\n    return s3;\n});"]}