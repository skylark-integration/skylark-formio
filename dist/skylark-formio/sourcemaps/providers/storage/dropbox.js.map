{"version":3,"sources":["providers/storage/dropbox.js"],"names":["define","NativePromise","dropbox","formio","uploadFile","file","fileName","dir","progressCallback","resolve","reject","xhr","XMLHttpRequest","upload","onprogress","fd","FormData","append","onerror","err","networkError","onload","status","response","JSON","parse","storage","size","type","url","path_lower","onabort","open","formUrl","token","getToken","setRequestHeader","send","[object Object]","title"],"mappings":";;;;;;;AAAAA,QAAQ,4BAA6B,SAAUC,GAC3C,aACA,MAAMC,EAAUC,KACZC,WAAU,CAACC,EAAMC,EAAUC,EAAKC,IACrB,IAAIP,EAAc,CAACQ,EAASC,KAC/B,MAAMC,EAAM,IAAIC,eACgB,mBAArBJ,IACPG,EAAIE,OAAOC,WAAaN,GAE5B,MAAMO,EAAK,IAAIC,SACfD,EAAGE,OAAO,OAAQX,GAClBS,EAAGE,OAAO,MAAOV,GACjBQ,EAAGE,OAAO,OAAQZ,GAClBM,EAAIO,QAAUC,CAAAA,IACVA,EAAIC,cAAe,EACnBV,EAAOS,KAEXR,EAAIU,OAAS,MACT,GAAIV,EAAIW,QAAU,KAAOX,EAAIW,OAAS,IAAK,CACvC,MAAMC,EAAWC,KAAKC,MAAMd,EAAIY,UAChCA,EAASG,QAAU,UACnBH,EAASI,KAAOtB,EAAKsB,KACrBJ,EAASK,KAAOvB,EAAKuB,KACrBL,EAASM,IAAMN,EAASO,WACxBrB,EAAQc,QAERb,EAAOC,EAAIY,UAAY,2BAG/BZ,EAAIoB,QAAUrB,EACdC,EAAIqB,KAAK,UAAY7B,EAAO8B,2BAC5B,MAAMC,EAAQ/B,EAAOgC,WACjBD,GACAvB,EAAIyB,iBAAiB,cAAeF,GAExCvB,EAAI0B,KAAKtB,KAGjBuB,aAAajC,GACT,MAAM6B,EAAQ/B,EAAOgC,WAErB,OADA9B,EAAKwB,OAAU1B,EAAO8B,sCAAwC5B,EAAKyB,aAAeI,kBAAyBA,IAAW,KAC/GjC,EAAcQ,QAAQJ,MAIrC,OADAH,EAAQqC,MAAQ,UACTrC","file":"../../../providers/storage/dropbox.js","sourcesContent":["define(['../../vendors/getify/npo'], function (NativePromise) {\n    'use strict';\n    const dropbox = formio => ({\n        uploadFile(file, fileName, dir, progressCallback) {\n            return new NativePromise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                if (typeof progressCallback === 'function') {\n                    xhr.upload.onprogress = progressCallback;\n                }\n                const fd = new FormData();\n                fd.append('name', fileName);\n                fd.append('dir', dir);\n                fd.append('file', file);\n                xhr.onerror = err => {\n                    err.networkError = true;\n                    reject(err);\n                };\n                xhr.onload = () => {\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        const response = JSON.parse(xhr.response);\n                        response.storage = 'dropbox';\n                        response.size = file.size;\n                        response.type = file.type;\n                        response.url = response.path_lower;\n                        resolve(response);\n                    } else {\n                        reject(xhr.response || 'Unable to upload file');\n                    }\n                };\n                xhr.onabort = reject;\n                xhr.open('POST', `${ formio.formUrl }/storage/dropbox`);\n                const token = formio.getToken();\n                if (token) {\n                    xhr.setRequestHeader('x-jwt-token', token);\n                }\n                xhr.send(fd);\n            });\n        },\n        downloadFile(file) {\n            const token = formio.getToken();\n            file.url = `${ formio.formUrl }/storage/dropbox?path_lower=${ file.path_lower }${ token ? `&x-jwt-token=${ token }` : '' }`;\n            return NativePromise.resolve(file);\n        }\n    });\n    dropbox.title = 'Dropbox';\n    return dropbox;\n});"]}