{"version":3,"sources":["providers/storage/xhr.js"],"names":["define","NativePromise","_","trim","XHR","text","_trim","path","items","filter","item","map","join","upload","formio","type","xhrCb","file","fileName","dir","progressCallback","resolve","reject","pre","XMLHttpRequest","onerror","err","networkError","onabort","onload","status","response","JSON","parse","xhr","onprogress","send","open","formUrl","setRequestHeader","token","getToken","stringify","name","size"],"mappings":";;;;;;;AAAAA,QACI,2BACA,kBACD,SAAUC,EAAeC,GACxB,aAEeA,EAAEC,KAAjB,MACMC,GACFD,KAAKE,GACMC,MAAMD,EAAM,KAEvBE,KAAKC,GACMA,EAAMC,OAAOC,KAAUA,GAAMC,IAAIP,EAAID,MAAMS,KAAK,KAE3DC,OAAM,CAACC,EAAQC,EAAMC,EAAOC,EAAMC,EAAUC,EAAKC,IACtC,IAAInB,EAAc,CAACoB,EAASC,KAC/B,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,QAAUC,CAAAA,IACVA,EAAIC,cAAe,EACnBL,EAAOI,KAEXH,EAAIK,QAAUN,EACdC,EAAIM,OAAS,MACT,GAAIN,EAAIO,QAAU,KAAOP,EAAIO,OAAS,IAAK,CACvC,MAAMC,EAAWC,KAAKC,MAAMV,EAAIQ,UAC1BG,EAAM,IAAIV,eACgB,mBAArBJ,IACPc,EAAIrB,OAAOsB,WAAaf,GAE5Bc,EAAIT,QAAUC,CAAAA,IACVA,EAAIC,cAAe,EACnBL,EAAOI,KAEXQ,EAAIN,QAAUF,CAAAA,IACVA,EAAIC,cAAe,EACnBL,EAAOI,KAEXQ,EAAIL,OAAS,MACLK,EAAIJ,QAAU,KAAOI,EAAIJ,OAAS,IAClCT,EAAQU,GAERT,EAAOY,EAAIH,UAAY,2BAG/BG,EAAIN,QAAUN,EACdY,EAAIE,KAAKpB,EAAMkB,EAAKH,SAEpBT,EAAOC,EAAIQ,UAAY,yBAG/BR,EAAIc,KAAK,UAAYvB,EAAOwB,mBAAqBvB,KACjDQ,EAAIgB,iBAAiB,SAAU,oBAC/BhB,EAAIgB,iBAAiB,eAAgB,mCACrC,MAAMC,EAAQ1B,EAAO2B,WACjBD,GACAjB,EAAIgB,iBAAiB,cAAeC,GAExCjB,EAAIa,KAAKJ,KAAKU,WACVC,KAAMvC,EAAIG,MACNY,EACAD,IAEJ0B,KAAM3B,EAAK2B,KACX7B,KAAME,EAAKF,WAK3B,OAAOX","file":"../../../providers/storage/xhr.js","sourcesContent":["define([\n    '../../vendors/getify/npo',\n    'skylark-lodash'\n], function (NativePromise, _) {\n    'use strict';\n\n    const _trime = _.trim;\n    const XHR = {\n        trim(text) {\n            return _trim(text, '/');\n        },\n        path(items) {\n            return items.filter(item => !!item).map(XHR.trim).join('/');\n        },\n        upload(formio, type, xhrCb, file, fileName, dir, progressCallback) {\n            return new NativePromise((resolve, reject) => {\n                const pre = new XMLHttpRequest();\n                pre.onerror = err => {\n                    err.networkError = true;\n                    reject(err);\n                };\n                pre.onabort = reject;\n                pre.onload = () => {\n                    if (pre.status >= 200 && pre.status < 300) {\n                        const response = JSON.parse(pre.response);\n                        const xhr = new XMLHttpRequest();\n                        if (typeof progressCallback === 'function') {\n                            xhr.upload.onprogress = progressCallback;\n                        }\n                        xhr.onerror = err => {\n                            err.networkError = true;\n                            reject(err);\n                        };\n                        xhr.onabort = err => {\n                            err.networkError = true;\n                            reject(err);\n                        };\n                        xhr.onload = () => {\n                            if (xhr.status >= 200 && xhr.status < 300) {\n                                resolve(response);\n                            } else {\n                                reject(xhr.response || 'Unable to upload file');\n                            }\n                        };\n                        xhr.onabort = reject;\n                        xhr.send(xhrCb(xhr, response));\n                    } else {\n                        reject(pre.response || 'Unable to sign file');\n                    }\n                };\n                pre.open('POST', `${ formio.formUrl }/storage/${ type }`);\n                pre.setRequestHeader('Accept', 'application/json');\n                pre.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                const token = formio.getToken();\n                if (token) {\n                    pre.setRequestHeader('x-jwt-token', token);\n                }\n                pre.send(JSON.stringify({\n                    name: XHR.path([\n                        dir,\n                        fileName\n                    ]),\n                    size: file.size,\n                    type: file.type\n                }));\n            });\n        }\n    };\n    return XHR;\n});"]}