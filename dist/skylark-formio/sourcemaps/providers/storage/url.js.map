{"version":3,"sources":["providers/storage/url.js"],"names":["define","NativePromise","url","formio","xhrRequest","name","query","data","options","onprogress","resolve","reject","xhr","XMLHttpRequest","json","fd","FormData","upload","key","append","onload","status","respData","response","JSON","parse","err","respUrl","hasOwnProperty","responseURL","onerror","onabort","requestUrl","indexOf","length","substr","open","setRequestHeader","token","getToken","parsedOptions","prop","send","title","[object Object]","file","dir","progressCallback","fileKey","uploadRequest","form","baseUrl","encodeURIComponent","projectUrl","project","_id","then","storage","size","type","private","formId","loadForm","deleteFile","fileInfo","downloadFile","submissionId","submission","stringify"],"mappings":"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","file":"../../../providers/storage/url.js","sourcesContent":["define(['../../vendors/getify/npo'], function (NativePromise) {\n    'use strict';\n    const url = formio => {\n        const xhrRequest = (url, name, query, data, options, onprogress) => {\n            return new NativePromise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                const json = typeof data === 'string';\n                const fd = new FormData();\n                if (typeof onprogress === 'function') {\n                    xhr.upload.onprogress = onprogress;\n                }\n                if (!json) {\n                    for (const key in data) {\n                        fd.append(key, data[key]);\n                    }\n                }\n                xhr.onload = () => {\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        let respData = {};\n                        try {\n                            respData = typeof xhr.response === 'string' ? JSON.parse(xhr.response) : {};\n                            respData = respData && respData.data ? respData.data : respData;\n                        } catch (err) {\n                            respData = {};\n                        }\n                        let respUrl = respData.hasOwnProperty('url') ? respData.url : `${ xhr.responseURL }/${ name }`;\n                        if (respUrl && respUrl[0] === '/') {\n                            respUrl = `${ url }${ respUrl }`;\n                        }\n                        resolve({\n                            url: respUrl,\n                            data: respData\n                        });\n                    } else {\n                        reject(xhr.response || 'Unable to upload file');\n                    }\n                };\n                xhr.onerror = () => reject(xhr);\n                xhr.onabort = () => reject(xhr);\n                let requestUrl = url + (url.indexOf('?') > -1 ? '&' : '?');\n                for (const key in query) {\n                    requestUrl += `${ key }=${ query[key] }&`;\n                }\n                if (requestUrl[requestUrl.length - 1] === '&') {\n                    requestUrl = requestUrl.substr(0, requestUrl.length - 1);\n                }\n                xhr.open('POST', requestUrl);\n                if (json) {\n                    xhr.setRequestHeader('Content-Type', 'application/json');\n                }\n                const token = formio.getToken();\n                if (token) {\n                    xhr.setRequestHeader('x-jwt-token', token);\n                }\n                if (options) {\n                    const parsedOptions = typeof options === 'string' ? JSON.parse(options) : options;\n                    for (const prop in parsedOptions) {\n                        xhr[prop] = parsedOptions[prop];\n                    }\n                }\n                xhr.send(json ? data : fd);\n            });\n        };\n        return {\n            title: 'Url',\n            name: 'url',\n            uploadFile(file, name, dir, progressCallback, url, options, fileKey) {\n                const uploadRequest = function (form) {\n                    return xhrRequest(url, name, {\n                        baseUrl: encodeURIComponent(formio.projectUrl),\n                        project: form ? form.project : '',\n                        form: form ? form._id : ''\n                    }, {\n                        [fileKey]: file,\n                        name,\n                        dir\n                    }, options, progressCallback).then(response => {\n                        response.data = response.data || {};\n                        response.data.baseUrl = formio.projectUrl;\n                        response.data.project = form ? form.project : '';\n                        response.data.form = form ? form._id : '';\n                        return {\n                            storage: 'url',\n                            name,\n                            url: response.url,\n                            size: file.size,\n                            type: file.type,\n                            data: response.data\n                        };\n                    });\n                };\n                if (file.private && formio.formId) {\n                    return formio.loadForm().then(form => uploadRequest(form));\n                } else {\n                    return uploadRequest();\n                }\n            },\n            deleteFile(fileInfo) {\n                return new NativePromise((resolve, reject) => {\n                    const xhr = new XMLHttpRequest();\n                    xhr.open('DELETE', fileInfo.url, true);\n                    xhr.onload = () => {\n                        if (xhr.status >= 200 && xhr.status < 300) {\n                            resolve('File deleted');\n                        } else {\n                            reject(xhr.response || 'Unable to delete file');\n                        }\n                    };\n                    xhr.send(null);\n                });\n            },\n            downloadFile(file) {\n                if (file.private) {\n                    if (formio.submissionId && file.data) {\n                        file.data.submission = formio.submissionId;\n                    }\n                    return xhrRequest(file.url, file.name, {}, JSON.stringify(file)).then(response => response.data);\n                }\n                return NativePromise.resolve(file);\n            }\n        };\n    };\n    url.title = 'Url';\n    return url;\n});"]}