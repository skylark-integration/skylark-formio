{"version":3,"sources":["providers/storage/indexeddb.js"],"names":["define","uuidv4","NativePromise","indexeddb","title","name","[object Object]","file","fileName","dir","progressCallback","url","options","window","resolve","request","indexedDB","open","onsuccess","event","db","target","result","onupgradeneeded","e","createObjectStore","indexeddbTable","then","reader","FileReader","reject","onload","blobObject","Blob","type","id","data","size","trans","transaction","objectStore","put","onerror","console","log","error","oncomplete","storage","this","readAsDataURL","store","get","dbFile","File"],"mappings":";;;;;;;AAAAA,QACI,wBACA,4BACD,SAAUC,EAAQC,GACjB,aACA,MAAMC,EAAY,MACdC,MAAO,YACPC,KAAM,YACNC,WAAWC,EAAMC,EAAUC,EAAKC,EAAkBC,EAAKC,GACnD,GAAM,cAAeC,OAIrB,OAAO,IAAIX,EAAcY,IACrB,MAAMC,EAAUC,UAAUC,KAAKL,EAAQT,UAAW,GAClDY,EAAQG,UAAY,SAAUC,GAC1B,MAAMC,EAAKD,EAAME,OAAOC,OACxBR,EAAQM,IAEZL,EAAQQ,gBAAkB,SAAUC,GACrBA,EAAEH,OAAOC,OACjBG,kBAAkBb,EAAQc,mBAElCC,KAAKP,IACJ,MAAMQ,EAAS,IAAIC,WACnB,OAAO,IAAI3B,EAAc,CAACY,EAASgB,KAC/BF,EAAOG,OAAS,MACZ,MAAMC,EAAa,IAAIC,MAAM1B,IAAS2B,KAAM3B,EAAK2B,OAC3CC,EAAKlC,EAAO+B,GACZI,GACFD,GAAAA,EACAC,KAAMJ,EACN3B,KAAME,EAAKF,KACXgC,KAAM9B,EAAK8B,KACXH,KAAM3B,EAAK2B,KACXvB,IAAAA,GAEE2B,EAAQlB,EAAGmB,aAAa3B,EAAQc,gBAAiB,aACxCY,EAAME,YAAY5B,EAAQc,gBAAgBe,IAAIL,EAAMD,GAC5DO,QAAU,SAAUlB,GACvBmB,QAAQC,IAAI,sBACZD,QAAQE,MAAMrB,IAElBc,EAAMQ,WAAa,WACfhC,GACIiC,QAAS,YACT1C,KAAME,EAAKF,KACXgC,KAAM9B,EAAK8B,KACXH,KAAM3B,EAAK2B,KACXvB,IAAKA,EACLwB,GAAAA,OAIZP,EAAOc,QAAU,KACNZ,EAAOkB,OAElBpB,EAAOqB,cAAc1C,OA/CzBoC,QAAQC,IAAI,2CAmDpBtC,aAAaC,EAAMK,GACf,OAAO,IAAIV,EAAcY,IACLE,UAAUC,KAAKL,EAAQT,UAAW,GAC1Ce,UAAY,SAAUC,GAC1B,MAAMC,EAAKD,EAAME,OAAOC,OACxBR,EAAQM,MAEbO,KAAKP,GACG,IAAIlB,EAAc,CAACY,EAASgB,KAC/B,MAAMQ,EAAQlB,EAAGmB,aAAa3B,EAAQc,gBAAiB,YACjDwB,EAAQZ,EAAME,YAAY5B,EAAQc,gBAAgByB,IAAI5C,EAAK4B,IACjEe,EAAMhC,UAAY,MACdoB,EAAMQ,WAAa,MACf,MAAMxB,EAAS4B,EAAM5B,OACf8B,EAAS,IAAIC,MAAMH,EAAM5B,OAAOc,MAAO7B,EAAKF,MAAQ6B,KAAMgB,EAAM5B,OAAOY,OACvEN,EAAS,IAAIC,WACnBD,EAAOG,OAASZ,CAAAA,IACZG,EAAOX,IAAMQ,EAAME,OAAOC,OAC1BR,EAAQQ,KAEZM,EAAOc,QAAU,KACNZ,EAAOkB,OAElBpB,EAAOqB,cAAcG,OAG7BF,EAAMR,QAAU,KACLZ,EAAOkB,aAOlC,OADA7C,EAAUC,MAAQ,YACXD","file":"../../../providers/storage/indexeddb.js","sourcesContent":["define([\n    '../../vendors/uuid/v4',\n    '../../vendors/getify/npo'\n], function (uuidv4, NativePromise) {\n    'use strict';\n    const indexeddb = () => ({\n        title: 'indexedDB',\n        name: 'indexeddb',\n        uploadFile(file, fileName, dir, progressCallback, url, options) {\n            if (!('indexedDB' in window)) {\n                console.log(\"This browser doesn't support IndexedDB\");\n                return;\n            }\n            return new NativePromise(resolve => {\n                const request = indexedDB.open(options.indexeddb, 3);\n                request.onsuccess = function (event) {\n                    const db = event.target.result;\n                    resolve(db);\n                };\n                request.onupgradeneeded = function (e) {\n                    const db = e.target.result;\n                    db.createObjectStore(options.indexeddbTable);\n                };\n            }).then(db => {\n                const reader = new FileReader();\n                return new NativePromise((resolve, reject) => {\n                    reader.onload = () => {\n                        const blobObject = new Blob([file], { type: file.type });\n                        const id = uuidv4(blobObject);\n                        const data = {\n                            id,\n                            data: blobObject,\n                            name: file.name,\n                            size: file.size,\n                            type: file.type,\n                            url\n                        };\n                        const trans = db.transaction([options.indexeddbTable], 'readwrite');\n                        const addReq = trans.objectStore(options.indexeddbTable).put(data, id);\n                        addReq.onerror = function (e) {\n                            console.log('error storing data');\n                            console.error(e);\n                        };\n                        trans.oncomplete = function () {\n                            resolve({\n                                storage: 'indexeddb',\n                                name: file.name,\n                                size: file.size,\n                                type: file.type,\n                                url: url,\n                                id\n                            });\n                        };\n                    };\n                    reader.onerror = () => {\n                        return reject(this);\n                    };\n                    reader.readAsDataURL(file);\n                });\n            });\n        },\n        downloadFile(file, options) {\n            return new NativePromise(resolve => {\n                const request = indexedDB.open(options.indexeddb, 3);\n                request.onsuccess = function (event) {\n                    const db = event.target.result;\n                    resolve(db);\n                };\n            }).then(db => {\n                return new NativePromise((resolve, reject) => {\n                    const trans = db.transaction([options.indexeddbTable], 'readonly');\n                    const store = trans.objectStore(options.indexeddbTable).get(file.id);\n                    store.onsuccess = () => {\n                        trans.oncomplete = () => {\n                            const result = store.result;\n                            const dbFile = new File([store.result.data], file.name, { type: store.result.type });\n                            const reader = new FileReader();\n                            reader.onload = event => {\n                                result.url = event.target.result;\n                                resolve(result);\n                            };\n                            reader.onerror = () => {\n                                return reject(this);\n                            };\n                            reader.readAsDataURL(dbFile);\n                        };\n                    };\n                    store.onerror = () => {\n                        return reject(this);\n                    };\n                });\n            });\n        }\n    });\n    indexeddb.title = 'IndexedDB';\n    return indexeddb;\n});"]}