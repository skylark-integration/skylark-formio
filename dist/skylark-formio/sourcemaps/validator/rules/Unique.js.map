{"version":3,"sources":["validator/rules/Unique.js"],"names":["define","Rule","utils","_","NativePromise","Unique","[object Object]","value","isEmpty","this","config","db","resolve","form","submission","path","component","query","_id","isString","$regex","RegExp","escapeRegExCharacters","$options","isPlainObject","address","isArray","$all","isObject","$eq","deleted","findOne","err","result","toString","catch","prototype","defaultMessage"],"mappings":";;;;;;;AAAAA,QACI,SACA,oBACA,iBACA,4BACD,SAAUC,EAAKC,EAAOC,EAAGC,SAClBC,UAAeJ,EACjBK,MAAMC,GACF,QAAKA,IAASJ,EAAEK,QAAQD,OAGnBE,KAAKC,OAAOC,IAGV,IAAIP,EAAcQ,IACrB,MAAMC,EAAOJ,KAAKC,OAAOG,KACnBC,EAAaL,KAAKC,OAAOI,WACzBC,UAAgBN,KAAKO,UAAUD,OAC/BE,GAAUJ,KAAMA,EAAKK,KACvBf,EAAEgB,SAASZ,GACXU,EAAMF,IACFK,OAAQ,IAAIC,WAAYnB,EAAMoB,sBAAsBf,OACpDgB,SAAU,KAEPpB,EAAEqB,cAAcjB,IAAUA,EAAMkB,SAAWlB,EAAMkB,QAA4B,oBAAKlB,EAAMkB,QAAkB,SACjHR,KAAUF,uBACNK,OAAQ,IAAIC,WAAYnB,EAAMoB,sBAAsBf,EAAMkB,QAAkB,cAC5EF,SAAU,KAEPpB,EAAEuB,QAAQnB,GACjBU,EAAMF,IAAUY,KAAMpB,GACfJ,EAAEyB,SAASrB,KAClBU,EAAMF,IAAUc,IAAKtB,IAEzBU,EAAMa,SAAYD,IAAK,MACvBpB,KAAKC,OAAOC,GAAGoB,QAAQd,EAAO,CAACe,EAAKC,IAErBrB,GADPoB,KAEOC,GACQnB,EAAWI,KAAOe,EAAOf,IAAIgB,aAAepB,EAAWI,SAK/EiB,MAAM,KAAM,KAKvB,OAFA9B,EAAO+B,UAAUC,eAAiB,2BAE3BhC","file":"../../../validator/rules/Unique.js","sourcesContent":["define([\n    \"./Rule\",\n    '../../utils/utils',\n    'skylark-lodash',\n    '../../vendors/getify/npo'\n], function (Rule,utils, _, NativePromise) {\n    class Unique extends Rule {\n        check(value) {\n            if (!value || _.isEmpty(value)) {\n                return true;\n            }\n            if (!this.config.db) {\n                return true;\n            }\n            return new NativePromise(resolve => {\n                const form = this.config.form;\n                const submission = this.config.submission;\n                const path = `data.${ this.component.path }`;\n                const query = { form: form._id };\n                if (_.isString(value)) {\n                    query[path] = {\n                        $regex: new RegExp(`^${ utils.escapeRegExCharacters(value) }$`),\n                        $options: 'i'\n                    };\n                } else if (_.isPlainObject(value) && value.address && value.address['address_components'] && value.address['place_id']) {\n                    query[`${ path }.address.place_id`] = {\n                        $regex: new RegExp(`^${ utils.escapeRegExCharacters(value.address['place_id']) }$`),\n                        $options: 'i'\n                    };\n                } else if (_.isArray(value)) {\n                    query[path] = { $all: value };\n                } else if (_.isObject(value)) {\n                    query[path] = { $eq: value };\n                }\n                query.deleted = { $eq: null };\n                this.config.db.findOne(query, (err, result) => {\n                    if (err) {\n                        return resolve(false);\n                    } else if (result) {\n                        return resolve(submission._id && result._id.toString() === submission._id);\n                    } else {\n                        return resolve(true);\n                    }\n                });\n            }).catch(() => false);\n        }\n    };\n    Unique.prototype.defaultMessage = '{{field}} must be unique';\n\n    return Unique;\n});\n"]}