{"version":3,"sources":["validator/rules/Unique.js"],"names":["define","a","_","NativePromise","Rule","require","module","exports","[object Object]","value","isEmpty","this","config","db","resolve","form","submission","path","component","query","_id","isString","$regex","RegExp","escapeRegExCharacters","$options","isPlainObject","address","isArray","$all","isObject","$eq","deleted","findOne","err","result","toString","catch","Unique","prototype","defaultMessage"],"mappings":";;;;;;;AAAAA,QACI,oBACA,iBACA,4BACD,SAAUC,EAAGC,EAAGC,GACf,aACA,MAAMC,EAAOC,QAAQ,UACrBC,OAAOC,sBAA+BH,EAClCI,MAAMC,GACF,QAAKA,IAASP,EAAEQ,QAAQD,OAGnBE,KAAKC,OAAOC,IAGV,IAAIV,EAAcW,IACrB,MAAMC,EAAOJ,KAAKC,OAAOG,KACnBC,EAAaL,KAAKC,OAAOI,WACzBC,UAAgBN,KAAKO,UAAUD,OAC/BE,GAAUJ,KAAMA,EAAKK,KACvBlB,EAAEmB,SAASZ,GACXU,EAAMF,IACFK,OAAQ,IAAIC,WAAYtB,EAAEuB,sBAAsBf,OAChDgB,SAAU,KAEPvB,EAAEwB,cAAcjB,IAAUA,EAAMkB,SAAWlB,EAAMkB,QAA4B,oBAAKlB,EAAMkB,QAAkB,SACjHR,KAAUF,uBACNK,OAAQ,IAAIC,WAAYtB,EAAEuB,sBAAsBf,EAAMkB,QAAkB,cACxEF,SAAU,KAEPvB,EAAE0B,QAAQnB,GACjBU,EAAMF,IAAUY,KAAMpB,GACfP,EAAE4B,SAASrB,KAClBU,EAAMF,IAAUc,IAAKtB,IAEzBU,EAAMa,SAAYD,IAAK,MACvBpB,KAAKC,OAAOC,GAAGoB,QAAQd,EAAO,CAACe,EAAKC,IAErBrB,GADPoB,KAEOC,GACQnB,EAAWI,KAAOe,EAAOf,IAAIgB,aAAepB,EAAWI,SAK/EiB,MAAM,KAAM,MAGvBC,OAAOC,UAAUC,eAAiB","file":"../../../validator/rules/Unique.js","sourcesContent":["define([\n    '../../utils/utils',\n    'skylark-lodash',\n    '../../vendors/getify/npo'\n], function (a, _, NativePromise) {\n    'use strict';\n    const Rule = require('./Rule');\n    module.exports = class Unique extends Rule {\n        check(value) {\n            if (!value || _.isEmpty(value)) {\n                return true;\n            }\n            if (!this.config.db) {\n                return true;\n            }\n            return new NativePromise(resolve => {\n                const form = this.config.form;\n                const submission = this.config.submission;\n                const path = `data.${ this.component.path }`;\n                const query = { form: form._id };\n                if (_.isString(value)) {\n                    query[path] = {\n                        $regex: new RegExp(`^${ a.escapeRegExCharacters(value) }$`),\n                        $options: 'i'\n                    };\n                } else if (_.isPlainObject(value) && value.address && value.address['address_components'] && value.address['place_id']) {\n                    query[`${ path }.address.place_id`] = {\n                        $regex: new RegExp(`^${ a.escapeRegExCharacters(value.address['place_id']) }$`),\n                        $options: 'i'\n                    };\n                } else if (_.isArray(value)) {\n                    query[path] = { $all: value };\n                } else if (_.isObject(value)) {\n                    query[path] = { $eq: value };\n                }\n                query.deleted = { $eq: null };\n                this.config.db.findOne(query, (err, result) => {\n                    if (err) {\n                        return resolve(false);\n                    } else if (result) {\n                        return resolve(submission._id && result._id.toString() === submission._id);\n                    } else {\n                        return resolve(true);\n                    }\n                });\n            }).catch(() => false);\n        }\n    };\n    Unique.prototype.defaultMessage = '{{field}} must be unique';\n});"]}