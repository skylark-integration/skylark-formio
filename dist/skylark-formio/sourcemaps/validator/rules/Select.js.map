{"version":3,"sources":["validator/rules/Select.js"],"names":["define","a","NativePromise","fetchPonyfill","_","fetch","Headers","Request","Promise","Rule","require","module","exports","[object Object]","value","data","row","async","isEmpty","schema","this","component","requestOptions","url","settings","method","qs","json","headers","isBoolean","dataSrc","searchField","filter","includes","selectFields","select","interpolate","chain","map","val","key","encodeURIComponent","join","each","header","authenticate","config","token","then","response","ok","results","length","catch","Select","prototype","defaultMessage"],"mappings":";;;;;;;AAAAA,QACI,oBACA,2BACA,iBACA,kBACD,SAAUC,EAAGC,EAAeC,EAAeC,GAC1C,aACA,MAAMC,MAACA,EAAKC,QAAEA,EAAOC,QAAEA,GAAWJ,GAAgBK,QAASN,IACrDO,EAAOC,QAAQ,UACrBC,OAAOC,sBAA+BH,EAClCI,MAAMC,EAAOC,EAAMC,EAAKC,GACpB,IAAKH,GAASV,EAAEc,QAAQJ,GACpB,OAAO,EAEX,IAAKG,EACD,OAAO,EAEX,MAAME,EAASC,KAAKC,UAAUA,UACxBC,GACFC,IAAKH,KAAKI,SAASD,IACnBE,OAAQ,MACRC,MACAC,MAAM,EACNC,YAEJ,GAAIxB,EAAEyB,UAAUP,EAAeC,KAAM,CAEjC,GADAD,EAAeC,MAAQD,EAAeC,KACjCD,EAAeC,KAA0B,QAAnBJ,EAAOW,UAAsBX,EAAOJ,KAAKQ,MAAQJ,EAAOY,YAC/E,OAAO,EAEXT,EAAeC,IAAMJ,EAAOJ,KAAKQ,IACjCD,EAAeI,GAAGP,EAAOY,aAAejB,EACpCK,EAAOa,SACPV,EAAeC,MAASD,EAAeC,IAAIU,SAAS,KAAa,IAAN,KAAad,EAAOa,QAE/Eb,EAAOe,eACPZ,EAAeI,GAAGS,OAAShB,EAAOe,cAG1C,OAAKZ,EAAeC,MAGpBD,EAAeC,IAAMtB,EAAEmC,YAAYd,EAAeC,KAAOR,KAAMK,KAAKC,UAAUN,OAC9EO,EAAeC,MAAQD,EAAeC,IAAIU,SAAS,KAAO,IAAM,KAAO7B,EAAEiC,MAAMf,EAAeI,IAAIY,IAAI,CAACC,EAAKC,OAAYC,mBAAmBD,MAAUC,mBAAmBF,MAASG,KAAK,KAAK5B,QACvLK,EAAOJ,MAAQI,EAAOJ,KAAKa,SAC3BxB,EAAEuC,KAAKxB,EAAOJ,KAAKa,QAASgB,IACpBA,EAAOJ,MACPlB,EAAeM,QAAQgB,EAAOJ,KAAOI,EAAO9B,SAIpDK,EAAO0B,cAAgBzB,KAAK0B,OAAOC,QACnCzB,EAAeM,QAAQ,eAAiBR,KAAK0B,OAAOC,OAEjD1C,EAAM,IAAIE,EAAQe,EAAeC,KAAOK,QAAS,IAAItB,EAAQgB,EAAeM,YAAaoB,KAAKC,KAC5FA,EAASC,IAGPD,EAAStB,QACjBqB,KAAKG,GACGA,GAAWA,EAAQC,QAC3BC,MAAM,KAAM,MAGvBC,OAAOC,UAAUC,eAAiB","file":"../../../validator/rules/Select.js","sourcesContent":["define([\n    '../../utils/utils',\n    '../../vendors/getify/npo',\n    'fetch-ponyfill',\n    'skylark-lodash'\n], function (a, NativePromise, fetchPonyfill, _) {\n    'use strict';\n    const {fetch, Headers, Request} = fetchPonyfill({ Promise: NativePromise });\n    const Rule = require('./Rule');\n    module.exports = class Select extends Rule {\n        check(value, data, row, async) {\n            if (!value || _.isEmpty(value)) {\n                return true;\n            }\n            if (!async) {\n                return true;\n            }\n            const schema = this.component.component;\n            const requestOptions = {\n                url: this.settings.url,\n                method: 'GET',\n                qs: {},\n                json: true,\n                headers: {}\n            };\n            if (_.isBoolean(requestOptions.url)) {\n                requestOptions.url = !!requestOptions.url;\n                if (!requestOptions.url || schema.dataSrc !== 'url' || !schema.data.url || !schema.searchField) {\n                    return true;\n                }\n                requestOptions.url = schema.data.url;\n                requestOptions.qs[schema.searchField] = value;\n                if (schema.filter) {\n                    requestOptions.url += (!requestOptions.url.includes('?') ? '?' : '&') + schema.filter;\n                }\n                if (schema.selectFields) {\n                    requestOptions.qs.select = schema.selectFields;\n                }\n            }\n            if (!requestOptions.url) {\n                return true;\n            }\n            requestOptions.url = a.interpolate(requestOptions.url, { data: this.component.data });\n            requestOptions.url += (requestOptions.url.includes('?') ? '&' : '?') + _.chain(requestOptions.qs).map((val, key) => `${ encodeURIComponent(key) }=${ encodeURIComponent(val) }`).join('&').value();\n            if (schema.data && schema.data.headers) {\n                _.each(schema.data.headers, header => {\n                    if (header.key) {\n                        requestOptions.headers[header.key] = header.value;\n                    }\n                });\n            }\n            if (schema.authenticate && this.config.token) {\n                requestOptions.headers['x-jwt-token'] = this.config.token;\n            }\n            return fetch(new Request(requestOptions.url, { headers: new Headers(requestOptions.headers) })).then(response => {\n                if (!response.ok) {\n                    return false;\n                }\n                return response.json();\n            }).then(results => {\n                return results && results.length;\n            }).catch(() => false);\n        }\n    };\n    Select.prototype.defaultMessage = '{{field}} contains an invalid selection';\n});"]}