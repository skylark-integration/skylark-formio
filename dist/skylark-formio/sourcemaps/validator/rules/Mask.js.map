{"version":3,"sources":["validator/rules/Mask.js"],"names":["define","Rule","utils","Mask","[object Object]","value","inputMask","this","component","isMultipleMasksField","maskName","undefined","formioInputMask","getMaskByName","getInputMask","settings","mask","matchInputMask","prototype","defaultMessage"],"mappings":";;;;;;;AAAAA,QACI,SACA,qBACD,SAAUC,EAAKC,GACd,mBACMC,UAAaF,EACfG,MAAMC,GACF,IAAIC,EACJ,GAAIC,KAAKC,UAAUC,qBAAsB,CACrC,MAAMC,EAAWL,EAAQA,EAAMK,cAAWC,EACpCC,EAAkBL,KAAKC,UAAUK,cAAcH,GACjDE,IACAN,EAAYJ,EAAMY,aAAaF,IAEnCP,EAAQA,EAAQA,EAAMA,MAAQA,OAE9BC,EAAYJ,EAAMY,aAAaP,KAAKQ,SAASC,MAEjD,OAAIX,IAASC,GACFJ,EAAMe,eAAeZ,EAAOC,IAQ/C,OAFAH,EAAKe,UAAUC,eAAiB,qCAEzBhB","file":"../../../validator/rules/Mask.js","sourcesContent":["define([\n    './Rule',\n    '../../utils/utils'\n], function (Rule,utils) {\n    'use strict';\n    class Mask extends Rule {\n        check(value) {\n            let inputMask;\n            if (this.component.isMultipleMasksField) {\n                const maskName = value ? value.maskName : undefined;\n                const formioInputMask = this.component.getMaskByName(maskName);\n                if (formioInputMask) {\n                    inputMask = utils.getInputMask(formioInputMask);\n                }\n                value = value ? value.value : value;\n            } else {\n                inputMask = utils.getInputMask(this.settings.mask);\n            }\n            if (value && inputMask) {\n                return utils.matchInputMask(value, inputMask);\n            }\n            return true;\n        }\n    };\n\n    Mask.prototype.defaultMessage = '{{field}} does not match the mask.';\n\n    return Mask;\n});"]}