{"version":3,"sources":["validator/rules/MaxDate.js"],"names":["define","Rule","utils","moment","_","MaxDate","[object Object]","value","this","settings","dateLimit","date","maxDate","getDateSetting","isNull","setHours","isBefore","isSame","prototype","defaultMessage"],"mappings":";;;;;;;AAAAA,QACI,SACA,oBACA,iBACA,kBACD,SAAUC,EAAMC,EAAOC,EAAQC,GAC9B,mBAEMC,UAAgBJ,EAClBK,MAAMC,GACF,IAAKA,EACD,OAAO,EAEX,GAAIA,IAAUC,KAAKC,SAASC,UACxB,OAAO,EAEX,MAAMC,EAAOR,EAAOI,GACdK,EAAUV,EAAMW,eAAeL,KAAKC,SAASC,WACnD,QAAIN,EAAEU,OAAOF,KAGTA,EAAQG,SAAS,EAAG,EAAG,EAAG,GAEvBJ,EAAKK,SAASJ,IAAYD,EAAKM,OAAOL,KAMrD,OAFAP,EAAQa,UAAUC,eAAiB,iEAE5Bd","file":"../../../validator/rules/MaxDate.js","sourcesContent":["define([\n    \"./Rule\",\n    '../../utils/utils',\n    'skylark-moment',\n    'skylark-lodash'\n], function (Rule, utils, moment, _) {\n    'use strict';\n    \n    class MaxDate extends Rule {\n        check(value) {\n            if (!value) {\n                return true;\n            }\n            if (value === this.settings.dateLimit) {\n                return true;\n            }\n            const date = moment(value);\n            const maxDate = utils.getDateSetting(this.settings.dateLimit);\n            if (_.isNull(maxDate)) {\n                return true;\n            } else {\n                maxDate.setHours(0, 0, 0, 0);\n            }\n            return date.isBefore(maxDate) || date.isSame(maxDate);\n        }\n    };\n\n    MaxDate.prototype.defaultMessage = '{{field}} should not contain date after {{settings.dateLimit}}';\n\n    return MaxDate;\n});\n"]}