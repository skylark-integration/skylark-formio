{"version":3,"sources":["validator/rules/Day.js"],"names":["Rule","require","module","exports","[object Object]","value","DAY","MONTH","YEAR","this","component","dayFirst","values","split","map","x","parseInt","day","month","year","maxDay","isLeapYear","getDaysInMonthCount","isNaN","Day","prototype","defaultMessage"],"mappings":";;;;;;;AAAA,MAAMA,KAAOC,QAAQ,UACrBC,OAAOC,sBAA4BH,KAC/BI,MAAMC,GACF,IAAKA,EACD,OAAO,EAEX,GAAqB,iBAAVA,EACP,OAAO,EAEX,MAAOC,EAAKC,EAAOC,GAAQC,KAAKC,UAAUC,UACtC,EACA,EACA,IAEA,EACA,EACA,GAEEC,EAASP,EAAMQ,MAAM,KAAKC,IAAIC,GAAKC,SAASD,EAAG,KAAME,EAAML,EAAON,GAAMY,EAAQN,EAAOL,GAAQY,EAAOP,EAAOJ,GAAOY,EAc1H,SAA6BF,EAAOC,GAChC,OAAQD,GACR,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GACD,OAAO,GACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACD,OAAO,GACX,KAAK,EACD,OAnBR,SAAoBC,GAChB,QAASA,EAAO,QAAWA,EAAO,MAAUA,EAAO,IAkBxCE,CAAWF,GAAQ,GAAK,GACnC,QACI,OAAO,IAhCoHG,CAAoBJ,EAAOC,GAC9J,QAAII,MAAMN,IAAQA,EAAM,GAAKA,EAAMG,OAG/BG,MAAML,IAAUA,EAAQ,GAAKA,EAAQ,OAGrCK,MAAMJ,IAASA,EAAO,GAAKA,EAAO,SA8B9CK,IAAIC,UAAUC,eAAiB","file":"../../../validator/rules/Day.js","sourcesContent":["const Rule = require('./Rule');\nmodule.exports = class Day extends Rule {\n    check(value) {\n        if (!value) {\n            return true;\n        }\n        if (typeof value !== 'string') {\n            return false;\n        }\n        const [DAY, MONTH, YEAR] = this.component.dayFirst ? [\n            0,\n            1,\n            2\n        ] : [\n            1,\n            0,\n            2\n        ];\n        const values = value.split('/').map(x => parseInt(x, 10)), day = values[DAY], month = values[MONTH], year = values[YEAR], maxDay = getDaysInMonthCount(month, year);\n        if (isNaN(day) || day < 0 || day > maxDay) {\n            return false;\n        }\n        if (isNaN(month) || month < 0 || month > 12) {\n            return false;\n        }\n        if (isNaN(year) || year < 0 || year > 9999) {\n            return false;\n        }\n        return true;\n        function isLeapYear(year) {\n            return !(year % 400) || !!(year % 100) && !(year % 4);\n        }\n        function getDaysInMonthCount(month, year) {\n            switch (month) {\n            case 1:\n            case 3:\n            case 5:\n            case 7:\n            case 8:\n            case 10:\n            case 12:\n                return 31;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                return 30;\n            case 2:\n                return isLeapYear(year) ? 29 : 28;\n            default:\n                return 31;\n            }\n        }\n    }\n};\nDay.prototype.defaultMessage = '{{field}} is not a valid day.';"]}