{"version":3,"sources":["widgets/CalendarWidget.js"],"names":["define","Flatpickr","InputWidget","utils","moment","_","CalendarWidget","defaultSettings","type","altInput","allowInput","clickOpens","enableDate","enableTime","mode","noCalendar","format","dateFormat","useLocaleSettings","language","hourIncrement","minuteIncrement","time_24hr","saveAs","displayInTimezone","timezone","disable","minDate","maxDate","[object Object]","settings","component","super","this","replace","zonesLoaded","shouldLoadZones","loadZones","then","emit","input","superAttach","attach","getAttribute","setAttribute","dateFormatInfo","getLocaleDateFormatInfo","defaultFormat","date","dayFirst","time","closedOn","valueFormat","valueMomentFormat","convertFormatToMoment","getDateSetting","disabledDates","disableWeekends","push","disableWeekdays","disableFunction","altFormat","convertFormatToFlatpickr","onChange","onClose","Date","now","calendar","formatDate","readOnly","formatOffset","undefined","bind","_input","setInputMask","convertFormatToMask","addEventListener","setDate","value","getDay","evaluate","submissionTimezone","currentTimezone","suffix","isOpen","open","disabled","removeAttribute","close","redraw","split","map","item","dateMask","dates","match","length","from","to","localeFormat","dateTimeFormat","get","getValue","selectedDates","getDateValue","setValue","momentDate","toDate","clear","val","destroy"],"mappings":"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","file":"../../widgets/CalendarWidget.js","sourcesContent":["define([\n    '../vendors/flatpickr/flatpickr',\n    './InputWidget',\n    '../utils/utils',\n    'skylark-moment',\n    'skylark-lodash'\n], function (Flatpickr, InputWidget, utils, moment, _) {\n    'use strict';\n    const DEFAULT_FORMAT = 'yyyy-MM-dd hh:mm a';\n    const ISO_8601_FORMAT = 'yyyy-MM-ddTHH:mm:ssZ';\n    return class CalendarWidget extends InputWidget {\n        static get defaultSettings() {\n            return {\n                type: 'calendar',\n                altInput: true,\n                allowInput: true,\n                clickOpens: true,\n                enableDate: true,\n                enableTime: true,\n                mode: 'single',\n                noCalendar: false,\n                format: DEFAULT_FORMAT,\n                dateFormat: ISO_8601_FORMAT,\n                useLocaleSettings: false,\n                language: 'us-en',\n                hourIncrement: 1,\n                minuteIncrement: 5,\n                time_24hr: false,\n                saveAs: 'date',\n                displayInTimezone: '',\n                timezone: '',\n                disable: [],\n                minDate: '',\n                maxDate: ''\n            };\n        }\n        constructor(settings, component) {\n            super(settings, component);\n            if (this.settings.noCalendar) {\n                this.settings.format = this.settings.format.replace(/yyyy-MM-dd /g, '');\n            }\n            if (!this.settings.enableTime) {\n                this.settings.format = this.settings.format.replace(/ hh:mm a$/g, '');\n            } else if (this.settings.time_24hr) {\n                this.settings.format = this.settings.format.replace(/hh:mm a$/g, 'HH:mm');\n            }\n        }\n        loadZones() {\n            const timezone = this.timezone;\n            if (!utils.zonesLoaded() && utils.shouldLoadZones(timezone)) {\n                utils.loadZones(timezone).then(() => this.emit('redraw'));\n                return true;\n            }\n            return false;\n        }\n        attach(input) {\n            const superAttach = super.attach(input);\n            if (input && !input.getAttribute('placeholder')) {\n                input.setAttribute('placeholder', this.settings.format);\n            }\n            const dateFormatInfo = utils.getLocaleDateFormatInfo(this.settings.language);\n            this.defaultFormat = {\n                date: dateFormatInfo.dayFirst ? 'd/m/Y ' : 'm/d/Y ',\n                time: 'G:i K'\n            };\n            this.closedOn = 0;\n            this.valueFormat = this.settings.dateFormat || ISO_8601_FORMAT;\n            this.valueMomentFormat = utils.convertFormatToMoment(this.valueFormat);\n            this.settings.minDate = utils.getDateSetting(this.settings.minDate);\n            this.settings.disable = this.disabledDates;\n            this.settings.disableWeekends ? this.settings.disable.push(this.disableWeekends) : '';\n            this.settings.disableWeekdays ? this.settings.disable.push(this.disableWeekdays) : '';\n            this.settings.disableFunction ? this.settings.disable.push(this.disableFunction) : '';\n            this.settings.maxDate = utils.getDateSetting(this.settings.maxDate);\n            this.settings.altFormat = utils.convertFormatToFlatpickr(this.settings.format);\n            this.settings.dateFormat = utils.convertFormatToFlatpickr(this.settings.dateFormat);\n            this.settings.onChange = () => this.emit('update');\n            this.settings.onClose = () => {\n                this.closedOn = Date.now();\n                if (this.calendar) {\n                    this.emit('blur');\n                }\n            };\n            this.settings.formatDate = (date, format) => {\n                if (this.settings.readOnly && format === this.settings.altFormat) {\n                    if (this.settings.saveAs === 'text' || this.formatDate()) {\n                        return Flatpickr.formatDate(date, format);\n                    }\n                    return utils.formatOffset(Flatpickr.undefined.bind(Flatpickr), date, format, this.timezone);\n                }\n                return Flatpickr.formatDate(date, format);\n            };\n            if (this._input) {\n                this.calendar = new Flatpickr(this._input, this.settings);\n                this.setInputMask(this.calendar._input, utils.convertFormatToMask(this.settings.format));\n                this.addEventListener(this.calendar._input, 'blur', () => this.calendar.setDate(this.calendar._input.value, true, this.settings.altFormat));\n            }\n            return superAttach;\n        }\n        get disableWeekends() {\n            return function (date) {\n                return date.getDay() === 0 || date.getDay() === 6;\n            };\n        }\n        get disableWeekdays() {\n            return date => !this.disableWeekends(date);\n        }\n        get disableFunction() {\n            return date => this.evaluate(`return ${ this.settings.disableFunction }`, { date });\n        }\n        get timezone() {\n            if (this.settings.timezone) {\n                return this.settings.timezone;\n            }\n            if (this.settings.displayInTimezone === 'submission' && this.settings.submissionTimezone) {\n                return this.settings.submissionTimezone;\n            }\n            if (this.settings.displayInTimezone === 'utc') {\n                return 'UTC';\n            }\n            return utils.currentTimezone();\n        }\n        get defaultSettings() {\n            return CalendarWidget.defaultSettings;\n        }\n        addSuffix(suffix) {\n            this.addEventListener(suffix, 'click', () => {\n                if (this.calendar && !this.calendar.isOpen && Date.now() - this.closedOn > 200) {\n                    this.calendar.open();\n                }\n            });\n            return suffix;\n        }\n        set disabled(disabled) {\n            super.disabled = disabled;\n            if (this.calendar) {\n                if (disabled) {\n                    this.calendar._input.setAttribute('disabled', 'disabled');\n                } else {\n                    this.calendar._input.removeAttribute('disabled');\n                }\n                this.calendar.close();\n                this.calendar.redraw();\n            }\n        }\n        get input() {\n            return this.calendar ? this.calendar.altInput : null;\n        }\n        get disabledDates() {\n            if (this.settings.disabledDates) {\n                const disabledDates = this.settings.disabledDates.split(',');\n                return disabledDates.map(item => {\n                    const dateMask = /\\d{4}-\\d{2}-\\d{2}/g;\n                    const dates = item.match(dateMask);\n                    if (dates.length) {\n                        return dates.length === 1 ? item.match(dateMask)[0] : {\n                            from: item.match(dateMask)[0],\n                            to: item.match(dateMask)[1]\n                        };\n                    }\n                });\n            }\n            return [];\n        }\n        get localeFormat() {\n            let format = '';\n            if (this.settings.enableDate) {\n                format += this.defaultFormat.date;\n            }\n            if (this.settings.enableTime) {\n                format += this.defaultFormat.time;\n            }\n            return format;\n        }\n        get dateTimeFormat() {\n            return this.settings.useLocaleSettings ? this.localeFormat : utils.convertFormatToFlatpickr(this.dateFormat);\n        }\n        get dateFormat() {\n            return _.get(this.settings, 'format', DEFAULT_FORMAT);\n        }\n        getDateValue(date, format) {\n            return moment(date).format(utils.convertFormatToMoment(format));\n        }\n        getValue() {\n            if (!this.calendar) {\n                return super.getValue();\n            }\n            const dates = this.calendar.selectedDates;\n            if (!dates || !dates.length) {\n                return super.getValue();\n            }\n            if (!(dates[0] instanceof Date)) {\n                return 'Invalid Date';\n            }\n            return this.getDateValue(dates[0], this.valueFormat);\n        }\n        setValue(value) {\n            if (!this.calendar) {\n                return super.setValue(value);\n            }\n            if (value) {\n                if (this.settings.saveAs !== 'text' && this.settings.readOnly && !this.loadZones()) {\n                    this.calendar.setDate(utils.momentDate(value, this.valueFormat, this.timezone).toDate(), false);\n                } else {\n                    this.calendar.setDate(moment(value, this.valueMomentFormat).toDate(), false);\n                }\n            } else {\n                this.calendar.clear(false);\n            }\n        }\n        getValueAsString(value, format) {\n            format = format || this.dateFormat;\n            if (this.settings.saveAs === 'text') {\n                return this.getDateValue(value, format);\n            }\n            return utils.formatDate(value, format, this.timezone);\n        }\n        validationValue(value) {\n            if (typeof value === 'string') {\n                return new Date(value);\n            }\n            return value.map(val => new Date(val));\n        }\n        destroy() {\n            super.destroy();\n            if (this.calendar) {\n                this.calendar.destroy();\n            }\n        }\n    };\n});"]}