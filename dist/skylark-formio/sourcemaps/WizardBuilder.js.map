{"version":3,"sources":["WizardBuilder.js"],"names":["define","WebformBuilder","Webform","BuilderUtils","_","WizardBuilder","[object Object]","element","options","arguments","HTMLElement","skipInit","super","this","_form","components","getPageConfig","page","hooks","attachPanel","component","refs","removeComponent","addEventListener","pageIndex","pages","findIndex","key","componentIndex","comp","removePage","originalRenderComponentsHook","renderComponents","html","self","type","root","originalAttachComponentsHook","attachComponents","container","on","originalComponent","webformComponents","webform","map","includes","indexOf","rebuild","push","filter","currentPage","length","form","value","Array","isArray","schema","assign","renderTemplate","sidebar","scrollEnabled","sideBarScroll","groupOrder","groupId","id","groups","groupKey","group","subgroups","render","loadRefs","addPage","gotoPage","forEach","link","event","preventDefault","index","setPage","attach","display","redraw","pageNum","newPage","uniquify","emit","splice","title","label","pasteComponent"],"mappings":"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","file":"../WizardBuilder.js","sourcesContent":["define([\n    './WebformBuilder',\n    './Webform',\n    './utils/builder',\n    'skylark-lodash'\n], function (WebformBuilder, Webform, BuilderUtils, _) {\n    'use strict';\n    return class WizardBuilder extends WebformBuilder {\n        constructor() {\n            let element, options;\n            if (arguments[0] instanceof HTMLElement || arguments[1]) {\n                element = arguments[0];\n                options = arguments[1];\n            } else {\n                options = arguments[0];\n            }\n            options.skipInit = false;\n            super(element, options);\n            this._form = { components: [this.getPageConfig(1)] };\n            this.page = 0;\n            this.options.hooks.attachPanel = (element, component) => {\n                if (component.refs.removeComponent) {\n                    this.addEventListener(component.refs.removeComponent, 'click', () => {\n                        const pageIndex = this.pages.findIndex(page => page.key === component.key);\n                        const componentIndex = this._form.components.findIndex(comp => comp.key === component.key);\n                        if (pageIndex !== -1) {\n                            this.removePage(pageIndex, componentIndex);\n                        }\n                    });\n                }\n            };\n            const originalRenderComponentsHook = this.options.hooks.renderComponents;\n            this.options.hooks.renderComponents = (html, {components, self}) => {\n                if (self.type === 'form' && !self.root) {\n                    return html;\n                } else {\n                    return originalRenderComponentsHook(html, {\n                        components,\n                        self\n                    });\n                }\n            };\n            const originalAttachComponentsHook = this.options.hooks.attachComponents;\n            this.options.hooks.attachComponents = (element, components, container, component) => {\n                if (component.type === 'form' && !component.root) {\n                    return element;\n                }\n                return originalAttachComponentsHook(element, components, container, component);\n            };\n            this.on('saveComponent', (component, originalComponent) => {\n                const webformComponents = this.webform.components.map(({component}) => component);\n                if (this._form.components.includes(originalComponent)) {\n                    this._form.components[this._form.components.indexOf(originalComponent)] = component;\n                    this.rebuild();\n                } else if (webformComponents.includes(originalComponent)) {\n                    this._form.components.push(component);\n                    this.rebuild();\n                }\n            }, true);\n        }\n        allowDrop(element) {\n            return this.webform && this.webform.refs && this.webform.refs.webform === element ? false : true;\n        }\n        get pages() {\n            return _.filter(this._form.components, { type: 'panel' });\n        }\n        get currentPage() {\n            const pages = this.pages;\n            return pages && pages.length >= this.page ? pages[this.page] : null;\n        }\n        set form(value) {\n            this._form = value;\n            if (!this._form.components || !Array.isArray(this._form.components)) {\n                this._form.components = [];\n            }\n            if (this.pages.length === 0) {\n                const components = this._form.components.filter(component => component.type !== 'button');\n                this._form.components = [this.getPageConfig(1, components)];\n            }\n            this.rebuild();\n        }\n        get form() {\n            return this._form;\n        }\n        get schema() {\n            _.assign(this.currentPage, this.webform._form.components[0]);\n            const webform = new Webform(this.options);\n            webform.form = this._form;\n            return webform.schema;\n        }\n        render() {\n            return this.renderTemplate('builderWizard', {\n                sidebar: this.renderTemplate('builderSidebar', {\n                    scrollEnabled: this.sideBarScroll,\n                    groupOrder: this.groupOrder,\n                    groupId: `builder-sidebar-${ this.id }`,\n                    groups: this.groupOrder.map(groupKey => this.renderTemplate('builderSidebarGroup', {\n                        group: this.groups[groupKey],\n                        groupKey,\n                        groupId: `builder-sidebar-${ this.id }`,\n                        subgroups: this.groups[groupKey].subgroups.map(group => this.renderTemplate('builderSidebarGroup', {\n                            group,\n                            groupKey: group.key,\n                            groupId: `builder-sidebar-${ groupKey }`,\n                            subgroups: []\n                        }))\n                    }))\n                }),\n                pages: this.pages,\n                form: this.webform.render()\n            });\n        }\n        attach(element) {\n            this.loadRefs(element, {\n                addPage: 'multiple',\n                gotoPage: 'multiple'\n            });\n            this.refs.addPage.forEach(link => {\n                this.addEventListener(link, 'click', event => {\n                    event.preventDefault();\n                    this.addPage();\n                });\n            });\n            this.refs.gotoPage.forEach((link, index) => {\n                this.addEventListener(link, 'click', event => {\n                    event.preventDefault();\n                    this.setPage(index);\n                });\n            });\n            return super.attach(element);\n        }\n        rebuild() {\n            const page = this.currentPage;\n            this.webform.form = {\n                display: 'form',\n                type: 'form',\n                components: page ? [page] : []\n            };\n            return this.redraw();\n        }\n        addPage() {\n            const pageNum = this.pages.length + 1;\n            const newPage = this.getPageConfig(pageNum);\n            BuilderUtils.uniquify(this._form.components, newPage);\n            this._form.components.push(newPage);\n            this.emit('saveComponent', newPage);\n            return this.rebuild();\n        }\n        removePage(pageIndex, componentIndex) {\n            this._form.components.splice(componentIndex, 1);\n            if (pageIndex === this.pages.length) {\n                if (pageIndex === 0) {\n                    this._form.components.push(this.getPageConfig(1));\n                    return this.rebuild();\n                } else {\n                    return this.setPage(pageIndex - 1);\n                }\n            } else {\n                return this.rebuild();\n            }\n        }\n        setPage(index) {\n            if (index === this.page) {\n                return;\n            }\n            this.page = index;\n            return this.rebuild();\n        }\n        getPageConfig(index, components = []) {\n            return {\n                title: `Page ${ index }`,\n                label: `Page ${ index }`,\n                type: 'panel',\n                key: `page${ index }`,\n                components\n            };\n        }\n        pasteComponent(component) {\n            if (component instanceof WizardBuilder) {\n                return;\n            }\n            return super.pasteComponent(component);\n        }\n    };\n});"]}