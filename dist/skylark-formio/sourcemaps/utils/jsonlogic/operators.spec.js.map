{"version":3,"sources":["utils/jsonlogic/operators.spec.js"],"names":["define","a","b","describe","it","expect","jsonLogic","apply","_isEqual","to","be","equal","_add","_ceil","_divide","_floor","_max","data","n","_maxBy","var","_property","_mean","_meanBy","_min","_minBy","_multiply","_round","_subtract","_sum","_sumBy"],"mappings":"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","file":"../../../utils/jsonlogic/operators.spec.js","sourcesContent":["define([\n    'chai',\n    '../utils'\n], function (a, b) {\n    'use strict';\n    describe('Lodash operators', () => {\n        describe('Arrays', () => {\n        });\n        describe('Collection', () => {\n        });\n        describe('Date', () => {\n        });\n        describe('Function', () => {\n        });\n        describe('Lang', () => {\n            it('isEqual', () => {\n                const logicTrue = {\n                    _isEqual: [\n                        [\n                            2,\n                            3\n                        ],\n                        [\n                            2,\n                            3\n                        ]\n                    ]\n                };\n                const logicFalse = {\n                    _isEqual: [\n                        [\n                            2,\n                            3\n                        ],\n                        [\n                            2,\n                            4\n                        ]\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logicTrue)).to.be.equal(true);\n                a.expect(b.jsonLogic.apply(logicFalse)).to.be.equal(false);\n            });\n        });\n        describe('Math', () => {\n            it('add', () => {\n                const logic = {\n                    _add: [\n                        2,\n                        3\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(5);\n            });\n            it('ceil', () => {\n                const logic = { _ceil: [4.006] };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(5);\n            });\n            it('divide', () => {\n                const logic = {\n                    _divide: [\n                        6,\n                        3\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(2);\n            });\n            it('floor', () => {\n                const logic = { _floor: [4.906] };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(4);\n            });\n            it('max', () => {\n                const logic = {\n                    _max: [[\n                            2,\n                            5,\n                            6,\n                            3\n                        ]]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(6);\n            });\n            it('maxBy', () => {\n                const data = [\n                    { n: 4 },\n                    { n: 2 },\n                    { n: 8 },\n                    { n: 6 }\n                ];\n                const logic1 = {\n                    _maxBy: [\n                        { 'var': '' },\n                        'n'\n                    ]\n                };\n                const logic2 = {\n                    _maxBy: [\n                        { 'var': '' },\n                        { _property: 'n' }\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic1, data)).to.be.equal(data[2]);\n                a.expect(b.jsonLogic.apply(logic2, data)).to.be.equal(data[2]);\n            });\n            it('mean', () => {\n                const logic = {\n                    _mean: [[\n                            2,\n                            5,\n                            6,\n                            3\n                        ]]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(4);\n            });\n            it('meanBy', () => {\n                const data = [\n                    { n: 4 },\n                    { n: 2 },\n                    { n: 8 },\n                    { n: 6 }\n                ];\n                const logic1 = {\n                    _meanBy: [\n                        { 'var': '' },\n                        'n'\n                    ]\n                };\n                const logic2 = {\n                    _meanBy: [\n                        { 'var': '' },\n                        { _property: 'n' }\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic1, data)).to.be.equal(5);\n                a.expect(b.jsonLogic.apply(logic2, data)).to.be.equal(5);\n            });\n            it('min', () => {\n                const logic = {\n                    _min: [[\n                            2,\n                            5,\n                            6,\n                            3\n                        ]]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(2);\n            });\n            it('minBy', () => {\n                const data = [\n                    { n: 4 },\n                    { n: 2 },\n                    { n: 8 },\n                    { n: 6 }\n                ];\n                const logic1 = {\n                    _minBy: [\n                        { 'var': '' },\n                        'n'\n                    ]\n                };\n                const logic2 = {\n                    _minBy: [\n                        { 'var': '' },\n                        { _property: 'n' }\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic1, data)).to.be.equal(data[1]);\n                a.expect(b.jsonLogic.apply(logic2, data)).to.be.equal(data[1]);\n            });\n            it('multiply', () => {\n                const logic = {\n                    _multiply: [\n                        2,\n                        3\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(6);\n            });\n            it('round', () => {\n                const logic1 = { _round: [4.006] };\n                const logic2 = { _round: [4.906] };\n                a.expect(b.jsonLogic.apply(logic1)).to.be.equal(4);\n                a.expect(b.jsonLogic.apply(logic2)).to.be.equal(5);\n            });\n            it('multiply', () => {\n                const logic = {\n                    _multiply: [\n                        2,\n                        3\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(6);\n            });\n            it('subtract', () => {\n                const logic = {\n                    _subtract: [\n                        2,\n                        3\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(-1);\n            });\n            it('sum', () => {\n                const logic = {\n                    _sum: [[\n                            2,\n                            3\n                        ]]\n                };\n                a.expect(b.jsonLogic.apply(logic)).to.be.equal(5);\n            });\n            it('sumBy', () => {\n                const data = [\n                    { n: 4 },\n                    { n: 2 },\n                    { n: 8 },\n                    { n: 6 }\n                ];\n                const logic1 = {\n                    _sumBy: [\n                        { 'var': '' },\n                        'n'\n                    ]\n                };\n                const logic2 = {\n                    _sumBy: [\n                        { 'var': '' },\n                        { _property: 'n' }\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic1, data)).to.be.equal(20);\n                a.expect(b.jsonLogic.apply(logic2, data)).to.be.equal(20);\n            });\n        });\n        describe('Number', () => {\n        });\n        describe('Object', () => {\n        });\n        describe('String', () => {\n        });\n        describe('Util', () => {\n            it('property', () => {\n                const data = [\n                    { 'a': { 'b': 2 } },\n                    { 'a': { 'b': 1 } }\n                ];\n                const logic = {\n                    _sumBy: [\n                        { 'var': '' },\n                        { _property: 'a.b' }\n                    ]\n                };\n                a.expect(b.jsonLogic.apply(logic, data)).to.be.equal(3);\n            });\n        });\n    });\n});"]}