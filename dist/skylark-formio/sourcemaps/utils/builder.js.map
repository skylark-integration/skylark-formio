{"version":3,"sources":["utils/builder.js"],"names":["define","_","a","[object Object]","container","component","changed","formKeys","eachComponent","comp","key","newKey","uniqueKey","additionalShortcuts","button","getAlphaShortcuts","range","charCodeAt","map","charCode","String","fromCharCode","type","this","components","input","result","shortcut","push","values","forEach","value","form","concat","difference","getAdditionalShortcuts","getBindedShortcuts","label"],"mappings":";;;;;;;AAAAA,QACI,iBACA,WACD,SAAUC,EAAGC,GACZ,aACA,OACIC,SAASC,EAAWC,GAChB,IAAIC,GAAU,EACd,MAAMC,KAeN,OAdAL,EAAEM,cAAcJ,EAAW,SAAUK,GACjCF,EAASE,EAAKC,MAAO,IACtB,GACHR,EAAEM,eAAeH,GAAYA,IACzB,IAAKA,EAAUK,IACX,OAEJ,MAAMC,EAAST,EAAEU,UAAUL,EAAUF,EAAUK,KAC3CC,IAAWN,EAAUK,MACrBL,EAAUK,IAAMC,EAChBJ,EAASI,IAAU,EACnBL,GAAU,KAEf,GACIA,GAEXO,qBACIC,QACI,QACA,QAGRC,kBAAiB,IACNd,EAAEe,MAAM,IAAIC,aAAc,IAAIA,aAAe,GAAGC,IAAIC,GAAYC,OAAOC,aAAaF,IAE/FhB,uBAAuBmB,GACnB,OAAOC,KAAKV,oBAAoBS,QAEpCnB,mBAAmBqB,EAAYC,GAC3B,MAAMC,KAgBN,OAfAxB,EAAEM,cAAcgB,EAAYnB,IACpBA,IAAcoB,IAGdpB,EAAUsB,UACVD,EAAOE,KAAKvB,EAAUsB,UAEtBtB,EAAUwB,QACVxB,EAAUwB,OAAOC,QAAQC,IACjBA,EAAMJ,UACND,EAAOE,KAAKG,EAAMJ,eAI/B,GACID,GAEXvB,sBAAsB6B,EAAM3B,GACxB,OAAKA,GAGG,IAAI4B,OAAOhC,EAAEiC,WAAWX,KAAKR,oBAAoBkB,OAAOV,KAAKY,uBAAuB9B,EAAUiB,OAAQC,KAAKa,mBAAmBJ,EAAKR,WAAYnB,KAAaa,IAAIS,KACpKU,MAAOV,EACPI,MAAOJ","file":"../../utils/builder.js","sourcesContent":["define([\n    'skylark-lodash',\n    './utils'\n], function (_, a) {\n    'use strict';\n    return {\n        uniquify(container, component) {\n            let changed = false;\n            const formKeys = {};\n            a.eachComponent(container, function (comp) {\n                formKeys[comp.key] = true;\n            }, true);\n            a.eachComponent([component], component => {\n                if (!component.key) {\n                    return;\n                }\n                const newKey = a.uniqueKey(formKeys, component.key);\n                if (newKey !== component.key) {\n                    component.key = newKey;\n                    formKeys[newKey] = true;\n                    changed = true;\n                }\n            }, true);\n            return changed;\n        },\n        additionalShortcuts: {\n            button: [\n                'Enter',\n                'Esc'\n            ]\n        },\n        getAlphaShortcuts() {\n            return _.range('A'.charCodeAt(), 'Z'.charCodeAt() + 1).map(charCode => String.fromCharCode(charCode));\n        },\n        getAdditionalShortcuts(type) {\n            return this.additionalShortcuts[type] || [];\n        },\n        getBindedShortcuts(components, input) {\n            const result = [];\n            a.eachComponent(components, component => {\n                if (component === input) {\n                    return;\n                }\n                if (component.shortcut) {\n                    result.push(component.shortcut);\n                }\n                if (component.values) {\n                    component.values.forEach(value => {\n                        if (value.shortcut) {\n                            result.push(value.shortcut);\n                        }\n                    });\n                }\n            }, true);\n            return result;\n        },\n        getAvailableShortcuts(form, component) {\n            if (!component) {\n                return [];\n            }\n            return [''].concat(_.difference(this.getAlphaShortcuts().concat(this.getAdditionalShortcuts(component.type)), this.getBindedShortcuts(form.components, component))).map(shortcut => ({\n                label: shortcut,\n                value: shortcut\n            }));\n        }\n    };\n});"]}