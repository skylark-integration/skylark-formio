{"version":3,"sources":["utils/ChoicesWrapper.js"],"names":["define","Choices","prototype","_generatePlaceholderValue","this","_isSelectElement","passedElement","placeholderOption","text","placeholder","placeholderValue","config","element","dataset","KEY_CODES","BACK_KEY","DELETE_KEY","TAB_KEY","ENTER_KEY","A_KEY","ESC_KEY","UP_KEY","DOWN_KEY","PAGE_UP_KEY","PAGE_DOWN_KEY","[object Object]","args","super","_onTabKey","bind","isDirectionUsing","shouldOpenDropDown","activeItems","_isSelectOneElement","_handleButtonAction","removeItems","removeItemButton","_onDirectionKey","onSelectValue","hasActiveDropdown","_selectHighlightedChoice","highlightedChoice","dropdown","getChild","classNames","highlightedState","_handleChoiceAction","event","preventDefault","_onKeyDown","target","keyCode","ctrlKey","metaKey","input","containerOuter","contains","_store","hasFocusedInput","isFocussed","isActive","hasItems","itemList","hasChildren","keyString","String","fromCharCode","hasCtrlDownKeyPressed","_isTextElement","test","showDropdown","keyDownActions","_onAKey","_onEnterKey","_onEscapeKey","_onDeleteKey","hideDropdown"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,SAAUC,GAClC,aACAA,EAAQC,UAAUC,0BAA4B,WAC1C,GAAIC,KAAKC,kBAAoBD,KAAKE,cAAcC,kBAAmB,CAC/D,MAAMA,kBAACA,GAAqBH,KAAKE,cACjC,QAAOC,GAAoBA,EAAkBC,KAEjD,MAAMC,YAACA,EAAWC,iBAAEA,GAAoBN,KAAKO,QAEzCC,SAASC,QAACA,IACVT,KAAKE,cACT,GAAIG,EAAa,CACb,GAAIC,EACA,OAAOA,EAEX,GAAIG,EAAQJ,YACR,OAAOI,EAAQJ,YAGvB,OAAO,GAEX,MAAMK,GACFC,SAAU,GACVC,WAAY,EACZC,QAAS,EACTC,UAAW,GACXC,MAAO,GACPC,QAAS,GACTC,OAAQ,GACRC,SAAU,GACVC,YAAa,GACbC,cAAe,IA0GnB,qBAxG6BvB,EACzBwB,eAAeC,GACXC,SAASD,GACTtB,KAAKwB,UAAYxB,KAAKwB,UAAUC,KAAKzB,MACrCA,KAAK0B,kBAAmB,EACxB1B,KAAK2B,oBAAqB,EAE9BN,oBAAoBO,EAAapB,GAC7B,IAAKR,KAAK6B,oBACN,OAAON,MAAMO,oBAAoBF,EAAapB,GAE7CoB,GAAgBpB,GAAYR,KAAKO,OAAOwB,aAAgB/B,KAAKO,OAAOyB,mBAGzEhC,KAAK2B,oBAAqB,EAC1BJ,MAAMO,oBAAoBF,EAAapB,IAE3Ca,mBAAmBC,GACf,IAAKtB,KAAK6B,oBACN,OAAON,MAAMU,mBAAmBX,GAEpCtB,KAAK0B,kBAAmB,EACxBH,MAAMU,mBAAmBX,GACzBtB,KAAKkC,iBAAiBZ,GACtBtB,KAAK0B,kBAAmB,EAE5BL,WAAUO,YAACA,EAAWO,kBAAEA,IAChBA,GACAnC,KAAKoC,yBAAyBR,GAGtCP,yBAAyBO,GACrB,MAAMS,EAAoBrC,KAAKsC,SAASC,aAAcvC,KAAKO,OAAOiC,WAAWC,oBACzEJ,GACArC,KAAK0C,oBAAoBd,EAAaS,GAE1CM,MAAMC,iBAEVvB,WAAWsB,GACP,IAAK3C,KAAK6B,oBACN,OAAON,MAAMsB,WAAWF,GAE5B,MAAMG,OAACA,EAAMC,QAAEA,EAAOC,QAAEA,EAAOC,QAAEA,GAAWN,EAC5C,GAAIG,IAAW9C,KAAKkD,MAAM1C,UAAYR,KAAKmD,eAAe3C,QAAQ4C,SAASN,GACvE,OAEJ,MAAMlB,EAAc5B,KAAKqD,OAAOzB,YAC1B0B,EAAkBtD,KAAKkD,MAAMK,WAC7BpB,EAAoBnC,KAAKsC,SAASkB,SAClCC,EAAWzD,KAAK0D,SAASC,YACzBC,EAAYC,OAAOC,aAAaf,IAChCpC,SAACA,EAAQC,WAAEA,EAAUC,QAAEA,EAAOC,UAAEA,EAASC,MAAEA,EAAKC,QAAEA,EAAOC,OAAEA,EAAMC,SAAEA,EAAQC,YAAEA,EAAWC,cAAEA,GAAiBV,EAC3GqD,EAAwBf,GAAWC,GACpCjD,KAAKgE,gBAAkB,iBAAiBC,KAAKL,IAC9C5D,KAAKkE,eAET,MAAMC,GACF9C,CAACN,GAAQf,KAAKoE,QACd/C,CAACR,GAAUb,KAAKwB,UAChBH,CAACP,GAAYd,KAAKqE,YAClBhD,CAACL,GAAUhB,KAAKsE,aAChBjD,CAACJ,GAASjB,KAAKiC,gBACfZ,CAACF,GAAcnB,KAAKiC,gBACpBZ,CAACH,GAAWlB,KAAKiC,gBACjBZ,CAACD,GAAgBpB,KAAKiC,gBACtBZ,CAACT,GAAaZ,KAAKuE,aACnBlD,CAACV,GAAWX,KAAKuE,cAEjBJ,EAAepB,IACfoB,EAAepB,IACXJ,MAAAA,EACAG,OAAAA,EACAC,QAAAA,EACAE,QAAAA,EACArB,YAAAA,EACA0B,gBAAAA,EACAnB,kBAAAA,EACAsB,SAAAA,EACAM,sBAAAA,IAIZ1C,eAAcsB,MAACA,EAAKf,YAAEA,EAAWO,kBAAEA,IAC3BA,EACAnC,KAAKoC,yBAAyBR,GACvB5B,KAAK6B,sBACZ7B,KAAKkE,eACLvB,EAAMC,kBAGdvB,gBAAgBC,GACPtB,KAAK2B,mBAIVJ,MAAM2C,gBAAgB5C,GAHlBtB,KAAK2B,oBAAqB,EAKlCN,gBAAgBC,GACRtB,KAAK0B,kBAGTH,MAAMiD,gBAAgBlD","file":"../../utils/ChoicesWrapper.js","sourcesContent":["define(['skylark-choices'], function (Choices) {\n    'use strict';\n    Choices.prototype._generatePlaceholderValue = function () {\n        if (this._isSelectElement && this.passedElement.placeholderOption) {\n            const {placeholderOption} = this.passedElement;\n            return placeholderOption ? placeholderOption.text : false;\n        }\n        const {placeholder, placeholderValue} = this.config;\n        const {\n            element: {dataset}\n        } = this.passedElement;\n        if (placeholder) {\n            if (placeholderValue) {\n                return placeholderValue;\n            }\n            if (dataset.placeholder) {\n                return dataset.placeholder;\n            }\n        }\n        return false;\n    };\n    const KEY_CODES = {\n        BACK_KEY: 46,\n        DELETE_KEY: 8,\n        TAB_KEY: 9,\n        ENTER_KEY: 13,\n        A_KEY: 65,\n        ESC_KEY: 27,\n        UP_KEY: 38,\n        DOWN_KEY: 40,\n        PAGE_UP_KEY: 33,\n        PAGE_DOWN_KEY: 34\n    };\n    class ChoicesWrapper extends Choices {\n        constructor(...args) {\n            super(...args);\n            this._onTabKey = this._onTabKey.bind(this);\n            this.isDirectionUsing = false;\n            this.shouldOpenDropDown = true;\n        }\n        _handleButtonAction(activeItems, element) {\n            if (!this._isSelectOneElement) {\n                return super._handleButtonAction(activeItems, element);\n            }\n            if (!activeItems || !element || !this.config.removeItems || !this.config.removeItemButton) {\n                return;\n            }\n            this.shouldOpenDropDown = false;\n            super._handleButtonAction(activeItems, element);\n        }\n        _onDirectionKey(...args) {\n            if (!this._isSelectOneElement) {\n                return super._onDirectionKey(...args);\n            }\n            this.isDirectionUsing = true;\n            super._onDirectionKey(...args);\n            this.onSelectValue(...args);\n            this.isDirectionUsing = false;\n        }\n        _onTabKey({activeItems, hasActiveDropdown}) {\n            if (hasActiveDropdown) {\n                this._selectHighlightedChoice(activeItems);\n            }\n        }\n        _selectHighlightedChoice(activeItems) {\n            const highlightedChoice = this.dropdown.getChild(`.${ this.config.classNames.highlightedState }`);\n            if (highlightedChoice) {\n                this._handleChoiceAction(activeItems, highlightedChoice);\n            }\n            event.preventDefault();\n        }\n        _onKeyDown(event) {\n            if (!this._isSelectOneElement) {\n                return super._onKeyDown(event);\n            }\n            const {target, keyCode, ctrlKey, metaKey} = event;\n            if (target !== this.input.element && !this.containerOuter.element.contains(target)) {\n                return;\n            }\n            const activeItems = this._store.activeItems;\n            const hasFocusedInput = this.input.isFocussed;\n            const hasActiveDropdown = this.dropdown.isActive;\n            const hasItems = this.itemList.hasChildren;\n            const keyString = String.fromCharCode(keyCode);\n            const {BACK_KEY, DELETE_KEY, TAB_KEY, ENTER_KEY, A_KEY, ESC_KEY, UP_KEY, DOWN_KEY, PAGE_UP_KEY, PAGE_DOWN_KEY} = KEY_CODES;\n            const hasCtrlDownKeyPressed = ctrlKey || metaKey;\n            if (!this._isTextElement && /[a-zA-Z0-9-_ ]/.test(keyString)) {\n                this.showDropdown();\n            }\n            const keyDownActions = {\n                [A_KEY]: this._onAKey,\n                [TAB_KEY]: this._onTabKey,\n                [ENTER_KEY]: this._onEnterKey,\n                [ESC_KEY]: this._onEscapeKey,\n                [UP_KEY]: this._onDirectionKey,\n                [PAGE_UP_KEY]: this._onDirectionKey,\n                [DOWN_KEY]: this._onDirectionKey,\n                [PAGE_DOWN_KEY]: this._onDirectionKey,\n                [DELETE_KEY]: this._onDeleteKey,\n                [BACK_KEY]: this._onDeleteKey\n            };\n            if (keyDownActions[keyCode]) {\n                keyDownActions[keyCode]({\n                    event,\n                    target,\n                    keyCode,\n                    metaKey,\n                    activeItems,\n                    hasFocusedInput,\n                    hasActiveDropdown,\n                    hasItems,\n                    hasCtrlDownKeyPressed\n                });\n            }\n        }\n        onSelectValue({event, activeItems, hasActiveDropdown}) {\n            if (hasActiveDropdown) {\n                this._selectHighlightedChoice(activeItems);\n            } else if (this._isSelectOneElement) {\n                this.showDropdown();\n                event.preventDefault();\n            }\n        }\n        showDropdown(...args) {\n            if (!this.shouldOpenDropDown) {\n                this.shouldOpenDropDown = true;\n                return;\n            }\n            super.showDropdown(...args);\n        }\n        hideDropdown(...args) {\n            if (this.isDirectionUsing) {\n                return;\n            }\n            super.hideDropdown(...args);\n        }\n    }\n    return ChoicesWrapper;\n});"]}