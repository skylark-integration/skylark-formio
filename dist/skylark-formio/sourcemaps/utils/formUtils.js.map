{"version":3,"sources":["utils/formUtils.js"],"names":["define","_","a","get","set","has","clone","forOwn","isString","isNaN","isNil","isPlainObject","round","chunk","pad","eachComponent","components","fn","includeAll","path","parent","forEach","component","hasColumns","columns","Array","isArray","hasRows","rows","hasComps","noRecurse","newPath","key","componentMap","tree","subPath","includes","type","column","row","matchComponent","query","matches","value","searchComponents","results","push","findComponent","index","slice","hasOwnProperty","colPath","rowPath","removeComponent","pop","length","splice","parseFloatExt","parseFloat","replace","isLayoutComponent","Boolean","getComponent","result","findComponents","console","warn","generateFormChange","data","change","op","container","originalComponent","patches","duplex","compare","applyFormChanges","form","changes","failed","found","newComponent","oldComponent","applyPatch","newDocument","err","flattenComponents","flattened","hasCondition","customConditional","conditional","when","json","formatAsCurrency","parsedValue","parts","toString","split","from","reverse","map","part","join","escapeRegExCharacters","getValue","submission","search","prop","getStrings","properties","strings","property","string","dataSrc","values","label","fields","day","placeholder","month","year","addAnother"],"mappings":"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","file":"../../utils/formUtils.js","sourcesContent":["define([\n    \"skylark-lodash\",\n    '../vendors/fast-json-patch/duplex'\n], function (_, a) {\n    'use strict';\n    const {\n        get, set, has, clone, forOwn, isString, isNaN, isNil, isPlainObject, round, chunk, pad\n    } = _;\n\n\n    function isLayoutComponent(component) {\n        return Boolean(component.columns && Array.isArray(component.columns) || component.rows && Array.isArray(component.rows) || component.components && Array.isArray(component.components));\n    }\n    function eachComponent(components, fn, includeAll, path, parent) {\n        if (!components)\n            return;\n        path = path || '';\n        components.forEach(component => {\n            if (!component) {\n                return;\n            }\n            const hasColumns = component.columns && Array.isArray(component.columns);\n            const hasRows = component.rows && Array.isArray(component.rows);\n            const hasComps = component.components && Array.isArray(component.components);\n            let noRecurse = false;\n            const newPath = component.key ? path ? `${ path }.${ component.key }` : component.key : '';\n            if (parent) {\n                component.parent = clone(parent);\n                delete component.parent.components;\n                delete component.parent.componentMap;\n                delete component.parent.columns;\n                delete component.parent.rows;\n            }\n            if (includeAll || component.tree || !hasColumns && !hasRows && !hasComps) {\n                noRecurse = fn(component, newPath);\n            }\n            const subPath = () => {\n                if (component.key && ![\n                        'panel',\n                        'table',\n                        'well',\n                        'columns',\n                        'fieldset',\n                        'tabs',\n                        'form'\n                    ].includes(component.type) && ([\n                        'datagrid',\n                        'container',\n                        'editgrid'\n                    ].includes(component.type) || component.tree)) {\n                    return newPath;\n                } else if (component.key && component.type === 'form') {\n                    return `${ newPath }.data`;\n                }\n                return path;\n            };\n            if (!noRecurse) {\n                if (hasColumns) {\n                    component.columns.forEach(column => eachComponent(column.components, fn, includeAll, subPath(), parent ? component : null));\n                } else if (hasRows) {\n                    component.rows.forEach(row => {\n                        if (Array.isArray(row)) {\n                            row.forEach(column => eachComponent(column.components, fn, includeAll, subPath(), parent ? component : null));\n                        }\n                    });\n                } else if (hasComps) {\n                    eachComponent(component.components, fn, includeAll, subPath(), parent ? component : null);\n                }\n            }\n        });\n    }\n    function matchComponent(component, query) {\n        if (isString(query)) {\n            return component.key === query || component.path === query;\n        } else {\n            let matches = false;\n            forOwn(query, (value, key) => {\n                matches = get(component, key) === value;\n                if (!matches) {\n                    return false;\n                }\n            });\n            return matches;\n        }\n    }\n    function getComponent(components, key, includeAll) {\n        let result;\n        eachComponent(components, (component, path) => {\n            if (path === key || component.path === key) {\n                result = component;\n                return true;\n            }\n        }, includeAll);\n        return result;\n    }\n    function searchComponents(components, query) {\n        const results = [];\n        eachComponent(components, component => {\n            if (matchComponent(component, query)) {\n                results.push(component);\n            }\n        }, true);\n        return results;\n    }\n    function findComponents(components, query) {\n        console.warn('formio.js/utils findComponents is deprecated. Use searchComponents instead.');\n        return searchComponents(components, query);\n    }\n    function findComponent(components, key, path, fn) {\n        if (!components)\n            return;\n        path = path || [];\n        if (!key) {\n            return fn(components);\n        }\n        components.forEach(function (component, index) {\n            var newPath = path.slice();\n            newPath.push(index);\n            if (!component)\n                return;\n            if (component.hasOwnProperty('columns') && Array.isArray(component.columns)) {\n                newPath.push('columns');\n                component.columns.forEach(function (column, index) {\n                    var colPath = newPath.slice();\n                    colPath.push(index);\n                    colPath.push('components');\n                    findComponent(column.components, key, colPath, fn);\n                });\n            }\n            if (component.hasOwnProperty('rows') && Array.isArray(component.rows)) {\n                newPath.push('rows');\n                component.rows.forEach(function (row, index) {\n                    var rowPath = newPath.slice();\n                    rowPath.push(index);\n                    row.forEach(function (column, index) {\n                        var colPath = rowPath.slice();\n                        colPath.push(index);\n                        colPath.push('components');\n                        findComponent(column.components, key, colPath, fn);\n                    });\n                });\n            }\n            if (component.hasOwnProperty('components') && Array.isArray(component.components)) {\n                newPath.push('components');\n                findComponent(component.components, key, newPath, fn);\n            }\n            if (component.key === key) {\n                fn(component, newPath);\n            }\n        });\n    }\n    function removeComponent(components, path) {\n        var index = path.pop();\n        if (path.length !== 0) {\n            components = get(components, path);\n        }\n        components.splice(index, 1);\n    }\n    function generateFormChange(type, data) {\n        let change;\n        switch (type) {\n        case 'add':\n            change = {\n                op: 'add',\n                key: data.component.key,\n                container: data.parent.key,\n                path: data.path,\n                index: data.index,\n                component: data.component\n            };\n            break;\n        case 'edit':\n            change = {\n                op: 'edit',\n                key: data.originalComponent.key,\n                patches: duplex.compare(data.originalComponent, data.component)\n            };\n            if (!change.patches.length) {\n                change = null;\n            }\n            break;\n        case 'remove':\n            change = {\n                op: 'remove',\n                key: data.component.key\n            };\n            break;\n        }\n        return change;\n    }\n    function applyFormChanges(form, changes) {\n        const failed = [];\n        changes.forEach(function (change) {\n            var found = false;\n            switch (change.op) {\n            case 'add':\n                var newComponent = change.component;\n                findComponent(form.components, change.container, null, function (parent) {\n                    if (!change.container) {\n                        parent = form;\n                    }\n                    findComponent(form.components, change.key, null, function (component, path) {\n                        newComponent = component;\n                        removeComponent(form.components, path);\n                    });\n                    found = true;\n                    var container = get(parent, change.path);\n                    container.splice(change.index, 0, newComponent);\n                });\n                break;\n            case 'remove':\n                findComponent(form.components, change.key, null, function (component, path) {\n                    found = true;\n                    const oldComponent = get(form.components, path);\n                    if (oldComponent.key !== component.key) {\n                        path.pop();\n                    }\n                    removeComponent(form.components, path);\n                });\n                break;\n            case 'edit':\n                findComponent(form.components, change.key, null, function (component, path) {\n                    found = true;\n                    try {\n                        const oldComponent = get(form.components, path);\n                        const newComponent = duplex.applyPatch(component, change.patches).newDocument;\n                        if (oldComponent.key !== newComponent.key) {\n                            path.pop();\n                        }\n                        set(form.components, path, newComponent);\n                    } catch (err) {\n                        failed.push(change);\n                    }\n                });\n                break;\n            case 'move':\n                break;\n            }\n            if (!found) {\n                failed.push(change);\n            }\n        });\n        return {\n            form,\n            failed\n        };\n    }\n    function flattenComponents(components, includeAll) {\n        const flattened = {};\n        eachComponent(components, (component, path) => {\n            flattened[path] = component;\n        }, includeAll);\n        return flattened;\n    }\n    function hasCondition(component) {\n        return Boolean(component.customConditional || component.conditional && component.conditional.when || component.conditional && component.conditional.json);\n    }\n    function parseFloatExt(value) {\n        return parseFloat(isString(value) ? value.replace(/[^\\de.+-]/gi, '') : value);\n    }\n    function formatAsCurrency(value) {\n        const parsedValue = parseFloatExt(value);\n        if (isNaN(parsedValue)) {\n            return '';\n        }\n        const parts = round(parsedValue, 2).toString().split('.');\n        parts[0] = chunk(Array.from(parts[0]).reverse(), 3).reverse().map(part => part.reverse().join('')).join(',');\n        parts[1] = pad(parts[1], 2, '0');\n        return parts.join('.');\n    }\n    function escapeRegExCharacters(value) {\n        return value.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n    }\n    function getValue(submission, key) {\n        const search = data => {\n            if (isPlainObject(data)) {\n                if (has(data, key)) {\n                    return data[key];\n                }\n                let value = null;\n                forOwn(data, prop => {\n                    const result = search(prop);\n                    if (!isNil(result)) {\n                        value = result;\n                        return false;\n                    }\n                });\n                return value;\n            } else {\n                return null;\n            }\n        };\n        return search(submission.data);\n    }\n    function getStrings(form) {\n        const properties = [\n            'label',\n            'title',\n            'legend',\n            'tooltip',\n            'description',\n            'placeholder',\n            'prefix',\n            'suffix',\n            'errorLabel',\n            'content',\n            'html'\n        ];\n        const strings = [];\n        eachComponent(form.components, component => {\n            properties.forEach(property => {\n                if (component.hasOwnProperty(property) && component[property]) {\n                    strings.push({\n                        key: component.key,\n                        type: component.type,\n                        property,\n                        string: component[property]\n                    });\n                }\n            });\n            if ((!component.dataSrc || component.dataSrc === 'values') && component.hasOwnProperty('values') && Array.isArray(component.values) && component.values.length) {\n                component.values.forEach((value, index) => {\n                    strings.push({\n                        key: component.key,\n                        property: `value[${ index }].label`,\n                        string: component.values[index].label\n                    });\n                });\n            }\n            if (component.type === 'day') {\n                [\n                    'day',\n                    'month',\n                    'year',\n                    'Day',\n                    'Month',\n                    'Year',\n                    'january',\n                    'february',\n                    'march',\n                    'april',\n                    'may',\n                    'june',\n                    'july',\n                    'august',\n                    'september',\n                    'october',\n                    'november',\n                    'december'\n                ].forEach(string => {\n                    strings.push({\n                        key: component.key,\n                        property: 'day',\n                        string\n                    });\n                });\n                if (component.fields.day.placeholder) {\n                    strings.push({\n                        key: component.key,\n                        property: 'fields.day.placeholder',\n                        string: component.fields.day.placeholder\n                    });\n                }\n                if (component.fields.month.placeholder) {\n                    strings.push({\n                        key: component.key,\n                        property: 'fields.month.placeholder',\n                        string: component.fields.month.placeholder\n                    });\n                }\n                if (component.fields.year.placeholder) {\n                    strings.push({\n                        key: component.key,\n                        property: 'fields.year.placeholder',\n                        string: component.fields.year.placeholder\n                    });\n                }\n            }\n            if (component.type === 'editgrid') {\n                const string = component.addAnother || 'Add Another';\n                if (component.addAnother) {\n                    strings.push({\n                        key: component.key,\n                        property: 'addAnother',\n                        string\n                    });\n                }\n            }\n            if (component.type === 'select') {\n                [\n                    'loading...',\n                    'Type to search'\n                ].forEach(string => {\n                    strings.push({\n                        key: component.key,\n                        property: 'select',\n                        string\n                    });\n                });\n            }\n        }, true);\n        return strings;\n    }\n    return {\n        isLayoutComponent: isLayoutComponent,\n        eachComponent: eachComponent,\n        matchComponent: matchComponent,\n        getComponent: getComponent,\n        searchComponents: searchComponents,\n        findComponents: findComponents,\n        findComponent: findComponent,\n        removeComponent: removeComponent,\n        generateFormChange: generateFormChange,\n        applyFormChanges: applyFormChanges,\n        flattenComponents: flattenComponents,\n        hasCondition: hasCondition,\n        parseFloatExt: parseFloatExt,\n        formatAsCurrency: formatAsCurrency,\n        escapeRegExCharacters: escapeRegExCharacters,\n        getValue: getValue,\n        getStrings: getStrings\n    };\n});"]}