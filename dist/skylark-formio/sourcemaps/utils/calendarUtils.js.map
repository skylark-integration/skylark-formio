{"version":3,"sources":["utils/calendarUtils.js"],"names":["define","moment","_","CALENDAR_ERROR_MESSAGES","INVALID","INCOMPLETE","greater","date","format","less","buildResponse","message","result","lessOrGreater","value","maxDate","minDate","isValid","maxDateMoment","minDateMoment","checkInvalidDate","isValidDate","delimeters","match","delimetersRegEx","RegExp","join","inputParts","replace","split","formatParts","timeIndex","findIndex","part","index","length","modifiedParts","map","partValue","problemDate","checkedLessOrGreater","indexOf"],"mappings":";;;;;;;AAAAA,QACI,iBACA,kBACD,SAAUC,EAAQC,GACjB,aACA,MAAMC,GACFC,QAAS,+BACTC,WAAY,kCACZC,QAAO,CAACC,EAAMC,wCACkCD,EAAKC,OAAOA,KAE5DC,KAAI,CAACF,EAAMC,qCACkCD,EAAKC,OAAOA,MAG7D,SAASE,EAAcC,EAASC,GAC5B,OACID,QAAAA,EACAC,OAAAA,GAGR,SAASC,EAAcC,EAAON,EAAQO,EAASC,GAC3C,IAAIL,EAAU,GACVC,GAAS,EACb,GAAIG,GAAWD,EAAMG,UAAW,CAC5B,MAAMC,EAAgBjB,EAAOc,EAASP,GAClCM,EAAQI,IACRP,EAAUR,EAAwBG,QAAQY,EAAeV,GACzDI,GAAS,GAGjB,GAAII,GAAWF,EAAMG,UAAW,CAC5B,MAAME,EAAgBlB,EAAOe,EAASR,GAClCM,EAAQK,IACRR,EAAUR,EAAwBM,KAAKU,EAAeX,GACtDI,GAAS,GAGjB,OACID,QAAAA,EACAC,OAAAA,GAoDR,OACIT,wBAAyBA,EACzBU,cAAeA,EACfO,iBApDJ,SAA0BN,EAAON,EAAQQ,EAASD,GAC9C,MAAMR,EAAON,EAAOa,EAAON,GAAQ,GAC7Ba,EAAcd,EAAKU,UACzB,IAAKI,EAAa,CACd,MAAMC,EAAaR,EAAMS,MAAM,gBACzBC,EAAkB,IAAIC,OAAOH,EAAWI,KAAK,KAAM,MACnDC,EAAab,EAAMc,QAAQ,OAAQ,IAAIC,MAAML,GAC7CM,EAActB,EAAO,GAAKA,EAAO,GAAGqB,MAAML,GAAmBhB,EAAO,GAAGqB,MAAML,GAC7EO,EAAY7B,EAAE8B,UAAUF,EAAa,CAACG,EAAMC,IAA0B,IAAhBD,EAAKE,QAAgBD,IAAUJ,EAAYK,OAAS,GAEhH,GAAIR,EADczB,EAAE8B,UAAUF,EAAaG,GAAQA,EAAKV,MAAM,YAClC,IAAO,EAC/B,OAAOb,EAAcP,EAAwBC,SAAS,GAE1D,GAAIuB,EAAW,GAAGQ,SAAWL,EAAY,GAAGK,OAAQ,CAChD,MAAMC,EAAgBT,EAAWU,IAAI,CAACJ,EAAMC,KACxC,IAAII,EAAYL,EAShB,OARKA,GAAQC,IAAUH,EAEXE,IACRK,EAAY,MAFZA,EAAY,KAIZhB,EAAWY,KACXI,KAAgBA,IAAchB,EAAWY,MAEtCI,IAELC,EAActC,EAAOmC,EAAcV,KAAK,IAAKlB,GAAQ,GAC3D,GAAI+B,EAAYtB,UAAW,CACvB,MAAMuB,EAAuB3B,EAAc0B,EAAa/B,EAAO,GAAIO,EAASC,GAC5E,IAAKwB,EAAqB5B,OAAQ,CAC9B,MAAMD,QAACA,EAAOC,OAAEA,GAAU4B,EAC1B,OAAO9B,EAAcC,EAASC,GAElC,OAAOF,EAAcP,EAAwBE,YAAY,GAEzD,OAAOK,EAAcP,EAAwBC,SAAS,GAG1D,OAAOM,EAAcP,EAAwBC,SAAS,GAEvD,GAAIiB,IAAuC,IAAxBP,EAAM2B,QAAQ,KAAa,CACjD,MAAMD,EAAuB3B,EAAcN,EAAMC,EAAO,GAAIO,EAASC,GACrE,IAAKwB,EAAqB5B,OAAQ,CAC9B,MAAMD,QAACA,EAAOC,OAAEA,GAAU4B,EAC1B,OAAO9B,EAAcC,EAASC,IAGtC,OAAOF,EAAc,IAAI","file":"../../utils/calendarUtils.js","sourcesContent":["define([\n    'skylark-moment',\n    'skylark-lodash'\n], function (moment, _) {\n    'use strict';\n    const CALENDAR_ERROR_MESSAGES = {\n        INVALID: 'You entered the Invalid Date',\n        INCOMPLETE: 'You entered an incomplete date.',\n        greater(date, format) {\n            return `The entered date is greater than ${ date.format(format) }`;\n        },\n        less(date, format) {\n            return `The entered date is less than ${ date.format(format) }`;\n        }\n    };\n    function buildResponse(message, result) {\n        return {\n            message,\n            result\n        };\n    }\n    function lessOrGreater(value, format, maxDate, minDate) {\n        let message = '';\n        let result = true;\n        if (maxDate && value.isValid()) {\n            const maxDateMoment = moment(maxDate, format);\n            if (value > maxDateMoment) {\n                message = CALENDAR_ERROR_MESSAGES.greater(maxDateMoment, format);\n                result = false;\n            }\n        }\n        if (minDate && value.isValid()) {\n            const minDateMoment = moment(minDate, format);\n            if (value < minDateMoment) {\n                message = CALENDAR_ERROR_MESSAGES.less(minDateMoment, format);\n                result = false;\n            }\n        }\n        return {\n            message,\n            result\n        };\n    }\n    function checkInvalidDate(value, format, minDate, maxDate) {\n        const date = moment(value, format, true);\n        const isValidDate = date.isValid();\n        if (!isValidDate) {\n            const delimeters = value.match(/[^a-z0-9_]/gi);\n            const delimetersRegEx = new RegExp(delimeters.join('|'), 'gi');\n            const inputParts = value.replace(/_*/gi, '').split(delimetersRegEx);\n            const formatParts = format[1] ? format[1].split(delimetersRegEx) : format[0].split(delimetersRegEx);\n            const timeIndex = _.findIndex(formatParts, (part, index) => part.length === 1 && index === formatParts.length - 1);\n            const yearIndex = _.findIndex(formatParts, part => part.match(/yyyy/gi));\n            if (inputParts[yearIndex] / 1000 < 1) {\n                return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);\n            }\n            if (inputParts[0].length === formatParts[0].length) {\n                const modifiedParts = inputParts.map((part, index) => {\n                    let partValue = part;\n                    if (!part && index === timeIndex) {\n                        partValue = 'AM';\n                    } else if (!part) {\n                        partValue = '01';\n                    }\n                    if (delimeters[index]) {\n                        partValue = `${ partValue }${ delimeters[index] }`;\n                    }\n                    return partValue;\n                });\n                const problemDate = moment(modifiedParts.join(''), format, true);\n                if (problemDate.isValid()) {\n                    const checkedLessOrGreater = lessOrGreater(problemDate, format[0], maxDate, minDate);\n                    if (!checkedLessOrGreater.result) {\n                        const {message, result} = checkedLessOrGreater;\n                        return buildResponse(message, result);\n                    }\n                    return buildResponse(CALENDAR_ERROR_MESSAGES.INCOMPLETE, false);\n                } else {\n                    return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);\n                }\n            } else {\n                return buildResponse(CALENDAR_ERROR_MESSAGES.INVALID, false);\n            }\n        } else if (isValidDate && value.indexOf('_') === -1) {\n            const checkedLessOrGreater = lessOrGreater(date, format[0], maxDate, minDate);\n            if (!checkedLessOrGreater.result) {\n                const {message, result} = checkedLessOrGreater;\n                return buildResponse(message, result);\n            }\n        }\n        return buildResponse('', true);\n    }\n    return {\n        CALENDAR_ERROR_MESSAGES: CALENDAR_ERROR_MESSAGES,\n        lessOrGreater: lessOrGreater,\n        checkInvalidDate: checkInvalidDate\n    };\n});"]}