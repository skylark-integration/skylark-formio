{"version":3,"sources":["utils/Evaluator.js"],"names":["define","_","stringHash","str","hash","i","length","charCodeAt","Evaluator","noeval","cache","templateSettings","evaluate","interpolate","escape","evaluator","func","params","console","warn","noop","keys","Function","[object Object]","template","replace","err","rawTemplate","data","message","String","match","$1","$2","get","args","Array","isArray"],"mappings":";;;;;;;AAAAA,QACI,kBACD,SAAUC,GACT,aAEA,SAASC,EAAWC,GAIlB,IAHA,IAAIC,EAAO,KACPC,EAAOF,EAAIG,OAETD,GACJD,EAAe,GAAPA,EAAaD,EAAII,aAAaF,GAMxC,OAAOD,IAAS,EAGlB,MAAMI,GACFC,QAAQ,EACRC,SACAC,kBACIC,SAAU,oBACVC,YAAa,sBACbC,OAAQ,2BAEZC,UAAS,CAACC,KAASC,IACXT,EAAUC,QACVS,QAAQC,KAAK,6CACNlB,EAAEmB,OAEY,iBAAdH,EAAO,KACdA,EAAShB,EAAEoB,KAAKJ,EAAO,KAEpB,IAAIK,YAAYL,EAAQD,IAEnCO,SAASC,EAAUpB,GACfA,EAAOA,GAAQF,EAAWsB,GAC1B,IAEI,OADAA,EAAWA,EAASC,QAAQ,SAAU,IAC/BjB,EAAUE,MAAMN,GAAQH,EAAEuB,SAASA,EAAUhB,EAAUG,kBAChE,MAAOe,GACLR,QAAQC,KAAK,kCAAmCO,EAAKF,KAG7DD,YAAYI,EAAaC,GACrB,GAA2B,mBAAhBD,EACP,IACI,OAAOA,EAAYC,GACrB,MAAOF,GAEL,OADAR,QAAQC,KAAK,+BAAgCO,EAAKE,GAC3CF,EAAIG,QAInB,MAAMzB,EAAOF,EADbyB,EAAcG,OAAOH,IAErB,IAAIH,EACJ,GAAIhB,EAAUE,MAAMN,GAChBoB,EAAWhB,EAAUE,MAAMN,OACxB,CAAA,GAAII,EAAUC,OACjB,OAAOkB,EAAYF,QAAQ,qBAAsB,CAACM,EAAOC,EAAIC,IAAOhC,EAAEiC,IAAIN,EAAMK,IAEhFT,EAAWhB,EAAUgB,SAASG,EAAavB,GAE/C,GAAwB,mBAAboB,EACP,IACI,OAAOA,EAASI,GAClB,MAAOF,GAEL,OADAR,QAAQC,KAAK,+BAAgCO,EAAKC,EAAaC,GACxDF,EAAIG,QAGnB,OAAOL,GAEXZ,SAAQ,CAACI,EAAMmB,IACJC,MAAMC,QAAQF,GAAQnB,KAAQmB,GAAQnB,EAAKmB,IAG1D,OAAO3B","file":"../../utils/Evaluator.js","sourcesContent":["define([\n    'skylark-lodash'\n], function (_) {\n    'use strict';\n\n    function stringHash(str) {\n      var hash = 5381,\n          i    = str.length;\n\n      while(i) {\n        hash = (hash * 33) ^ str.charCodeAt(--i);\n      }\n\n      /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n       * integers. Since we want the results to be always positive, convert the\n       * signed int to an unsigned by doing an unsigned bitshift. */\n      return hash >>> 0;\n    }\n\n    const Evaluator = {\n        noeval: false,\n        cache: {},\n        templateSettings: {\n            evaluate: /\\{%([\\s\\S]+?)%\\}/g,\n            interpolate: /\\{\\{([\\s\\S]+?)\\}\\}/g,\n            escape: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g\n        },\n        evaluator(func, ...params) {\n            if (Evaluator.noeval) {\n                console.warn('No evaluations allowed for this renderer.');\n                return _.noop;\n            }\n            if (typeof params[0] === 'object') {\n                params = _.keys(params[0]);\n            }\n            return new Function(...params, func);\n        },\n        template(template, hash) {\n            hash = hash || stringHash(template);\n            try {\n                template = template.replace(/ctx\\./g, '');\n                return Evaluator.cache[hash] = _.template(template, Evaluator.templateSettings);\n            } catch (err) {\n                console.warn('Error while processing template', err, template);\n            }\n        },\n        interpolate(rawTemplate, data) {\n            if (typeof rawTemplate === 'function') {\n                try {\n                    return rawTemplate(data);\n                } catch (err) {\n                    console.warn('Error interpolating template', err, data);\n                    return err.message;\n                }\n            }\n            rawTemplate = String(rawTemplate);\n            const hash = stringHash(rawTemplate);\n            let template;\n            if (Evaluator.cache[hash]) {\n                template = Evaluator.cache[hash];\n            } else if (Evaluator.noeval) {\n                return rawTemplate.replace(/({{\\s*(.*?)\\s*}})/g, (match, $1, $2) => _.get(data, $2));\n            } else {\n                template = Evaluator.template(rawTemplate, hash);\n            }\n            if (typeof template === 'function') {\n                try {\n                    return template(data);\n                } catch (err) {\n                    console.warn('Error interpolating template', err, rawTemplate, data);\n                    return err.message;\n                }\n            }\n            return template;\n        },\n        evaluate(func, args) {\n            return Array.isArray(args) ? func(...args) : func(args);\n        }\n    };\n    return Evaluator;\n});"]}