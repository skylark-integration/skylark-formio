{"version":3,"sources":["PDFBuilder.js"],"names":["define","_","NativePromise","fetchPonyfill","Formio","WebformBuilder","a","BuilderUtils","PDF","fetch","Headers","Promise","[object Object]","element","options","arguments","HTMLElement","skipInit","super","this","dragDropEnabled","defaultGroups","pdf","title","weight","default","components","textfield","number","password","email","phoneNumber","currency","checkbox","signature","select","textarea","datetime","file","basic","advanced","layout","data","premium","resource","hasPDF","has","webform","form","projectUrl","getProjectUrl","attachMode","createForm","init","renderTemplate","sidebar","scrollEnabled","sideBarScroll","groupOrder","groupId","id","groups","map","groupKey","group","subgroups","key","render","loadRefs","fileDrop","fileBrowse","hiddenFileInputElement","uploadError","addEventListener","refs","event","preventDefault","setUploadError","className","upload","dataTransfer","files","trigger","click","value","resolve","attach","then","iframeDropzone","sidebar-container","afterAttach","initIframeEvents","updateDropzoneDimensions","initDropzoneEvents","prepSidebarComponentsForDrag","headers","Accept","x-jwt-token","getToken","formData","FormData","append","method","body","response","status","text","info","statusText","json","set","src","filesServer","path","emit","redraw","catch","message","style","display","innerHTML","on","children","includes","prependTo","setForm","ready","postMessage","name","args","saveComponent","destroy","iframeElement","off","schema","component","getComponentById","overlay","page","left","top","height","width","editComponent","localComponent","find","clone","removeEventListener","e","onDropzoneDrop","bind","forEach","container","el","draggable","setAttribute","onDragStart","onDragEnd","iframeRect","getElementRect","iframeContainer","comp","get","label","keyForShow","customField","setData","addClass","dropEvent","offsetX","offsetY","removeClass","target","type","getAttribute","fastCloneDeep","schemas","tryUpdateCustomComponentSchema","camelCase","placeholder","uniquify","push","addComponent"],"mappings":";;;;;;;AAAAA,QACI,iBACA,uBACA,iCACA,WACA,mBACA,gBACA,kBACA,SACD,SAAUC,EAAGC,EAAeC,EAAeC,EAAQC,EAAgBC,EAAGC,EAAcC,GACnF,aACA,MAAMC,MAACA,EAAKC,QAAEA,GAAWP,GAAgBQ,QAAST,IAClD,qBAAgCG,EAC5BO,cACI,IAAIC,EAASC,EACTC,UAAU,aAAcC,aAAeD,UAAU,IACjDF,EAAUE,UAAU,GACpBD,EAAUC,UAAU,IAEpBD,EAAUC,UAAU,GAExBD,EAAQG,UAAW,EACfJ,EACAK,MAAML,EAASC,GAEfI,MAAMJ,GAEVK,KAAKC,iBAAkB,EAE3BC,oBACI,OACIC,KACIC,MAAO,aACPC,OAAQ,EACRC,SAAS,EACTC,YACIC,WAAW,EACXC,QAAQ,EACRC,UAAU,EACVC,OAAO,EACPC,aAAa,EACbC,UAAU,EACVC,UAAU,EACVC,WAAW,EACXC,QAAQ,EACRC,UAAU,EACVC,UAAU,EACVC,MAAM,IAGdC,OAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,MAAM,EACNC,SAAS,EACTC,UAAU,GAGlBC,aACI,OAAO5C,EAAE6C,IAAI3B,KAAK4B,QAAQC,KAAM,gBAEpCC,iBACI,OAAO9B,KAAKL,QAAQmC,YAAc7C,EAAO8C,gBAE7CtC,OACIO,KAAKL,QAAQqC,WAAa,UAC1BhC,KAAK4B,QAAU5B,KAAK4B,SAAW5B,KAAKiC,WAAWjC,KAAKL,SACpDK,KAAK4B,QAAQM,OAEjBzC,SAoBI,OAnBeO,KAAKmC,eAAe,cAC/BC,QAASpC,KAAKmC,eAAe,kBACzBE,cAAerC,KAAKsC,cACpBC,WAAYvC,KAAKuC,WACjBC,2BAA6BxC,KAAKyC,KAClCC,OAAQ1C,KAAKuC,WAAWI,IAAIC,GAAY5C,KAAKmC,eAAe,uBACxDU,MAAO7C,KAAK0C,OAAOE,GACnBA,SAAAA,EACAJ,2BAA6BxC,KAAKyC,KAClCK,UAAW9C,KAAK0C,OAAOE,GAAUE,UAAUH,IAAIE,GAAS7C,KAAKmC,eAAe,uBACxEU,MAAAA,EACAD,SAAUC,EAAME,IAChBP,2BAA6BI,IAC7BE,qBAIZjB,KAAM7B,KAAK0B,OAAS1B,KAAK4B,QAAQoB,SAAWhD,KAAKmC,eAAe,yBAIxE1C,OAAOC,GACH,IAAKM,KAAK0B,OAAQ,CAed,GAdA1B,KAAKiD,SAASvD,GACVwD,SAAY,SACZC,WAAc,SACdC,uBAA0B,SAC1BC,YAAe,WAEnBrD,KAAKsD,iBAAiBtD,KAAKuD,KAAK,qBAAsB,QAASC,IAC3DA,EAAMC,mBAELzD,KAAK8B,WAGN9B,KAAK0D,iBAFL1D,KAAK0D,eAAe,2LAIpB1D,KAAKuD,KAAKL,SAAU,CACpB,MAAMxD,EAAUM,KAChBA,KAAKsD,iBAAiBtD,KAAKuD,KAAKL,SAAU,WAAY,SAAUM,GAC5DxD,KAAK2D,UAAY,4BACjBH,EAAMC,mBAEVzD,KAAKsD,iBAAiBtD,KAAKuD,KAAKL,SAAU,YAAa,SAAUM,GAC7DxD,KAAK2D,UAAY,eACjBH,EAAMC,mBAEVzD,KAAKsD,iBAAiBtD,KAAKuD,KAAKL,SAAU,OAAQ,SAAUM,GAIxD,OAHAxD,KAAK2D,UAAY,eACjBH,EAAMC,iBACN/D,EAAQkE,OAAOJ,EAAMK,aAAaC,MAAM,KACjC,IAiBf,OAdI9D,KAAKuD,KAAKJ,YAAcnD,KAAKuD,KAAKH,yBAClCpD,KAAKsD,iBAAiBtD,KAAKuD,KAAKJ,WAAY,QAASK,IACjDA,EAAMC,iBACkD,mBAA7CzD,KAAKuD,KAAKH,uBAAuBW,QACxC/D,KAAKuD,KAAKH,uBAAuBW,QAAQ,SAEzC/D,KAAKuD,KAAKH,uBAAuBY,UAGzChE,KAAKsD,iBAAiBtD,KAAKuD,KAAKH,uBAAwB,SAAU,KAC9DpD,KAAK4D,OAAO5D,KAAKuD,KAAKH,uBAAuBU,MAAM,IACnD9D,KAAKuD,KAAKH,uBAAuBa,MAAQ,MAG1ClF,EAAcmF,UAEzB,OAAOnE,MAAMoE,OAAOzE,GAAS0E,KAAK,KAC9BpE,KAAKiD,SAASjD,KAAKN,SACf2E,eAAgB,SAChBC,oBAAqB,aAEzBtE,KAAKuE,cACEvE,KAAKN,UAGpBD,cACIO,KAAKwE,mBACLxE,KAAKyE,2BACLzE,KAAK0E,qBACL1E,KAAK2E,+BAETlF,OAAO0B,GACH,MAAMyD,EAAU,IAAIrF,GAChBsF,OAAU,oCACVC,cAAe7F,EAAO8F,aAEpBC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ/D,GACxB7B,KAAUU,KAAK8B,qBACXqD,OAAQ,OACRP,QAAAA,EACAQ,KAAMJ,IACPZ,KAAKiB,IACoB,MAApBA,EAASC,OACTD,EAASE,OAAOnB,KAAKoB,IACjBxF,KAAK0D,kBAAmB2B,EAASI,gBAAkBD,OAGvDH,EAASK,OAAOtB,KAAK7C,IACjBzC,EAAE6G,IAAI3F,KAAK4B,QAAQC,KAAM,gBACrBY,GAAIlB,EAAKJ,KACTyE,OAASrE,EAAKsE,cAAgBtE,EAAKuE,SAEvC9F,KAAK+F,KAAK,cAAexE,GACzBvB,KAAKgG,aAGdC,MAAM,KACLjG,KAAK0D,eAAe,oBAG5BjE,eAAeyG,GACNlG,KAAKuD,KAAKF,cAGfrD,KAAKuD,KAAKF,YAAY8C,MAAMC,QAAUF,EAAU,GAAK,OACrDlG,KAAKuD,KAAKF,YAAYgD,UAAYH,GAEtCzG,WAAWE,GAQP,OAPAA,EAAQG,UAAW,EACnBE,KAAK4B,QAAU,IAAIvC,EAAIW,KAAKN,QAASC,GACrCK,KAAK4B,QAAQ0E,GAAG,SAAU,KAClBtG,KAAKuD,KAAKc,qBAAuBrE,KAAKuD,KAAK1B,KAAK0E,UAAUC,SAASxG,KAAKuD,KAAKc,iBAC7ErE,KAAKyG,UAAUzG,KAAKuD,KAAKc,eAAgBrE,KAAKuD,KAAK1B,QAGpD7B,KAAK4B,QAEhBnC,QAAQoC,GACJ,OAAO9B,MAAM2G,QAAQ7E,GAAMuC,KAAK,IACrBpE,KAAK2G,MAAMvC,KAAK,IACfpE,KAAK4B,SACL5B,KAAK4B,QAAQgF,aACTC,KAAM,OACNtF,KAAMM,IAEH7B,KAAK4B,QAAQ8E,QAAQ7E,IAEzBA,IAInBpC,iBAAiBqH,GACb,OAAO/G,MAAMgH,iBAAiBD,GAAM1C,KAAK,IAAMpE,KAAKuE,eAExD9E,UACIM,MAAMiH,UACNhH,KAAK4B,QAAQoF,UAEjBvH,mBACSO,KAAK4B,QAAQqF,gBAGlBjH,KAAK4B,QAAQsF,IAAI,wBACjBlH,KAAK4B,QAAQsF,IAAI,0BACjBlH,KAAK4B,QAAQsF,IAAI,yBACjBlH,KAAK4B,QAAQ0E,GAAG,uBAAwBa,IACpC,MAAMC,EAAYpH,KAAK4B,QAAQyF,iBAAiBF,EAAO1E,IAYvD,OAXI2E,GAAaA,EAAUA,YACvBA,EAAUA,UAAUE,SAChBC,KAAMJ,EAAOI,KACbC,KAAML,EAAOK,KACbC,IAAKN,EAAOM,IACZC,OAAQP,EAAOO,OACfC,MAAOR,EAAOQ,OAElB3H,KAAK4H,cAAcR,EAAUA,UAAWpH,KAAK4B,QAAQqF,eACrDjH,KAAK+F,KAAK,kBAAmBqB,IAE1BA,IAEXpH,KAAK4B,QAAQ0E,GAAG,yBAA0Ba,IACtC,MAAMC,EAAYpH,KAAK4B,QAAQyF,iBAAiBF,EAAO1E,IACvD,GAAI2E,GAAaA,EAAUA,UAAW,CAClCA,EAAUA,UAAUE,SAChBC,KAAMJ,EAAOG,QAAQC,KACrBC,KAAML,EAAOG,QAAQE,KACrBC,IAAKN,EAAOG,QAAQG,IACpBC,OAAQP,EAAOG,QAAQI,OACvBC,MAAOR,EAAOG,QAAQK,OAE1B3H,KAAK+F,KAAK,kBAAmBqB,GAC7B,MAAMS,EAAiB/I,EAAEgJ,KAAK9H,KAAK6B,KAAKtB,YAAckC,GAAI0E,EAAO1E,KAC7DoF,IACAA,EAAeP,QAAUxI,EAAEiJ,MAAMX,EAAUA,UAAUE,UAEzDtH,KAAK+F,KAAK,SAAU/F,KAAK6B,MAE7B,OAAOuF,IAEXpH,KAAK4B,QAAQ0E,GAAG,wBAAyBa,IACrC,MAAMC,EAAYpH,KAAK4B,QAAQyF,iBAAiBF,EAAO1E,IACnD2E,GACApH,KAAK4H,cAAcR,EAAUA,UAAWpH,KAAK4B,QAAQqF,iBAE1D,IAEPxH,qBACSO,KAAKuD,KAAKc,iBAGfrE,KAAKgI,oBAAoBhI,KAAKuD,KAAKc,eAAgB,YACnDrE,KAAKgI,oBAAoBhI,KAAKuD,KAAKc,eAAgB,QACnDrE,KAAKsD,iBAAiBtD,KAAKuD,KAAKc,eAAgB,WAAY4D,IACxDA,EAAExE,kBACK,IAEXzD,KAAKsD,iBAAiBtD,KAAKuD,KAAKc,eAAgB,OAAQrE,KAAKkI,eAAeC,KAAKnI,QAErFP,+BACSO,KAAKuD,KAAK,sBAGfvD,KAAKuD,KAAK,qBAAqB6E,QAAQC,QAC/BA,EAAU9B,UAAU6B,QAAQE,IAC5BA,EAAGC,WAAY,EACfD,EAAGE,aAAa,aAAa,GAC7BxI,KAAKgI,oBAAoBM,EAAI,aAC7BtI,KAAKgI,oBAAoBM,EAAI,WAC7BtI,KAAKsD,iBAAiBgF,EAAI,YAAatI,KAAKyI,YAAYN,KAAKnI,OAAO,GACpEA,KAAKsD,iBAAiBgF,EAAI,UAAWtI,KAAK0I,UAAUP,KAAKnI,OAAO,OAI5EP,2BACI,IAAKO,KAAKuD,KAAKc,eACX,OAEJ,MAAMsE,EAAaxJ,EAAEyJ,eAAe5I,KAAK4B,QAAQ2B,KAAKsF,iBACtD7I,KAAKuD,KAAKc,eAAe8B,MAAMuB,OAASiB,GAAcA,EAAWjB,UAAaiB,EAAWjB,WAAc,SACvG1H,KAAKuD,KAAKc,eAAe8B,MAAMwB,MAAQgB,GAAcA,EAAWhB,SAAYgB,EAAWhB,UAAa,OAExGlI,+BAA+B0H,EAAQpE,GACnC,MAAM+F,EAAOhK,EAAEiK,IAAI/I,iCAAmC+C,MACtD,QAAK+F,IAGL3B,EAAOpE,IAAM+F,EAAK3B,QAAU2B,EAAK3B,OAAOpE,KAAOoE,EAAOpE,IACtDoE,EAAO6B,MAAQF,EAAK3B,QAAU2B,EAAK3B,OAAO6B,OAAS7B,EAAO6B,MAC1D7B,EAAO8B,WAAa9B,EAAOpE,IAC3BoE,EAAO+B,aAAc,GACd,GAEXzJ,YAAYwI,GACRA,EAAEpE,aAAasF,QAAQ,YAAa,MACpCnJ,KAAKyE,2BACLzE,KAAKoJ,SAASpJ,KAAKuD,KAAKc,eAAgB,WAE5C5E,eAAewI,GAGX,OAFAjI,KAAKqJ,UAAYpB,EACjBA,EAAExE,kBACK,EAEXhE,UAAUwI,GACN,MAAMqB,EAAUtJ,KAAKqJ,UAAYrJ,KAAKqJ,UAAUC,QAAU,KACpDC,EAAUvJ,KAAKqJ,UAAYrJ,KAAKqJ,UAAUE,QAAU,KAE1D,GADAvJ,KAAKwJ,YAAYxJ,KAAKuD,KAAKc,eAAgB,YACtCrE,KAAKqJ,UACN,OAEJ,MAAM3J,EAAUuI,EAAEwB,OACZC,EAAOhK,EAAQiK,aAAa,aAC5B9G,EAAQnD,EAAQiK,aAAa,cAC7B5G,EAAMrD,EAAQiK,aAAa,YAC3BxC,EAAShI,EAAEyK,cAAc5J,KAAK6J,QAAQH,IAC5B,WAAV7G,GAAsBE,GAAO/C,KAAK8J,+BAA+B3C,EAAQpE,KAC3EoE,EAAOpE,IAAMjE,EAAEiL,UAAU5C,EAAO6B,OAAS7B,EAAO6C,aAAe7C,EAAOuC,OAE1EtK,EAAa6K,UAAUjK,KAAK4B,QAAQwF,WAAYD,GAChDnH,KAAK4B,QAAQwF,UAAU7G,WAAW2J,KAAK/C,GACvCnH,KAAK+F,KAAK,eAAgBoB,GAC1BA,EAAOG,SACHG,IAAK8B,EACL/B,KAAM8B,EACN3B,MAAO,IACPD,OAAQ,IAEZ1H,KAAK4B,QAAQuI,aAAahD,KAAY,MAAM,GAC5CnH,KAAK4B,QAAQgF,aACTC,KAAM,aACNtF,KAAM4F,IAEVnH,KAAKqJ,UAAY","file":"../PDFBuilder.js","sourcesContent":["define([\n    'skylark-lodash',\n    './vendors/getify/npo',\n    './vendors/fetch-ponyfill/fetch',\n    './Formio',\n    './WebformBuilder',\n    './utils/utils',\n    './utils/builder',\n    './PDF'\n], function (_, NativePromise, fetchPonyfill, Formio, WebformBuilder, a, BuilderUtils, PDF) {\n    'use strict';\n    const {fetch, Headers} = fetchPonyfill({ Promise: NativePromise });\n    return class PDFBuilder extends WebformBuilder {\n        constructor() {\n            let element, options;\n            if (arguments[0] instanceof HTMLElement || arguments[1]) {\n                element = arguments[0];\n                options = arguments[1];\n            } else {\n                options = arguments[0];\n            }\n            options.skipInit = true;\n            if (element) {\n                super(element, options);\n            } else {\n                super(options);\n            }\n            this.dragDropEnabled = false;\n        }\n        get defaultGroups() {\n            return {\n                pdf: {\n                    title: 'PDF Fields',\n                    weight: 0,\n                    default: true,\n                    components: {\n                        textfield: true,\n                        number: true,\n                        password: true,\n                        email: true,\n                        phoneNumber: true,\n                        currency: true,\n                        checkbox: true,\n                        signature: true,\n                        select: true,\n                        textarea: true,\n                        datetime: true,\n                        file: true\n                    }\n                },\n                basic: false,\n                advanced: false,\n                layout: false,\n                data: false,\n                premium: false,\n                resource: false\n            };\n        }\n        get hasPDF() {\n            return _.has(this.webform.form, 'settings.pdf');\n        }\n        get projectUrl() {\n            return this.options.projectUrl || Formio.getProjectUrl();\n        }\n        init() {\n            this.options.attachMode = 'builder';\n            this.webform = this.webform || this.createForm(this.options);\n            this.webform.init();\n        }\n        render() {\n            const result = this.renderTemplate('pdfBuilder', {\n                sidebar: this.renderTemplate('builderSidebar', {\n                    scrollEnabled: this.sideBarScroll,\n                    groupOrder: this.groupOrder,\n                    groupId: `builder-sidebar-${ this.id }`,\n                    groups: this.groupOrder.map(groupKey => this.renderTemplate('builderSidebarGroup', {\n                        group: this.groups[groupKey],\n                        groupKey,\n                        groupId: `builder-sidebar-${ this.id }`,\n                        subgroups: this.groups[groupKey].subgroups.map(group => this.renderTemplate('builderSidebarGroup', {\n                            group,\n                            groupKey: group.key,\n                            groupId: `builder-sidebar-${ groupKey }`,\n                            subgroups: []\n                        }))\n                    }))\n                }),\n                form: this.hasPDF ? this.webform.render() : this.renderTemplate('pdfBuilderUpload', {})\n            });\n            return result;\n        }\n        attach(element) {\n            if (!this.hasPDF) {\n                this.loadRefs(element, {\n                    'fileDrop': 'single',\n                    'fileBrowse': 'single',\n                    'hiddenFileInputElement': 'single',\n                    'uploadError': 'single'\n                });\n                this.addEventListener(this.refs['pdf-upload-button'], 'click', event => {\n                    event.preventDefault();\n                });\n                if (!this.projectUrl) {\n                    this.setUploadError('Form options.projectUrl not set. Please set the \"projectUrl\" property of the options for this form or use Formio.setProjectUrl(). This setting is necessary to upload a pdf background.');\n                } else {\n                    this.setUploadError();\n                }\n                if (this.refs.fileDrop) {\n                    const element = this;\n                    this.addEventListener(this.refs.fileDrop, 'dragover', function (event) {\n                        this.className = 'fileSelector fileDragOver';\n                        event.preventDefault();\n                    });\n                    this.addEventListener(this.refs.fileDrop, 'dragleave', function (event) {\n                        this.className = 'fileSelector';\n                        event.preventDefault();\n                    });\n                    this.addEventListener(this.refs.fileDrop, 'drop', function (event) {\n                        this.className = 'fileSelector';\n                        event.preventDefault();\n                        element.upload(event.dataTransfer.files[0]);\n                        return false;\n                    });\n                }\n                if (this.refs.fileBrowse && this.refs.hiddenFileInputElement) {\n                    this.addEventListener(this.refs.fileBrowse, 'click', event => {\n                        event.preventDefault();\n                        if (typeof this.refs.hiddenFileInputElement.trigger === 'function') {\n                            this.refs.hiddenFileInputElement.trigger('click');\n                        } else {\n                            this.refs.hiddenFileInputElement.click();\n                        }\n                    });\n                    this.addEventListener(this.refs.hiddenFileInputElement, 'change', () => {\n                        this.upload(this.refs.hiddenFileInputElement.files[0]);\n                        this.refs.hiddenFileInputElement.value = '';\n                    });\n                }\n                return NativePromise.resolve();\n            }\n            return super.attach(element).then(() => {\n                this.loadRefs(this.element, {\n                    iframeDropzone: 'single',\n                    'sidebar-container': 'multiple'\n                });\n                this.afterAttach();\n                return this.element;\n            });\n        }\n        afterAttach() {\n            this.initIframeEvents();\n            this.updateDropzoneDimensions();\n            this.initDropzoneEvents();\n            this.prepSidebarComponentsForDrag();\n        }\n        upload(file) {\n            const headers = new Headers({\n                'Accept': 'application/json, text/plain, */*',\n                'x-jwt-token': Formio.getToken()\n            });\n            const formData = new FormData();\n            formData.append('file', file);\n            fetch(`${ this.projectUrl }/upload`, {\n                method: 'POST',\n                headers,\n                body: formData\n            }).then(response => {\n                if (response.status !== 201) {\n                    response.text().then(info => {\n                        this.setUploadError(`${ response.statusText } - ${ info }`);\n                    });\n                } else {\n                    response.json().then(data => {\n                        _.set(this.webform.form, 'settings.pdf', {\n                            id: data.file,\n                            src: `${ data.filesServer }${ data.path }`\n                        });\n                        this.emit('pdfUploaded', data);\n                        this.redraw();\n                    });\n                }\n            }).catch(() => {\n                this.setUploadError('Upload failed.');\n            });\n        }\n        setUploadError(message) {\n            if (!this.refs.uploadError) {\n                return;\n            }\n            this.refs.uploadError.style.display = message ? '' : 'none';\n            this.refs.uploadError.innerHTML = message;\n        }\n        createForm(options) {\n            options.skipInit = false;\n            this.webform = new PDF(this.element, options);\n            this.webform.on('attach', () => {\n                if (this.refs.iframeDropzone && ![...this.refs.form.children].includes(this.refs.iframeDropzone)) {\n                    this.prependTo(this.refs.iframeDropzone, this.refs.form);\n                }\n            });\n            return this.webform;\n        }\n        setForm(form) {\n            return super.setForm(form).then(() => {\n                return this.ready.then(() => {\n                    if (this.webform) {\n                        this.webform.postMessage({\n                            name: 'form',\n                            data: form\n                        });\n                        return this.webform.setForm(form);\n                    }\n                    return form;\n                });\n            });\n        }\n        saveComponent(...args) {\n            return super.saveComponent(...args).then(() => this.afterAttach());\n        }\n        destroy() {\n            super.destroy();\n            this.webform.destroy();\n        }\n        initIframeEvents() {\n            if (!this.webform.iframeElement) {\n                return;\n            }\n            this.webform.off('iframe-elementUpdate');\n            this.webform.off('iframe-componentUpdate');\n            this.webform.off('iframe-componentClick');\n            this.webform.on('iframe-elementUpdate', schema => {\n                const component = this.webform.getComponentById(schema.id);\n                if (component && component.component) {\n                    component.component.overlay = {\n                        page: schema.page,\n                        left: schema.left,\n                        top: schema.top,\n                        height: schema.height,\n                        width: schema.width\n                    };\n                    this.editComponent(component.component, this.webform.iframeElement);\n                    this.emit('updateComponent', component);\n                }\n                return component;\n            });\n            this.webform.on('iframe-componentUpdate', schema => {\n                const component = this.webform.getComponentById(schema.id);\n                if (component && component.component) {\n                    component.component.overlay = {\n                        page: schema.overlay.page,\n                        left: schema.overlay.left,\n                        top: schema.overlay.top,\n                        height: schema.overlay.height,\n                        width: schema.overlay.width\n                    };\n                    this.emit('updateComponent', component);\n                    const localComponent = _.find(this.form.components, { id: schema.id });\n                    if (localComponent) {\n                        localComponent.overlay = _.clone(component.component.overlay);\n                    }\n                    this.emit('change', this.form);\n                }\n                return component;\n            });\n            this.webform.on('iframe-componentClick', schema => {\n                const component = this.webform.getComponentById(schema.id);\n                if (component) {\n                    this.editComponent(component.component, this.webform.iframeElement);\n                }\n            }, true);\n        }\n        initDropzoneEvents() {\n            if (!this.refs.iframeDropzone) {\n                return;\n            }\n            this.removeEventListener(this.refs.iframeDropzone, 'dragover');\n            this.removeEventListener(this.refs.iframeDropzone, 'drop');\n            this.addEventListener(this.refs.iframeDropzone, 'dragover', e => {\n                e.preventDefault();\n                return false;\n            });\n            this.addEventListener(this.refs.iframeDropzone, 'drop', this.onDropzoneDrop.bind(this));\n        }\n        prepSidebarComponentsForDrag() {\n            if (!this.refs['sidebar-container']) {\n                return;\n            }\n            this.refs['sidebar-container'].forEach(container => {\n                [...container.children].forEach(el => {\n                    el.draggable = true;\n                    el.setAttribute('draggable', true);\n                    this.removeEventListener(el, 'dragstart');\n                    this.removeEventListener(el, 'dragend');\n                    this.addEventListener(el, 'dragstart', this.onDragStart.bind(this), true);\n                    this.addEventListener(el, 'dragend', this.onDragEnd.bind(this), true);\n                });\n            });\n        }\n        updateDropzoneDimensions() {\n            if (!this.refs.iframeDropzone) {\n                return;\n            }\n            const iframeRect = a.getElementRect(this.webform.refs.iframeContainer);\n            this.refs.iframeDropzone.style.height = iframeRect && iframeRect.height ? `${ iframeRect.height }px` : '1000px';\n            this.refs.iframeDropzone.style.width = iframeRect && iframeRect.width ? `${ iframeRect.width }px` : '100%';\n        }\n        tryUpdateCustomComponentSchema(schema, key) {\n            const comp = _.get(this, `groups.custom.components[${ key }]`);\n            if (!comp) {\n                return false;\n            }\n            schema.key = comp.schema && comp.schema.key || schema.key;\n            schema.label = comp.schema && comp.schema.label || schema.label;\n            schema.keyForShow = schema.key;\n            schema.customField = true;\n            return true;\n        }\n        onDragStart(e) {\n            e.dataTransfer.setData('text/html', null);\n            this.updateDropzoneDimensions();\n            this.addClass(this.refs.iframeDropzone, 'enabled');\n        }\n        onDropzoneDrop(e) {\n            this.dropEvent = e;\n            e.preventDefault();\n            return false;\n        }\n        onDragEnd(e) {\n            const offsetX = this.dropEvent ? this.dropEvent.offsetX : null;\n            const offsetY = this.dropEvent ? this.dropEvent.offsetY : null;\n            this.removeClass(this.refs.iframeDropzone, 'enabled');\n            if (!this.dropEvent) {\n                return;\n            }\n            const element = e.target;\n            const type = element.getAttribute('data-type');\n            const group = element.getAttribute('data-group');\n            const key = element.getAttribute('data-key');\n            const schema = a.fastCloneDeep(this.schemas[type]);\n            if (!(group === 'custom' && key && this.tryUpdateCustomComponentSchema(schema, key))) {\n                schema.key = _.camelCase(schema.label || schema.placeholder || schema.type);\n            }\n            BuilderUtils.uniquify([this.webform.component], schema);\n            this.webform.component.components.push(schema);\n            this.emit('addComponent', schema);\n            schema.overlay = {\n                top: offsetY,\n                left: offsetX,\n                width: 100,\n                height: 20\n            };\n            this.webform.addComponent(schema, {}, null, true);\n            this.webform.postMessage({\n                name: 'addElement',\n                data: schema\n            });\n            this.dropEvent = null;\n        }\n    };\n});"]}