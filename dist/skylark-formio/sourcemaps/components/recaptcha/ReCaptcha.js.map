{"version":3,"sources":["components/recaptcha/ReCaptcha.js"],"names":["define","Component","Formio","_","NativePromise","_get","get","ReCaptchaComponent","[object Object]","extend","schema","type","key","label","builderInfo","title","group","icon","documentation","weight","this","builderMode","super","render","append","text","name","siteKey","root","form","recaptchaApiScriptUrl","recaptchaApiReady","requireLibrary","console","warn","actionName","recaptchaVerifiedPromise","resolve","reject","then","grecaptcha","ready","execute","action","token","sendVerificationRequest","verificationResult","setValue","catch","beforeSubmit","makeStaticRequest","projectUrl","value","changed","hasChanged","dataValue"],"mappings":";;;;;;;AAAAA,QACI,kCACA,eACA,iBACA,4BACD,SAAUC,EAAWC,EAAQC,EAAGC,GAC/B,aAEA,IAAIC,EAAOF,EAAEG,IAEb,aAAaC,UAA2BN,EACpCO,iBAAiBC,GACb,OAAOR,EAAUS,QACbC,KAAM,YACNC,IAAK,YACLC,MAAO,gBACLJ,GAEVK,yBACI,OACIC,MAAO,YACPC,MAAO,UACPC,KAAM,UACNC,cAAe,2CACfC,OAAQ,GACRT,OAAQH,EAAmBG,UAGnCF,SACI,OAAIY,KAAKC,YACEC,MAAMC,OAAO,aAEbD,MAAMC,OAAO,IAAI,GAGhCf,cACI,GAAIY,KAAKC,YACLD,KAAKI,OAAOJ,KAAKK,KAAKL,KAAKM,WACxB,CACH,MAAMC,EAAUtB,EAAKe,KAAKQ,KAAKC,KAAM,8BACrC,GAAIF,EAAS,CACT,MAAMG,oDAA2EH,IACjFP,KAAKW,kBAAoB7B,EAAO8B,eAAe,kBAAmB,aAAcF,GAAuB,QAEvGG,QAAQC,KAAK,4DAIzB1B,eAGAA,OAAO2B,GACH,MAAMR,EAAUtB,EAAKe,KAAKQ,KAAKC,KAAM,8BACrC,GAAKF,EAAL,CAIA,IAAKP,KAAKW,kBAAmB,CACzB,MAAMD,oDAA2EzB,EAAKe,KAAKQ,KAAKC,KAAM,gCACtGT,KAAKW,kBAAoB7B,EAAO8B,eAAe,kBAAmB,aAAcF,GAAuB,GAEvGV,KAAKW,oBACLX,KAAKgB,yBAA2B,IAAIhC,EAAc,CAACiC,EAASC,KACxDlB,KAAKW,kBAAkBQ,KAAK,KACxBC,WAAWC,MAAM,KACbD,WAAWE,QAAQf,GAAWgB,OAAQR,IAAcI,KAAKK,GAC9CxB,KAAKyB,wBAAwBD,IACrCL,KAAKO,IACJ1B,KAAK2B,SAASD,GACPT,EAAQS,SAGxBE,MAAM,IACEV,aAnBfL,QAAQC,KAAK,2DAwBrB1B,eACI,OAAIY,KAAKgB,yBACEhB,KAAKgB,yBAAyBG,KAAK,IAAMjB,MAAM2B,gBAEnD3B,MAAM2B,eAEjBzC,wBAAwBoC,GACpB,OAAO1C,EAAOgD,qBAAsBhD,EAAOiD,uCAAyCP,KAExFpC,SAAS4C,GACL,MAAMC,EAAUjC,KAAKkC,WAAWF,EAAOhC,KAAKmC,WAE5C,OADAnC,KAAKmC,UAAYH,EACVC,EAEX7C,WACI,OAAOY,KAAKmC","file":"../../../components/recaptcha/ReCaptcha.js","sourcesContent":["define([\n    '../_classes/component/Component',\n    '../../Formio',\n    'skylark-lodash',\n    '../../vendors/getify/npo'\n], function (Component, Formio, _, NativePromise) {\n    'use strict';\n\n    var _get = _.get;\n\n    return class ReCaptchaComponent extends Component {\n        static schema(...extend) {\n            return Component.schema({\n                type: 'recaptcha',\n                key: 'recaptcha',\n                label: 'reCAPTCHA'\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'reCAPTCHA',\n                group: 'premium',\n                icon: 'refresh',\n                documentation: 'http://help.form.io/userguide/#recaptcha',\n                weight: 40,\n                schema: ReCaptchaComponent.schema()\n            };\n        }\n        render() {\n            if (this.builderMode) {\n                return super.render('reCAPTCHA');\n            } else {\n                return super.render('', true);\n            }\n        }\n        createInput() {\n            if (this.builderMode) {\n                this.append(this.text(this.name));\n            } else {\n                const siteKey = _get(this.root.form, 'settings.recaptcha.siteKey');\n                if (siteKey) {\n                    const recaptchaApiScriptUrl = `https://www.google.com/recaptcha/api.js?render=${ siteKey }`;\n                    this.recaptchaApiReady = Formio.requireLibrary('googleRecaptcha', 'grecaptcha', recaptchaApiScriptUrl, true);\n                } else {\n                    console.warn('There is no Site Key specified in settings in form JSON');\n                }\n            }\n        }\n        createLabel() {\n            return;\n        }\n        verify(actionName) {\n            const siteKey = _get(this.root.form, 'settings.recaptcha.siteKey');\n            if (!siteKey) {\n                console.warn('There is no Site Key specified in settings in form JSON');\n                return;\n            }\n            if (!this.recaptchaApiReady) {\n                const recaptchaApiScriptUrl = `https://www.google.com/recaptcha/api.js?render=${ _get(this.root.form, 'settings.recaptcha.siteKey') }`;\n                this.recaptchaApiReady = Formio.requireLibrary('googleRecaptcha', 'grecaptcha', recaptchaApiScriptUrl, true);\n            }\n            if (this.recaptchaApiReady) {\n                this.recaptchaVerifiedPromise = new NativePromise((resolve, reject) => {\n                    this.recaptchaApiReady.then(() => {\n                        grecaptcha.ready(() => {\n                            grecaptcha.execute(siteKey, { action: actionName }).then(token => {\n                                return this.sendVerificationRequest(token);\n                            }).then(verificationResult => {\n                                this.setValue(verificationResult);\n                                return resolve(verificationResult);\n                            });\n                        });\n                    }).catch(() => {\n                        return reject();\n                    });\n                });\n            }\n        }\n        beforeSubmit() {\n            if (this.recaptchaVerifiedPromise) {\n                return this.recaptchaVerifiedPromise.then(() => super.beforeSubmit());\n            }\n            return super.beforeSubmit();\n        }\n        sendVerificationRequest(token) {\n            return Formio.makeStaticRequest(`${ Formio.projectUrl }/recaptcha?recaptchaToken=${ token }`);\n        }\n        setValue(value) {\n            const changed = this.hasChanged(value, this.dataValue);\n            this.dataValue = value;\n            return changed;\n        }\n        getValue() {\n            return this.dataValue;\n        }\n    };\n});"]}