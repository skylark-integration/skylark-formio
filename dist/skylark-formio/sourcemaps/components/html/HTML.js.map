{"version":3,"sources":["components/html/HTML.js"],"names":["define","Component","_","HTMLComponent","[object Object]","extend","schema","label","type","tag","attrs","content","input","persistent","builderInfo","title","group","icon","weight","documentation","defaultSchema","this","builderMode","component","submission","get","root","interpolate","metadata","data","rootValue","row","singleTags","changed","super","checkRefreshOn","refreshOnChange","element","conditionallyVisible","setContent","renderContent","renderTemplate","map","attr","value","render","loadRefs","html","attach"],"mappings":";;;;;;;AAAAA,QACI,kCACA,kBACD,SAAUC,EAAWC,GACpB,aACA,aAAaC,UAAsBF,EAC/BG,iBAAiBC,GACb,OAAOJ,EAAUK,QACbC,MAAO,OACPC,KAAM,cACNC,IAAK,IACLC,SACAC,QAAS,GACTC,OAAO,EACPC,YAAY,MACVR,GAEVS,yBACI,OACIC,MAAO,eACPC,MAAO,SACPC,KAAM,OACNC,OAAQ,EACRC,cAAe,wDACfb,OAAQH,EAAcG,UAG9Bc,oBACI,OAAOjB,EAAcG,SAEzBK,cACI,GAAIU,KAAKC,YACL,OAAOD,KAAKE,UAAUZ,QAE1B,MAAMa,EAAatB,EAAEuB,IAAIJ,KAAKK,KAAM,iBACpC,OAAOL,KAAKE,UAAUZ,QAAUU,KAAKM,YAAYN,KAAKE,UAAUZ,SAC5DiB,SAAUJ,EAAWI,aACrBJ,WAAYA,EACZK,KAAMR,KAAKS,UACXC,IAAKV,KAAKQ,OACT,GAETG,iBACI,OACI,KACA,MACA,MAGR5B,eAAe6B,GACXC,MAAMC,eAAeF,IAChBZ,KAAKC,aAAeD,KAAKE,UAAUa,iBAAmBf,KAAKgB,SAAWhB,KAAKiB,qBAAqBjB,KAAKQ,KAAMR,KAAKU,MACjHV,KAAKkB,WAAWlB,KAAKgB,QAAShB,KAAKmB,iBAG3CpC,gBACI,MAAMoB,EAAatB,EAAEuB,IAAIJ,KAAKK,KAAM,iBACpC,OAAOL,KAAKoB,eAAe,QACvBlB,UAAWF,KAAKE,UAChBd,IAAKY,KAAKE,UAAUd,IACpBC,OAAQW,KAAKE,UAAUb,WAAagC,IAAIC,KAEhCA,KAAMA,EAAKA,KACXC,MAAOvB,KAAKM,YAAYgB,EAAKC,OACzBhB,SAAUJ,EAAWI,aACrBJ,WAAYA,EACZK,KAAMR,KAAKS,UACXC,IAAKV,KAAKQ,UAItBlB,QAASU,KAAKV,QACdqB,WAAYX,KAAKW,aAGzB5B,SACI,OAAO8B,MAAMW,OAAOxB,KAAKmB,iBAE7BpC,OAAOiC,GAEH,OADAhB,KAAKyB,SAAST,GAAWU,KAAM,WACxBb,MAAMc,OAAOX","file":"../../../components/html/HTML.js","sourcesContent":["define([\n    '../_classes/component/Component',\n    'skylark-lodash'\n], function (Component, _) {\n    'use strict';\n    return class HTMLComponent extends Component {\n        static schema(...extend) {\n            return Component.schema({\n                label: 'HTML',\n                type: 'htmlelement',\n                tag: 'p',\n                attrs: [],\n                content: '',\n                input: false,\n                persistent: false\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'HTML Element',\n                group: 'layout',\n                icon: 'code',\n                weight: 0,\n                documentation: 'http://help.form.io/userguide/#html-element-component',\n                schema: HTMLComponent.schema()\n            };\n        }\n        get defaultSchema() {\n            return HTMLComponent.schema();\n        }\n        get content() {\n            if (this.builderMode) {\n                return this.component.content;\n            }\n            const submission = _.get(this.root, 'submission', {});\n            return this.component.content ? this.interpolate(this.component.content, {\n                metadata: submission.metadata || {},\n                submission: submission,\n                data: this.rootValue,\n                row: this.data\n            }) : '';\n        }\n        get singleTags() {\n            return [\n                'br',\n                'img',\n                'hr'\n            ];\n        }\n        checkRefreshOn(changed) {\n            super.checkRefreshOn(changed);\n            if (!this.builderMode && this.component.refreshOnChange && this.element && this.conditionallyVisible(this.data, this.row)) {\n                this.setContent(this.element, this.renderContent());\n            }\n        }\n        renderContent() {\n            const submission = _.get(this.root, 'submission', {});\n            return this.renderTemplate('html', {\n                component: this.component,\n                tag: this.component.tag,\n                attrs: (this.component.attrs || []).map(attr => {\n                    return {\n                        attr: attr.attr,\n                        value: this.interpolate(attr.value, {\n                            metadata: submission.metadata || {},\n                            submission: submission,\n                            data: this.rootValue,\n                            row: this.data\n                        })\n                    };\n                }),\n                content: this.content,\n                singleTags: this.singleTags\n            });\n        }\n        render() {\n            return super.render(this.renderContent());\n        }\n        attach(element) {\n            this.loadRefs(element, { html: 'single' });\n            return super.attach(element);\n        }\n    };\n});"]}