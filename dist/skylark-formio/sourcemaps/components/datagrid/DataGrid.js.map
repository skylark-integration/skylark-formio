{"version":3,"sources":["components/datagrid/DataGrid.js"],"names":["define","_","dragula","NestedArrayComponent","a","DataGridComponent","[object Object]","extend","schema","label","key","type","clearOnHide","input","tree","components","builderInfo","title","icon","group","documentation","weight","args","super","this","rows","createRows","visibleColumns","checkColumns","dataValue","Array","isArray","emptyValue","value","defaultSchema","addAnotherPosition","get","component","minLength","hasRowGroups","sum","getGroupSizes","defaultValue","dIndex","length","push","disabled","each","refs","datagridKey","button","allowReorder","options","readOnly","iteratableRows","map","row","index","data","groups","chunks","reduce","startIndex","acc","size","endIndex","range","slice","indexes","groupIndexes","last","concat","gidxs","idx","builderMode","n","hasRemoveButtons","canAddColumn","disableAddingRemovingRows","fullMode","hasAddButton","includes","columns","getColumns","render","renderTemplate","getRows","getGroups","hasToggle","hasHeader","hasExtraColumn","hasTopSubmit","hasBottomSubmit","hasGroups","numColumns","builder","placeholder","position","componentComponents","col","filter","comp","hasOwnProperty","hideLabel","element","loadRefs","forEach","dragInfo","moves","_draggedElement","_oldParent","clickedElement","classList","contains","on","onReorder","bind","addButton","addEventListener","addRow","removeButton","removeRow","getRowChunks","header","toggleGroup","rowLength","rowIndex","columnIndex","attachComponents","attach","_target","_source","sibling","console","warn","oldPosition","newPosition","movedBelow","fastCloneDeep","draggedRowData","splice","setValue","redraw","createRowComponents","checkConditions","removeComponent","init","added","rowValues","getRowValues","colIndex","clone","name","createComponent","parentDisabled","path","replace","RegExp","inDataGrid","dirty","rootValue","checkCondition","checkComponentValidity","checkRows","setCustomValidity","flags","show","rebuild","visibility","isEqual","checkComponentConditions","changed","hasChanged","setNestedValue","updateOnChange","forIn","fn","remainingPath","result","isString","everyComponent","getComponent","toggle"],"mappings":"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","file":"../../../components/datagrid/DataGrid.js","sourcesContent":["define([\n    'skylark-lodash',\n    'skylark-dragula',\n    '../_classes/nestedarray/NestedArrayComponent',\n    '../../utils/utils'\n], function (_, dragula, NestedArrayComponent, a) {\n    'use strict';\n    return class DataGridComponent extends NestedArrayComponent {\n        static schema(...extend) {\n            return NestedArrayComponent.schema({\n                label: 'Data Grid',\n                key: 'dataGrid',\n                type: 'datagrid',\n                clearOnHide: true,\n                input: true,\n                tree: true,\n                components: []\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Data Grid',\n                icon: 'th',\n                group: 'data',\n                documentation: 'http://help.form.io/userguide/#datagrid',\n                weight: 30,\n                schema: DataGridComponent.schema()\n            };\n        }\n        constructor(...args) {\n            super(...args);\n            this.type = 'datagrid';\n        }\n        init() {\n            this.components = this.components || [];\n            this.rows = [];\n            this.createRows(true);\n            this.visibleColumns = {};\n            this.checkColumns();\n        }\n        get dataValue() {\n            const dataValue = super.dataValue;\n            if (!dataValue || !Array.isArray(dataValue)) {\n                return this.emptyValue;\n            }\n            return dataValue;\n        }\n        set dataValue(value) {\n            super.dataValue = value;\n        }\n        get defaultSchema() {\n            return DataGridComponent.schema();\n        }\n        get emptyValue() {\n            return [{}];\n        }\n        get addAnotherPosition() {\n            return _.get(this.component, 'addAnotherPosition', 'bottom');\n        }\n        get minLength() {\n            if (this.hasRowGroups()) {\n                return _.sum(this.getGroupSizes());\n            } else {\n                return _.get(this.component, 'validate.minLength', 0);\n            }\n        }\n        get defaultValue() {\n            const value = super.defaultValue;\n            let defaultValue;\n            if (Array.isArray(value)) {\n                defaultValue = value;\n            } else if (value && typeof value === 'object') {\n                defaultValue = [value];\n            } else {\n                defaultValue = this.emptyValue;\n            }\n            for (let dIndex = defaultValue.length; dIndex < this.minLength; dIndex++) {\n                defaultValue.push({});\n            }\n            return defaultValue;\n        }\n        set disabled(disabled) {\n            super.disabled = disabled;\n            _.each(this.refs[`${ this.datagridKey }-addRow`], button => {\n                button.disabled = disabled;\n            });\n            _.each(this.refs[`${ this.datagridKey }-removeRow`], button => {\n                button.disabled = disabled;\n            });\n        }\n        get disabled() {\n            return super.disabled;\n        }\n        get datagridKey() {\n            return `datagrid-${ this.key }`;\n        }\n        get allowReorder() {\n            return !this.options.readOnly && _.get(this.component, 'reorder', false);\n        }\n        get iteratableRows() {\n            return this.rows.map((row, index) => ({\n                components: row,\n                data: this.dataValue[index]\n            }));\n        }\n        getRowChunks(groups, rows) {\n            const [, chunks] = groups.reduce(([startIndex, acc], size) => {\n                const endIndex = startIndex + size;\n                return [\n                    endIndex,\n                    [\n                        ...acc,\n                        [\n                            startIndex,\n                            endIndex\n                        ]\n                    ]\n                ];\n            }, [\n                0,\n                []\n            ]);\n            return chunks.map(range => _.slice(rows, ...range));\n        }\n        getGroups() {\n            const groups = _.get(this.component, 'rowGroups', []);\n            const sizes = _.map(groups, 'numberOfRows').slice(0, -1);\n            const indexes = sizes.reduce((groupIndexes, size) => {\n                const last = groupIndexes[groupIndexes.length - 1];\n                return groupIndexes.concat(last + size);\n            }, [0]);\n            return groups.reduce((gidxs, group, idx) => {\n                return {\n                    ...gidxs,\n                    [indexes[idx]]: group\n                };\n            }, {});\n        }\n        getGroupSizes() {\n            return _.map(_.get(this.component, 'rowGroups', []), 'numberOfRows');\n        }\n        hasRowGroups() {\n            return _.get(this, 'component.enableRowGroups', false) && !this.builderMode;\n        }\n        totalRowsNumber(groups) {\n            return _.sum(_.map(groups, 'numberOfRows'));\n        }\n        setStaticValue(n) {\n            this.dataValue = _.range(n).map(() => ({}));\n        }\n        hasExtraColumn() {\n            return this.hasRemoveButtons() || this.canAddColumn;\n        }\n        hasRemoveButtons() {\n            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && this.dataValue.length > _.get(this.component, 'validate.minLength', 0);\n        }\n        hasTopSubmit() {\n            return this.hasAddButton() && [\n                'top',\n                'both'\n            ].includes(this.addAnotherPosition);\n        }\n        hasBottomSubmit() {\n            return this.hasAddButton() && [\n                'bottom',\n                'both'\n            ].includes(this.addAnotherPosition);\n        }\n        get canAddColumn() {\n            return this.builderMode;\n        }\n        render() {\n            const columns = this.getColumns();\n            return super.render(this.renderTemplate('datagrid', {\n                rows: this.getRows(),\n                columns: columns,\n                groups: this.hasRowGroups() ? this.getGroups() : [],\n                visibleColumns: this.visibleColumns,\n                hasToggle: _.get(this, 'component.groupToggle', false),\n                hasHeader: this.hasHeader(),\n                hasExtraColumn: this.hasExtraColumn(),\n                hasAddButton: this.hasAddButton(),\n                hasRemoveButtons: this.hasRemoveButtons(),\n                hasTopSubmit: this.hasTopSubmit(),\n                hasBottomSubmit: this.hasBottomSubmit(),\n                hasGroups: this.hasRowGroups(),\n                numColumns: columns.length + (this.hasExtraColumn() ? 1 : 0),\n                datagridKey: this.datagridKey,\n                allowReorder: this.allowReorder,\n                builder: this.builderMode,\n                canAddColumn: this.canAddColumn,\n                placeholder: this.renderTemplate('builderPlaceholder', { position: this.componentComponents.length })\n            }));\n        }\n        getRows() {\n            return this.rows.map(row => {\n                const components = {};\n                _.each(row, (col, key) => {\n                    components[key] = col.render();\n                });\n                return components;\n            });\n        }\n        getColumns() {\n            return this.component.components.filter(comp => {\n                return !this.visibleColumns.hasOwnProperty(comp.key) || this.visibleColumns[comp.key];\n            });\n        }\n        hasHeader() {\n            return this.component.components.reduce((hasHeader, col) => {\n                return hasHeader || (col.label || col.title) && !col.hideLabel;\n            }, false);\n        }\n        attach(element) {\n            this.loadRefs(element, {\n                [`${ this.datagridKey }-row`]: 'multiple',\n                [`${ this.datagridKey }-tbody`]: 'single',\n                [`${ this.datagridKey }-addRow`]: 'multiple',\n                [`${ this.datagridKey }-removeRow`]: 'multiple',\n                [`${ this.datagridKey }-group-header`]: 'multiple',\n                [this.datagridKey]: 'multiple'\n            });\n            if (this.allowReorder) {\n                this.refs[`${ this.datagridKey }-row`].forEach((row, index) => {\n                    row.dragInfo = { index };\n                });\n                this.dragula = dragula([this.refs[`${ this.datagridKey }-tbody`]], { moves: (_draggedElement, _oldParent, clickedElement) => clickedElement.classList.contains('formio-drag-button') }).on('drop', this.onReorder.bind(this));\n            }\n            this.refs[`${ this.datagridKey }-addRow`].forEach(addButton => {\n                this.addEventListener(addButton, 'click', this.addRow.bind(this));\n            });\n            this.refs[`${ this.datagridKey }-removeRow`].forEach((removeButton, index) => {\n                this.addEventListener(removeButton, 'click', this.removeRow.bind(this, index));\n            });\n            if (this.hasRowGroups()) {\n                this.refs.chunks = this.getRowChunks(this.getGroupSizes(), this.refs[`${ this.datagridKey }-row`]);\n                this.refs[`${ this.datagridKey }-group-header`].forEach((header, index) => {\n                    this.addEventListener(header, 'click', () => this.toggleGroup(header, index));\n                });\n            }\n            const columns = this.getColumns();\n            const rowLength = columns.length;\n            this.rows.forEach((row, rowIndex) => {\n                let columnIndex = 0;\n                columns.forEach(col => {\n                    this.attachComponents(this.refs[this.datagridKey][rowIndex * rowLength + columnIndex], [this.rows[rowIndex][col.key]], this.component.components);\n                    columnIndex++;\n                });\n            });\n            return super.attach(element);\n        }\n        onReorder(element, _target, _source, sibling) {\n            if (!element.dragInfo || sibling && !sibling.dragInfo) {\n                console.warn('There is no Drag Info available for either dragged or sibling element');\n                return;\n            }\n            const oldPosition = element.dragInfo.index;\n            const newPosition = sibling ? sibling.dragInfo.index : this.dataValue.length;\n            const movedBelow = newPosition > oldPosition;\n            const dataValue = a.fastCloneDeep(this.dataValue);\n            const draggedRowData = dataValue[oldPosition];\n            dataValue.splice(newPosition, 0, draggedRowData);\n            dataValue.splice(movedBelow ? oldPosition : oldPosition + 1, 1);\n            this.setValue(dataValue);\n            this.redraw();\n        }\n        addRow() {\n            const index = this.rows.length;\n            if (this.dataValue.length === index) {\n                this.dataValue.push({});\n            }\n            this.rows[index] = this.createRowComponents(this.dataValue[index], index);\n            this.checkConditions();\n            this.redraw();\n        }\n        removeRow(index) {\n            this.splice(index);\n            const [row] = this.rows.splice(index, 1);\n            _.each(row, component => this.removeComponent(component));\n            this.redraw();\n        }\n        getRowValues() {\n            return this.dataValue;\n        }\n        createRows(init) {\n            let added = false;\n            const rowValues = this.getRowValues();\n            rowValues.forEach((row, index) => {\n                if (this.rows[index]) {\n                    _.each(this.rows[index], component => component.data = row);\n                } else {\n                    this.rows[index] = this.createRowComponents(row, index);\n                    added = true;\n                }\n            });\n            this.rows.splice(rowValues.length);\n            if (!init && added) {\n                this.redraw();\n            }\n            return added;\n        }\n        createRowComponents(row, rowIndex) {\n            const components = {};\n            this.component.components.map((col, colIndex) => {\n                const options = _.clone(this.options);\n                options.name += `[${ rowIndex }]`;\n                options.row = `${ rowIndex }-${ colIndex }`;\n                const component = this.createComponent(col, options, row);\n                component.parentDisabled = !!this.disabled;\n                if (component.path && col.key) {\n                    component.path = component.path.replace(new RegExp(`\\\\.${ col.key }$`), `[${ rowIndex }].${ col.key }`);\n                }\n                component.rowIndex = rowIndex;\n                component.inDataGrid = true;\n                components[col.key] = component;\n            });\n            return components;\n        }\n        checkValidity(data, dirty, row) {\n            data = data || this.rootValue;\n            row = row || this.data;\n            if (!this.checkCondition(row, data)) {\n                this.setCustomValidity('');\n                return true;\n            }\n            if (!this.checkComponentValidity(data, dirty, row)) {\n                return false;\n            }\n            return this.checkRows('checkValidity', data, dirty, true);\n        }\n        checkColumns(data, flags = {}) {\n            data = data || this.rootValue;\n            let show = false;\n            if (!this.rows || !this.rows.length) {\n                return {\n                    rebuild: false,\n                    show: false\n                };\n            }\n            if (this.builderMode) {\n                return {\n                    rebuild: false,\n                    show: true\n                };\n            }\n            const visibility = {};\n            const dataValue = this.dataValue;\n            this.rows.forEach((row, rowIndex) => {\n                _.each(row, (col, key) => {\n                    if (col && typeof col.checkConditions === 'function') {\n                        visibility[key] = !!visibility[key] || col.checkConditions(data, flags, dataValue[rowIndex]) && col.type !== 'hidden';\n                    }\n                });\n            });\n            const rebuild = !_.isEqual(visibility, this.visibleColumns);\n            _.each(visibility, col => {\n                show |= col;\n            });\n            this.visibleColumns = visibility;\n            return {\n                rebuild,\n                show\n            };\n        }\n        checkComponentConditions(data, flags, row) {\n            if (!super.checkComponentConditions(data, flags, row)) {\n                return false;\n            }\n            const {rebuild, show} = this.checkColumns(data, flags);\n            if (rebuild) {\n                this.redraw();\n            }\n            return show;\n        }\n        setValue(value, flags = {}) {\n            if (!value) {\n                this.dataValue = this.defaultValue;\n                this.createRows();\n                return false;\n            }\n            if (!Array.isArray(value)) {\n                if (typeof value === 'object') {\n                    value = [value];\n                } else {\n                    this.createRows();\n                    value = [{}];\n                }\n            }\n            if (value && !value.length) {\n                value.push({});\n            }\n            const changed = this.hasChanged(value, this.dataValue);\n            this.dataValue = value;\n            this.createRows();\n            this.rows.forEach((row, rowIndex) => {\n                if (value.length <= rowIndex) {\n                    return;\n                }\n                _.each(row, col => {\n                    col.rowIndex = rowIndex;\n                    this.setNestedValue(col, value[rowIndex], flags);\n                });\n            });\n            this.updateOnChange(flags, changed);\n            return changed;\n        }\n        restoreComponentsContext() {\n            this.rows.forEach((row, index) => _.forIn(row, component => component.data = this.dataValue[index]));\n        }\n        getComponent(path, fn) {\n            path = Array.isArray(path) ? path : [path];\n            const [key, ...remainingPath] = path;\n            let result = [];\n            if (!_.isString(key)) {\n                return result;\n            }\n            this.everyComponent((component, components) => {\n                if (component.component.key === key) {\n                    let comp = component;\n                    if (remainingPath.length > 0 && 'getComponent' in component) {\n                        comp = component.getComponent(remainingPath, fn);\n                    } else if (fn) {\n                        fn(component, components);\n                    }\n                    result = result.concat(comp);\n                }\n            });\n            return result.length > 0 ? result : null;\n        }\n        toggleGroup(element, index) {\n            element.classList.toggle('collapsed');\n            _.each(this.refs.chunks[index], row => {\n                row.classList.toggle('hidden');\n            });\n        }\n    };\n});"]}