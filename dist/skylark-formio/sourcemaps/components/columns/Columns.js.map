{"version":3,"sources":["components/columns/Columns.js"],"names":["define","_","NestedComponent","ColumnsComponent","[object Object]","extend","schema","label","key","type","columns","components","width","offset","push","pull","size","clearOnHide","input","tableView","persistent","autoAdjust","hideOnChildrenHidden","builderInfo","title","icon","group","documentation","weight","component","options","data","super","this","rows","omit","map","column","colIndex","comp","compIndex","clonedComp","clone","internal","createComponent","defaultSchema","className","columnKey","id","init","each","index","Array","isArray","groupByRow","render","renderTemplate","columnComponents","renderComponents","element","loadRefs","superAttach","attach","refs","forEach","attachComponents","gridSize","visible","filter","nbColumns","length","nbVisible","w","Math","floor","totalWidth","span","last","col","setAttribute","x","result","reduce","acc","next","stack","sumBy","concat","justifyRow","bind","flags","row","checkComponentConditions","justify","all","detach","destroy"],"mappings":"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","file":"../../../components/columns/Columns.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../_classes/nested/NestedComponent'\n], function (_, NestedComponent) {\n    'use strict';\n    return class ColumnsComponent extends NestedComponent {\n        static schema(...extend) {\n            return NestedComponent.schema({\n                label: 'Columns',\n                key: 'columns',\n                type: 'columns',\n                columns: [\n                    {\n                        components: [],\n                        width: 6,\n                        offset: 0,\n                        push: 0,\n                        pull: 0,\n                        size: 'md'\n                    },\n                    {\n                        components: [],\n                        width: 6,\n                        offset: 0,\n                        push: 0,\n                        pull: 0,\n                        size: 'md'\n                    }\n                ],\n                clearOnHide: false,\n                input: false,\n                tableView: false,\n                persistent: false,\n                autoAdjust: false,\n                hideOnChildrenHidden: false\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Columns',\n                icon: 'columns',\n                group: 'layout',\n                documentation: 'http://help.form.io/userguide/#columns',\n                weight: 10,\n                schema: ColumnsComponent.schema()\n            };\n        }\n        constructor(component, options, data) {\n            super(component, options, data);\n            this.rows = [];\n        }\n        get schema() {\n            const schema = _.omit(super.schema, ['components']);\n            schema.columns.map((column, colIndex) => {\n                column.components.map((comp, compIndex) => {\n                    const clonedComp = _.clone(comp);\n                    clonedComp.internal = true;\n                    const component = this.createComponent(clonedComp);\n                    delete component.component.internal;\n                    schema.columns[colIndex].components[compIndex] = component.schema;\n                });\n            });\n            return schema;\n        }\n        get defaultSchema() {\n            return ColumnsComponent.schema();\n        }\n        get className() {\n            return `row ${ super.className }`;\n        }\n        get columnKey() {\n            return `column-${ this.id }`;\n        }\n        init() {\n            super.init();\n            this.columns = [];\n            _.each(this.component.columns, (column, index) => {\n                this.columns[index] = [];\n                if (!column.size) {\n                    column.size = 'md';\n                }\n                if (!Array.isArray(column.components)) {\n                    column.components = [];\n                }\n                _.each(column.components, comp => {\n                    comp.hideOnChildrenHidden = this.component.hideOnChildrenHidden;\n                    const component = this.createComponent(comp);\n                    component.column = index;\n                    this.columns[index].push(component);\n                });\n            });\n            this.rows = this.groupByRow();\n        }\n        labelIsHidden() {\n            return true;\n        }\n        render() {\n            return super.render(this.renderTemplate('columns', {\n                columnKey: this.columnKey,\n                columnComponents: this.columns.map(column => this.renderComponents(column))\n            }));\n        }\n        attach(element) {\n            this.loadRefs(element, { [this.columnKey]: 'multiple' });\n            const superAttach = super.attach(element);\n            this.refs[this.columnKey].forEach((column, index) => this.attachComponents(column, this.columns[index], this.component.columns[index].components));\n            return superAttach;\n        }\n        get gridSize() {\n            return 12;\n        }\n        justifyRow(columns) {\n            const visible = _.filter(columns, 'visible');\n            const nbColumns = columns.length;\n            const nbVisible = visible.length;\n            if (nbColumns > 0 && nbVisible > 0) {\n                const w = Math.floor(this.gridSize / nbVisible);\n                const totalWidth = w * nbVisible;\n                const span = this.gridSize - totalWidth;\n                _.each(visible, column => {\n                    column.component.width = w;\n                });\n                _.last(visible).component.width += span;\n                _.each(visible, col => {\n                    if (col.element) {\n                        col.element.setAttribute('class', col.className);\n                    }\n                });\n            }\n        }\n        groupByRow() {\n            const initVal = {\n                stack: [],\n                rows: []\n            };\n            const width = x => x.component.width;\n            const result = _.reduce(this.components, (acc, next) => {\n                const stack = [\n                    ...acc.stack,\n                    next\n                ];\n                if (_.sumBy(stack, width) <= this.gridSize) {\n                    acc.stack = stack;\n                    return acc;\n                } else {\n                    acc.rows = [\n                        ...acc.rows,\n                        acc.stack\n                    ];\n                    acc.stack = [next];\n                    return acc;\n                }\n            }, initVal);\n            return _.concat(result.rows, [result.stack]);\n        }\n        justify() {\n            _.each(this.columns, this.justifyRow.bind(this));\n        }\n        checkComponentConditions(data, flags, row) {\n            if (this.component.autoAdjust) {\n                const result = super.checkComponentConditions(data, flags, row);\n                this.justify();\n                return result;\n            } else {\n                return super.checkComponentConditions(data, flags, row);\n            }\n        }\n        detach(all) {\n            super.detach(all);\n        }\n        destroy() {\n            super.destroy();\n            this.columns = [];\n        }\n    };\n});"]}