{"version":3,"sources":["components/editgrid/EditGrid.js"],"names":["define","_","NestedArrayComponent","Component","a","templates","equal","isEqual","EditRowState","New","Editing","Saved","Removed","EditGridComponent","[object Object]","extend","schema","type","label","key","clearOnHide","input","tree","removeRow","defaultOpen","openWhenEmpty","components","inlineEdit","header","defaultHeaderTemplate","row","defaultRowTemplate","footer","builderInfo","title","icon","group","documentation","weight","defaultSchema","emptyValue","editgridKey","this","rowRef","rowElements","refs","addRowRef","addRowElements","saveRowRef","saveRowElements","cancelRowRef","cancelRowElements","inlineEditMode","component","saveEditMode","minLength","get","data","_data","value","dataValue","editRows","forEach","index","rowData","iteratableRows","args","super","disableAddingRemovingRows","options","readOnly","disabled","fullMode","length","builderMode","init","dataObj","createRowComponents","state","backup","error","push","map","rowIndex","checkData","editRow","includes","children","render","headerTemplate","Evaluator","noeval","renderTemplate","ref","addRow","saveRow","cancelRow","renderString","rows","renderRow","bind","openRows","isOpen","errors","hasAddButton","hasRemoveButtons","element","attach","loadRefs","addButton","addEventListener","openRowCount","attachComponents","className","event","action","elements","getElementsByClassName","Array","prototype","call","addClass","removeClass","show","visible","removeAllRows","renderComponents","flattenedComponents","flattenComponents","rowTemplate","getView","instance","view","widget","isArray","getValueAsString","fn","getComponents","each","everyComponent","result","flattenAs","isNumber","reduce","concat","destroyComponents","slice","comp","destroy","triggerChange","emit","checkRow","modal","addRowModal","redraw","modalContent","ce","innerHTML","dialog","createModal","undefined","dialogContents","appendChild","class","onClick","validateRow","close","dataSnapshot","fastCloneDeep","restoreRowContext","setPristine","setCustomValidity","clearErrors","splice","checkValidity","newIndex","updateValue","colIndex","updateComponentsRowIndex","updateRowsComponents","col","column","clone","name","onChange","flags","changed","modified","triggerRootChange","createComponent","assign","path","replace","RegExp","dirty","valid","validate","evaluate","toString","rootValue","checkCondition","checkComponentValidity","rowsValid","rowsEditing","rowValid","message","invalid","invalidMessage","defaultValue","times","hasChanged","updateOnChange","setNestedValue"],"mappings":"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","file":"../../../components/editgrid/EditGrid.js","sourcesContent":["define([\n    'skylark-lodash',\n//    'fast-deep-equal',\n    '../_classes/nestedarray/NestedArrayComponent',\n    '../_classes/component/Component',\n    '../../utils/utils',\n    './templates/index'\n], function (_,  NestedArrayComponent, Component, a, templates) {\n    'use strict';\n\n    var equal = _.isEqual;\n    \n    const EditRowState = {\n        New: 'new',\n        Editing: 'editing',\n        Saved: 'saved',\n        Removed: 'removed'\n    };\n    return class EditGridComponent extends NestedArrayComponent {\n        static schema(...extend) {\n            return NestedArrayComponent.schema({\n                type: 'editgrid',\n                label: 'Edit Grid',\n                key: 'editGrid',\n                clearOnHide: true,\n                input: true,\n                tree: true,\n                removeRow: 'Cancel',\n                defaultOpen: false,\n                openWhenEmpty: false,\n                components: [],\n                inlineEdit: false,\n                templates: {\n                    header: EditGridComponent.defaultHeaderTemplate,\n                    row: EditGridComponent.defaultRowTemplate,\n                    footer: ''\n                }\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Edit Grid',\n                icon: 'tasks',\n                group: 'data',\n                documentation: 'http://help.form.io/userguide/#editgrid',\n                weight: 30,\n                schema: EditGridComponent.schema()\n            };\n        }\n        static get defaultHeaderTemplate() {\n            return `<div class=\"row\">\n  {% util.eachComponent(components, function(component) { %}\n    <div class=\"col-sm-2\">{{ component.label }}</div>\n  {% }) %}\n</div>`;\n        }\n        static get defaultRowTemplate() {\n            return `<div class=\"row\">\n  {% util.eachComponent(components, function(component) { %}\n    <div class=\"col-sm-2\">\n      {{ getView(component, row[component.key]) }}\n    </div>\n  {% }) %}\n  {% if (!instance.options.readOnly && !instance.originalComponent.disabled) { %}\n    <div class=\"col-sm-2\">\n      <div class=\"btn-group pull-right\">\n        <button class=\"btn btn-default btn-light btn-sm editRow\"><i class=\"{{ iconClass('edit') }}\"></i></button>\n        {% if (!instance.hasRemoveButtons || instance.hasRemoveButtons()) { %}\n          <button class=\"btn btn-danger btn-sm removeRow\"><i class=\"{{ iconClass('trash') }}\"></i></button>\n        {% } %}\n      </div>\n    </div>\n  {% } %}\n</div>`;\n        }\n        get defaultSchema() {\n            return EditGridComponent.schema();\n        }\n        get emptyValue() {\n            return [];\n        }\n        get editgridKey() {\n            return `editgrid-${ this.key }`;\n        }\n        get rowRef() {\n            return `${ this.editgridKey }-row`;\n        }\n        get rowElements() {\n            return this.refs[this.rowRef];\n        }\n        get addRowRef() {\n            return `${ this.editgridKey }-addRow`;\n        }\n        get addRowElements() {\n            return this.refs[this.addRowRef];\n        }\n        get saveRowRef() {\n            return `${ this.editgridKey }-saveRow`;\n        }\n        get saveRowElements() {\n            return this.refs[this.saveRowRef];\n        }\n        get cancelRowRef() {\n            return `${ this.editgridKey }-cancelRow`;\n        }\n        get cancelRowElements() {\n            return this.refs[this.cancelRowRef];\n        }\n        get inlineEditMode() {\n            return this.component.inlineEdit;\n        }\n        get saveEditMode() {\n            return !this.inlineEditMode;\n        }\n        get minLength() {\n            return _.get(this.component, 'validate.minLength', 0);\n        }\n        get data() {\n            return this._data;\n        }\n        set data(value) {\n            this._data = value;\n            const data = this.dataValue;\n            (this.editRows || []).forEach((row, index) => {\n                const rowData = data[index];\n                row.data = rowData;\n                row.components.forEach(component => {\n                    component.data = rowData;\n                });\n            });\n        }\n        get iteratableRows() {\n            return this.editRows;\n        }\n        constructor(...args) {\n            super(...args);\n            this.type = 'editgrid';\n        }\n        hasRemoveButtons() {\n            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && this.dataValue.length > _.get(this.component, 'validate.minLength', 0);\n        }\n        init() {\n            if (this.builderMode) {\n                this.editRows = [];\n                return super.init();\n            }\n            this.components = this.components || [];\n            const dataValue = this.dataValue || [];\n            const openWhenEmpty = !dataValue.length && this.component.openWhenEmpty;\n            if (openWhenEmpty) {\n                const dataObj = {};\n                this.editRows = [{\n                        components: this.createRowComponents(dataObj, 0),\n                        data: dataObj,\n                        state: EditRowState.New,\n                        backup: null,\n                        error: null\n                    }];\n                if (this.inlineEditMode) {\n                    this.dataValue.push(dataObj);\n                }\n            } else {\n                this.editRows = dataValue.map((row, rowIndex) => ({\n                    components: this.createRowComponents(row, rowIndex),\n                    data: row,\n                    state: EditRowState.Saved,\n                    backup: null,\n                    error: null\n                }));\n            }\n            this.checkData();\n        }\n        isOpen(editRow) {\n            return [\n                EditRowState.New,\n                EditRowState.Editing\n            ].includes(editRow.state);\n        }\n        render(children) {\n            if (this.builderMode) {\n                return super.render();\n            }\n            const dataValue = this.dataValue || [];\n            const headerTemplate = a.Evaluator.noeval ? templates.header : _.get(this.component, 'templates.header');\n            return super.render(children || this.renderTemplate('editgrid', {\n                ref: {\n                    row: this.rowRef,\n                    addRow: this.addRowRef,\n                    saveRow: this.saveRowRef,\n                    cancelRow: this.cancelRowRef\n                },\n                header: this.renderString(headerTemplate, {\n                    components: this.component.components,\n                    value: dataValue\n                }),\n                footer: this.renderString(_.get(this.component, 'templates.footer'), {\n                    components: this.component.components,\n                    value: dataValue\n                }),\n                rows: this.editRows.map(this.renderRow.bind(this)),\n                openRows: this.editRows.map(row => this.isOpen(row)),\n                errors: this.editRows.map(row => row.error),\n                hasAddButton: this.hasAddButton(),\n                hasRemoveButtons: this.hasRemoveButtons()\n            }));\n        }\n        attach(element) {\n            if (this.builderMode) {\n                return super.attach(element);\n            }\n            this.loadRefs(element, {\n                [this.addRowRef]: 'multiple',\n                [this.saveRowRef]: 'multiple',\n                [this.cancelRowRef]: 'multiple',\n                [this.rowRef]: 'multiple'\n            });\n            this.addRowElements.forEach(addButton => {\n                this.addEventListener(addButton, 'click', () => this.addRow());\n            });\n            let openRowCount = 0;\n            this.rowElements.forEach((row, rowIndex) => {\n                const editRow = this.editRows[rowIndex];\n                if (this.isOpen(editRow)) {\n                    this.attachComponents(row, editRow.components);\n                    this.addEventListener(this.saveRowElements[openRowCount], 'click', () => this.saveRow(rowIndex));\n                    this.addEventListener(this.cancelRowElements[openRowCount], 'click', () => this.cancelRow(rowIndex));\n                    openRowCount++;\n                } else {\n                    [\n                        {\n                            className: 'removeRow',\n                            event: 'click',\n                            action: () => this.removeRow(rowIndex)\n                        },\n                        {\n                            className: 'editRow',\n                            event: 'click',\n                            action: () => this.editRow(rowIndex)\n                        }\n                    ].forEach(({className, event, action}) => {\n                        const elements = row.getElementsByClassName(className);\n                        Array.prototype.forEach.call(elements, element => {\n                            this.addEventListener(element, event, action);\n                        });\n                    });\n                }\n            });\n            if (openRowCount) {\n                this.addClass(this.refs.component, `formio-component-${ this.component.type }-row-open`);\n            } else {\n                this.removeClass(this.refs.component, `formio-component-${ this.component.type }-row-open`);\n            }\n            return super.attach(element);\n        }\n        clearOnHide(show) {\n            super.clearOnHide(show);\n            if (this.component.clearOnHide && !this.visible) {\n                if (!this.editRows) {\n                    return;\n                }\n                this.removeAllRows();\n            }\n        }\n        renderRow(row, rowIndex) {\n            const dataValue = this.dataValue || [];\n            if (this.isOpen(row)) {\n                return this.renderComponents(row.components);\n            } else {\n                const flattenedComponents = this.flattenComponents(rowIndex);\n                const rowTemplate = a.Evaluator.noeval ? templates.row : _.get(this.component, 'templates.row', EditGridComponent.defaultRowTemplate);\n                return this.renderString(rowTemplate, {\n                    row: dataValue[rowIndex] || {},\n                    data: this.data,\n                    rowIndex,\n                    components: this.component.components,\n                    flattenedComponents,\n                    getView: (component, data) => {\n                        const instance = flattenedComponents[component.key];\n                        let view = instance ? instance.getView(data) : '';\n                        if (instance && instance.widget && view !== '--- PROTECTED ---') {\n                            if (_.isArray(view)) {\n                                view = view.map(value => instance.widget.getValueAsString(value));\n                            } else {\n                                view = instance.widget.getValueAsString(view);\n                            }\n                        }\n                        return view;\n                    }\n                });\n            }\n        }\n        everyComponent(fn, rowIndex) {\n            const components = this.getComponents(rowIndex);\n            _.each(components, (component, index) => {\n                if (fn(component, components, index) === false) {\n                    return false;\n                }\n                if (typeof component.everyComponent === 'function') {\n                    if (component.everyComponent(fn) === false) {\n                        return false;\n                    }\n                }\n            });\n        }\n        flattenComponents(rowIndex) {\n            const result = {};\n            this.everyComponent(component => {\n                result[component.component.flattenAs || component.key] = component;\n            }, rowIndex);\n            return result;\n        }\n        getComponents(rowIndex) {\n            this.editRows = this.editRows || [];\n            return this.builderMode ? super.getComponents() : _.isNumber(rowIndex) ? this.editRows[rowIndex].components || [] : this.editRows.reduce((result, row) => result.concat(row.components || []), []);\n        }\n        destroyComponents(rowIndex) {\n            if (this.builderMode) {\n                return super.destroyComponents();\n            }\n            const components = this.getComponents(rowIndex).slice();\n            components.forEach(comp => comp.destroy());\n        }\n        addRow() {\n            if (this.options.readOnly) {\n                return;\n            }\n            const dataObj = {};\n            const rowIndex = this.editRows.length;\n            const editRow = {\n                components: this.createRowComponents(dataObj, rowIndex),\n                data: dataObj,\n                state: EditRowState.New,\n                backup: null,\n                error: null\n            };\n            this.editRows.push(editRow);\n            if (this.inlineEditMode) {\n                this.dataValue.push(dataObj);\n                this.triggerChange();\n            }\n            this.emit('editGridAddRow', {\n                component: this.component,\n                row: editRow\n            });\n            this.checkRow('checkData', null, {}, editRow.data, editRow.components);\n            if (this.component.modal) {\n                this.addRowModal(rowIndex);\n            } else {\n                this.redraw();\n            }\n            return editRow;\n        }\n        addRowModal(rowIndex) {\n            const modalContent = this.ce('div');\n            const editRow = this.editRows[rowIndex];\n            const {components} = editRow;\n            modalContent.innerHTML = this.renderComponents(components);\n            const dialog = this.component.modal ? this.createModal(modalContent) : undefined;\n            dialog.refs.dialogContents.appendChild(this.ce('button', {\n                class: 'btn btn-primary',\n                onClick: () => {\n                    if (this.validateRow(editRow, true)) {\n                        dialog.close();\n                        this.saveRow(rowIndex);\n                    }\n                }\n            }, this.component.saveRow || 'Save'));\n            this.attachComponents(modalContent, components);\n        }\n        editRow(rowIndex) {\n            const editRow = this.editRows[rowIndex];\n            editRow.state = EditRowState.Editing;\n            const dataSnapshot = a.fastCloneDeep(editRow.data);\n            if (this.inlineEditMode) {\n                editRow.backup = dataSnapshot;\n            } else {\n                editRow.backup = editRow.data;\n                editRow.data = dataSnapshot;\n                this.restoreRowContext(editRow);\n            }\n            if (this.component.modal) {\n                this.addRowModal(rowIndex);\n            } else {\n                this.redraw();\n            }\n        }\n        clearErrors(rowIndex) {\n            const editRow = this.editRows[rowIndex];\n            if (editRow && Array.isArray(editRow.components)) {\n                editRow.components.forEach(comp => {\n                    comp.setPristine(true);\n                    comp.setCustomValidity('');\n                });\n            }\n        }\n        cancelRow(rowIndex) {\n            if (this.options.readOnly) {\n                return;\n            }\n            const editRow = this.editRows[rowIndex];\n            switch (editRow.state) {\n            case EditRowState.New: {\n                    editRow.state = EditRowState.Removed;\n                    this.clearErrors(rowIndex);\n                    this.destroyComponents(rowIndex);\n                    if (this.inlineEditMode) {\n                        this.splice(rowIndex);\n                    }\n                    this.editRows.splice(rowIndex, 1);\n                    break;\n                }\n            case EditRowState.Editing: {\n                    editRow.state = EditRowState.Saved;\n                    if (this.inlineEditMode) {\n                        this.dataValue[rowIndex] = editRow.backup;\n                    }\n                    editRow.data = editRow.backup;\n                    editRow.backup = null;\n                    this.restoreRowContext(editRow);\n                    this.clearErrors(rowIndex);\n                    break;\n                }\n            }\n            this.checkValidity(null, true);\n            this.redraw();\n        }\n        saveRow(rowIndex) {\n            if (this.options.readOnly) {\n                return;\n            }\n            const editRow = this.editRows[rowIndex];\n            if (!this.validateRow(editRow, true)) {\n                return false;\n            }\n            if (this.saveEditMode) {\n                const dataValue = this.dataValue || [];\n                switch (editRow.state) {\n                case EditRowState.New: {\n                        const newIndex = dataValue.length;\n                        dataValue.push(editRow.data);\n                        if (rowIndex !== newIndex) {\n                            this.editRows.splice(rowIndex, 1);\n                            this.editRows.splice(newIndex, 0, editRow);\n                        }\n                        break;\n                    }\n                case EditRowState.Editing: {\n                        dataValue[rowIndex] = editRow.data;\n                        break;\n                    }\n                }\n            }\n            editRow.state = EditRowState.Saved;\n            editRow.backup = null;\n            this.updateValue();\n            this.triggerChange();\n            this.checkValidity(null, true);\n            this.redraw();\n            return true;\n        }\n        updateComponentsRowIndex(components, rowIndex) {\n            components.forEach((component, colIndex) => {\n                component.rowIndex = rowIndex;\n                component.row = `${ rowIndex }-${ colIndex }`;\n            });\n        }\n        updateRowsComponents(rowIndex) {\n            this.editRows.slice(rowIndex).forEach((row, index) => {\n                this.updateComponentsRowIndex(row.components, index);\n            });\n        }\n        removeRow(rowIndex) {\n            if (this.options.readOnly) {\n                return;\n            }\n            const editRow = this.editRows[rowIndex];\n            editRow.state = EditRowState.Removed;\n            this.destroyComponents(rowIndex);\n            this.splice(rowIndex);\n            this.editRows.splice(rowIndex, 1);\n            this.updateRowsComponents(rowIndex);\n            this.updateValue();\n            this.triggerChange();\n            this.checkValidity(null, true);\n            this.checkData();\n            this.redraw();\n        }\n        removeAllRows() {\n            if (this.options.readOnly) {\n                return;\n            }\n            const editRows = this.editRows || [];\n            const rowIndex = editRows.length - 1;\n            for (let index = rowIndex; index >= 0; index--) {\n                this.removeRow(index);\n            }\n        }\n        createRowComponents(row, rowIndex) {\n            return this.component.components.map((col, colIndex) => {\n                const column = _.clone(col);\n                const options = _.clone(this.options);\n                options.name += `[${ rowIndex }]`;\n                options.row = `${ rowIndex }-${ colIndex }`;\n                options.onChange = (flags, changed, modified) => {\n                    const editRow = this.editRows[rowIndex];\n                    if (this.inlineEditMode) {\n                        this.triggerRootChange(flags, changed, modified);\n                    } else if (editRow) {\n                        this.checkRow('checkData', null, { changed }, editRow.data, editRow.components);\n                    }\n                };\n                const comp = this.createComponent(_.assign({}, column, { row: options.row }), options, row);\n                comp.rowIndex = rowIndex;\n                if (comp.path && column.key) {\n                    comp.path = comp.path.replace(new RegExp(`\\\\.${ column.key }$`), `[${ rowIndex }].${ column.key }`);\n                }\n                return comp;\n            });\n        }\n        validateRow(editRow, dirty) {\n            let valid = true;\n            if (editRow.state === EditRowState.Editing || dirty) {\n                editRow.components.forEach(comp => {\n                    comp.setPristine(!dirty);\n                    valid &= comp.checkValidity(null, dirty, editRow.data);\n                });\n            }\n            if (this.component.validate && this.component.validate.row) {\n                valid = this.evaluate(this.component.validate.row, {\n                    valid,\n                    row: editRow.data\n                }, 'valid', true);\n                if (valid.toString() !== 'true') {\n                    editRow.error = valid;\n                    valid = false;\n                } else {\n                    editRow.error = null;\n                }\n                if (valid === null) {\n                    valid = `Invalid row validation for ${ this.key }`;\n                }\n            }\n            return !!valid;\n        }\n        checkValidity(data, dirty, row) {\n            data = data || this.rootValue;\n            row = row || this.data;\n            if (!this.checkCondition(row, data)) {\n                this.setCustomValidity('');\n                return true;\n            }\n            return this.checkComponentValidity(data, dirty, row);\n        }\n        checkComponentValidity(data, dirty, row) {\n            if (!super.checkComponentValidity(data, dirty, row)) {\n                return false;\n            }\n            let rowsValid = true;\n            let rowsEditing = false;\n            this.editRows.forEach(editRow => {\n                const rowValid = this.validateRow(editRow, dirty);\n                rowsValid &= rowValid;\n                rowsEditing |= dirty && this.isOpen(editRow);\n            });\n            if (!rowsValid) {\n                this.setCustomValidity('Please correct rows before proceeding.', dirty);\n                return false;\n            } else if (rowsEditing && this.saveEditMode) {\n                this.setCustomValidity('Please save all rows before proceeding.', dirty);\n                return false;\n            }\n            const message = this.invalid || this.invalidMessage(data, dirty);\n            this.setCustomValidity(message, dirty);\n            return true;\n        }\n        get defaultValue() {\n            const value = super.defaultValue;\n            const defaultValue = Array.isArray(value) ? value : [];\n            _.times(this.minLength - defaultValue.length, () => defaultValue.push({}));\n            return defaultValue;\n        }\n        setValue(value, flags = {}) {\n            if (equal(this.defaultValue, value)) {\n                return false;\n            }\n            if (!value) {\n                this.dataValue = this.defaultValue;\n                return false;\n            }\n            if (!Array.isArray(value)) {\n                if (typeof value === 'object') {\n                    value = [value];\n                } else {\n                    return false;\n                }\n            }\n            const changed = this.hasChanged(value, this.dataValue);\n            this.dataValue = value;\n            this.dataValue.forEach((row, rowIndex) => {\n                let editRow = this.editRows[rowIndex];\n                if (editRow) {\n                    editRow.data = row;\n                    this.restoreRowContext(editRow, flags);\n                    editRow.state = EditRowState.Saved;\n                    editRow.backup = null;\n                    editRow.error = null;\n                } else {\n                    editRow = this.editRows[rowIndex] = {\n                        components: this.createRowComponents(row, rowIndex),\n                        data: row,\n                        state: EditRowState.Saved,\n                        backup: null,\n                        error: null\n                    };\n                    this.checkRow('checkData', null, {}, editRow.data, editRow.components);\n                }\n            });\n            this.updateOnChange(flags, changed);\n            if (changed) {\n                this.redraw();\n            }\n            return changed;\n        }\n        restoreRowContext(editRow, flags = {}) {\n            editRow.components.forEach(component => {\n                component.data = editRow.data;\n                this.setNestedValue(component, editRow.data, flags);\n            });\n        }\n    };\n    EditGridComponent.prototype.hasChanged = Component.prototype.hasChanged;\n});"]}