{"version":3,"sources":["components/selectboxes/SelectBoxes.js"],"names":["define","_","RadioComponent","SelectBoxesComponent","[object Object]","extend","schema","type","label","key","inline","builderInfo","title","group","icon","weight","documentation","args","super","this","validators","concat","init","component","inputType","defaultSchema","inputInfo","info","elementInfo","attr","name","class","emptyValue","values","reduce","prev","value","dataValue","empty","hasOwnProperty","viewOnly","refs","input","length","each","checked","Array","isArray","val","flags","changed","updateValue","isUndefined","filter","v","map","join","data","dirty","rowData","minCount","validate","minSelectedCount","maxCount","maxSelectedCount","isValid","count","Object","keys","validationValue","total","forEach","item","disabled","message","maxSelectedCountMessage","setCustomValidity","minSelectedCountMessage","checkComponentValidity"],"mappings":"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","file":"../../../components/selectboxes/SelectBoxes.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../radio/Radio'\n], function (_, RadioComponent) {\n    'use strict';\n    return class SelectBoxesComponent extends RadioComponent {\n        static schema(...extend) {\n            return RadioComponent.schema({\n                type: 'selectboxes',\n                label: 'Select Boxes',\n                key: 'selectBoxes',\n                inline: false\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Select Boxes',\n                group: 'basic',\n                icon: 'plus-square',\n                weight: 60,\n                documentation: 'http://help.form.io/userguide/#selectboxes',\n                schema: SelectBoxesComponent.schema()\n            };\n        }\n        constructor(...args) {\n            super(...args);\n            this.validators = this.validators.concat('minSelectedCount', 'maxSelectedCount');\n        }\n        init() {\n            super.init();\n            this.component.inputType = 'checkbox';\n        }\n        get defaultSchema() {\n            return SelectBoxesComponent.schema();\n        }\n        get inputInfo() {\n            const info = super.elementInfo();\n            info.attr.name += '[]';\n            info.attr.type = 'checkbox';\n            info.attr.class = 'form-check-input';\n            return info;\n        }\n        get emptyValue() {\n            return this.component.values.reduce((prev, value) => {\n                prev[value.value] = false;\n                return prev;\n            }, {});\n        }\n        isEmpty(value = this.dataValue) {\n            let empty = true;\n            for (const key in value) {\n                if (value.hasOwnProperty(key) && value[key]) {\n                    empty = false;\n                    break;\n                }\n            }\n            return empty;\n        }\n        getValue() {\n            if (this.viewOnly || !this.refs.input || !this.refs.input.length) {\n                return this.dataValue;\n            }\n            const value = {};\n            _.each(this.refs.input, input => {\n                value[input.value] = !!input.checked;\n            });\n            return value;\n        }\n        normalizeValue(value) {\n            value = value || {};\n            if (typeof value !== 'object') {\n                if (typeof value === 'string') {\n                    value = { [value]: true };\n                } else {\n                    value = {};\n                }\n            }\n            if (Array.isArray(value)) {\n                _.each(value, val => {\n                    value[val] = true;\n                });\n            }\n            return value;\n        }\n        setValue(value, flags = {}) {\n            const changed = this.updateValue(value, flags);\n            value = this.dataValue;\n            _.each(this.refs.input, input => {\n                if (_.isUndefined(value[input.value])) {\n                    value[input.value] = false;\n                }\n                input.checked = !!value[input.value];\n            });\n            return changed;\n        }\n        getValueAsString(value) {\n            if (!value) {\n                return '';\n            }\n            return _(this.component.values || []).filter(v => value[v.value]).map('label').join(', ');\n        }\n        checkComponentValidity(data, dirty, rowData) {\n            const minCount = this.component.validate.minSelectedCount;\n            const maxCount = this.component.validate.maxSelectedCount;\n            if ((maxCount || minCount) && !this.isValid(data, dirty)) {\n                const count = Object.keys(this.validationValue).reduce((total, key) => {\n                    if (this.validationValue[key]) {\n                        total++;\n                    }\n                    return total;\n                }, 0);\n                if (maxCount && count >= maxCount) {\n                    if (this.refs.input) {\n                        this.refs.input.forEach(item => {\n                            if (!item.checked) {\n                                item.disabled = true;\n                            }\n                        });\n                    }\n                    if (maxCount && count > maxCount) {\n                        const message = this.component.maxSelectedCountMessage ? this.component.maxSelectedCountMessage : `You can only select up to ${ maxCount } items.`;\n                        this.setCustomValidity(message, dirty);\n                        return false;\n                    }\n                } else if (minCount && count < minCount) {\n                    if (this.refs.input) {\n                        this.refs.input.forEach(item => {\n                            item.disabled = false;\n                        });\n                    }\n                    const message = this.component.minSelectedCountMessage ? this.component.minSelectedCountMessage : `You must select at least ${ minCount } items.`;\n                    this.setCustomValidity(message, dirty);\n                    return false;\n                } else {\n                    if (this.refs.input) {\n                        this.refs.input.forEach(item => {\n                            item.disabled = false;\n                        });\n                    }\n                }\n            }\n            return super.checkComponentValidity(data, dirty, rowData);\n        }\n    };\n});"]}