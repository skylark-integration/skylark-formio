{"version":3,"sources":["components/checkbox/Checkbox.js"],"names":["define","Field","CheckBoxComponent","[object Object]","extend","schema","type","inputType","label","key","dataGridLabel","labelPosition","value","name","builderInfo","title","group","icon","documentation","weight","defaultSchema","defaultValue","this","component","toString","labelClass","className","isInputComponent","options","inputsOnly","validate","required","hasSetValue","hasValue","inputInfo","info","super","elementInfo","changeEvent","attr","class","t","labelInfo","hidden","render","renderTemplate","input","checked","dataValue","tooltip","interpolate","replace","element","loadRefs","refs","addEventListener","updateValue","modified","addShortcut","attach","removeShortcut","emptyValue","isEmpty","index","getValue","setCheckedState","setAttribute","removeAttribute","flags","undefined","visible","clearOnHide"],"mappings":"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","file":"../../../components/checkbox/Checkbox.js","sourcesContent":["define(['../_classes/field/Field'], function (Field) {\n    'use strict';\n    return class CheckBoxComponent extends Field {\n        static schema(...extend) {\n            return Field.schema({\n                type: 'checkbox',\n                inputType: 'checkbox',\n                label: 'Checkbox',\n                key: 'checkbox',\n                dataGridLabel: true,\n                labelPosition: 'right',\n                value: '',\n                name: ''\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Checkbox',\n                group: 'basic',\n                icon: 'check-square',\n                documentation: 'http://help.form.io/userguide/#checkbox',\n                weight: 50,\n                schema: CheckBoxComponent.schema()\n            };\n        }\n        get defaultSchema() {\n            return CheckBoxComponent.schema();\n        }\n        get defaultValue() {\n            return this.component.name ? '' : (this.component.defaultValue || false).toString() === 'true';\n        }\n        get labelClass() {\n            let className = '';\n            if (this.isInputComponent && !this.options.inputsOnly && this.component.validate && this.component.validate.required) {\n                className += ' field-required';\n            }\n            return `${ className }`;\n        }\n        get hasSetValue() {\n            return this.hasValue();\n        }\n        get inputInfo() {\n            const info = super.elementInfo();\n            info.type = 'input';\n            info.changeEvent = 'click';\n            info.attr.type = this.component.inputType || 'checkbox';\n            info.attr.class = 'form-check-input';\n            if (this.component.name) {\n                info.attr.name = `data[${ this.component.name }]`;\n            }\n            info.attr.value = this.component.value ? this.component.value : 0;\n            info.label = this.t(this.component.label);\n            info.labelClass = this.labelClass;\n            return info;\n        }\n        get labelInfo() {\n            return { hidden: true };\n        }\n        render() {\n            return super.render(this.renderTemplate('checkbox', {\n                input: this.inputInfo,\n                checked: this.dataValue,\n                tooltip: this.interpolate(this.t(this.component.tooltip) || '').replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\n            }));\n        }\n        attach(element) {\n            this.loadRefs(element, { input: 'multiple' });\n            this.input = this.refs.input[0];\n            if (this.refs.input) {\n                this.addEventListener(this.input, this.inputInfo.changeEvent, () => this.updateValue(null, { modified: true }));\n                this.addShortcut(this.input);\n            }\n            return super.attach(element);\n        }\n        detach(element) {\n            if (element && this.input) {\n                this.removeShortcut(this.input);\n            }\n        }\n        get emptyValue() {\n            return false;\n        }\n        isEmpty(value = this.dataValue) {\n            return super.isEmpty(value) || value === false;\n        }\n        get key() {\n            return this.component.name ? this.component.name : super.key;\n        }\n        getValueAt(index) {\n            if (this.component.name) {\n                return this.refs.input[index].checked ? this.component.value : '';\n            }\n            return !!this.refs.input[index].checked;\n        }\n        getValue() {\n            const value = super.getValue();\n            if (this.component.name) {\n                return value ? this.setCheckedState(value) : this.setCheckedState(this.dataValue);\n            } else {\n                return value === '' ? this.dataValue : !!value;\n            }\n        }\n        setCheckedState(value) {\n            if (!this.input) {\n                return;\n            }\n            if (this.component.name) {\n                this.input.value = value === this.component.value ? this.component.value : 0;\n                this.input.checked = value === this.component.value ? 1 : 0;\n            } else if (value === 'on') {\n                this.input.value = 1;\n                this.input.checked = 1;\n            } else if (value === 'off') {\n                this.input.value = 0;\n                this.input.checked = 0;\n            } else if (value) {\n                this.input.value = 1;\n                this.input.checked = 1;\n            } else {\n                this.input.value = 0;\n                this.input.checked = 0;\n            }\n            if (this.input.checked) {\n                this.input.setAttribute('checked', true);\n            } else {\n                this.input.removeAttribute('checked');\n            }\n            return value;\n        }\n        setValue(value, flags = {}) {\n            if (this.setCheckedState(value) !== undefined || !this.input && value !== undefined && (this.visible || !this.component.clearOnHide)) {\n                return this.updateValue(value, flags);\n            }\n            return false;\n        }\n        getValueAsString(value) {\n            return value ? 'Yes' : 'No';\n        }\n    };\n});"]}