{"version":3,"sources":["components/tree/Tree.js"],"names":["define","_","Component","Components","NestedComponent","Node","NativePromise","TreeComponent","[object Object]","extend","schema","label","key","type","clearOnHide","input","tree","components","builderInfo","title","icon","group","weight","args","super","this","emptyValue","viewComponents","viewComponentsInstantiated","_viewComponents","createComponents","builderMode","init","componentOptions","options","parent","root","setRoot","destroy","removeComponents","data","node","componentComponents","map","component","create","checkNode","render","renderTree","treeRoot","odd","childNodes","hasChildren","collapsed","renderChildNodes","children","content","changing","renderEdit","renderView","renderTemplate","nodes","renderComponents","values","checkComponentConditions","getView","dataValue","nodeData","element","attach","loadRefs","all","attachNode","refs","resolve","componentsPromise","childrenPromise","reduce","child","hasAttribute","getAttribute","attachActions","attachComponents","attachChildren","call","addChild","cancelNode","editNode","removeNode","revertNode","saveNode","toggleNode","addEventListener","nodeEdit","childElements","childElement","index","value","flags","changed","updateValue","readOnly","new","hook","redraw","isRoot","removeRoot","cancel","edit","remove","updateTree","revertAvailable","revert","save","defaultValue","isNew","bind","row","result","checkData"],"mappings":"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","file":"../../../components/tree/Tree.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../_classes/component/Component',\n    '../Components',\n    '../_classes/nested/NestedComponent',\n    './Node',\n    '../../vendors/getify/npo'\n], function (_, Component, Components, NestedComponent, Node, NativePromise) {\n    'use strict';\n    return class TreeComponent extends NestedComponent {\n        static schema(...extend) {\n            return NestedComponent.schema({\n                label: 'Tree',\n                key: 'tree',\n                type: 'tree',\n                clearOnHide: true,\n                input: true,\n                tree: true,\n                components: []\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Tree',\n                icon: 'indent',\n                group: 'data',\n                weight: 40,\n                schema: TreeComponent.schema()\n            };\n        }\n        constructor(...args) {\n            super(...args);\n            this.type = 'tree';\n        }\n        get emptyValue() {\n            return {};\n        }\n        get viewComponents() {\n            if (!this.viewComponentsInstantiated) {\n                this.viewComponentsInstantiated = true;\n                this._viewComponents = this.createComponents({});\n            }\n            return this._viewComponents;\n        }\n        init() {\n            if (this.builderMode) {\n                return super.init();\n            }\n            this.components = [];\n            this.componentOptions = {\n                ...this.options,\n                parent: this,\n                root: this.root || this\n            };\n            this.setRoot();\n            this.viewComponentsInstantiated = false;\n            this._viewComponents = [];\n        }\n        destroy() {\n            super.destroy();\n            if (!this.builderMode) {\n                this.removeComponents(this._viewComponents);\n            }\n        }\n        createComponents(data, node) {\n            const components = this.componentComponents.map(component => Components.create(component, this.componentOptions, data));\n            if (node) {\n                this.checkNode(this.data, node);\n            }\n            return components;\n        }\n        removeComponents(components) {\n            return components.map(component => component.destroy());\n        }\n        render() {\n            if (this.builderMode) {\n                return super.render();\n            }\n            return super.render(this.renderTree(this.treeRoot));\n        }\n        renderTree(node = {}, odd = true) {\n            const childNodes = node.hasChildren && !node.collapsed ? this.renderChildNodes(node.children, !odd) : [];\n            const content = node.changing ? this.renderEdit(node) : this.renderView(node);\n            return this.renderTemplate('tree', {\n                odd,\n                childNodes,\n                content,\n                node\n            });\n        }\n        renderChildNodes(nodes = [], odd) {\n            return nodes.map(node => this.renderTree(node, odd));\n        }\n        renderEdit(node = {}) {\n            return this.renderTemplate('treeEdit', {\n                children: this.renderComponents(node.components),\n                node\n            });\n        }\n        renderView(node = {}) {\n            return this.renderTemplate('treeView', {\n                values: this.viewComponents.map(component => {\n                    component.data = node.data;\n                    component.checkComponentConditions(node.data);\n                    return component.getView(component.dataValue);\n                }),\n                nodeData: node.data,\n                node\n            });\n        }\n        attach(element) {\n            if (this.builderMode) {\n                return super.attach(element);\n            }\n            this.loadRefs(element, { root: 'single' });\n            return NativePromise.all([\n                super.attach(element),\n                this.attachNode(this.refs.root, this.treeRoot)\n            ]);\n        }\n        attachNode(element, node) {\n            if (!element) {\n                return NativePromise.resolve();\n            }\n            let componentsPromise = NativePromise.resolve();\n            let childrenPromise = NativePromise.resolve();\n            node.refs = _.reduce(element.children, (refs, child) => child.hasAttribute('ref') ? {\n                ...refs,\n                [child.getAttribute('ref')]: child\n            } : refs, {});\n            if (node.refs.content) {\n                this.attachActions(node);\n                componentsPromise = this.attachComponents(node);\n            }\n            if (node.refs.childNodes) {\n                childrenPromise = this.attachChildren(node);\n            }\n            return NativePromise.all([\n                componentsPromise,\n                childrenPromise\n            ]);\n        }\n        attachActions(node) {\n            this.loadRefs.call(node, node.refs.content, {\n                addChild: 'single',\n                cancelNode: 'single',\n                editNode: 'single',\n                removeNode: 'single',\n                revertNode: 'single',\n                saveNode: 'single',\n                toggleNode: 'single'\n            });\n            if (node.refs.addChild) {\n                this.addEventListener(node.refs.addChild, 'click', () => {\n                    this.addChild(node);\n                });\n            }\n            if (node.refs.cancelNode) {\n                this.addEventListener(node.refs.cancelNode, 'click', () => {\n                    this.cancelNode(node);\n                });\n            }\n            if (node.refs.editNode) {\n                this.addEventListener(node.refs.editNode, 'click', () => {\n                    this.editNode(node);\n                });\n            }\n            if (node.refs.removeNode) {\n                this.addEventListener(node.refs.removeNode, 'click', () => {\n                    this.removeNode(node);\n                });\n            }\n            if (node.refs.revertNode) {\n                this.addEventListener(node.refs.revertNode, 'click', () => {\n                    this.revertNode(node);\n                });\n            }\n            if (node.refs.saveNode) {\n                this.addEventListener(node.refs.saveNode, 'click', () => {\n                    this.saveNode(node);\n                });\n            }\n            if (node.refs.toggleNode) {\n                this.addEventListener(node.refs.toggleNode, 'click', () => {\n                    this.toggleNode(node);\n                });\n            }\n        }\n        attachComponents(node, ...args) {\n            if (this.builderMode) {\n                return super.attachComponents.call(this, node, ...args);\n            }\n            this.loadRefs.call(node, node.refs.content, { nodeEdit: 'single' });\n            return node.refs.nodeEdit ? super.attachComponents(node.refs.nodeEdit, node.components) : NativePromise.resolve();\n        }\n        attachChildren(node) {\n            const childElements = node.refs.childNodes.children;\n            return NativePromise.all(_.map(childElements, (childElement, index) => this.attachNode(childElement, node.children[index])));\n        }\n        setValue(value, flags = {}) {\n            const changed = this.updateValue(value, flags);\n            this.setRoot();\n            return changed;\n        }\n        addChild(parent) {\n            if (this.options.readOnly || parent.new) {\n                return;\n            }\n            this.hook('tree.addChild', {\n                parent,\n                component: this\n            }, () => {\n                const child = parent.addChild();\n                this.redraw();\n                return child;\n            });\n        }\n        cancelNode(node) {\n            if (this.options.readOnly) {\n                return;\n            }\n            this.hook('tree.cancelNode', {\n                node,\n                component: this\n            }, () => {\n                if (node.isRoot) {\n                    this.removeRoot();\n                } else {\n                    node.cancel();\n                    this.redraw();\n                }\n                return node;\n            });\n        }\n        editNode(node) {\n            if (this.options.readOnly || node.new) {\n                return;\n            }\n            this.hook('tree.editNode', {\n                node,\n                component: this\n            }, () => {\n                node.edit();\n                this.redraw();\n                return node;\n            });\n        }\n        removeNode(node) {\n            if (this.options.readOnly || node.new) {\n                return;\n            }\n            this.hook('tree.removeNode', {\n                node,\n                component: this\n            }, () => {\n                if (node.isRoot) {\n                    this.removeRoot();\n                } else {\n                    node.remove();\n                    this.updateTree();\n                }\n                return node;\n            });\n        }\n        revertNode(node) {\n            if (this.options.readOnly || !node.revertAvailable) {\n                return;\n            }\n            this.hook('tree.revertNode', {\n                node,\n                component: this\n            }, () => {\n                node.revert();\n                this.updateTree();\n                return node;\n            });\n        }\n        saveNode(node) {\n            if (this.options.readOnly) {\n                return;\n            }\n            this.hook('tree.saveNode', {\n                node,\n                component: this\n            }, () => {\n                node.save();\n                this.updateTree();\n                return node;\n            });\n        }\n        toggleNode(node) {\n            this.hook('tree.toggleNode', {\n                node,\n                component: this\n            }, () => {\n                node.collapsed = !node.collapsed;\n                this.redraw();\n                return node;\n            });\n        }\n        removeRoot() {\n            if (this.options.readOnly) {\n                return;\n            }\n            this.dataValue = this.defaultValue;\n            this.setRoot();\n            this.redraw();\n        }\n        setRoot() {\n            const value = this.dataValue;\n            this.treeRoot = new Node(null, value, {\n                isNew: !value.data,\n                createComponents: this.createComponents.bind(this),\n                checkNode: this.checkNode.bind(this, this.data),\n                removeComponents: this.removeComponents\n            });\n            this.hook('tree.setRoot', {\n                root: this.treeRoot,\n                component: this\n            });\n        }\n        getValue() {\n            return this.dataValue;\n        }\n        updateTree() {\n            this.updateValue(this.treeRoot.value);\n            this.redraw();\n        }\n        checkData(data, flags, row) {\n            return this.checkNode(data, this.treeRoot, flags, row);\n        }\n        checkNode(data, node, flags, row) {\n            return node.children.reduce((result, child) => this.checkNode(data, child, flags, row) && result, super.checkData(data, flags, node.data, node.components));\n        }\n    };\n    TreeComponent.prototype.hasChanged = Component.prototype.hasChanged;\n    TreeComponent.prototype.updateValue = Component.prototype.updateValue;\n});"]}