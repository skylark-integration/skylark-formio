{"version":3,"sources":["components/tree/Node.js"],"names":["define","_","Node","[object Object]","parent","data","children","checkNode","createComponents","isNew","removeComponents","this","previousData","persistentData","cloneDeep","new","revertAvailable","editing","collapsed","components","resetData","map","child","value","filter","isRoot","changing","hasChangingChildren","changin","some","hasData","isEmpty","hasChildren","Array","isArray","length","iteratee","forEach","eachChild","reduce","concat","getComponents","childToRemove","commitData","remove","removeChild","clearComponents","updateComponentsContext","instantiateComponents"],"mappings":"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","file":"../../../components/tree/Node.js","sourcesContent":["define(['skylark-lodash'], function (_) {\n    'use strict';\n    return class Node {\n        constructor(parent, {data = {}, children = []} = {}, {checkNode, createComponents, isNew = true, removeComponents} = {}) {\n            this.parent = parent;\n            this.previousData = {};\n            this.persistentData = _.cloneDeep(data);\n            this.new = isNew;\n            this.createComponents = createComponents;\n            this.checkNode = checkNode;\n            this.removeComponents = removeComponents;\n            this.revertAvailable = false;\n            this.editing = false;\n            this.collapsed = false;\n            this.components = [];\n            this.children = [];\n            this.resetData();\n            this.children = children.map(child => new Node(this, child, {\n                checkNode,\n                createComponents,\n                isNew: false,\n                removeComponents\n            }));\n        }\n        get value() {\n            return this.new ? null : {\n                data: _.cloneDeep(this.persistentData),\n                children: this.children.filter(child => !child.new).map(child => child.value)\n            };\n        }\n        get isRoot() {\n            return this.parent === null;\n        }\n        get changing() {\n            return this.new || this.editing;\n        }\n        get hasChangingChildren() {\n            return this.changin || this.children.some(child => child.hasChangingChildren);\n        }\n        get hasData() {\n            return !_.isEmpty(this.persistentData);\n        }\n        get hasChildren() {\n            return Array.isArray(this.children) && this.children.length > 0;\n        }\n        eachChild(iteratee) {\n            iteratee(this);\n            this.children.forEach(child => child.eachChild(iteratee));\n            return this;\n        }\n        getComponents() {\n            return this.children.reduce((components, child) => components.concat(child.getComponents()), this.components);\n        }\n        addChild() {\n            if (this.new) {\n                return null;\n            }\n            const child = new Node(this, {}, {\n                checkNode: this.checkNode,\n                createComponents: this.createComponents,\n                isNew: true,\n                removeComponents: this.removeComponents\n            });\n            this.children = this.children.concat(child);\n            return child;\n        }\n        removeChild(childToRemove) {\n            if (!this.new) {\n                this.children = this.children.filter(child => child !== childToRemove);\n            }\n            return this;\n        }\n        edit() {\n            if (this.new) {\n                return this;\n            }\n            this.editing = true;\n            return this.resetData();\n        }\n        save() {\n            if (this.changing) {\n                if (this.new) {\n                    this.new = false;\n                } else {\n                    this.editing = false;\n                    this.revertAvailable = true;\n                }\n                this.commitData();\n            }\n            return this;\n        }\n        cancel() {\n            if (this.new) {\n                this.remove();\n            } else if (this.editing) {\n                this.editing = false;\n                this.resetData();\n            }\n            return this;\n        }\n        remove() {\n            this.parent.removeChild(this);\n            this.parent = null;\n            this.clearComponents();\n            return this;\n        }\n        revert() {\n            if (!this.revertAvailable) {\n                return this;\n            }\n            this.data = this.previousData;\n            return this.commitData();\n        }\n        commitData() {\n            this.previousData = this.persistentData;\n            this.persistentData = _.cloneDeep(this.data);\n            this.clearComponents();\n            return this;\n        }\n        resetData() {\n            this.data = _.cloneDeep(this.persistentData);\n            this.updateComponentsContext();\n            return this;\n        }\n        updateComponentsContext() {\n            if (this.changing) {\n                this.instantiateComponents();\n            } else {\n                this.clearComponents();\n            }\n            return this;\n        }\n        instantiateComponents() {\n            this.components = this.createComponents(this.data, this);\n            this.checkNode(this);\n        }\n        clearComponents() {\n            this.removeComponents(this.components);\n            this.components = [];\n        }\n    };\n});"]}