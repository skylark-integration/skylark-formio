{"version":3,"sources":["components/time/Time.js"],"names":["define","moment","TextFieldComponent","TimeComponent","[object Object]","extend","schema","type","label","key","inputType","format","dataFormat","component","options","data","super","this","inputMask","rawData","multiple","emptyValue","builderInfo","title","icon","group","documentation","weight","defaultSchema","defaultValue","value","Array","isArray","map","item","getStringAsValue","validationValue","inputInfo","info","attr","skipMaskValidation","includes","index","slice","removeValue","setRawValue","refs","input","length","resetRawData","getRawValue","getValueAsString","view"],"mappings":";;;;;;;AAAAA,QACI,iBACA,0BACD,SAAUC,EAAQC,GACjB,aAEA,aAAaC,UAAsBD,EAC/BE,iBAAiBC,GACb,OAAOH,EAAmBI,QACtBC,KAAM,OACNC,MAAO,OACPC,IAAK,OACLC,UAAW,OACXC,OAAQ,QACRC,WATc,eAUZP,GAEVD,YAAYS,EAAWC,EAASC,GAC5BC,MAAMH,EAAWC,EAASC,GAC1BE,KAAKJ,UAAUK,UAAY,QAC3BD,KAAKJ,UAAUH,UAAYO,KAAKJ,UAAUH,WAAa,OACvDO,KAAKE,QAAUF,KAAKJ,UAAUO,YAAgBH,KAAKI,WAEvDC,yBACI,OACIC,MAAO,OACPC,KAAM,UACNC,MAAO,WACPC,cAAe,sCACfC,OAAQ,GACRrB,OAAQH,EAAcG,UAG9BM,iBACI,OAAOK,KAAKJ,UAAUD,YA7BJ,WA+BtBgB,oBACI,OAAOzB,EAAcG,SAEzBuB,mBACI,IAAIC,EAAQd,MAAMa,aAQlB,OAPIZ,KAAKJ,UAAUO,UAAYW,MAAMC,QAAQF,GACzCA,EAAQA,EAAMG,IAAIC,GAAQA,EAAOjB,KAAKkB,iBAAiBD,GAAQA,GAE3DJ,IACAA,EAAQb,KAAKkB,iBAAiBL,IAG/BA,EAEXM,sBACI,OAAOnB,KAAKE,QAEhBkB,gBACI,MAAMC,EAAOtB,MAAMqB,UAEnB,OADAC,EAAKC,KAAKhC,KAAOU,KAAKJ,UAAUH,UACzB4B,EAEXE,yBACI,OAAO,EAEXpC,mBAAmB0B,GACf,OAAOA,EAAMW,SAAS,KAE1BrC,YAAYsC,GACRzB,KAAKE,QAAUY,MAAMC,QAAQf,KAAKE,aAC3BF,KAAKE,QAAQwB,MAAM,EAAGD,MACtBzB,KAAKE,QAAQwB,MAAMD,EAAQ,IAC9BzB,KAAKI,WACTL,MAAM4B,YAAYF,GAEtBtC,aAAasC,GACLA,EACAzB,KAAK4B,YAAY5B,KAAKI,WAAYqB,GAElCzB,KAAKE,WAGbf,YAAY0B,EAAOY,GACXX,MAAMC,QAAQf,KAAKE,SACnBF,KAAKE,QAAQuB,GAASZ,EAEtBb,KAAKE,QAAUW,EAGvB1B,YAAYsC,GACR,OAAIA,GAASX,MAAMC,QAAQf,KAAKE,SACrBF,KAAKE,QAAQuB,IAAUzB,KAAKI,WAE5BJ,KAAKE,QAGpBf,WAAWsC,GACP,IAAKzB,KAAK6B,KAAKC,MAAMC,SAAW/B,KAAK6B,KAAKC,MAAML,GAC5C,OAAOzB,KAAKI,WAEhB,MAAMS,MAACA,GAASb,KAAK6B,KAAKC,MAAML,GAChC,OAAKZ,GAILb,KAAK4B,YAAYf,EAAOY,GACjBzB,KAAKkB,iBAAiBL,KAJzBb,KAAKgC,aAAaP,GACXzB,KAAKI,YAKpBjB,WAAWsC,EAAOZ,GACVA,IAAUb,KAAKiC,YAAYR,IAC3BzB,KAAK4B,YAAY5B,KAAKkC,iBAAiBrB,GAAQY,GAEnDzB,KAAK6B,KAAKC,MAAML,GAAOZ,MAAQb,KAAKiC,YAAYR,GAEpDtC,iBAAiBgD,GACb,OAAOA,EAAOnD,EAAOmD,EAAMnC,KAAKJ,UAAUF,QAAQA,OAAOM,KAAKJ,UAAUD,YAAcwC,EAE1FhD,iBAAiB0B,GACb,OAAQA,EAAQ7B,EAAO6B,EAAOb,KAAKJ,UAAUD,YAAYD,OAAOM,KAAKJ,UAAUF,QAAUmB,IAAU","file":"../../../components/time/Time.js","sourcesContent":["define([\n    'skylark-moment',\n    '../textfield/TextField'\n], function (moment, TextFieldComponent) {\n    'use strict';\n    const defaultDataFormat = 'HH:mm:ss';\n    return class TimeComponent extends TextFieldComponent {\n        static schema(...extend) {\n            return TextFieldComponent.schema({\n                type: 'time',\n                label: 'Time',\n                key: 'time',\n                inputType: 'time',\n                format: 'HH:mm',\n                dataFormat: defaultDataFormat\n            }, ...extend);\n        }\n        constructor(component, options, data) {\n            super(component, options, data);\n            this.component.inputMask = '99:99';\n            this.component.inputType = this.component.inputType || 'time';\n            this.rawData = this.component.multiple ? [] : this.emptyValue;\n        }\n        static get builderInfo() {\n            return {\n                title: 'Time',\n                icon: 'clock-o',\n                group: 'advanced',\n                documentation: 'http://help.form.io/userguide/#time',\n                weight: 55,\n                schema: TimeComponent.schema()\n            };\n        }\n        get dataFormat() {\n            return this.component.dataFormat || defaultDataFormat;\n        }\n        get defaultSchema() {\n            return TimeComponent.schema();\n        }\n        get defaultValue() {\n            let value = super.defaultValue;\n            if (this.component.multiple && Array.isArray(value)) {\n                value = value.map(item => item ? this.getStringAsValue(item) : item);\n            } else {\n                if (value) {\n                    value = this.getStringAsValue(value);\n                }\n            }\n            return value;\n        }\n        get validationValue() {\n            return this.rawData;\n        }\n        get inputInfo() {\n            const info = super.inputInfo;\n            info.attr.type = this.component.inputType;\n            return info;\n        }\n        get skipMaskValidation() {\n            return true;\n        }\n        isNotCompleteInput(value) {\n            return value.includes('_');\n        }\n        removeValue(index) {\n            this.rawData = Array.isArray(this.rawData) ? [\n                ...this.rawData.slice(0, index),\n                ...this.rawData.slice(index + 1)\n            ] : this.emptyValue;\n            super.removeValue(index);\n        }\n        resetRawData(index) {\n            if (index) {\n                this.setRawValue(this.emptyValue, index);\n            } else {\n                this.rawData = [];\n            }\n        }\n        setRawValue(value, index) {\n            if (Array.isArray(this.rawData)) {\n                this.rawData[index] = value;\n            } else {\n                this.rawData = value;\n            }\n        }\n        getRawValue(index) {\n            if (index && Array.isArray(this.rawData)) {\n                return this.rawData[index] || this.emptyValue;\n            } else {\n                return this.rawData;\n            }\n        }\n        getValueAt(index) {\n            if (!this.refs.input.length || !this.refs.input[index]) {\n                return this.emptyValue;\n            }\n            const {value} = this.refs.input[index];\n            if (!value) {\n                this.resetRawData(index);\n                return this.emptyValue;\n            }\n            this.setRawValue(value, index);\n            return this.getStringAsValue(value);\n        }\n        setValueAt(index, value) {\n            if (value && !this.getRawValue(index)) {\n                this.setRawValue(this.getValueAsString(value), index);\n            }\n            this.refs.input[index].value = this.getRawValue(index);\n        }\n        getStringAsValue(view) {\n            return view ? moment(view, this.component.format).format(this.component.dataFormat) : view;\n        }\n        getValueAsString(value) {\n            return (value ? moment(value, this.component.dataFormat).format(this.component.format) : value) || '';\n        }\n    };\n});"]}