{"version":3,"sources":["components/signature/Signature.js"],"names":["define","SignaturePad","Input","_","SignatureComponent","[object Object]","extend","schema","type","label","key","footer","width","height","penColor","backgroundColor","minWidth","maxWidth","builderInfo","title","group","icon","weight","documentation","super","init","this","currentWidth","scale","component","emptyValue","defaultSchema","inputInfo","info","attr","className","value","flags","changed","setValue","refs","signatureImage","options","readOnly","setAttribute","showCanvas","signaturePad","triggerChange","clear","show","canvas","style","display","disabled","off","refresh","classList","add","on","remove","force","padBody","offsetWidth","offsetHeight","ctx","getContext","setTransform","fillStyle","fillRect","dataValue","fromDataURL","index","renderTemplate","element","renderElement","required","get","template","componentModal","setOpenModalElement","loadRefs","superAttach","attach","onDisabled","onEnd","toDataURL","addEventListener","window","debounce","checkSize","setTimeout","checkWidth","bind","event","preventDefault","defaultValue","detach","focus"],"mappings":"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","file":"../../../components/signature/Signature.js","sourcesContent":["define([\n    '../../vendorssignature_pad/SignaturePad',\n    '../_classes/input/Input',\n    'skylark-lodash'\n], function (SignaturePad, Input, _) {\n    'use strict';\n    return class SignatureComponent extends Input {\n        static schema(...extend) {\n            return Input.schema({\n                type: 'signature',\n                label: 'Signature',\n                key: 'signature',\n                footer: 'Sign above',\n                width: '100%',\n                height: '150px',\n                penColor: 'black',\n                backgroundColor: 'rgb(245,245,235)',\n                minWidth: '0.5',\n                maxWidth: '2.5'\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Signature',\n                group: 'advanced',\n                icon: 'pencil',\n                weight: 120,\n                documentation: 'http://help.form.io/userguide/#signature',\n                schema: SignatureComponent.schema()\n            };\n        }\n        init() {\n            super.init();\n            this.currentWidth = 0;\n            this.scale = 1;\n            if (!this.component.width) {\n                this.component.width = '100%';\n            }\n            if (!this.component.height) {\n                this.component.height = '200px';\n            }\n        }\n        get emptyValue() {\n            return '';\n        }\n        get defaultSchema() {\n            return SignatureComponent.schema();\n        }\n        get inputInfo() {\n            const info = super.inputInfo;\n            info.type = 'input';\n            info.attr.type = 'hidden';\n            return info;\n        }\n        get className() {\n            return `${ super.className } signature-pad`;\n        }\n        labelIsHidden() {\n            return true;\n        }\n        setValue(value, flags = {}) {\n            const changed = super.setValue(value, flags);\n            if (value && this.refs.signatureImage && this.options.readOnly) {\n                this.refs.signatureImage.setAttribute('src', value);\n                this.showCanvas(false);\n            }\n            if (this.signaturePad) {\n                if (!value) {\n                    this.signaturePad.clear();\n                } else if (changed) {\n                    this.triggerChange();\n                }\n            }\n            return changed;\n        }\n        showCanvas(show) {\n            if (show) {\n                if (this.refs.canvas) {\n                    this.refs.canvas.style.display = 'inherit';\n                }\n                if (this.refs.signatureImage) {\n                    this.refs.signatureImage.style.display = 'none';\n                }\n            } else {\n                if (this.refs.canvas) {\n                    this.refs.canvas.style.display = 'none';\n                }\n                if (this.refs.signatureImage) {\n                    this.refs.signatureImage.style.display = 'inherit';\n                }\n            }\n        }\n        onDisabled() {\n            this.showCanvas(!super.disabled);\n            if (this.signaturePad) {\n                if (super.disabled) {\n                    this.signaturePad.off();\n                    if (this.refs.refresh) {\n                        this.refs.refresh.classList.add('disabled');\n                    }\n                } else {\n                    this.signaturePad.on();\n                    if (this.refs.refresh) {\n                        this.refs.refresh.classList.remove('disabled');\n                    }\n                }\n            }\n        }\n        checkSize(force, scale) {\n            if (force || this.refs.padBody.offsetWidth !== this.currentWidth) {\n                this.scale = force ? scale : this.scale;\n                this.currentWidth = this.refs.padBody.offsetWidth;\n                this.refs.canvas.width = this.currentWidth * this.scale;\n                this.refs.canvas.height = this.refs.padBody.offsetHeight * this.scale;\n                const ctx = this.refs.canvas.getContext('2d');\n                ctx.setTransform(1, 0, 0, 1, 0, 0);\n                ctx.scale(1 / this.scale, 1 / this.scale);\n                ctx.fillStyle = this.signaturePad.backgroundColor;\n                ctx.fillRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);\n                this.signaturePad.clear();\n                if (this.dataValue) {\n                    this.signaturePad.fromDataURL(this.dataValue);\n                }\n            }\n        }\n        renderElement(value, index) {\n            return this.renderTemplate('signature', {\n                element: super.renderElement(value, index),\n                required: _.get(this.component, 'validate.required', false)\n            });\n        }\n        setOpenModalElement() {\n            const template = `\n      <label class=\"control-label\">${ this.component.label }</label><br>\n      <button lang='en' class='btn btn-light btn-md open-modal-button' ref='openModal'>Click to Sign</button>\n    `;\n            this.componentModal.setOpenModalElement(template);\n        }\n        getModalPreviewTemplate() {\n            return `\n      <label class=\"control-label\">${ this.component.label }</label><br>\n      <img src=${ this.dataValue } ref='openModal' />\n    `;\n        }\n        attach(element) {\n            this.loadRefs(element, {\n                canvas: 'single',\n                refresh: 'single',\n                padBody: 'single',\n                signatureImage: 'single'\n            });\n            const superAttach = super.attach(element);\n            this.onDisabled();\n            if (this.refs.refresh && this.options.readOnly) {\n                this.refs.refresh.classList.add('disabled');\n            }\n            if (this.refs.canvas) {\n                this.signaturePad = new SignaturePad(this.refs.canvas, {\n                    minWidth: this.component.minWidth,\n                    maxWidth: this.component.maxWidth,\n                    penColor: this.component.penColor,\n                    backgroundColor: this.component.backgroundColor\n                });\n                this.signaturePad.onEnd = () => this.setValue(this.signaturePad.toDataURL());\n                this.refs.signatureImage.setAttribute('src', this.signaturePad.toDataURL());\n                if (this.refs.padBody) {\n                    if (!this.refs.padBody.style.maxWidth) {\n                        this.refs.padBody.style.maxWidth = '100%';\n                    }\n                    this.addEventListener(window, 'resize', _.debounce(() => this.checkSize(), 100));\n                    setTimeout(function checkWidth() {\n                        if (this.refs.padBody && this.refs.padBody.offsetWidth) {\n                            this.checkSize();\n                        } else {\n                            setTimeout(checkWidth.bind(this), 200);\n                        }\n                    }.bind(this), 200);\n                }\n            }\n            this.addEventListener(this.refs.refresh, 'click', event => {\n                event.preventDefault();\n                this.showCanvas(true);\n                this.signaturePad.clear();\n                this.setValue(this.defaultValue);\n            });\n            this.setValue(this.dataValue);\n            return superAttach;\n        }\n        detach() {\n            if (this.signaturePad) {\n                this.signaturePad.off();\n            }\n            this.signaturePad = null;\n            this.currentWidth = 0;\n            super.detach();\n        }\n        getValueAsString(value) {\n            return value ? 'Yes' : 'No';\n        }\n        focus() {\n            this.refs.padBody.focus();\n        }\n    };\n});"]}