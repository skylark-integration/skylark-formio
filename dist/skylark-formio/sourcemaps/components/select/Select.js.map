{"version":3,"sources":["components/select/Select.js"],"names":["define","Choices","_","Formio","Field","Form","NativePromise","SelectComponent","[object Object]","extend","schema","type","label","key","data","values","json","url","resource","custom","clearOnRefresh","limit","dataSrc","valueProperty","lazyLoad","filter","searchEnabled","searchField","minSearch","readOnlyValue","authenticate","template","selectFields","searchThreshold","tableView","fuseOptions","include","threshold","customOptions","builderInfo","title","group","icon","weight","documentation","super","init","this","validators","concat","updateArgs","triggerUpdate","debounce","args","updateItems","apply","length","selectOptions","isInfiniteScrollProvided","isFromSearch","searchServerCount","defaultServerCount","isScrollLoading","searchDownloadedResources","defaultDownloadedResources","activated","itemsLoaded","resolve","itemsLoadedResolve","dataReady","defaultSchema","emptyValue","component","inputInfo","info","elementInfo","changeEvent","isSelectResource","isSelectURL","shouldDisabled","parentDisabled","options","readOnly","itemValue","itemLabel","t","interpolate","item","replace","JSON","stringify","value","attrs","id","option","isObject","isNull","String","normalizeSingleValue","push","refs","selectContainer","widget","div","document","createElement","innerHTML","sanitize","renderTemplate","selected","isEqual","dataValue","useId","trim","element","firstChild","appendChild","items","choices","currentChoices","Array","isArray","addCurrentChoices","multiple","addPlaceholder","downloadedResources","serverCount","fromSearch","parse","err","console","warn","message","onSetItems","newItems","areItemsEqual","loading","empty","selectValues","get","areItemsEnded","areItemsDownloaded","disableInfiniteScroll","addValueOptions","placeholder","addOption","each","index","itemTemplate","setChoices","setValue","noUpdateEvent","defaultValue","search","headers","method","body","parseInt","setItems","toUpperCase","skip","query","formioBase","getBaseUrl","page","Math","abs","floor","join","select","sort","isEmpty","includes","serialize","header","makeRequest","formio","then","response","catch","emit","toString","requestHeaders","Headers","set","evaluate","getCustomItems","additionalResourcesAvailable","isNil","searchInput","forceUpdate","checkConditions","updateCustomItems","active","resourceUrl","formsUrl","getProjectUrl","loadItems","startsWith","noToken","window","indexedDB","alert","indexeddb","database","table","request","open","onupgradeneeded","event","db","target","result","createObjectStore","keyPath","autoIncrement","transaction","oncomplete","forEach","objectStore","put","onerror","errorCode","onsuccess","responseItems","getAll","iconClass","disabled","attr","render","wrapElement","input","addResource","useSearch","hasOwnProperty","placeholderValue","removeItemButton","itemSelectText","classNames","containerOuter","containerInner","transform","addItemText","noResultsText","noChoicesText","searchPlaceholderValue","shouldSort","position","dropdown","searchChoices","searchFields","Object","assign","valueComparer","resetScrollPosition","superAttach","attach","loadRefs","autocompleteInput","addEventListener","updateValue","modified","focusableElement","update","tabIndex","setAttribute","i18next","dir","destroy","choicesOptions","focus","scrollList","choiceList","onScroll","scrollTop","clientHeight","scrollHeight","detail","_isSelectOneElement","addPlaceholderItem","setChoicesValue","preventDefault","formioForm","ce","dialog","createModal","formUrl","root","ready","form","on","submission","close","_store","activeItems","_addItem","choiceId","groupId","customProperties","keyCode","activate","setDisabled","removeAttribute","disable","tabindex","enable","visible","_visible","keyValue","notFoundValuesToAdd","added","reduce","defaultAdded","found","isSelectOptions","choice","_id","map","notFoundValue","asString","bind","viewOnly","getValue","undefined","done","redraw","dataType","normalize","toLowerCase","numberValue","parseFloat","Number","isNaN","isFinite","e","stringValue","autoValue","toNumber","toBoolean","auto","singleValue","normalizeValue","flags","previousValue","changed","hasPreviousValue","hasValue","isInitApiCallNeeded","lazyLoadInit","searchProperty","removeActiveItems","setChoiceByValue","selectOption","val","unset","isBooleanOrNumber","some","find","isString","detach","elements","dirty","hasError","setErrorClasses"],"mappings":";;;;;;;AAAAA,QACI,6BACA,iBACA,eACA,0BACA,aACA,4BACD,SAAUC,EAASC,EAAGC,EAAQC,EAAOC,EAAMC,GAC1C,aACA,aAAaC,UAAwBH,EACjCI,iBAAiBC,GACb,OAAOL,EAAMM,QACTC,KAAM,SACNC,MAAO,SACPC,IAAK,SACLC,MACIC,UACAC,KAAM,GACNC,IAAK,GACLC,SAAU,GACVC,OAAQ,IAEZC,gBAAgB,EAChBC,MAAO,IACPC,QAAS,SACTC,cAAe,GACfC,UAAU,EACVC,OAAQ,GACRC,eAAe,EACfC,YAAa,GACbC,UAAW,EACXC,eAAe,EACfC,cAAc,EACdC,SAAU,gCACVC,aAAc,GACdC,gBAAiB,GACjBC,WAAW,EACXC,aACIC,QAAS,QACTC,UAAW,IAEfC,qBACE7B,GAEV8B,yBACI,OACIC,MAAO,SACPC,MAAO,QACPC,KAAM,UACNC,OAAQ,GACRC,cAAe,wCACflC,OAAQH,EAAgBG,UAGhCF,OACIqC,MAAMC,OACNC,KAAKC,WAAaD,KAAKC,WAAWC,QAAQ,WAC1C,IAAIC,KACJ,MAAMC,EAAgBjD,EAAEkD,SAAS,IAAIC,KACjCH,KACOH,KAAKO,YAAYC,MAAMR,KAAMM,IACrC,KACHN,KAAKI,cAAgB,KAAIE,KACjBA,EAAKG,SACLN,EAAaG,GAEVF,KAAiBD,KAE5BH,KAAKU,iBACDV,KAAKW,2BACLX,KAAKY,cAAe,EACpBZ,KAAKa,kBAAoB,KACzBb,KAAKc,mBAAqB,KAC1Bd,KAAKe,iBAAkB,EACvBf,KAAKgB,6BACLhB,KAAKiB,+BAETjB,KAAKkB,WAAY,EACjBlB,KAAKmB,YAAc,IAAI5D,EAAc6D,IACjCpB,KAAKqB,mBAAqBD,IAGlCE,gBACI,OAAOtB,KAAKmB,YAEhBI,oBACI,OAAO/D,EAAgBG,SAE3B6D,iBACI,OAAIxB,KAAKxB,cACE,MAIfA,oBACI,OAAIwB,KAAKyB,UAAUjD,cACRwB,KAAKyB,UAAUjD,cAEK,WAA3BwB,KAAKyB,UAAUlD,QACR,QAEJ,GAEXmD,gBACI,MAAMC,EAAO7B,MAAM8B,cAGnB,OAFAD,EAAK/D,KAAO,SACZ+D,EAAKE,YAAc,SACZF,EAEXG,uBACI,MAAkC,aAA3B9B,KAAKyB,UAAUlD,QAE1BwD,kBACI,MAAkC,QAA3B/B,KAAKyB,UAAUlD,QAE1BoC,+BACI,OAAOX,KAAK8B,kBAAoB9B,KAAK+B,YAEzCC,qBACI,OAAOlC,MAAMkC,gBAAkBhC,KAAKiC,eAExCxE,aAAaM,GACT,IAAKA,EACD,MAAO,GAEX,GAAIiC,KAAKkC,QAAQC,UAAYnC,KAAKyB,UAAU3C,cACxC,OAAOkB,KAAKoC,UAAUrE,GAE1B,GAAIA,IAASiC,KAAKyB,UAAUzC,SAAU,CAClC,MAAMqD,EAAYtE,EAAKF,OAASE,EAChC,MAA4B,iBAAdsE,EAAyBrC,KAAKsC,EAAED,GAAaA,EAE/D,GAAoB,iBAATtE,EACP,OAAOiC,KAAKsC,EAAEvE,GAElB,MAAMiB,EAAWgB,KAAKyB,UAAUzC,SAAWgB,KAAKuC,YAAYvC,KAAKyB,UAAUzC,UAAYwD,KAAMzE,IAAUA,EAAKF,MAC5G,GAAImB,EAAU,CACV,MAAMnB,EAAQmB,EAASyD,QAAQ,kBAAmB,IAClD,OAAOzD,EAASyD,QAAQ5E,EAAOmC,KAAKsC,EAAEzE,IAEtC,OAAO6E,KAAKC,UAAU5E,GAG9BN,UAAUmF,EAAO/E,EAAOgF,KAAYC,GAChC,MAAMC,GACFH,MAAOzF,EAAE6F,SAASJ,GAASA,EAAQzF,EAAE8F,OAAOL,GAAS5C,KAAKwB,WAAa0B,OAAOlD,KAAKmD,qBAAqBP,IACxG/E,MAAOA,GAKX,GAHI+E,GACA5C,KAAKU,cAAc0C,KAAKL,GAExB/C,KAAKqD,KAAKC,iBAA6C,UAA1BtD,KAAKyB,UAAU8B,OAAoB,CAChE,MAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,UAAY3D,KAAK4D,SAAS5D,KAAK6D,eAAe,gBAC9CC,SAAU3G,EAAE4G,QAAQ/D,KAAKgE,UAAWjB,EAAOH,OAC3CG,OAAAA,EACAF,MAAAA,EACAC,GAAAA,EACAmB,MAA8B,KAAvBjE,KAAKxB,eAAwBrB,EAAE6F,SAASJ,IAAUE,KACzDoB,OACJnB,EAAOoB,QAAUX,EAAIY,WACrBpE,KAAKqD,KAAKC,gBAAgBe,YAAYtB,EAAOoB,UAGrD1G,gBAAgB6G,GAEZ,GADAA,EAAQA,OACHtE,KAAKU,cAAcD,OAAQ,CAC5B,GAAIT,KAAKuE,QAAS,CACd,MAAMC,EAAiBC,MAAMC,QAAQ1E,KAAKgE,WAAahE,KAAKgE,WAAahE,KAAKgE,WAC9E,OAAOhE,KAAK2E,kBAAkBH,EAAgBF,GACtCtE,KAAKyB,UAAUmD,UACvB5E,KAAK6E,iBAGb,OAAO,EAEXpH,wBACSuC,KAAK8E,sBAGV9E,KAAK8E,oBAAoBC,YAAc/E,KAAK8E,oBAAoBrE,OAChET,KAAK+E,YAAc/E,KAAK8E,oBAAoBrE,QAEhDhD,SAAS6G,EAAOU,GACZ,GAAoB,iBAATV,EACP,IACIA,EAAQ5B,KAAKuC,MAAMX,GACrB,MAAOY,GACLC,QAAQC,KAAKF,EAAIG,SACjBf,KAGR,GAAItE,KAAKyB,UAAU6D,YAAmD,mBAA9BtF,KAAKyB,UAAU6D,WAA2B,CAC9E,MAAMC,EAAWvF,KAAKyB,UAAU6D,WAAWtF,KAAMsE,GAC7CiB,IACAjB,EAAQiB,GAWhB,IAAIC,EACJ,IATKxF,KAAKuE,SAAWvE,KAAKqD,KAAKC,kBACvBtD,KAAKyF,QAETzF,KAAK0F,MAAM1F,KAAKqD,KAAKC,kBAErBtD,KAAKyB,UAAUkE,eACfrB,EAAQnH,EAAEyI,IAAItB,EAAOtE,KAAKyB,UAAUkE,aAAcrB,QAGlDtE,KAAKW,yBAA0B,CAC/B6E,IAAgBxF,KAAK+B,aAAc5E,EAAE4G,QAAQO,EAAOtE,KAAK8E,qBACzD,MAAMe,EAAgB7F,KAAKyB,UAAUnD,MAAQgG,EAAM7D,OAC7CqF,EAAqBN,GAAiBxF,KAAK8E,qBAAuB9E,KAAK8E,oBAAoBrE,SAAW6D,EAAM7D,OAC9GoF,EACA7F,KAAK+F,wBACED,EACP9F,KAAKU,iBAELV,KAAK+E,YAAcT,EAAMS,YA2BjC,GAxBI/E,KAAKe,iBAAmBuD,GACnBkB,IACDxF,KAAK8E,oBAAsB9E,KAAK8E,oBAAsB9E,KAAK8E,oBAAoB5E,OAAOoE,GAASA,GAEnGtE,KAAK8E,oBAAoBC,YAAcT,EAAMS,aAAe/E,KAAK8E,oBAAoBC,cAErF/E,KAAK8E,oBAAsBR,MAC3BtE,KAAKU,kBAEJsE,GACDhF,KAAKgG,gBAAgB1B,GAEK,UAA1BtE,KAAKyB,UAAU8B,QAAuBvD,KAAKyB,UAAUwE,aACrDjG,KAAKkG,UAAU,KAAM,IAEzB/I,EAAEgJ,KAAK7B,EAAO,CAAC9B,EAAM4D,KACjBpG,KAAKkG,UAAUlG,KAAKoC,UAAUI,GAAOxC,KAAKqG,aAAa7D,MAAWU,OAAOkD,MAEzEpG,KAAKuE,QACLvE,KAAKuE,QAAQ+B,WAAWtG,KAAKU,cAAe,QAAS,SAAS,GACvDV,KAAKyF,QAEhBzF,KAAKe,iBAAkB,EACvBf,KAAKyF,SAAU,EACXzF,KAAKgE,UACLhE,KAAKuG,SAASvG,KAAKgE,WAAawC,eAAe,QAC5C,CACH,MAAMC,EAAezG,KAAK4E,SAAW5E,KAAKyG,iBAAqBzG,KAAKyG,aAChEA,GACAzG,KAAKuG,SAASE,GAGtBzG,KAAKqB,qBAET5D,UAAUS,EAAKwI,EAAQC,EAASzE,EAAS0E,EAAQC,GAC7C3E,EAAUA,MACV,MAAMrD,EAAYiI,SAAS9G,KAAKyB,UAAU5C,UAAW,IACrD,GAAImB,KAAKyB,UAAU7C,aAAeC,EAAY,KAAO6H,GAAUA,EAAOjG,OAAS5B,GAC3E,OAAOmB,KAAK+G,aAGa,SAD7BH,EAASA,GAAU,OACRI,gBACPH,EAAO,MAEX,MAAMvI,EAAQ0B,KAAKyB,UAAUnD,OAAS,IAChC2I,EAAOjH,KAAKe,gBAAkBf,KAAKU,cAAcD,OAAS,EAC1DyG,EAAmC,QAA3BlH,KAAKyB,UAAUlD,YACzBD,MAAAA,EACA2I,KAAAA,GAEJ/I,EAAM8B,KAAKuC,YAAYrE,GACnBiJ,WAAY/J,EAAOgK,aACnBV,OAAAA,EACApI,MAAAA,EACA2I,KAAAA,EACAI,KAAMC,KAAKC,IAAID,KAAKE,MAAMP,EAAO3I,MAEjC0B,KAAKyB,UAAU7C,aAAe8H,IAC1BjC,MAAMC,QAAQgC,GACdQ,KAAUlH,KAAKyB,UAAU7C,eAAkB8H,EAAOe,KAAK,KAEvDP,KAAUlH,KAAKyB,UAAU7C,eAAkB8H,GAG/C1G,KAAKyB,UAAUxC,eACfiI,EAAMQ,OAAS1H,KAAKyB,UAAUxC,cAE9Be,KAAKyB,UAAUkG,OACfT,EAAMS,KAAO3H,KAAKyB,UAAUkG,MAE3BxK,EAAEyK,QAAQV,KACXhJ,IAASA,EAAI2J,SAAS,KAAa,IAAN,KAAazK,EAAO0K,UAAUZ,EAAO1E,GAAQxC,KAAKuC,YAAYC,KAE3FxC,KAAKyB,UAAU/C,SACfR,IAASA,EAAI2J,SAAS,KAAa,IAAN,KAAa7H,KAAKuC,YAAYvC,KAAKyB,UAAU/C,SAE9EwD,EAAQ6F,OAASpB,EACjB3G,KAAKyF,SAAU,EACfrI,EAAO4K,YAAYhI,KAAKkC,QAAQ+F,OAAQ,SAAU/J,EAAK0I,EAAQC,EAAM3E,GAASgG,KAAKC,IAC/EnI,KAAKyF,SAAU,EACfzF,KAAK+G,SAASoB,IAAYzB,KAC3B0B,MAAMlD,IACDlF,KAAKW,2BACLX,KAAK+G,aACL/G,KAAK+F,yBAET/F,KAAKe,iBAAkB,EACvBf,KAAKyF,SAAU,EACfzF,KAAKqB,qBACLrB,KAAKqI,KAAK,kBACN5G,UAAWzB,KAAKyB,UAChB4D,QAASH,EAAIoD,aAEjBnD,QAAQC,qCAAsCpF,KAAKlC,SAG3DyK,qBACI,MAAM5B,EAAU,IAAIvJ,EAAOoL,QAC3B,GAAIxI,KAAKyB,UAAU1D,MAAQiC,KAAKyB,UAAU1D,KAAK4I,QAC3C,IACIxJ,EAAEgJ,KAAKnG,KAAKyB,UAAU1D,KAAK4I,QAASoB,IAC5BA,EAAOjK,KACP6I,EAAQ8B,IAAIV,EAAOjK,IAAKkC,KAAKuC,YAAYwF,EAAOnF,UAG1D,MAAOsC,GACLC,QAAQC,KAAKF,EAAIG,SAGzB,OAAOsB,EAEXlJ,iBACI,OAAOuC,KAAK0I,SAAS1I,KAAKyB,UAAU1D,KAAKK,QAAUJ,WAAc,UAErEP,oBACIuC,KAAK+G,SAAS/G,KAAK2I,sBAEvBlL,UACQuC,KAAKyB,UAAUpD,gBACf2B,KAAKuG,SAASvG,KAAKwB,YAEnBxB,KAAKyB,UAAUhD,WACfuB,KAAKkB,WAAY,EACjBlB,KAAKyF,SAAU,EACfzF,KAAK+G,cAET/G,KAAKO,YAAY,MAAM,GAE3BqI,mCACI,OAAOzL,EAAE0L,MAAM7I,KAAK+E,cAAgB/E,KAAK+E,YAAc/E,KAAK8E,oBAAoBrE,OAEpFsE,kBACI,OAAI/E,KAAKY,aACEZ,KAAKa,kBAETb,KAAKc,mBAEhBiE,gBAAgBnC,GACR5C,KAAKY,aACLZ,KAAKa,kBAAoB+B,EAEzB5C,KAAKc,mBAAqB8B,EAGlCkC,0BACI,OAAI9E,KAAKY,aACEZ,KAAKgB,0BAEThB,KAAKiB,2BAEhB6D,wBAAwBlC,GAChB5C,KAAKY,aACLZ,KAAKgB,0BAA4B4B,EAEjC5C,KAAKiB,2BAA6B2B,EAG1CnF,YAAYqL,EAAaC,GACrB,IAAK/I,KAAKyB,UAAU1D,KAGhB,OAFAoH,QAAQC,yBAA0BpF,KAAKlC,8CACvCkC,KAAKqB,qBAGT,GAAKrB,KAAKgJ,kBAIV,OAAQhJ,KAAKyB,UAAUlD,SACvB,IAAK,SACDyB,KAAK+G,SAAS/G,KAAKyB,UAAU1D,KAAKC,QAClC,MACJ,IAAK,OACDgC,KAAK+G,SAAS/G,KAAKyB,UAAU1D,KAAKE,MAClC,MACJ,IAAK,SACD+B,KAAKiJ,oBACL,MACJ,IAAK,WAAY,CACT,IAAKjJ,KAAKyB,UAAU1D,KAAKI,WAAa4K,IAAgB/I,KAAKkJ,OACvD,OAEJ,IAAIC,EAAcnJ,KAAKkC,QAAQ+F,OAASjI,KAAKkC,QAAQ+F,OAAOmB,YAAehM,EAAOiM,uBAElF,GADAF,OAAoBnJ,KAAKyB,UAAU1D,KAAKI,sBACpC4K,GAAe/I,KAAK4I,6BACpB,IACI5I,KAAKsJ,UAAUH,EAAaL,EAAa9I,KAAKuI,gBAChD,MAAOrD,GACLC,QAAQC,qCAAsCpF,KAAKlC,YAGvDkC,KAAK+G,SAAS/G,KAAK8E,qBAEvB,MAER,IAAK,MAAO,CACJ,IAAKiE,IAAgB/I,KAAKkJ,OACtB,OAEJ,IACItC,EACAC,GAFA3I,IAACA,GAAO8B,KAAKyB,UAAU1D,KAG3B,GAAIG,EAAIqL,WAAW,KAAM,CAErBrL,GADgBA,EAAIqL,WAAW,YAAcnM,EAAOgK,aAAehK,EAAOiM,iBAAmBjM,EAAOgK,cACpFlJ,EAEf8B,KAAKyB,UAAU1D,KAAK6I,OAKjBC,EADyB,UAD7BD,EAAS5G,KAAKyB,UAAU1D,KAAK6I,QAClBI,cACAhH,KAAKyB,UAAU1D,KAAK8I,KAEpB,KANXD,EAAS,MASb,MAAM1E,EAAUlC,KAAKyB,UAAU1C,iBAAsByK,SAAS,GAC9DxJ,KAAKsJ,UAAUpL,EAAK4K,EAAa9I,KAAKuI,eAAgBrG,EAAS0E,EAAQC,GACvE,MAER,IAAK,YAIG,GAHK4C,OAAOC,WACRD,OAAOE,MAAM,6DAEb3J,KAAKyB,UAAUmI,WAAa5J,KAAKyB,UAAUmI,UAAUC,UAAY7J,KAAKyB,UAAUmI,UAAUE,MAAO,CACjG,MAAMC,EAAUN,OAAOC,UAAUM,KAAKhK,KAAKyB,UAAUmI,UAAUC,UAC/DE,EAAQE,gBAAkBC,CAAAA,IACtB,GAAIlK,KAAKyB,UAAUlC,cAAe,CAC9B,MAAM4K,EAAKD,EAAME,OAAOC,OACJF,EAAGG,kBAAkBtK,KAAKyB,UAAUmI,UAAUE,OAC9DS,QAAS,QACTC,eAAe,IAEPC,YAAYC,WAAa,MACjC,MAAMD,EAAcN,EAAGM,YAAYzK,KAAKyB,UAAUmI,UAAUE,MAAO,aACnE9J,KAAKyB,UAAUlC,cAAcoL,QAAQnI,IACjCiI,EAAYG,YAAY5K,KAAKyB,UAAUmI,UAAUE,OAAOe,IAAIrI,UAK5EuH,EAAQe,QAAU,MACdrB,OAAOE,MAAMI,EAAQgB,aAEzBhB,EAAQiB,UAAYd,CAAAA,IAChB,MAEMU,EAFKV,EAAME,OAAOC,OACDI,YAAYzK,KAAKyB,UAAUmI,UAAUE,MAAO,aACnCc,YAAY5K,KAAKyB,UAAUmI,UAAUE,OACrE,IAAIvM,EAAc6D,IACd,MAAM6J,KACNL,EAAYM,SAASF,UAAYd,CAAAA,IAC7BA,EAAME,OAAOC,OAAOM,QAAQnI,IACxByI,EAAc7H,KAAKZ,KAEvBpB,EAAQ6J,OAEb/C,KAAK5D,IACCnH,EAAEyK,QAAQ5H,KAAKyB,UAAUmI,UAAUlL,UACpC4F,EAAQnH,EAAEuB,OAAO4F,EAAOtE,KAAKyB,UAAUmI,UAAUlL,SAErDsB,KAAK+G,SAASzC,aA/F9BtE,KAAKqB,qBAsGb5D,iBACSuC,KAAKyB,UAAUwE,aAGpBjG,KAAKkG,UAAU,GAAIlG,KAAKyB,UAAUwE,aAAeA,aAAa,IAElExI,WACQuC,KAAKkJ,SAGTlJ,KAAKkB,WAAY,EACblB,KAAKuE,QACLvE,KAAKuE,QAAQ+B,aACL1D,MAAO,GACP/E,mBAAqBmC,KAAKmL,UAAU,4CACpCC,UAAU,IACV,QAAS,SAAS,GACQ,QAA3BpL,KAAKyB,UAAUlD,SAAgD,aAA3ByB,KAAKyB,UAAUlD,SAC1DyB,KAAKkG,UAAU,GAAIlG,KAAKsC,EAAE,eAE9BtC,KAAKI,iBAET8I,aACI,OAAQlJ,KAAKyB,UAAUhD,UAAYuB,KAAKkB,WAAalB,KAAKkC,QAAQC,SAEtE1E,SACI,MAAMkE,EAAO3B,KAAK0B,UAGlB,OAFAC,EAAK0J,KAAO1J,EAAK0J,SACjB1J,EAAKiD,SAAW5E,KAAKyB,UAAUmD,SACxB9E,MAAMwL,OAAOtL,KAAKuL,YAAYvL,KAAK6D,eAAe,UACrD2H,MAAO7J,EACPjB,cAAe,GACf0F,MAAO,SAGf3I,YAAY0G,GACR,OAAOnE,KAAKyB,UAAUgK,YAAczL,KAAK6D,eAAe,eAAiBM,QAAAA,IAAaA,EAE1F1G,iBACI,MAAMiO,GAAY1L,KAAKyB,UAAUkK,eAAe,kBAAmB3L,KAAKyB,UAAU9C,cAC5EiN,EAAmB5L,KAAKsC,EAAEtC,KAAKyB,UAAUwE,aAC/C,IAAI1G,EAAgBS,KAAKyB,UAAUlC,kBACnC,GAA4B,iBAAjBA,EACP,IACIA,EAAgBmD,KAAKuC,MAAM1F,GAC7B,MAAO2F,GACLC,QAAQC,KAAKF,EAAIG,SACjB9F,KAGR,OACIsM,kBAAkB7L,KAAKyB,UAAU2J,UAAmBjO,EAAEyI,IAAI5F,KAAKyB,UAAW,oBAAoB,GAC9FqK,eAAgB,GAChBC,YACIC,eAAgB,oCAChBC,eAAgBjM,KAAKkM,UAAU,QAAS,6CAE5CC,aAAa,EACblG,cAAejG,KAAKyB,UAAUwE,YAC9B2F,iBAAkBA,EAClBQ,cAAepM,KAAKsC,EAAE,oBACtB+J,cAAerM,KAAKsC,EAAE,6BACtBgK,uBAAwBtM,KAAKsC,EAAE,kBAC/BiK,YAAY,EACZC,SAAUxM,KAAKyB,UAAUgL,UAAY,OACrC9N,cAAe+M,EACfgB,eAAgB1M,KAAKyB,UAAU7C,YAC/B+N,aAAcxP,EAAEyI,IAAI5F,KAAM,0BAA2B,UACrDZ,YAAawN,OAAOC,UAAW1P,EAAEyI,IAAI5F,KAAM,6BACvCX,QAAS,QACTC,UAAWnC,EAAEyI,IAAI5F,KAAM,4BAA6B,MAExD8M,cAAe3P,EAAE4G,QACjBgJ,qBAAqB,KAClBxN,GAGX9B,OAAO0G,GACH,MAAM6I,EAAclN,MAAMmN,OAAO9I,GACjCnE,KAAKkN,SAAS/I,GACVb,gBAAiB,SACjBmI,YAAa,SACb0B,kBAAmB,WAEvB,MAAMA,EAAoBnN,KAAKqD,KAAK8J,kBAChCA,GACAnN,KAAKoN,iBAAiBD,EAAmB,SAAUjD,IAC/ClK,KAAKuG,SAAS2D,EAAME,OAAOxH,SAGnC,MAAM4I,EAAQxL,KAAKqD,KAAKC,gBACxB,IAAKkI,EACD,OAGJ,GADAxL,KAAKoN,iBAAiB5B,EAAOxL,KAAK0B,UAAUG,YAAa,IAAM7B,KAAKqN,YAAY,MAAQC,UAAU,KACpE,UAA1BtN,KAAKyB,UAAU8B,OAaf,OAZAvD,KAAKI,gBACLJ,KAAKuN,iBAAmB/B,EACxBxL,KAAKoN,iBAAiB5B,EAAO,QAAS,IAAMxL,KAAKwN,eACjDxN,KAAKoN,iBAAiB5B,EAAO,UAAWtB,IACpC,MAAMpM,IAACA,GAAOoM,GAEN,YACA,UACFrC,SAAS/J,IACXkC,KAAKuG,SAASvG,KAAKwB,cAK/B,MAAMiM,EAAWjC,EAAMiC,SACvBzN,KAAK6E,iBACL2G,EAAMkC,aAAa,MAAO1N,KAAK2N,QAAQC,OACnC5N,KAAKuE,SACLvE,KAAKuE,QAAQsJ,UAEjB,MAAMC,EAAiB9N,KAAK8N,iBAuF5B,OAtFA9N,KAAKuE,QAAU,IAAIrH,EAAQsO,EAAOsC,GAClC9N,KAAKoN,iBAAiB5B,EAAO,eAAgB,KACzCxL,KAAKuE,QAAQiH,MAAMrH,QAAQvB,MAAQ,GACnC5C,KAAKO,YAAY,MAAM,KAEvBP,KAAKU,eAAiBV,KAAKU,cAAcD,QACzCT,KAAKuE,QAAQ+B,WAAWtG,KAAKU,cAAe,QAAS,SAAS,GAE9DV,KAAKyB,UAAUmD,SACf5E,KAAKuN,iBAAmBvN,KAAKuE,QAAQiH,MAAMrH,SAE3CnE,KAAKuN,iBAAmBvN,KAAKuE,QAAQ0H,eAAe9H,QACpDnE,KAAKuE,QAAQyH,eAAe7H,QAAQuJ,aAAa,WAAY,MACzDI,EAAenP,eACfqB,KAAKoN,iBAAiBpN,KAAKuE,QAAQyH,eAAe7H,QAAS,QAAS,IAAMnE,KAAKuN,iBAAiBQ,UAGpG/N,KAAKW,2BACLX,KAAKgO,WAAahO,KAAKuE,QAAQ0J,WAAW9J,QAC1CnE,KAAKkO,SAAW,OACgBlO,KAAKe,iBAAmBf,KAAK4I,8BAAgC5I,KAAKgO,WAAWG,UAAYnO,KAAKgO,WAAWI,cAAgBpO,KAAKgO,WAAWK,eAEjKrO,KAAKe,iBAAkB,EACvBf,KAAKuE,QAAQ+B,aACL1D,SAAW5C,KAAK8C,aAChBjF,MAAO,aACPuN,UAAU,IACV,QAAS,SACjBpL,KAAKI,cAAcJ,KAAKuE,QAAQiH,MAAMrH,QAAQvB,UAGtD5C,KAAKoN,iBAAiBpN,KAAKgO,WAAY,SAAUhO,KAAKkO,WAE1DlO,KAAKuN,iBAAiBG,aAAa,WAAYD,GAC3CzN,KAAKyB,UAAU7C,cACXoB,KAAKuE,SAAWvE,KAAKuE,QAAQiH,OAASxL,KAAKuE,QAAQiH,MAAMrH,SACzDnE,KAAKoN,iBAAiBpN,KAAKuE,QAAQiH,MAAMrH,QAAS,QAAS+F,IACvDlK,KAAKY,eAAiBsJ,EAAME,OAAOxH,MAC9BsH,EAAME,OAAOxH,OAGd5C,KAAK+E,YAAc,KACnB/E,KAAK8E,wBAHL9E,KAAKI,kBAOjBJ,KAAKoN,iBAAiB5B,EAAO,SAAUtB,GAASlK,KAAKI,cAAc8J,EAAMoE,OAAO1L,QAChF5C,KAAKoN,iBAAiB5B,EAAO,aAAc,IAAMxL,KAAKI,kBAE1DJ,KAAKoN,iBAAiB5B,EAAO,eAAgB,KACrCxL,KAAKgE,WACLhE,KAAKI,gBAETJ,KAAKwN,WAELM,EAAelC,kBAAoB5L,KAAKuE,QAAQgK,sBAChDvO,KAAKwO,mBAAmBV,EAAelC,kBACvC5L,KAAKoN,iBAAiB5B,EAAO,aAAc,KACvCxL,KAAKwO,mBAAmBV,EAAelC,qBAG/C5L,KAAKgG,kBACLhG,KAAKyO,gBAAgBzO,KAAKgE,WACtBhE,KAAK8B,kBAAoB9B,KAAKqD,KAAKoI,aACnCzL,KAAKoN,iBAAiBpN,KAAKqD,KAAKoI,YAAa,QAASvB,IAClDA,EAAMwE,iBACN,MAAMC,EAAa3O,KAAK4O,GAAG,OACrBC,EAAS7O,KAAK8O,YAAYH,GAE1BI,KADa5R,EAAEyI,IAAI5F,KAAKgP,KAAM,oBAAqB5R,EAAOgK,sBACvBpH,KAAKyB,UAAU1D,KAAKI,WAC7D,IAAIb,EAAKqR,EAAYI,MAAaE,MAAM/G,KAAKgH,IACzCA,EAAKC,GAAG,SAAUC,IACVpP,KAAKyB,UAAUmD,WACfwK,MACOpP,KAAKgE,UACRoL,IAGRpP,KAAKuG,SAAS6I,GACdP,EAAOQ,cAKvBrP,KAAKoL,SAAWpL,KAAKgC,eACrBhC,KAAKI,gBACE4M,EAEXvP,mBAAmBmO,GACD5L,KAAKuE,QAAQ+K,OAAOC,YACvB9O,QACPT,KAAKuE,QAAQiL,UACT5M,MAAOgJ,EACP/N,MAAO+N,EACP6D,SAAU,EACVC,SAAU,EACVC,iBAAkB,KAClB1J,aAAa,EACb2J,QAAS,OAIrBnS,SACmC,WAA3BuC,KAAKyB,UAAUlD,SACfyB,KAAKiJ,oBAETjJ,KAAK6P,WAETzE,aAAaA,GACTtL,MAAMsL,SAAWA,EACZpL,KAAKuE,UAGN6G,GACApL,KAAK8P,YAAY9P,KAAKuE,QAAQ0H,eAAe9H,SAAS,GACtDnE,KAAKuN,iBAAiBwC,gBAAgB,YACtC/P,KAAKuE,QAAQyL,YAEbhQ,KAAK8P,YAAY9P,KAAKuE,QAAQ0H,eAAe9H,SAAS,GACtDnE,KAAKuN,iBAAiBG,aAAa,WAAY1N,KAAKyB,UAAUwO,UAAY,GAC1EjQ,KAAKuE,QAAQ2L,WAGrB9E,eACI,OAAOtL,MAAMsL,SAEjB+E,YAAYvN,GACJA,IAAU5C,KAAKoQ,WAAcxN,GAC7B5C,KAAKI,gBAETN,MAAMqQ,QAAUvN,EAEpBuN,cACI,OAAOrQ,MAAMqQ,QAEjB1S,kBAAkBO,EAAQsG,EAAO+L,GAC7B,IAAKrS,EACD,OAAO,EAEX,MAAMsS,KACAC,EAAQvS,EAAOwS,OAAO,CAACC,EAAc7N,KACvC,IAAKA,GAASzF,EAAEyK,QAAQhF,GACpB,OAAO6N,EAEX,IAAIC,GAAQ,EACZ,MAAMC,EAAkBrM,IAAUtE,KAAKU,cAYvC,OAXI4D,GAASA,EAAM7D,QACftD,EAAEgJ,KAAK7B,EAAOsM,IACV,GAAIA,EAAOC,KAAOjO,EAAMiO,KAAOD,EAAOC,MAAQjO,EAAMiO,IAEhD,OADAH,GAAQ,GACD,EAEX,MAAMtO,EAAYiO,EAAWO,EAAOhO,MAAQ5C,KAAKoC,UAAUwO,EAAQD,GAEnE,QADAD,GAASvT,EAAE4G,QAAQ3B,EAAWQ,MAIjC8N,EAOEA,GAASD,GANZH,EAAoBlN,MAChBR,MAAO5C,KAAKoC,UAAUQ,GACtB/E,MAAOmC,KAAKqG,aAAazD,MAEtB,KAGZ,GAUH,OATI0N,EAAoB7P,SAChBT,KAAKuE,QACLvE,KAAKuE,QAAQ+B,WAAWgK,EAAqB,QAAS,SAAS,GAE/DA,EAAoBQ,IAAIC,IACpB/Q,KAAKkG,UAAU6K,EAAcnO,MAAOmO,EAAclT,UAIvD0S,EAEX9S,iBAAiBM,GACb,OAAOiC,KAAKyB,UAAUmD,UAAYH,MAAMC,QAAQ3G,GAAQA,EAAK+S,IAAI9Q,KAAKgR,SAASC,KAAKjR,OAAOyH,KAAK,MAAQzH,KAAKgR,SAASjT,GAE1HN,WACI,GAAIuC,KAAKkR,UAAYlR,KAAKyF,UAAYzF,KAAKyB,UAAUhD,WAAauB,KAAKU,cAAcD,SAAWT,KAAKmE,QACjG,OAAOnE,KAAKgE,UAEhB,IAAIpB,EAAQ5C,KAAKwB,WACjB,GAAIxB,KAAKuE,QACL3B,EAAQ5C,KAAKuE,QAAQ4M,UAAS,IACzBnR,KAAKyB,UAAUmD,UAAY5E,KAAKyB,UAAUwE,aAAerD,IAAU5C,KAAKsC,EAAEtC,KAAKyB,UAAUwE,eAC1FrD,EAAQ5C,KAAKwB,iBAEd,GAAIxB,KAAKqD,KAAKC,iBAEjB,GADAV,EAAQ5C,KAAKqD,KAAKC,gBAAgBV,MACP,KAAvB5C,KAAKxB,cAAsB,CAC3B,GAAc,KAAVoE,EACA,SAEJ,MAAMG,EAAS/C,KAAKU,cAAckC,GAC9BG,GAAU5F,EAAE6F,SAASD,EAAOH,SAC5BA,EAAQG,EAAOH,aAIvBA,EAAQ5C,KAAKgE,UAKjB,YAHcoN,IAAVxO,GAAiC,OAAVA,IACvBA,EAAQ,IAELA,EAEXnF,SACI,MAAM4T,EAAOvR,MAAMwR,SAEnB,OADAtR,KAAKI,gBACEiR,EAEX5T,qBAAqBmF,GACjB,IAAKA,EACD,OAEJ,MAAM2O,EAAWvR,KAAKyB,UAAoB,UAAK,OAEzC+P,GACF5O,MAFuC,iBAAVA,EAAqBA,EAAM6O,cAAgB7O,EAGxEnF,WACI,IACI,MAAMiU,EAAcC,WAAW3R,KAAK4C,OACpC,OAAKgP,OAAOC,MAAMH,IAAgBI,SAASJ,IACvC1R,KAAK4C,MAAQ8O,EACN1R,MAEJA,KACT,MAAO+R,GACL,OAAO/R,OAGfvC,YACI,IAEI,MADoC,SAAfuC,KAAK4C,OAAmC,UAAf5C,KAAK4C,OAE/C5C,KAAK4C,MAAuB,SAAf5C,KAAK4C,MACX5C,MAEJA,KACT,MAAO+R,GACL,OAAO/R,OAGfvC,WACI,IACI,MAAMuU,EAAoC,iBAAfhS,KAAK4C,MAAqBF,KAAKC,UAAU3C,KAAK4C,OAAS5C,KAAK4C,MAAM0F,WAC7F,OAAI0J,GACAhS,KAAK4C,MAAQoP,EACNhS,MAEJA,KACT,MAAO+R,GACL,OAAO/R,OAGfvC,OACI,IACI,MAAMwU,EAAYjS,KAAKsI,WAAW4J,WAAWC,YAI7C,OAHIF,IAAc9U,EAAE6F,SAASiP,KACzBjS,KAAK4C,MAAQqP,GAEVjS,KACT,MAAO+R,GACL,OAAO/R,QAInB,OAAQuR,GACR,IAAK,OACG,OAAOC,EAAUY,OAAOxP,MAEhC,IAAK,SACG,OAAO4O,EAAUU,WAAWtP,MAEpC,IAAK,SACG,OAAO4O,EAAUlJ,WAAW1F,MAEpC,IAAK,UACD,OAAO4O,EAAUW,YAAYvP,OAGrCnF,eAAemF,GACX,OAAI5C,KAAKyB,UAAUmD,UAAYH,MAAMC,QAAQ9B,GAClCA,EAAMkO,IAAIuB,GAAerS,KAAKmD,qBAAqBkP,IAEvDvS,MAAMwS,eAAetS,KAAKmD,qBAAqBP,IAE1DnF,SAASmF,EAAO2P,MACZ,MAAMC,EAAgBxS,KAAKgE,UACrByO,EAAUzS,KAAKqN,YAAYzK,EAAO2P,GACxC3P,EAAQ5C,KAAKgE,UACb,MAAM0O,EAAmBjO,MAAMC,QAAQ8N,GAAiBA,EAAc/R,OAAS+R,EACzEG,EAAWlO,MAAMC,QAAQ9B,GAASA,EAAMnC,OAASmC,EAavD,GAZI5C,KAAKyB,UAAUmD,UAAYH,MAAMC,QAAQ9B,GACzCA,EAAQA,EAAMkO,IAAIlO,GACO,kBAAVA,GAAwC,iBAAVA,EAC9BA,EAAM0F,WAEV1F,GAGU,kBAAVA,GAAwC,iBAAVA,IACrCA,EAAQA,EAAM0F,YAGlBtI,KAAKyF,QACL,OAAOgN,EAEX,GAAIzS,KAAK4S,oBAAoBD,GAAW,CACpC3S,KAAKyF,SAAU,EACfzF,KAAK6S,cAAe,EACpB,MAAMC,EAAiB9S,KAAKyB,UAAU7C,aAAeoB,KAAKyB,UAAUjD,cAEpE,OADAwB,KAAKI,cAAcjD,EAAEyI,IAAIhD,EAAM7E,MAAQ6E,EAAOkQ,EAAgBlQ,IAAQ,GAC/D6P,EAIX,OAFAzS,KAAKgG,kBACLhG,KAAKyO,gBAAgB7L,EAAO8P,GACrBD,EAEXhV,oBAAoBkV,GAChB,OAAO3S,KAAKyB,UAAUhD,WAAauB,KAAK6S,eAAiB7S,KAAKkJ,SAAWlJ,KAAKU,cAAcD,QAAUkS,GAAY3S,KAAKmQ,UAAYnQ,KAAKyB,UAAU7C,aAAeoB,KAAKyB,UAAUjD,eAEpLf,gBAAgBmF,EAAO8P,GACnB,MAAMC,EAAWlO,MAAMC,QAAQ9B,GAASA,EAAMnC,OAASmC,EAEvD,GADA8P,OAAwCtB,IAArBsB,GAAwCA,EACvD1S,KAAKuE,QACL,GAAIoO,EAAU,CACV3S,KAAKuE,QAAQwO,oBACb,MAAMvO,EAAiBC,MAAMC,QAAQ9B,GAASA,GAASA,GAClD5C,KAAK2E,kBAAkBH,EAAgBxE,KAAKU,eAAe,IAC5DV,KAAKuE,QAAQ+B,WAAWtG,KAAKU,cAAe,QAAS,SAAS,GAElEV,KAAKuE,QAAQyO,iBAAiBpQ,QACvB8P,GACP1S,KAAKuE,QAAQwO,yBAGjB,GAAIJ,EAAU,CACV,MAAM3U,EAASyG,MAAMC,QAAQ9B,GAASA,GAASA,GAC/CzF,EAAEgJ,KAAKnG,KAAKU,cAAeuS,IACvB9V,EAAEgJ,KAAKnI,EAAQkV,IACX,GAAI/V,EAAE4G,QAAQmP,EAAKD,EAAarQ,QAAUqQ,EAAa9O,QAGnD,OAFA8O,EAAa9O,QAAQL,UAAW,EAChCmP,EAAa9O,QAAQuJ,aAAa,WAAY,aACvC,WAKnBvQ,EAAEgJ,KAAKnG,KAAKU,cAAeuS,IACnBA,EAAa9O,UACb8O,EAAa9O,QAAQL,UAAW,EAChCmP,EAAa9O,QAAQ4L,gBAAgB,eAMzDtS,cACIuC,KAAKuG,SAAS,IAAMC,eAAe,IACnCxG,KAAKmT,QAET1V,mBACI,OAAO,EAEXA,kBAAkBmF,GACd,MAAwB,iBAAVA,GAAuC,kBAAVA,EAE/CnF,SAASmF,GAYL,GAXAA,EAAQA,GAAS5C,KAAKmR,WAClBnR,KAAKoT,kBAAkBxQ,KACvBA,EAAQA,EAAM0F,YAEd7D,MAAMC,QAAQ9B,IAAUA,EAAMyQ,KAAK7Q,GAAQxC,KAAKoT,kBAAkB5Q,MAClEI,EAAQA,EAAMkO,IAAItO,IACVxC,KAAKoT,kBAAkB5Q,KACvBA,EAAOA,EAAK8F,gBAKhB,SACA,UACFT,SAAS7H,KAAKyB,UAAUlD,SAAU,CACpC,MAAM+F,MAACA,EAAK9F,cAAEA,GAA4C,WAA3BwB,KAAKyB,UAAUlD,SAC1C+F,MAAOtE,KAAKyB,UAAU1D,KAAKC,OAC3BQ,cAAe,UAEf8F,MAAOtE,KAAK2I,iBACZnK,cAAewB,KAAKxB,eAExBoE,EAAQ5C,KAAKyB,UAAUmD,UAAYH,MAAMC,QAAQ9B,GAASzF,EAAEuB,OAAO4F,EAAO9B,GAAQI,EAAMiF,SAASrF,EAAKI,QAAUpE,EAAgBrB,EAAEmW,KAAKhP,GACnI9F,EACAoE,IACCA,EAET,GAAIzF,EAAEoW,SAAS3Q,GACX,OAAOA,EAEX,GAAI6B,MAAMC,QAAQ9B,GAAQ,CACtB,MAAM0B,KAEN,OADA1B,EAAM+H,QAAQnI,GAAQ8B,EAAMlB,KAAKpD,KAAKqG,aAAa7D,KAC5C8B,EAAM7D,OAAS,EAAI6D,EAAMmD,KAAK,UAAY,IAErD,OAAQtK,EAAE0L,MAAMjG,GAAoC,IAA3B5C,KAAKqG,aAAazD,GAE/CnF,SACIqC,MAAM0T,SACFxT,KAAKuE,UACLvE,KAAKuE,QAAQsJ,UACb7N,KAAKuE,QAAU,MAGvB9G,QACQuC,KAAKuN,kBACLvN,KAAKuN,iBAAiBQ,QAG9BtQ,gBAAgBgW,EAAUC,EAAOC,GAC7B7T,MAAM8T,gBAAgBH,EAAUC,EAAOC,GACnC3T,KAAKuE,QACLzE,MAAM8T,iBAAiB5T,KAAKuE,QAAQ0H,eAAe9H,SAAUuP,EAAOC,GAEpE7T,MAAM8T,iBAAiB5T,KAAKqD,KAAKC,iBAAkBoQ,EAAOC","file":"../../../components/select/Select.js","sourcesContent":["define([\n    '../../utils/ChoicesWrapper',\n    'skylark-lodash',\n    '../../Formio',\n    '../_classes/field/Field',\n    '../../Form',\n    '../../vendors/getify/npo'\n], function (Choices, _, Formio, Field, Form, NativePromise) {\n    'use strict';\n    return class SelectComponent extends Field {\n        static schema(...extend) {\n            return Field.schema({\n                type: 'select',\n                label: 'Select',\n                key: 'select',\n                data: {\n                    values: [],\n                    json: '',\n                    url: '',\n                    resource: '',\n                    custom: ''\n                },\n                clearOnRefresh: false,\n                limit: 100,\n                dataSrc: 'values',\n                valueProperty: '',\n                lazyLoad: true,\n                filter: '',\n                searchEnabled: true,\n                searchField: '',\n                minSearch: 0,\n                readOnlyValue: false,\n                authenticate: false,\n                template: '<span>{{ item.label }}</span>',\n                selectFields: '',\n                searchThreshold: 0.3,\n                tableView: true,\n                fuseOptions: {\n                    include: 'score',\n                    threshold: 0.3\n                },\n                customOptions: {}\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Select',\n                group: 'basic',\n                icon: 'th-list',\n                weight: 70,\n                documentation: 'http://help.form.io/userguide/#select',\n                schema: SelectComponent.schema()\n            };\n        }\n        init() {\n            super.init();\n            this.validators = this.validators.concat(['select']);\n            let updateArgs = [];\n            const triggerUpdate = _.debounce((...args) => {\n                updateArgs = [];\n                return this.updateItems.apply(this, args);\n            }, 100);\n            this.triggerUpdate = (...args) => {\n                if (args.length) {\n                    updateArgs = args;\n                }\n                return triggerUpdate(...updateArgs);\n            };\n            this.selectOptions = [];\n            if (this.isInfiniteScrollProvided) {\n                this.isFromSearch = false;\n                this.searchServerCount = null;\n                this.defaultServerCount = null;\n                this.isScrollLoading = false;\n                this.searchDownloadedResources = [];\n                this.defaultDownloadedResources = [];\n            }\n            this.activated = false;\n            this.itemsLoaded = new NativePromise(resolve => {\n                this.itemsLoadedResolve = resolve;\n            });\n        }\n        get dataReady() {\n            return this.itemsLoaded;\n        }\n        get defaultSchema() {\n            return SelectComponent.schema();\n        }\n        get emptyValue() {\n            if (this.valueProperty) {\n                return '';\n            }\n            return {};\n        }\n        get valueProperty() {\n            if (this.component.valueProperty) {\n                return this.component.valueProperty;\n            }\n            if (this.component.dataSrc === 'values') {\n                return 'value';\n            }\n            return '';\n        }\n        get inputInfo() {\n            const info = super.elementInfo();\n            info.type = 'select';\n            info.changeEvent = 'change';\n            return info;\n        }\n        get isSelectResource() {\n            return this.component.dataSrc === 'resource';\n        }\n        get isSelectURL() {\n            return this.component.dataSrc === 'url';\n        }\n        get isInfiniteScrollProvided() {\n            return this.isSelectResource || this.isSelectURL;\n        }\n        get shouldDisabled() {\n            return super.shouldDisabled || this.parentDisabled;\n        }\n        itemTemplate(data) {\n            if (!data) {\n                return '';\n            }\n            if (this.options.readOnly && this.component.readOnlyValue) {\n                return this.itemValue(data);\n            }\n            if (data && !this.component.template) {\n                const itemLabel = data.label || data;\n                return typeof itemLabel === 'string' ? this.t(itemLabel) : itemLabel;\n            }\n            if (typeof data === 'string') {\n                return this.t(data);\n            }\n            const template = this.component.template ? this.interpolate(this.component.template, { item: data }) : data.label;\n            if (template) {\n                const label = template.replace(/<\\/?[^>]+(>|$)/g, '');\n                return template.replace(label, this.t(label));\n            } else {\n                return JSON.stringify(data);\n            }\n        }\n        addOption(value, label, attrs = {}, id) {\n            const option = {\n                value: _.isObject(value) ? value : _.isNull(value) ? this.emptyValue : String(this.normalizeSingleValue(value)),\n                label: label\n            };\n            if (value) {\n                this.selectOptions.push(option);\n            }\n            if (this.refs.selectContainer && this.component.widget === 'html5') {\n                const div = document.createElement('div');\n                div.innerHTML = this.sanitize(this.renderTemplate('selectOption', {\n                    selected: _.isEqual(this.dataValue, option.value),\n                    option,\n                    attrs,\n                    id,\n                    useId: this.valueProperty === '' && _.isObject(value) && id\n                })).trim();\n                option.element = div.firstChild;\n                this.refs.selectContainer.appendChild(option.element);\n            }\n        }\n        addValueOptions(items) {\n            items = items || [];\n            if (!this.selectOptions.length) {\n                if (this.choices) {\n                    const currentChoices = Array.isArray(this.dataValue) ? this.dataValue : [this.dataValue];\n                    return this.addCurrentChoices(currentChoices, items);\n                } else if (!this.component.multiple) {\n                    this.addPlaceholder();\n                }\n            }\n            return false;\n        }\n        disableInfiniteScroll() {\n            if (!this.downloadedResources) {\n                return;\n            }\n            this.downloadedResources.serverCount = this.downloadedResources.length;\n            this.serverCount = this.downloadedResources.length;\n        }\n        setItems(items, fromSearch) {\n            if (typeof items == 'string') {\n                try {\n                    items = JSON.parse(items);\n                } catch (err) {\n                    console.warn(err.message);\n                    items = [];\n                }\n            }\n            if (this.component.onSetItems && typeof this.component.onSetItems === 'function') {\n                const newItems = this.component.onSetItems(this, items);\n                if (newItems) {\n                    items = newItems;\n                }\n            }\n            if (!this.choices && this.refs.selectContainer) {\n                if (this.loading) {\n                }\n                this.empty(this.refs.selectContainer);\n            }\n            if (this.component.selectValues) {\n                items = _.get(items, this.component.selectValues, items) || [];\n            }\n            let areItemsEqual;\n            if (this.isInfiniteScrollProvided) {\n                areItemsEqual = this.isSelectURL ? _.isEqual(items, this.downloadedResources) : false;\n                const areItemsEnded = this.component.limit > items.length;\n                const areItemsDownloaded = areItemsEqual && this.downloadedResources && this.downloadedResources.length === items.length;\n                if (areItemsEnded) {\n                    this.disableInfiniteScroll();\n                } else if (areItemsDownloaded) {\n                    this.selectOptions = [];\n                } else {\n                    this.serverCount = items.serverCount;\n                }\n            }\n            if (this.isScrollLoading && items) {\n                if (!areItemsEqual) {\n                    this.downloadedResources = this.downloadedResources ? this.downloadedResources.concat(items) : items;\n                }\n                this.downloadedResources.serverCount = items.serverCount || this.downloadedResources.serverCount;\n            } else {\n                this.downloadedResources = items || [];\n                this.selectOptions = [];\n            }\n            if (!fromSearch) {\n                this.addValueOptions(items);\n            }\n            if (this.component.widget === 'html5' && !this.component.placeholder) {\n                this.addOption(null, '');\n            }\n            _.each(items, (item, index) => {\n                this.addOption(this.itemValue(item), this.itemTemplate(item), {}, String(index));\n            });\n            if (this.choices) {\n                this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n            } else if (this.loading) {\n            }\n            this.isScrollLoading = false;\n            this.loading = false;\n            if (this.dataValue) {\n                this.setValue(this.dataValue, { noUpdateEvent: true });\n            } else {\n                const defaultValue = this.multiple ? this.defaultValue || [] : this.defaultValue;\n                if (defaultValue) {\n                    this.setValue(defaultValue);\n                }\n            }\n            this.itemsLoadedResolve();\n        }\n        loadItems(url, search, headers, options, method, body) {\n            options = options || {};\n            const minSearch = parseInt(this.component.minSearch, 10);\n            if (this.component.searchField && minSearch > 0 && (!search || search.length < minSearch)) {\n                return this.setItems([]);\n            }\n            method = method || 'GET';\n            if (method.toUpperCase() === 'GET') {\n                body = null;\n            }\n            const limit = this.component.limit || 100;\n            const skip = this.isScrollLoading ? this.selectOptions.length : 0;\n            const query = this.component.dataSrc === 'url' ? {} : {\n                limit,\n                skip\n            };\n            url = this.interpolate(url, {\n                formioBase: Formio.getBaseUrl(),\n                search,\n                limit,\n                skip,\n                page: Math.abs(Math.floor(skip / limit))\n            });\n            if (this.component.searchField && search) {\n                if (Array.isArray(search)) {\n                    query[`${ this.component.searchField }`] = search.join(',');\n                } else {\n                    query[`${ this.component.searchField }`] = search;\n                }\n            }\n            if (this.component.selectFields) {\n                query.select = this.component.selectFields;\n            }\n            if (this.component.sort) {\n                query.sort = this.component.sort;\n            }\n            if (!_.isEmpty(query)) {\n                url += (!url.includes('?') ? '?' : '&') + Formio.serialize(query, item => this.interpolate(item));\n            }\n            if (this.component.filter) {\n                url += (!url.includes('?') ? '?' : '&') + this.interpolate(this.component.filter);\n            }\n            options.header = headers;\n            this.loading = true;\n            Formio.makeRequest(this.options.formio, 'select', url, method, body, options).then(response => {\n                this.loading = false;\n                this.setItems(response, !!search);\n            }).catch(err => {\n                if (this.isInfiniteScrollProvided) {\n                    this.setItems([]);\n                    this.disableInfiniteScroll();\n                }\n                this.isScrollLoading = false;\n                this.loading = false;\n                this.itemsLoadedResolve();\n                this.emit('componentError', {\n                    component: this.component,\n                    message: err.toString()\n                });\n                console.warn(`Unable to load resources for ${ this.key }`);\n            });\n        }\n        get requestHeaders() {\n            const headers = new Formio.Headers();\n            if (this.component.data && this.component.data.headers) {\n                try {\n                    _.each(this.component.data.headers, header => {\n                        if (header.key) {\n                            headers.set(header.key, this.interpolate(header.value));\n                        }\n                    });\n                } catch (err) {\n                    console.warn(err.message);\n                }\n            }\n            return headers;\n        }\n        getCustomItems() {\n            return this.evaluate(this.component.data.custom, { values: [] }, 'values');\n        }\n        updateCustomItems() {\n            this.setItems(this.getCustomItems() || []);\n        }\n        refresh() {\n            if (this.component.clearOnRefresh) {\n                this.setValue(this.emptyValue);\n            }\n            if (this.component.lazyLoad) {\n                this.activated = false;\n                this.loading = true;\n                this.setItems([]);\n            }\n            this.updateItems(null, true);\n        }\n        get additionalResourcesAvailable() {\n            return _.isNil(this.serverCount) || this.serverCount > this.downloadedResources.length;\n        }\n        get serverCount() {\n            if (this.isFromSearch) {\n                return this.searchServerCount;\n            }\n            return this.defaultServerCount;\n        }\n        set serverCount(value) {\n            if (this.isFromSearch) {\n                this.searchServerCount = value;\n            } else {\n                this.defaultServerCount = value;\n            }\n        }\n        get downloadedResources() {\n            if (this.isFromSearch) {\n                return this.searchDownloadedResources;\n            }\n            return this.defaultDownloadedResources;\n        }\n        set downloadedResources(value) {\n            if (this.isFromSearch) {\n                this.searchDownloadedResources = value;\n            } else {\n                this.defaultDownloadedResources = value;\n            }\n        }\n        updateItems(searchInput, forceUpdate) {\n            if (!this.component.data) {\n                console.warn(`Select component ${ this.key } does not have data configuration.`);\n                this.itemsLoadedResolve();\n                return;\n            }\n            if (!this.checkConditions()) {\n                this.itemsLoadedResolve();\n                return;\n            }\n            switch (this.component.dataSrc) {\n            case 'values':\n                this.setItems(this.component.data.values);\n                break;\n            case 'json':\n                this.setItems(this.component.data.json);\n                break;\n            case 'custom':\n                this.updateCustomItems();\n                break;\n            case 'resource': {\n                    if (!this.component.data.resource || !forceUpdate && !this.active) {\n                        return;\n                    }\n                    let resourceUrl = this.options.formio ? this.options.formio.formsUrl : `${ Formio.getProjectUrl() }/form`;\n                    resourceUrl += `/${ this.component.data.resource }/submission`;\n                    if (forceUpdate || this.additionalResourcesAvailable) {\n                        try {\n                            this.loadItems(resourceUrl, searchInput, this.requestHeaders);\n                        } catch (err) {\n                            console.warn(`Unable to load resources for ${ this.key }`);\n                        }\n                    } else {\n                        this.setItems(this.downloadedResources);\n                    }\n                    break;\n                }\n            case 'url': {\n                    if (!forceUpdate && !this.active) {\n                        return;\n                    }\n                    let {url} = this.component.data;\n                    let method;\n                    let body;\n                    if (url.startsWith('/')) {\n                        const baseUrl = url.startsWith('/project') ? Formio.getBaseUrl() : Formio.getProjectUrl() || Formio.getBaseUrl();\n                        url = baseUrl + url;\n                    }\n                    if (!this.component.data.method) {\n                        method = 'GET';\n                    } else {\n                        method = this.component.data.method;\n                        if (method.toUpperCase() === 'POST') {\n                            body = this.component.data.body;\n                        } else {\n                            body = null;\n                        }\n                    }\n                    const options = this.component.authenticate ? {} : { noToken: true };\n                    this.loadItems(url, searchInput, this.requestHeaders, options, method, body);\n                    break;\n                }\n            case 'indexeddb': {\n                    if (!window.indexedDB) {\n                        window.alert(\"Your browser doesn't support current version of indexedDB\");\n                    }\n                    if (this.component.indexeddb && this.component.indexeddb.database && this.component.indexeddb.table) {\n                        const request = window.indexedDB.open(this.component.indexeddb.database);\n                        request.onupgradeneeded = event => {\n                            if (this.component.customOptions) {\n                                const db = event.target.result;\n                                const objectStore = db.createObjectStore(this.component.indexeddb.table, {\n                                    keyPath: 'myKey',\n                                    autoIncrement: true\n                                });\n                                objectStore.transaction.oncomplete = () => {\n                                    const transaction = db.transaction(this.component.indexeddb.table, 'readwrite');\n                                    this.component.customOptions.forEach(item => {\n                                        transaction.objectStore(this.component.indexeddb.table).put(item);\n                                    });\n                                };\n                            }\n                        };\n                        request.onerror = () => {\n                            window.alert(request.errorCode);\n                        };\n                        request.onsuccess = event => {\n                            const db = event.target.result;\n                            const transaction = db.transaction(this.component.indexeddb.table, 'readwrite');\n                            const objectStore = transaction.objectStore(this.component.indexeddb.table);\n                            new NativePromise(resolve => {\n                                const responseItems = [];\n                                objectStore.getAll().onsuccess = event => {\n                                    event.target.result.forEach(item => {\n                                        responseItems.push(item);\n                                    });\n                                    resolve(responseItems);\n                                };\n                            }).then(items => {\n                                if (!_.isEmpty(this.component.indexeddb.filter)) {\n                                    items = _.filter(items, this.component.indexeddb.filter);\n                                }\n                                this.setItems(items);\n                            });\n                        };\n                    }\n                }\n            }\n        }\n        addPlaceholder() {\n            if (!this.component.placeholder) {\n                return;\n            }\n            this.addOption('', this.component.placeholder, { placeholder: true });\n        }\n        activate() {\n            if (this.active) {\n                return;\n            }\n            this.activated = true;\n            if (this.choices) {\n                this.choices.setChoices([{\n                        value: '',\n                        label: `<i class=\"${ this.iconClass('refresh') }\" style=\"font-size:1.3em;\"></i>`,\n                        disabled: true\n                    }], 'value', 'label', true);\n            } else if (this.component.dataSrc === 'url' || this.component.dataSrc === 'resource') {\n                this.addOption('', this.t('loading...'));\n            }\n            this.triggerUpdate();\n        }\n        get active() {\n            return !this.component.lazyLoad || this.activated || this.options.readOnly;\n        }\n        render() {\n            const info = this.inputInfo;\n            info.attr = info.attr || {};\n            info.multiple = this.component.multiple;\n            return super.render(this.wrapElement(this.renderTemplate('select', {\n                input: info,\n                selectOptions: '',\n                index: null\n            })));\n        }\n        wrapElement(element) {\n            return this.component.addResource ? this.renderTemplate('resourceAdd', { element }) : element;\n        }\n        choicesOptions() {\n            const useSearch = this.component.hasOwnProperty('searchEnabled') ? this.component.searchEnabled : true;\n            const placeholderValue = this.t(this.component.placeholder);\n            let customOptions = this.component.customOptions || {};\n            if (typeof customOptions == 'string') {\n                try {\n                    customOptions = JSON.parse(customOptions);\n                } catch (err) {\n                    console.warn(err.message);\n                    customOptions = {};\n                }\n            }\n            return {\n                removeItemButton: this.component.disabled ? false : _.get(this.component, 'removeItemButton', true),\n                itemSelectText: '',\n                classNames: {\n                    containerOuter: 'choices form-group formio-choices',\n                    containerInner: this.transform('class', 'form-control ui fluid selection dropdown')\n                },\n                addItemText: false,\n                placeholder: !!this.component.placeholder,\n                placeholderValue: placeholderValue,\n                noResultsText: this.t('No results found'),\n                noChoicesText: this.t('No choices to choose from'),\n                searchPlaceholderValue: this.t('Type to search'),\n                shouldSort: false,\n                position: this.component.dropdown || 'auto',\n                searchEnabled: useSearch,\n                searchChoices: !this.component.searchField,\n                searchFields: _.get(this, 'component.searchFields', ['label']),\n                fuseOptions: Object.assign({}, _.get(this, 'component.fuseOptions', {}), {\n                    include: 'score',\n                    threshold: _.get(this, 'component.searchThreshold', 0.3)\n                }),\n                valueComparer: _.isEqual,\n                resetScrollPosition: false,\n                ...customOptions\n            };\n        }\n        attach(element) {\n            const superAttach = super.attach(element);\n            this.loadRefs(element, {\n                selectContainer: 'single',\n                addResource: 'single',\n                autocompleteInput: 'single'\n            });\n            const autocompleteInput = this.refs.autocompleteInput;\n            if (autocompleteInput) {\n                this.addEventListener(autocompleteInput, 'change', event => {\n                    this.setValue(event.target.value);\n                });\n            }\n            const input = this.refs.selectContainer;\n            if (!input) {\n                return;\n            }\n            this.addEventListener(input, this.inputInfo.changeEvent, () => this.updateValue(null, { modified: true }));\n            if (this.component.widget === 'html5') {\n                this.triggerUpdate();\n                this.focusableElement = input;\n                this.addEventListener(input, 'focus', () => this.update());\n                this.addEventListener(input, 'keydown', event => {\n                    const {key} = event;\n                    if ([\n                            'Backspace',\n                            'Delete'\n                        ].includes(key)) {\n                        this.setValue(this.emptyValue);\n                    }\n                });\n                return;\n            }\n            const tabIndex = input.tabIndex;\n            this.addPlaceholder();\n            input.setAttribute('dir', this.i18next.dir());\n            if (this.choices) {\n                this.choices.destroy();\n            }\n            const choicesOptions = this.choicesOptions();\n            this.choices = new Choices(input, choicesOptions);\n            this.addEventListener(input, 'hideDropdown', () => {\n                this.choices.input.element.value = '';\n                this.updateItems(null, true);\n            });\n            if (this.selectOptions && this.selectOptions.length) {\n                this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n            }\n            if (this.component.multiple) {\n                this.focusableElement = this.choices.input.element;\n            } else {\n                this.focusableElement = this.choices.containerInner.element;\n                this.choices.containerOuter.element.setAttribute('tabIndex', '-1');\n                if (choicesOptions.searchEnabled) {\n                    this.addEventListener(this.choices.containerOuter.element, 'focus', () => this.focusableElement.focus());\n                }\n            }\n            if (this.isInfiniteScrollProvided) {\n                this.scrollList = this.choices.choiceList.element;\n                this.onScroll = () => {\n                    const isLoadingAvailable = !this.isScrollLoading && this.additionalResourcesAvailable && this.scrollList.scrollTop + this.scrollList.clientHeight >= this.scrollList.scrollHeight;\n                    if (isLoadingAvailable) {\n                        this.isScrollLoading = true;\n                        this.choices.setChoices([{\n                                value: `${ this.id }-loading`,\n                                label: 'Loading...',\n                                disabled: true\n                            }], 'value', 'label');\n                        this.triggerUpdate(this.choices.input.element.value);\n                    }\n                };\n                this.addEventListener(this.scrollList, 'scroll', this.onScroll);\n            }\n            this.focusableElement.setAttribute('tabIndex', tabIndex);\n            if (this.component.searchField) {\n                if (this.choices && this.choices.input && this.choices.input.element) {\n                    this.addEventListener(this.choices.input.element, 'input', event => {\n                        this.isFromSearch = !!event.target.value;\n                        if (!event.target.value) {\n                            this.triggerUpdate();\n                        } else {\n                            this.serverCount = null;\n                            this.downloadedResources = [];\n                        }\n                    });\n                }\n                this.addEventListener(input, 'search', event => this.triggerUpdate(event.detail.value));\n                this.addEventListener(input, 'stopSearch', () => this.triggerUpdate());\n            }\n            this.addEventListener(input, 'showDropdown', () => {\n                if (this.dataValue) {\n                    this.triggerUpdate();\n                }\n                this.update();\n            });\n            if (choicesOptions.placeholderValue && this.choices._isSelectOneElement) {\n                this.addPlaceholderItem(choicesOptions.placeholderValue);\n                this.addEventListener(input, 'removeItem', () => {\n                    this.addPlaceholderItem(choicesOptions.placeholderValue);\n                });\n            }\n            this.addValueOptions();\n            this.setChoicesValue(this.dataValue);\n            if (this.isSelectResource && this.refs.addResource) {\n                this.addEventListener(this.refs.addResource, 'click', event => {\n                    event.preventDefault();\n                    const formioForm = this.ce('div');\n                    const dialog = this.createModal(formioForm);\n                    const projectUrl = _.get(this.root, 'formio.projectUrl', Formio.getBaseUrl());\n                    const formUrl = `${ projectUrl }/form/${ this.component.data.resource }`;\n                    new Form(formioForm, formUrl, {}).ready.then(form => {\n                        form.on('submit', submission => {\n                            if (this.component.multiple) {\n                                submission = [\n                                    ...this.dataValue,\n                                    submission\n                                ];\n                            }\n                            this.setValue(submission);\n                            dialog.close();\n                        });\n                    });\n                });\n            }\n            this.disabled = this.shouldDisabled;\n            this.triggerUpdate();\n            return superAttach;\n        }\n        addPlaceholderItem(placeholderValue) {\n            const items = this.choices._store.activeItems;\n            if (!items.length) {\n                this.choices._addItem({\n                    value: placeholderValue,\n                    label: placeholderValue,\n                    choiceId: 0,\n                    groupId: -1,\n                    customProperties: null,\n                    placeholder: true,\n                    keyCode: null\n                });\n            }\n        }\n        update() {\n            if (this.component.dataSrc === 'custom') {\n                this.updateCustomItems();\n            }\n            this.activate();\n        }\n        set disabled(disabled) {\n            super.disabled = disabled;\n            if (!this.choices) {\n                return;\n            }\n            if (disabled) {\n                this.setDisabled(this.choices.containerInner.element, true);\n                this.focusableElement.removeAttribute('tabIndex');\n                this.choices.disable();\n            } else {\n                this.setDisabled(this.choices.containerInner.element, false);\n                this.focusableElement.setAttribute('tabIndex', this.component.tabindex || 0);\n                this.choices.enable();\n            }\n        }\n        get disabled() {\n            return super.disabled;\n        }\n        set visible(value) {\n            if (value && !this._visible !== !value) {\n                this.triggerUpdate();\n            }\n            super.visible = value;\n        }\n        get visible() {\n            return super.visible;\n        }\n        addCurrentChoices(values, items, keyValue) {\n            if (!values) {\n                return false;\n            }\n            const notFoundValuesToAdd = [];\n            const added = values.reduce((defaultAdded, value) => {\n                if (!value || _.isEmpty(value)) {\n                    return defaultAdded;\n                }\n                let found = false;\n                const isSelectOptions = items === this.selectOptions;\n                if (items && items.length) {\n                    _.each(items, choice => {\n                        if (choice._id && value._id && choice._id === value._id) {\n                            found = true;\n                            return false;\n                        }\n                        const itemValue = keyValue ? choice.value : this.itemValue(choice, isSelectOptions);\n                        found |= _.isEqual(itemValue, value);\n                        return found ? false : true;\n                    });\n                }\n                if (!found) {\n                    notFoundValuesToAdd.push({\n                        value: this.itemValue(value),\n                        label: this.itemTemplate(value)\n                    });\n                    return true;\n                }\n                return found || defaultAdded;\n            }, false);\n            if (notFoundValuesToAdd.length) {\n                if (this.choices) {\n                    this.choices.setChoices(notFoundValuesToAdd, 'value', 'label', true);\n                } else {\n                    notFoundValuesToAdd.map(notFoundValue => {\n                        this.addOption(notFoundValue.value, notFoundValue.label);\n                    });\n                }\n            }\n            return added;\n        }\n        getValueAsString(data) {\n            return this.component.multiple && Array.isArray(data) ? data.map(this.asString.bind(this)).join(', ') : this.asString(data);\n        }\n        getValue() {\n            if (this.viewOnly || this.loading || !this.component.lazyLoad && !this.selectOptions.length || !this.element) {\n                return this.dataValue;\n            }\n            let value = this.emptyValue;\n            if (this.choices) {\n                value = this.choices.getValue(true);\n                if (!this.component.multiple && this.component.placeholder && value === this.t(this.component.placeholder)) {\n                    value = this.emptyValue;\n                }\n            } else if (this.refs.selectContainer) {\n                value = this.refs.selectContainer.value;\n                if (this.valueProperty === '') {\n                    if (value === '') {\n                        return {};\n                    }\n                    const option = this.selectOptions[value];\n                    if (option && _.isObject(option.value)) {\n                        value = option.value;\n                    }\n                }\n            } else {\n                value = this.dataValue;\n            }\n            if (value === undefined || value === null) {\n                value = '';\n            }\n            return value;\n        }\n        redraw() {\n            const done = super.redraw();\n            this.triggerUpdate();\n            return done;\n        }\n        normalizeSingleValue(value) {\n            if (!value) {\n                return;\n            }\n            const dataType = this.component['dataType'] || 'auto';\n            const denormalizedValue = typeof value === 'string' ? value.toLowerCase() : value;\n            const normalize = {\n                value: denormalizedValue,\n                toNumber() {\n                    try {\n                        const numberValue = parseFloat(this.value);\n                        if (!Number.isNaN(numberValue) && isFinite(numberValue)) {\n                            this.value = numberValue;\n                            return this;\n                        }\n                        return this;\n                    } catch (e) {\n                        return this;\n                    }\n                },\n                toBoolean() {\n                    try {\n                        const booleanValue = this.value === 'true' || this.value === 'false';\n                        if (booleanValue) {\n                            this.value = this.value === 'true';\n                            return this;\n                        }\n                        return this;\n                    } catch (e) {\n                        return this;\n                    }\n                },\n                toString() {\n                    try {\n                        const stringValue = typeof this.value === 'object' ? JSON.stringify(this.value) : this.value.toString();\n                        if (stringValue) {\n                            this.value = stringValue;\n                            return this;\n                        }\n                        return this;\n                    } catch (e) {\n                        return this;\n                    }\n                },\n                auto() {\n                    try {\n                        const autoValue = this.toString().toNumber().toBoolean();\n                        if (autoValue && !_.isObject(autoValue)) {\n                            this.value = autoValue;\n                        }\n                        return this;\n                    } catch (e) {\n                        return this;\n                    }\n                }\n            };\n            switch (dataType) {\n            case 'auto': {\n                    return normalize.auto().value;\n                }\n            case 'number': {\n                    return normalize.toNumber().value;\n                }\n            case 'string': {\n                    return normalize.toString().value;\n                }\n            case 'boolean':\n                return normalize.toBoolean().value;\n            }\n        }\n        normalizeValue(value) {\n            if (this.component.multiple && Array.isArray(value)) {\n                return value.map(singleValue => this.normalizeSingleValue(singleValue));\n            }\n            return super.normalizeValue(this.normalizeSingleValue(value));\n        }\n        setValue(value, flags = {}) {\n            const previousValue = this.dataValue;\n            const changed = this.updateValue(value, flags);\n            value = this.dataValue;\n            const hasPreviousValue = Array.isArray(previousValue) ? previousValue.length : previousValue;\n            const hasValue = Array.isArray(value) ? value.length : value;\n            if (this.component.multiple && Array.isArray(value)) {\n                value = value.map(value => {\n                    if (typeof value === 'boolean' || typeof value === 'number') {\n                        return value.toString();\n                    }\n                    return value;\n                });\n            } else {\n                if (typeof value === 'boolean' || typeof value === 'number') {\n                    value = value.toString();\n                }\n            }\n            if (this.loading) {\n                return changed;\n            }\n            if (this.isInitApiCallNeeded(hasValue)) {\n                this.loading = true;\n                this.lazyLoadInit = true;\n                const searchProperty = this.component.searchField || this.component.valueProperty;\n                this.triggerUpdate(_.get(value.data || value, searchProperty, value), true);\n                return changed;\n            }\n            this.addValueOptions();\n            this.setChoicesValue(value, hasPreviousValue);\n            return changed;\n        }\n        isInitApiCallNeeded(hasValue) {\n            return this.component.lazyLoad && !this.lazyLoadInit && !this.active && !this.selectOptions.length && hasValue && this.visible && (this.component.searchField || this.component.valueProperty);\n        }\n        setChoicesValue(value, hasPreviousValue) {\n            const hasValue = Array.isArray(value) ? value.length : value;\n            hasPreviousValue = hasPreviousValue === undefined ? true : hasPreviousValue;\n            if (this.choices) {\n                if (hasValue) {\n                    this.choices.removeActiveItems();\n                    const currentChoices = Array.isArray(value) ? value : [value];\n                    if (!this.addCurrentChoices(currentChoices, this.selectOptions, true)) {\n                        this.choices.setChoices(this.selectOptions, 'value', 'label', true);\n                    }\n                    this.choices.setChoiceByValue(value);\n                } else if (hasPreviousValue) {\n                    this.choices.removeActiveItems();\n                }\n            } else {\n                if (hasValue) {\n                    const values = Array.isArray(value) ? value : [value];\n                    _.each(this.selectOptions, selectOption => {\n                        _.each(values, val => {\n                            if (_.isEqual(val, selectOption.value) && selectOption.element) {\n                                selectOption.element.selected = true;\n                                selectOption.element.setAttribute('selected', 'selected');\n                                return false;\n                            }\n                        });\n                    });\n                } else {\n                    _.each(this.selectOptions, selectOption => {\n                        if (selectOption.element) {\n                            selectOption.element.selected = false;\n                            selectOption.element.removeAttribute('selected');\n                        }\n                    });\n                }\n            }\n        }\n        deleteValue() {\n            this.setValue('', { noUpdateEvent: true });\n            this.unset();\n        }\n        validateMultiple() {\n            return false;\n        }\n        isBooleanOrNumber(value) {\n            return typeof value === 'number' || typeof value === 'boolean';\n        }\n        asString(value) {\n            value = value || this.getValue();\n            if (this.isBooleanOrNumber(value)) {\n                value = value.toString();\n            }\n            if (Array.isArray(value) && value.some(item => this.isBooleanOrNumber(item))) {\n                value = value.map(item => {\n                    if (this.isBooleanOrNumber(item)) {\n                        item = item.toString();\n                    }\n                });\n            }\n            if ([\n                    'values',\n                    'custom'\n                ].includes(this.component.dataSrc)) {\n                const {items, valueProperty} = this.component.dataSrc === 'values' ? {\n                    items: this.component.data.values,\n                    valueProperty: 'value'\n                } : {\n                    items: this.getCustomItems(),\n                    valueProperty: this.valueProperty\n                };\n                value = this.component.multiple && Array.isArray(value) ? _.filter(items, item => value.includes(item.value)) : valueProperty ? _.find(items, [\n                    valueProperty,\n                    value\n                ]) : value;\n            }\n            if (_.isString(value)) {\n                return value;\n            }\n            if (Array.isArray(value)) {\n                const items = [];\n                value.forEach(item => items.push(this.itemTemplate(item)));\n                return items.length > 0 ? items.join('<br />') : '-';\n            }\n            return !_.isNil(value) ? this.itemTemplate(value) : '-';\n        }\n        detach() {\n            super.detach();\n            if (this.choices) {\n                this.choices.destroy();\n                this.choices = null;\n            }\n        }\n        focus() {\n            if (this.focusableElement) {\n                this.focusableElement.focus();\n            }\n        }\n        setErrorClasses(elements, dirty, hasError) {\n            super.setErrorClasses(elements, dirty, hasError);\n            if (this.choices) {\n                super.setErrorClasses([this.choices.containerInner.element], dirty, hasError);\n            } else {\n                super.setErrorClasses([this.refs.selectContainer], dirty, hasError);\n            }\n        }\n    };\n});"]}