{"version":3,"sources":["components/textfield/TextField.builder.spec.js"],"names":["define","Harness","EventEmitter","assert","describe","builder","before","done","builderBefore","editForm","events","wildcard","maxListeners","loadLimit","log","after","builderAfter","it","buildComponent","formReady","then","preview","componentPreview","innerHTML","indexOf","setComponentProperty","match","testVisibility","testBuilderProperty","equal","inputs","placeholder","setValue","value","getValue","tooltip","show","toolTipText","element","querySelector","hasClass","tabIndex"],"mappings":"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","file":"../../../components/textfield/TextField.builder.spec.js","sourcesContent":["define([\n    '../../../test/harness',\n    '../../EventEmitter',\n    'power-assert'\n], function (Harness, EventEmitter, assert) {\n    'use strict';\n    describe('TextField Builder', () => {\n        let builder = null;\n        before(done => {\n            Harness.builderBefore(done, {\n                editForm: {\n                    events: new EventEmitter({\n                        wildcard: false,\n                        maxListeners: 0,\n                        loadLimit: 250,\n                        log: true\n                    })\n                }\n            });\n        });\n        after(() => {\n            Harness.builderAfter();\n        });\n        it('Should create a new textfield component', () => {\n            builder = Harness.buildComponent('textfield');\n            return builder.editForm.formReady.then(() => {\n                const preview = builder.componentPreview.innerHTML;\n                assert(preview.indexOf('formio-component formio-component-textfield formio-component-textField') !== -1, 'Must have correct classes');\n                assert(preview.indexOf('<label class=\"control-label\" style=\"\">Text Field</label>') !== -1, 'Must have a label');\n                assert(preview.indexOf('<input name=\"data[textField]\" type=\"text\" class=\"form-control\"') !== -1, 'Must have an input');\n            });\n        });\n        it('Should allow you to change the label', done => {\n            Harness.setComponentProperty('label', 'Text Field', 'First Name', preview => {\n                assert(preview.match(/label.*input/), 'Label must be on top.');\n                assert(preview.indexOf('<label class=\"control-label\" style=\"\">First Name</label>') !== -1, 'Must have a label');\n                done();\n            });\n        });\n        it('Should allow you to hide/show the label', done => {\n            Harness.setComponentProperty('hideLabel', false, true, preview => {\n                assert(preview.indexOf('<label class=\"control-label\"') === -1, 'Must not have a label');\n                Harness.setComponentProperty('hideLabel', true, false, preview => {\n                    assert(preview.indexOf('<label class=\"control-label\"') !== -1, 'Must have a label');\n                    done();\n                });\n            });\n        });\n        it('Should allow you to change the label position', done => {\n            Harness.setComponentProperty('labelPosition', 'top', 'bottom', preview => {\n                assert(preview.match(/input.*label/), 'Label must be on bottom.');\n                Harness.setComponentProperty('labelPosition', 'bottom', 'left-left', preview => {\n                    assert(preview.match(/label.*style=\".*float: left; width: 30%; margin-right: 3%;.*input/), 'Label must be positioned on the left floated left');\n                    Harness.setComponentProperty('labelPosition', 'left-left', 'left-right', preview => {\n                        assert(preview.match(/label.*style=\".*float: left; width: 30%; margin-right: 3%; text-align: right;.*input/), 'Label must be positioned on the left floated right');\n                        Harness.setComponentProperty('labelPosition', 'left-right', 'right-left', preview => {\n                            assert(preview.match(/label.*style=\".*float: right; width: 30%; margin-left: 3%;.*input/), 'Label must be positioned on the right floated left');\n                            Harness.setComponentProperty('labelPosition', 'right-left', 'right-right', preview => {\n                                assert(preview.match(/label.*style=\".*float: right; width: 30%; margin-left: 3%; text-align: right;.*input/), 'Label must be positioned on the right floated right');\n                                done();\n                            });\n                        });\n                    });\n                });\n            });\n        });\n        it('Should allow you to change the label width and margin', done => {\n            Harness.setComponentProperty('labelPosition', 'right-right', 'top', () => {\n                Harness.testVisibility(builder.editForm, '.formio-component-labelWidth', false);\n                Harness.testVisibility(builder.editForm, '.formio-component-labelMargin', false);\n                Harness.setComponentProperty('labelPosition', 'top', 'left-left', () => {\n                    Harness.testVisibility(builder.editForm, '.formio-component-labelWidth', true);\n                    Harness.testVisibility(builder.editForm, '.formio-component-labelMargin', true);\n                    Harness.setComponentProperty('labelWidth', 30, 20, () => {\n                        Harness.setComponentProperty('labelMargin', 3, 5, preview => {\n                            assert(preview.match(/label.*style=\".*float: left; width: 20%; margin-right: 5%;.*input/), 'Label must be positioned on the left floated left');\n                            Harness.setComponentProperty('labelPosition', 'left-left', 'right-right', preview => {\n                                assert(preview.match(/label.*style=\".*float: right; width: 20%; margin-left: 5%; text-align: right;.*input/), 'Label must be positioned on the right floated right');\n                                Harness.testVisibility(builder.editForm, '.formio-component-labelWidth', true);\n                                Harness.testVisibility(builder.editForm, '.formio-component-labelMargin', true);\n                                done();\n                            });\n                        });\n                    });\n                });\n            });\n        });\n        it('Should allow you to set the input mask', done => {\n            Harness.testBuilderProperty('inputMask', '', '(999) 999-9999', null, () => {\n                assert.equal(builder.preview.inputs[0].placeholder, '(___) ___-____');\n                builder.preview.setValue('1234567890');\n                assert.equal(builder.preview.inputs[0].value, '(123) 456-7890');\n                assert.equal(builder.preview.getValue(), '(123) 456-7890');\n                done();\n            });\n        });\n        it('Should set the placeholder of the input', done => {\n            Harness.setComponentProperty('labelPosition', 'right-right', 'top', () => {\n                Harness.testBuilderProperty('placeholder', '', 'Enter something here', /input.*name=\"data\\[firstName\\].*placeholder=\"Enter something here\"/, done);\n            });\n        });\n        it('Should set the description of the input', done => {\n            Harness.testBuilderProperty('description', '', 'This is a description', /input.*div.*class=\"help-block\">This is a description<\\/div>/, done);\n        });\n        it('Should set the tooltip of the input', done => {\n            Harness.testBuilderProperty('tooltip', '', 'This is something you should fill out.', /label.*i.*class=\"glyphicon glyphicon-question-sign text-muted.*<\\/label>/, () => {\n                assert(builder.preview.tooltip, 'There should be a tooltip instance');\n                builder.preview.tooltip.show();\n                const toolTipText = builder.preview.element.querySelector('.tooltip-inner');\n                assert.equal(toolTipText.innerHTML, 'This is something you should fill out.');\n                done();\n            });\n        });\n        it('Should set the prefix of the input', done => {\n            Harness.testBuilderProperty('prefix', '', '$', /div class=\"input-group\">.*<div class=\"input-group-addon\">\\$<\\/div>.*input/, done);\n        });\n        it('Should set the suffix of the input', done => {\n            Harness.testBuilderProperty('suffix', '', 'USD', /div class=\"input-group\">.*input.*<div class=\"input-group-addon\">USD<\\/div>/, done);\n        });\n        it('Should set the custom css class of the input', done => {\n            Harness.testBuilderProperty('customClass', '', 'custom-text-field', null, () => {\n                assert(builder.preview.hasClass(builder.preview.element, 'custom-text-field'), 'Preview should have this custom class');\n                done();\n            });\n        });\n        it('Should set the tab index of the input element', done => {\n            Harness.testBuilderProperty('tabindex', '', 10, null, () => {\n                assert.equal(builder.preview.inputs[0].tabIndex, 10);\n                done();\n            });\n        });\n        it('Should allow you to set the multiple flag', done => {\n            Harness.testBuilderProperty('multiple', false, true, null, () => {\n                done();\n            });\n        });\n    });\n});"]}