{"version":3,"sources":["components/textfield/editForm/TextField.edit.display.js"],"names":["define","Widgets","_","weight","type","input","key","label","placeholder","tooltip","defaultValue","onChange","context","data","widget","pick","dataSrc","values","value","conditional","json","===","var","refreshOn","clearOnHide","calculateValue","calculatedValue","instance","isEmpty","omit","existWidget","_currentForm","options","editComponent","defaultSettings","rows","editor","as","!==","customConditional","allowMultipleMasks","reorder","components"],"mappings":";;;;;;;AAAAA,QACI,mBACA,kBACD,SAAUC,EAASC,GAClB,aACA,QAEQC,OAAQ,IACRC,KAAM,SACNC,OAAO,EACPC,IAAK,cACLC,MAAO,SACPC,YAAa,kBACbC,QAAS,qEACTC,aAAc,QACdC,SAAUC,IACNA,EAAQC,KAAKC,OAASZ,EAAEa,KAAKH,EAAQC,KAAKC,OAAQ,SAEtDE,QAAS,SACTH,MACII,SAEQV,MAAO,cACPW,MAAO,UAGPX,MAAO,kBACPW,MAAO,cAInBC,aACIC,MACIC,QACMC,IAAK,aACP,iBAMZnB,OAAQ,IACRC,KAAM,WACNE,IAAK,SACLC,MAAO,kBACPgB,UAAW,aACXC,aAAa,EACbC,eAAgBb,IACZ,MAAMc,gBAACA,GAAmBd,EAAQe,UAC5BvB,KAACA,GAAQQ,EAAQC,KAAKC,OAC5B,GAAIZ,EAAE0B,QAAQ1B,EAAE2B,KAAKjB,EAAQC,KAAKC,OAAQ,UAAYZ,EAAE0B,QAAQ1B,EAAE2B,KAAKH,EAAiB,SAAU,CAC9F,GAAIA,IAAoBA,EAAgBtB,KACpC,OAAOQ,EAAQC,KAAKC,OAExB,MAAMgB,EAAclB,EAAQe,SAASI,aAAaC,QAAQC,cAAcnB,OACxE,GAAIgB,IAAgB5B,EAAE0B,QAAQ1B,EAAE2B,KAAKC,EAAa,UAAY1B,IAAS0B,EAAY1B,KAC/E,OAAOF,EAAE2B,KAAKC,EAAa,YACxB,GAAI1B,EACP,OAAOF,EAAE2B,KAAK5B,EAAQG,GAAM8B,gBAAiB,YAGrD,OAAOtB,EAAQC,KAAKC,QAExBT,OAAO,EACP8B,KAAM,EACNC,OAAQ,MACRC,GAAI,OACJlB,aACIC,MACIkB,QACMhB,IAAK,oBACP,aAMZnB,OAAQ,IACRC,KAAM,YACNC,OAAO,EACPC,IAAK,YACLC,MAAO,aACPE,QAAS,wUACT8B,kBAAkB3B,IACNA,EAAQC,KAAK2B,qBAIzBrC,OAAQ,IACRC,KAAM,WACNC,OAAO,EACPC,IAAK,qBACLC,MAAO,yBAGPJ,OAAQ,KACRC,KAAM,WACNC,OAAO,EACPC,IAAK,aACLI,cAAc,EACdH,MAAO,qBAGPJ,OAAQ,IACRC,KAAM,WACNC,OAAO,EACPC,IAAK,aACLC,MAAO,cACPgC,kBAAkB3B,IAC6B,IAApCA,EAAQC,KAAK2B,mBAExBC,SAAS,EACTC,aAEQtC,KAAM,YACNE,IAAK,QACLC,MAAO,QACPF,OAAO,IAGPD,KAAM,YACNE,IAAK,OACLC,MAAO,OACPF,OAAO,MAKfF,OAAQ,IACRC,KAAM,YACNC,OAAO,EACPC,IAAK,SACLC,MAAO,WAGPJ,OAAQ,IACRC,KAAM,YACNC,OAAO,EACPC,IAAK,SACLC,MAAO,WAGPJ,OAAQ,KACRC,KAAM,WACNG,MAAO,aACPE,QAAS,gGACTH,IAAK,OACLD,OAAO,IAGPF,OAAQ,KACRC,KAAM,WACNG,MAAO,oBACPE,QAAS,4CACTH,IAAK,gBACLD,OAAO,IAGPF,OAAQ,KACRC,KAAM,WACNG,MAAO,yBACPE,QAAS,iDACTH,IAAK,gBACLD,OAAO","file":"../../../../components/textfield/editForm/TextField.edit.display.js","sourcesContent":["define([\n    '../../../widgets',\n    'skylark-lodash'\n], function (Widgets, _) {\n    'use strict';\n    return [\n        {\n            weight: 400,\n            type: 'select',\n            input: true,\n            key: 'widget.type',\n            label: 'Widget',\n            placeholder: 'Select a widget',\n            tooltip: 'The widget is the display UI used to input the value of the field.',\n            defaultValue: 'input',\n            onChange: context => {\n                context.data.widget = _.pick(context.data.widget, 'type');\n            },\n            dataSrc: 'values',\n            data: {\n                values: [\n                    {\n                        label: 'Input Field',\n                        value: 'input'\n                    },\n                    {\n                        label: 'Calendar Picker',\n                        value: 'calendar'\n                    }\n                ]\n            },\n            conditional: {\n                json: {\n                    '===': [\n                        { var: 'data.type' },\n                        'textfield'\n                    ]\n                }\n            }\n        },\n        {\n            weight: 405,\n            type: 'textarea',\n            key: 'widget',\n            label: 'Widget Settings',\n            refreshOn: 'wiget.type',\n            clearOnHide: false,\n            calculateValue: context => {\n                const {calculatedValue} = context.instance;\n                const {type} = context.data.widget;\n                if (_.isEmpty(_.omit(context.data.widget, 'type')) || _.isEmpty(_.omit(calculatedValue, 'type'))) {\n                    if (calculatedValue && !calculatedValue.type) {\n                        return context.data.widget;\n                    }\n                    const existWidget = context.instance._currentForm.options.editComponent.widget;\n                    if (existWidget && !_.isEmpty(_.omit(existWidget, 'type')) && type === existWidget.type) {\n                        return _.omit(existWidget, 'language');\n                    } else if (type) {\n                        return _.omit(Widgets[type].defaultSettings, 'language');\n                    }\n                }\n                return context.data.widget;\n            },\n            input: true,\n            rows: 5,\n            editor: 'ace',\n            as: 'json',\n            conditional: {\n                json: {\n                    '!==': [\n                        { var: 'data.widget.type' },\n                        'input'\n                    ]\n                }\n            }\n        },\n        {\n            weight: 410,\n            type: 'textfield',\n            input: true,\n            key: 'inputMask',\n            label: 'Input Mask',\n            tooltip: \"An input mask helps the user with input by ensuring a predefined format.<br><br>9: numeric<br>a: alphabetical<br>*: alphanumeric<br><br>Example telephone mask: (999) 999-9999<br><br>See the <a target='_blank' href='https://github.com/RobinHerbots/jquery.inputmask'>jquery.inputmask documentation</a> for more information.</a>\",\n            customConditional(context) {\n                return !context.data.allowMultipleMasks;\n            }\n        },\n        {\n            weight: 413,\n            type: 'checkbox',\n            input: true,\n            key: 'allowMultipleMasks',\n            label: 'Allow Multiple Masks'\n        },\n        {\n            weight: 1350,\n            type: 'checkbox',\n            input: true,\n            key: 'spellcheck',\n            defaultValue: true,\n            label: 'Allow Spellcheck'\n        },\n        {\n            weight: 417,\n            type: 'datagrid',\n            input: true,\n            key: 'inputMasks',\n            label: 'Input Masks',\n            customConditional(context) {\n                return context.data.allowMultipleMasks === true;\n            },\n            reorder: true,\n            components: [\n                {\n                    type: 'textfield',\n                    key: 'label',\n                    label: 'Label',\n                    input: true\n                },\n                {\n                    type: 'textfield',\n                    key: 'mask',\n                    label: 'Mask',\n                    input: true\n                }\n            ]\n        },\n        {\n            weight: 320,\n            type: 'textfield',\n            input: true,\n            key: 'prefix',\n            label: 'Prefix'\n        },\n        {\n            weight: 330,\n            type: 'textfield',\n            input: true,\n            key: 'suffix',\n            label: 'Suffix'\n        },\n        {\n            weight: 1300,\n            type: 'checkbox',\n            label: 'Hide Input',\n            tooltip: 'Hide the input in the browser. This does not encrypt on the server. Do not use for passwords.',\n            key: 'mask',\n            input: true\n        },\n        {\n            weight: 1200,\n            type: 'checkbox',\n            label: 'Show Word Counter',\n            tooltip: 'Show a live count of the number of words.',\n            key: 'showWordCount',\n            input: true\n        },\n        {\n            weight: 1201,\n            type: 'checkbox',\n            label: 'Show Character Counter',\n            tooltip: 'Show a live count of the number of characters.',\n            key: 'showCharCount',\n            input: true\n        }\n    ];\n});"]}