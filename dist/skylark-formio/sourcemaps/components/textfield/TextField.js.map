{"version":3,"sources":["components/textfield/TextField.js"],"names":["define","Input","conformToMask","FormioUtils","TextFieldComponent","[object Object]","extend","schema","label","key","type","mask","inputType","inputFormat","inputMask","tableView","validate","minLength","maxLength","pattern","builderInfo","title","icon","group","documentation","weight","defaultSchema","inputInfo","info","super","this","component","hasOwnProperty","attr","spellcheck","changeEvent","emptyValue","value","flags","maskName","inputMasks","defaultValue","noDefault","Array","isArray","isMultipleMasksField","normalizeValue","map","val","maskValue","index","setValueAt","textValue","textInput","refs","maskInput","select","getMaskPattern","getInputMask","conformedValue","getValueAt","undefined","dataValue","isEmpty","multiple","length","toString","trim"],"mappings":";;;;;;;AAAAA,QACI,0BACA,gDACA,qBACD,SAAUC,EAAOC,EAAeC,GAC/B,aACA,aAAaC,UAA2BH,EACpCI,iBAAiBC,GACb,OAAOL,EAAMM,QACTC,MAAO,aACPC,IAAK,YACLC,KAAM,YACNC,MAAM,EACNC,UAAW,OACXC,YAAa,QACbC,UAAW,GACXC,WAAW,EACXC,UACIC,UAAW,GACXC,UAAW,GACXC,QAAS,QAEXb,GAEVc,yBACI,OACIC,MAAO,aACPC,KAAM,WACNC,MAAO,QACPC,cAAe,2CACfC,OAAQ,EACRlB,OAAQH,EAAmBG,UAGnCmB,oBACI,OAAOtB,EAAmBG,SAE9BoB,gBACI,MAAMC,EAAOC,MAAMF,UAWnB,OAVAC,EAAKlB,KAAO,QACRoB,KAAKC,UAAUC,eAAe,gBAC9BJ,EAAKK,KAAKC,WAAaJ,KAAKC,UAAUG,YAEtCJ,KAAKC,UAAUpB,KACfiB,EAAKK,KAAKvB,KAAO,WAEjBkB,EAAKK,KAAKvB,KAAoC,aAA7BoB,KAAKC,UAAUnB,UAA2B,WAAa,OAE5EgB,EAAKO,YAAc,QACZP,EAEXQ,iBACI,MAAO,GAEX/B,UAAUgC,EAAOC,MAOb,GANKD,GAA0B,iBAAVA,IACjBA,GACIA,MAAAA,EACAE,SAAUT,KAAKC,UAAUS,WAAW,GAAGhC,SAG1C6B,EAAMA,MAAO,CACd,MAAMI,EAAeH,EAAMI,UAAYZ,KAAKM,WAAaN,KAAKW,aAC9DJ,EAAMA,MAAQM,MAAMC,QAAQH,GAAgBA,EAAa,GAAKA,EAElE,OAAOJ,EAEXhC,eAAegC,EAAOC,MAClB,OAAKR,KAAKe,qBAGNF,MAAMC,QAAQP,GACPR,MAAMiB,eAAeT,EAAMU,IAAIC,GAAOlB,KAAKmB,UAAUD,EAAKV,KAE9DT,MAAMiB,eAAehB,KAAKmB,UAAUZ,EAAOC,IALvCT,MAAMiB,eAAeT,GAOpChC,WAAW6C,EAAOb,EAAOC,MACrB,IAAKR,KAAKe,qBACN,OAAOhB,MAAMsB,WAAWD,EAAOb,EAAOC,GAG1C,MAAMc,GADNf,EAAQP,KAAKmB,UAAUZ,EAAOC,IACND,OAAS,GAC3BgB,EAAYvB,KAAKwB,KAAK3C,KAAOmB,KAAKwB,KAAK3C,KAAKuC,GAAS,KACrDK,EAAYzB,KAAKwB,KAAKE,OAAS1B,KAAKwB,KAAKE,OAAON,GAAS,KACzDvC,EAAOmB,KAAK2B,eAAepB,EAAME,UACvC,KAAIc,GAAaE,GAAa5C,GAI1B,OAAOkB,MAAMsB,WAAWD,EAAOE,EAAWd,GAH1Ce,EAAUhB,MAAQnC,EAAckD,EAAWjD,EAAYuD,aAAa/C,IAAOgD,eAC3EJ,EAAUlB,MAAQA,EAAME,SAKhClC,WAAW6C,GACP,IAAKpB,KAAKe,qBACN,OAAOhB,MAAM+B,WAAWV,GAE5B,MAAMG,EAAYvB,KAAKwB,KAAK3C,KAAOmB,KAAKwB,KAAK3C,KAAKuC,GAAS,KACrDK,EAAYzB,KAAKwB,KAAKE,OAAS1B,KAAKwB,KAAKE,OAAON,GAAS,KAC/D,OACIb,MAAOgB,EAAYA,EAAUhB,WAAQwB,EACrCtB,SAAUgB,EAAYA,EAAUlB,WAAQwB,GAGhDxD,QAAQgC,EAAQP,KAAKgC,WACjB,OAAKhC,KAAKe,qBAGHhB,MAAMkC,QAAQ1B,KAAWP,KAAKC,UAAUiC,SAA4B,IAAjB3B,EAAM4B,QAAgB5B,EAAME,WAAaF,EAAMA,OAF9FR,MAAMkC,SAAS1B,GAAS,IAAI6B,WAAWC","file":"../../../components/textfield/TextField.js","sourcesContent":["define([\n    '../_classes/input/Input',\n    '../../vendors/vanilla-text-mask/conformToMask',\n    '../../utils/utils'\n], function (Input, conformToMask, FormioUtils) {\n    'use strict';\n    return class TextFieldComponent extends Input {\n        static schema(...extend) {\n            return Input.schema({\n                label: 'Text Field',\n                key: 'textField',\n                type: 'textfield',\n                mask: false,\n                inputType: 'text',\n                inputFormat: 'plain',\n                inputMask: '',\n                tableView: true,\n                validate: {\n                    minLength: '',\n                    maxLength: '',\n                    pattern: ''\n                }\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Text Field',\n                icon: 'terminal',\n                group: 'basic',\n                documentation: 'http://help.form.io/userguide/#textfield',\n                weight: 0,\n                schema: TextFieldComponent.schema()\n            };\n        }\n        get defaultSchema() {\n            return TextFieldComponent.schema();\n        }\n        get inputInfo() {\n            const info = super.inputInfo;\n            info.type = 'input';\n            if (this.component.hasOwnProperty('spellcheck')) {\n                info.attr.spellcheck = this.component.spellcheck;\n            }\n            if (this.component.mask) {\n                info.attr.type = 'password';\n            } else {\n                info.attr.type = this.component.inputType === 'password' ? 'password' : 'text';\n            }\n            info.changeEvent = 'input';\n            return info;\n        }\n        get emptyValue() {\n            return '';\n        }\n        maskValue(value, flags = {}) {\n            if (!value || typeof value !== 'object') {\n                value = {\n                    value,\n                    maskName: this.component.inputMasks[0].label\n                };\n            }\n            if (!value.value) {\n                const defaultValue = flags.noDefault ? this.emptyValue : this.defaultValue;\n                value.value = Array.isArray(defaultValue) ? defaultValue[0] : defaultValue;\n            }\n            return value;\n        }\n        normalizeValue(value, flags = {}) {\n            if (!this.isMultipleMasksField) {\n                return super.normalizeValue(value);\n            }\n            if (Array.isArray(value)) {\n                return super.normalizeValue(value.map(val => this.maskValue(val, flags)));\n            }\n            return super.normalizeValue(this.maskValue(value, flags));\n        }\n        setValueAt(index, value, flags = {}) {\n            if (!this.isMultipleMasksField) {\n                return super.setValueAt(index, value, flags);\n            }\n            value = this.maskValue(value, flags);\n            const textValue = value.value || '';\n            const textInput = this.refs.mask ? this.refs.mask[index] : null;\n            const maskInput = this.refs.select ? this.refs.select[index] : null;\n            const mask = this.getMaskPattern(value.maskName);\n            if (textInput && maskInput && mask) {\n                textInput.value = conformToMask(textValue, FormioUtils.getInputMask(mask)).conformedValue;\n                maskInput.value = value.maskName;\n            } else {\n                return super.setValueAt(index, textValue, flags);\n            }\n        }\n        getValueAt(index) {\n            if (!this.isMultipleMasksField) {\n                return super.getValueAt(index);\n            }\n            const textInput = this.refs.mask ? this.refs.mask[index] : null;\n            const maskInput = this.refs.select ? this.refs.select[index] : null;\n            return {\n                value: textInput ? textInput.value : undefined,\n                maskName: maskInput ? maskInput.value : undefined\n            };\n        }\n        isEmpty(value = this.dataValue) {\n            if (!this.isMultipleMasksField) {\n                return super.isEmpty((value || '').toString().trim());\n            }\n            return super.isEmpty(value) || (this.component.multiple ? value.length === 0 : !value.maskName || !value.value);\n        }\n    };\n});"]}