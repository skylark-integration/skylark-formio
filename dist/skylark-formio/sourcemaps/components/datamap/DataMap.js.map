{"version":3,"sources":["components/datamap/DataMap.js"],"names":["define","Component","DataGridComponent","_","EventEmitter","a","DataMapComponent","[object Object]","extend","schema","label","key","type","clearOnHide","addAnother","disableAddingRemovingRows","keyBeforeValue","valueComponent","input","validate","maxLength","minLength","builderInfo","title","icon","group","documentation","weight","super","this","components","length","omit","component","options","data","rows","createRows","visibleColumns","valueKey","hideLabel","defaultSchema","emptyValue","dataValue","visible","hasValue","get","value","defaultValue","Array","isArray","keySchema","keyLabel","builderMode","isEmpty","Object","keys","map","readOnly","disabled","fullMode","assign","valueSchema","rowIndex","uniqueKey","row","getRowKey","clone","events","wildcard","maxListeners","name","createComponent","__key","on","event","newKey","canAddColumn","index","createRowComponents","redraw","triggerChange","splice","flags","changed","hasChanged","updateOnChange","rebuild","show"],"mappings":"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","file":"../../../components/datamap/DataMap.js","sourcesContent":["define([\n    '../_classes/component/Component',\n    '../datagrid/DataGrid',\n    'skylark-lodash',\n    '../../vendors/eventemitter2/EventEmitter2',\n    '../../utils/utils'\n], function (Component, DataGridComponent, _, EventEmitter, a) {\n    'use strict';\n    return class DataMapComponent extends DataGridComponent {\n        static schema(...extend) {\n            return Component.schema({\n                label: 'Data Map',\n                key: 'dataMap',\n                type: 'datamap',\n                clearOnHide: true,\n                addAnother: 'Add Another',\n                disableAddingRemovingRows: false,\n                keyBeforeValue: true,\n                valueComponent: {\n                    type: 'textfield',\n                    key: 'value',\n                    label: 'Value',\n                    input: true\n                },\n                input: true,\n                validate: {\n                    maxLength: 0,\n                    minLength: 0\n                }\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Data Map',\n                icon: 'th-list',\n                group: 'data',\n                documentation: 'http://help.form.io/userguide/#datamap',\n                weight: 20,\n                schema: DataMapComponent.schema()\n            };\n        }\n        get schema() {\n            const schema = super.schema;\n            if (this.components && this.components.length > 0) {\n                schema.valueComponent = this.components[this.components.length - 1].schema;\n            }\n            return _.omit(schema, 'components');\n        }\n        constructor(component, options, data) {\n            super(component, options, data);\n            this.type = 'datamap';\n        }\n        init() {\n            this.components = [];\n            this.rows = [];\n            this.createRows();\n            this.visibleColumns = {\n                key: true,\n                [this.valueKey]: true\n            };\n            this.component.valueComponent.hideLabel = true;\n        }\n        get defaultSchema() {\n            return DataMapComponent.schema();\n        }\n        get emptyValue() {\n            return {};\n        }\n        get dataValue() {\n            if (!this.key || !this.visible && this.component.clearOnHide) {\n                return this.emptyValue;\n            }\n            if (!this.hasValue()) {\n                this.dataValue = this.emptyValue;\n            }\n            return _.get(this.data, this.key);\n        }\n        set dataValue(value) {\n            super.dataValue = value;\n        }\n        get defaultValue() {\n            const value = super.defaultValue;\n            if (Array.isArray(value)) {\n                return value[0];\n            }\n            return this.emptyValue;\n        }\n        get keySchema() {\n            return {\n                type: 'textfield',\n                input: true,\n                hideLabel: true,\n                label: this.component.keyLabel || 'Key',\n                key: '__key'\n            };\n        }\n        get valueKey() {\n            return this.component.valueComponent.key;\n        }\n        getRowValues() {\n            const dataValue = this.dataValue;\n            if (this.builderMode) {\n                return [dataValue];\n            }\n            if (_.isEmpty(dataValue)) {\n                return [];\n            }\n            return Object.keys(dataValue).map(() => dataValue);\n        }\n        hasHeader() {\n            return true;\n        }\n        hasRemoveButtons() {\n            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode;\n        }\n        getColumns() {\n            const keySchema = Object.assign({}, this.keySchema);\n            const valueSchema = Object.assign({}, this.component.valueComponent);\n            keySchema.hideLabel = false;\n            valueSchema.hideLabel = false;\n            return this.component.keyBeforeValue ? [\n                keySchema,\n                valueSchema\n            ] : [\n                valueSchema,\n                keySchema\n            ];\n        }\n        getRowKey(rowIndex) {\n            const keys = Object.keys(this.dataValue);\n            if (!keys[rowIndex]) {\n                keys[rowIndex] = a.uniqueKey(this.dataValue, 'key');\n            }\n            return keys[rowIndex];\n        }\n        createRowComponents(row, rowIndex) {\n            let key = this.getRowKey(rowIndex);\n            const options = _.clone(this.options);\n            options.events = new EventEmitter({\n                wildcard: false,\n                maxListeners: 0\n            });\n            options.name += `[${ rowIndex }]`;\n            options.row = `${ rowIndex }`;\n            const components = {};\n            components['__key'] = this.createComponent(this.keySchema, options, { __key: key });\n            components['__key'].on('componentChange', event => {\n                const dataValue = this.dataValue;\n                const newKey = a.uniqueKey(dataValue, event.value);\n                dataValue[newKey] = dataValue[key];\n                delete dataValue[key];\n                components[this.valueKey].component.key = newKey;\n                key = newKey;\n            });\n            const valueComponent = _.clone(this.component.valueComponent);\n            valueComponent.key = key;\n            components[this.valueKey] = this.createComponent(valueComponent, this.options, this.dataValue);\n            return components;\n        }\n        get canAddColumn() {\n            return false;\n        }\n        addChildComponent(component) {\n            this.component.valueComponent = component;\n        }\n        saveChildComponent(component) {\n            this.component.valueComponent = component;\n        }\n        removeChildComponent() {\n            const defaultSchema = DataMapComponent.schema();\n            this.component.valueComponent = defaultSchema.valueComponent;\n        }\n        addRow() {\n            const index = this.rows.length;\n            this.rows[index] = this.createRowComponents(this.dataValue, index);\n            this.redraw();\n            this.triggerChange();\n        }\n        removeRow(index) {\n            const keys = Object.keys(this.dataValue);\n            if (keys[index]) {\n                delete this.dataValue[keys[index]];\n            }\n            this.rows.splice(index, 1);\n            this.redraw();\n            this.triggerChange();\n        }\n        setValue(value, flags = {}) {\n            const changed = this.hasChanged(value, this.dataValue);\n            this.dataValue = value;\n            this.createRows();\n            this.updateOnChange(flags, changed);\n            return changed;\n        }\n        checkColumns() {\n            return {\n                rebuild: false,\n                show: true\n            };\n        }\n    };\n});"]}