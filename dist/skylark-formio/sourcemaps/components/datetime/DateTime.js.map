{"version":3,"sources":["components/datetime/DateTime.js"],"names":["define","_","moment","Input","FormioUtils","Widgets","DateTimeComponent","[object Object]","extend","schema","type","label","key","format","useLocaleSettings","allowInput","enableDate","enableTime","defaultValue","defaultDate","displayInTimezone","timezone","datepickerMode","datePicker","showWeeks","startingDay","initDate","minMode","maxMode","yearRows","yearColumns","minDate","maxDate","timePicker","hourStep","minuteStep","showMeridian","readonlyInput","mousewheel","arrowkeys","customOptions","builderInfo","title","group","icon","documentation","weight","component","options","data","super","this","time24hr","get","replace","JSON","parse","err","console","warn","message","widget","submissionTimezone","language","mode","multiple","noCalendar","hourIncrement","minuteIncrement","time_24hr","readOnly","disabledDates","disableWeekends","disableWeekdays","disableFunction","validators","push","input","settings","defaultSchema","getDateSetting","toISOString","emptyValue","value","dataValue","toString","isEmpty","result","utc","valueA","valueB","convertFormatToMoment","dirty","rowData","refs","forEach","enteredDate","checkValidity","sibling","nextSibling","focus"],"mappings":";;;;;;;AAAAA,QACI,iBACA,iBACA,0BACA,oBACA,uBACD,SAAUC,EAAGC,EAAQC,EAAOC,EAAaC,GACxC,aACA,aAAaC,UAA0BH,EACnCI,iBAAiBC,GACb,OAAOL,EAAMM,QACTC,KAAM,WACNC,MAAO,cACPC,IAAK,WACLC,OAAQ,qBACRC,mBAAmB,EACnBC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,aAAc,GACdC,YAAa,GACbC,kBAAmB,SACnBC,SAAU,GACVC,eAAgB,MAChBC,YACIC,WAAW,EACXC,YAAa,EACbC,SAAU,GACVC,QAAS,MACTC,QAAS,OACTC,SAAU,EACVC,YAAa,EACbC,QAAS,KACTC,QAAS,MAEbC,YACIC,SAAU,EACVC,WAAY,EACZC,cAAc,EACdC,eAAe,EACfC,YAAY,EACZC,WAAW,GAEfC,qBACEhC,GAEViC,yBACI,OACIC,MAAO,cACPC,MAAO,WACPC,KAAM,WACNC,cAAe,0CACfC,OAAQ,GACRrC,OAAQH,EAAkBG,UAGlCF,YAAYwC,EAAWC,EAASC,GAC5BC,MAAMH,EAAWC,EAASC,GAC1B,MAAM5B,EAAW8B,KAAKJ,UAAU1B,UAAY8B,KAAKH,QAAQ3B,SACnD+B,GAAYnD,EAAEoD,IAAIF,KAAKJ,UAAW,2BAA2B,GAC9DI,KAAKJ,UAAU/B,aAChBmC,KAAKJ,UAAUlC,OAASsC,KAAKJ,UAAUlC,OAAOyC,QAAQ,eAAgB,KAErEH,KAAKJ,UAAU9B,WAGhBkC,KAAKJ,UAAUlC,OADRuC,EACiBD,KAAKJ,UAAUlC,OAAOyC,QAAQ,YAAa,SAE3CH,KAAKJ,UAAUlC,OAAOyC,QAAQ,UAAW,WAJjEH,KAAKJ,UAAUlC,OAASsC,KAAKJ,UAAUlC,OAAOyC,QAAQ,aAAc,IAMxE,IAAId,EAAgBW,KAAKJ,UAAUP,kBACnC,GAA6B,iBAAlBA,EACP,IACIA,EAAgBe,KAAKC,MAAMhB,GAC7B,MAAOiB,GACLC,QAAQC,KAAKF,EAAIG,SACjBpB,KAGRW,KAAKJ,UAAUc,QACXnD,KAAM,WACNW,SAAAA,EACAD,kBAAmBnB,EAAEoD,IAAIF,KAAKJ,UAAW,oBAAqB,UAC9De,mBAAoBX,KAAKW,mBACzBC,SAAUZ,KAAKH,QAAQe,SACvBjD,kBAAmBb,EAAEoD,IAAIF,KAAKJ,UAAW,qBAAqB,GAC9DhC,WAAYd,EAAEoD,IAAIF,KAAKJ,UAAW,cAAc,GAChDiB,KAAMb,KAAKJ,UAAUkB,SAAW,WAAa,SAC7ChD,WAAYhB,EAAEoD,IAAIF,KAAKJ,UAAW,cAAc,GAChDmB,YAAajE,EAAEoD,IAAIF,KAAKJ,UAAW,cAAc,GACjDlC,OAAQsC,KAAKJ,UAAUlC,OACvBsD,cAAelE,EAAEoD,IAAIF,KAAKJ,UAAW,sBAAuB,GAC5DqB,gBAAiBnE,EAAEoD,IAAIF,KAAKJ,UAAW,wBAAyB,GAChEsB,UAAWjB,EACXkB,SAAUnB,KAAKH,QAAQsB,SACvBvC,QAAS9B,EAAEoD,IAAIF,KAAKJ,UAAW,sBAC/BwB,cAAetE,EAAEoD,IAAIF,KAAKJ,UAAW,sBACrCyB,gBAAiBvE,EAAEoD,IAAIF,KAAKJ,UAAW,8BACvC0B,gBAAiBxE,EAAEoD,IAAIF,KAAKJ,UAAW,8BACvC2B,gBAAiBzE,EAAEoD,IAAIF,KAAKJ,UAAW,8BACvCf,QAAS/B,EAAEoD,IAAIF,KAAKJ,UAAW,yBAC5BP,GAEPW,KAAKwB,WAAWC,KAAK,QAEzBrE,oBAAoBsE,GAIhB,OAHIA,EAAMhB,QAAUgB,EAAMhB,OAAOiB,WAC7BD,EAAMhB,OAAOiB,SAAShB,mBAAqBX,KAAKW,oBAE7Ce,EAEXhB,aAEI,OADeV,KAAKJ,UAAUc,OAAS,IAAIxD,EAAQ8C,KAAKJ,UAAUc,OAAOnD,MAAMyC,KAAKJ,UAAUc,OAAQV,KAAKJ,WAAa,KAG5HgC,oBACI,OAAOzE,EAAkBG,SAE7BS,mBACI,IAAIA,EAAegC,MAAMhC,aAKzB,OAJKA,GAAgBiC,KAAKJ,UAAU5B,cAEhCD,GADAA,EAAed,EAAY4E,eAAe7B,KAAKJ,UAAU5B,cAC3BD,EAAa+D,cAAgB,IAExD/D,EAEXgE,iBACI,MAAO,GAEX3E,QAAQ4E,EAAQhC,KAAKiC,WACjB,SAAID,GAA8B,iBAArBA,EAAME,aAGZnC,MAAMoC,QAAQH,GAEzB5E,YAAYsE,GACR,MAAMU,EAASrF,EAAOsF,IAAIX,GAAOI,cACjC,MAAkB,iBAAXM,EAA4BV,EAAQU,EAE/ChF,QAAQkF,EAAQC,EAASvC,KAAKiC,WAC1B,MAAMvE,EAAST,EAAYuF,sBAAsBxC,KAAKJ,UAAUlC,QAChE,OAAOsC,KAAKmC,QAAQG,IAAWtC,KAAKmC,QAAQI,IAAWxF,EAAOsF,IAAIC,GAAQ5E,OAAOA,KAAYX,EAAOsF,IAAIE,GAAQ7E,OAAOA,GAE3HN,gBACI,OAAO,EAEXA,cAAc0C,EAAM2C,EAAOC,GAQvB,OAPI1C,KAAK2C,KAAKjB,OACV1B,KAAK2C,KAAKjB,MAAMkB,QAAQlB,IAChBA,EAAMhB,QAAUgB,EAAMhB,OAAOmC,cAC7BJ,GAAQ,KAIb1C,MAAM+C,cAAchD,EAAM2C,EAAOC,GAE5CtF,QACI,GAAI4C,KAAK2C,KAAKjB,OAAS1B,KAAK2C,KAAKjB,MAAM,GAAI,CACvC,MAAMqB,EAAU/C,KAAK2C,KAAKjB,MAAM,GAAGsB,YAC/BD,GACAA,EAAQE","file":"../../../components/datetime/DateTime.js","sourcesContent":["define([\n    'skylark-lodash',\n    'skylark-moment',\n    '../_classes/input/Input',\n    '../../utils/index',\n    '../../widgets/index'\n], function (_, moment, Input, FormioUtils, Widgets) {\n    'use strict';\n    return class DateTimeComponent extends Input {\n        static schema(...extend) {\n            return Input.schema({\n                type: 'datetime',\n                label: 'Date / Time',\n                key: 'dateTime',\n                format: 'yyyy-MM-dd hh:mm a',\n                useLocaleSettings: false,\n                allowInput: true,\n                enableDate: true,\n                enableTime: true,\n                defaultValue: '',\n                defaultDate: '',\n                displayInTimezone: 'viewer',\n                timezone: '',\n                datepickerMode: 'day',\n                datePicker: {\n                    showWeeks: true,\n                    startingDay: 0,\n                    initDate: '',\n                    minMode: 'day',\n                    maxMode: 'year',\n                    yearRows: 4,\n                    yearColumns: 5,\n                    minDate: null,\n                    maxDate: null\n                },\n                timePicker: {\n                    hourStep: 1,\n                    minuteStep: 1,\n                    showMeridian: true,\n                    readonlyInput: false,\n                    mousewheel: true,\n                    arrowkeys: true\n                },\n                customOptions: {}\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Date / Time',\n                group: 'advanced',\n                icon: 'calendar',\n                documentation: 'http://help.form.io/userguide/#datetime',\n                weight: 40,\n                schema: DateTimeComponent.schema()\n            };\n        }\n        constructor(component, options, data) {\n            super(component, options, data);\n            const timezone = this.component.timezone || this.options.timezone;\n            const time24hr = !_.get(this.component, 'timePicker.showMeridian', true);\n            if (!this.component.enableDate) {\n                this.component.format = this.component.format.replace(/yyyy-MM-dd /g, '');\n            }\n            if (!this.component.enableTime) {\n                this.component.format = this.component.format.replace(/ hh:mm a$/g, '');\n            } else if (time24hr) {\n                this.component.format = this.component.format.replace(/hh:mm a$/g, 'HH:mm');\n            } else {\n                this.component.format = this.component.format.replace(/HH:mm$/g, 'hh:mm a');\n            }\n            let customOptions = this.component.customOptions || {};\n            if (typeof customOptions === 'string') {\n                try {\n                    customOptions = JSON.parse(customOptions);\n                } catch (err) {\n                    console.warn(err.message);\n                    customOptions = {};\n                }\n            }\n            this.component.widget = {\n                type: 'calendar',\n                timezone,\n                displayInTimezone: _.get(this.component, 'displayInTimezone', 'viewer'),\n                submissionTimezone: this.submissionTimezone,\n                language: this.options.language,\n                useLocaleSettings: _.get(this.component, 'useLocaleSettings', false),\n                allowInput: _.get(this.component, 'allowInput', true),\n                mode: this.component.multiple ? 'multiple' : 'single',\n                enableTime: _.get(this.component, 'enableTime', true),\n                noCalendar: !_.get(this.component, 'enableDate', true),\n                format: this.component.format,\n                hourIncrement: _.get(this.component, 'timePicker.hourStep', 1),\n                minuteIncrement: _.get(this.component, 'timePicker.minuteStep', 5),\n                time_24hr: time24hr,\n                readOnly: this.options.readOnly,\n                minDate: _.get(this.component, 'datePicker.minDate'),\n                disabledDates: _.get(this.component, 'datePicker.disable'),\n                disableWeekends: _.get(this.component, 'datePicker.disableWeekends'),\n                disableWeekdays: _.get(this.component, 'datePicker.disableWeekdays'),\n                disableFunction: _.get(this.component, 'datePicker.disableFunction'),\n                maxDate: _.get(this.component, 'datePicker.maxDate'),\n                ...customOptions\n            };\n            this.validators.push('date');\n        }\n        performInputMapping(input) {\n            if (input.widget && input.widget.settings) {\n                input.widget.settings.submissionTimezone = this.submissionTimezone;\n            }\n            return input;\n        }\n        get widget() {\n            const widget = this.component.widget ? new Widgets[this.component.widget.type](this.component.widget, this.component) : null;\n            return widget;\n        }\n        get defaultSchema() {\n            return DateTimeComponent.schema();\n        }\n        get defaultValue() {\n            let defaultValue = super.defaultValue;\n            if (!defaultValue && this.component.defaultDate) {\n                defaultValue = FormioUtils.getDateSetting(this.component.defaultDate);\n                defaultValue = defaultValue ? defaultValue.toISOString() : '';\n            }\n            return defaultValue;\n        }\n        get emptyValue() {\n            return '';\n        }\n        isEmpty(value = this.dataValue) {\n            if (value && value.toString() === 'Invalid Date') {\n                return true;\n            }\n            return super.isEmpty(value);\n        }\n        formatValue(input) {\n            const result = moment.utc(input).toISOString();\n            return result === 'Invalid date' ? input : result;\n        }\n        isEqual(valueA, valueB = this.dataValue) {\n            const format = FormioUtils.convertFormatToMoment(this.component.format);\n            return this.isEmpty(valueA) && this.isEmpty(valueB) || moment.utc(valueA).format(format) === moment.utc(valueB).format(format);\n        }\n        createWrapper() {\n            return false;\n        }\n        checkValidity(data, dirty, rowData) {\n            if (this.refs.input) {\n                this.refs.input.forEach(input => {\n                    if (input.widget && input.widget.enteredDate) {\n                        dirty = true;\n                    }\n                });\n            }\n            return super.checkValidity(data, dirty, rowData);\n        }\n        focus() {\n            if (this.refs.input && this.refs.input[0]) {\n                const sibling = this.refs.input[0].nextSibling;\n                if (sibling) {\n                    sibling.focus();\n                }\n            }\n        }\n    };\n});"]}