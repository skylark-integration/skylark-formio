{"version":3,"sources":["components/_classes/input/Input.js"],"names":["define","Multivalue","a","Widgets","_","[object Object]","component","options","data","super","this","triggerUpdateValueAt","debounce","updateValueAt","bind","extend","schema","widget","type","inputInfo","attr","name","inputType","class","lang","language","placeholder","t","tabindex","disabled","defaults","attributes","id","key","changeEvent","content","maskOptions","map","inputMasks","mask","label","value","isMultipleMasksField","allowMultipleMasks","length","maskName","inputMask","find","undefined","input","setInputMask","remainingWords","parseInt","get","words","dataValue","index","replace","info","getValueAsString","formatValue","parseValue","calendarIcon","renderTemplate","ref","className","iconClass","enableDate","styles","trim","prefix","suffix","selectOptions","getMaskOptions","element","count","max","remaining","removeClass","addClass","setContent","flags","refs","wordcount","maxWords","setCounter","charcount","maxChars","performInputMapping","getValue","changed","updateValue","loadRefs","attach","getWidgetValueAsString","attachElement","destroy","createWidget","addPrefix","addSuffix","addFocusBlurEvents","submitOnEnter","addEventListener","event","keyCode","which","preventDefault","stopPropagation","emit","settings","hasOwnProperty","on","modified","redraw","detach","i","getWidget","root","focusedComponent","pendingBlur","cancel","delay","validateOn","triggerChange","instance"],"mappings":"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","file":"../../../../components/_classes/input/Input.js","sourcesContent":["define([\n    '../multivalue/Multivalue',\n    '../../../utils/utils',\n    '../../../widgets',\n    'skylark-lodash'\n], function (Multivalue, a, Widgets, _) {\n    'use strict';\n    return class Input extends Multivalue {\n        constructor(component, options, data) {\n            super(component, options, data);\n            this.triggerUpdateValueAt = _.debounce(this.updateValueAt.bind(this), 100);\n        }\n        static schema(...extend) {\n            return Multivalue.schema({ widget: { type: 'input' } }, ...extend);\n        }\n        get inputInfo() {\n            const attr = {\n                name: this.options.name,\n                type: this.component.inputType || 'text',\n                class: 'form-control',\n                lang: this.options.language\n            };\n            if (this.component.placeholder) {\n                attr.placeholder = this.t(this.component.placeholder);\n            }\n            if (this.component.tabindex) {\n                attr.tabindex = this.component.tabindex;\n            }\n            if (this.disabled) {\n                attr.disabled = 'disabled';\n            }\n            _.defaults(attr, this.component.attributes);\n            return {\n                id: this.key,\n                type: 'input',\n                changeEvent: 'input',\n                content: '',\n                attr\n            };\n        }\n        get maskOptions() {\n            return _.map(this.component.inputMasks, mask => {\n                return {\n                    label: mask.label,\n                    value: mask.label\n                };\n            });\n        }\n        get isMultipleMasksField() {\n            return this.component.allowMultipleMasks && !!this.component.inputMasks && !!this.component.inputMasks.length;\n        }\n        getMaskByName(maskName) {\n            const inputMask = _.find(this.component.inputMasks, inputMask => {\n                return inputMask.label === maskName;\n            });\n            return inputMask ? inputMask.mask : undefined;\n        }\n        setInputMask(input, inputMask) {\n            return super.setInputMask(input, inputMask || this.component.inputMask, !this.component.placeholder);\n        }\n        getMaskOptions() {\n            return this.component.inputMasks.map(mask => ({\n                label: mask.label,\n                value: mask.label\n            }));\n        }\n        get remainingWords() {\n            const maxWords = _.parseInt(_.get(this.component, 'validate.maxWords'), 10);\n            const wordCount = _.words(this.dataValue).length;\n            return maxWords - wordCount;\n        }\n        renderElement(value, index) {\n            if (value && typeof value === 'string') {\n                value = value.replace(/\"/g, '&quot;');\n            }\n            const info = this.inputInfo;\n            info.attr = info.attr || {};\n            info.attr.value = this.getValueAsString(this.formatValue(this.parseValue(value)));\n            if (this.isMultipleMasksField) {\n                info.attr.class += ' formio-multiple-mask-input';\n            }\n            if (this.component.widget && this.component.widget.type === 'calendar') {\n                const calendarIcon = this.renderTemplate('icon', {\n                    ref: 'icon',\n                    className: this.iconClass(this.component.enableDate || this.component.widget.enableDate ? 'calendar' : 'time'),\n                    styles: '',\n                    content: ''\n                }).trim();\n                if (this.component.prefix !== calendarIcon) {\n                    this.component.suffix = calendarIcon;\n                }\n            }\n            return this.isMultipleMasksField ? this.renderTemplate('multipleMasksInput', {\n                input: info,\n                value,\n                index,\n                selectOptions: this.getMaskOptions() || []\n            }) : this.renderTemplate('input', {\n                input: info,\n                value: this.formatValue(this.parseValue(value)),\n                index\n            });\n        }\n        setCounter(type, element, count, max) {\n            if (max) {\n                const remaining = max - count;\n                if (remaining > 0) {\n                    this.removeClass(element, 'text-danger');\n                } else {\n                    this.addClass(element, 'text-danger');\n                }\n                this.setContent(element, this.t(`{{ remaining }} ${ type } remaining.`, { remaining: remaining }));\n            } else {\n                this.setContent(element, this.t(`{{ count }} ${ type }`, { count: count }));\n            }\n        }\n        updateValueAt(value, flags, index) {\n            flags = flags || {};\n            if (_.get(this.component, 'showWordCount', false)) {\n                if (this.refs.wordcount && this.refs.wordcount[index]) {\n                    const maxWords = _.parseInt(_.get(this.component, 'validate.maxWords', 0), 10);\n                    this.setCounter('words', this.refs.wordcount[index], _.words(value).length, maxWords);\n                }\n            }\n            if (_.get(this.component, 'showCharCount', false)) {\n                if (this.refs.charcount && this.refs.charcount[index]) {\n                    const maxChars = _.parseInt(_.get(this.component, 'validate.maxLength', 0), 10);\n                    this.setCounter('characters', this.refs.charcount[index], value.length, maxChars);\n                }\n            }\n        }\n        getValueAt(index) {\n            const input = this.performInputMapping(this.refs.input[index]);\n            if (input && input.widget) {\n                return input.widget.getValue();\n            }\n            return input ? input.value : undefined;\n        }\n        updateValue(value, flags, index) {\n            flags = flags || {};\n            const changed = super.updateValue(value, flags);\n            this.triggerUpdateValueAt(this.dataValue, flags, index);\n            return changed;\n        }\n        parseValue(value) {\n            return value;\n        }\n        formatValue(value) {\n            return value;\n        }\n        attach(element) {\n            this.loadRefs(element, {\n                charcount: 'multiple',\n                wordcount: 'multiple',\n                prefix: 'multiple',\n                suffix: 'multiple'\n            });\n            return super.attach(element);\n        }\n        getWidget(index) {\n            index = index || 0;\n            if (this.refs.input && this.refs.input[index]) {\n                return this.refs.input[index].widget;\n            }\n            return null;\n        }\n        getValueAsString(value) {\n            return super.getValueAsString(this.getWidgetValueAsString(value));\n        }\n        attachElement(element, index) {\n            super.attachElement(element, index);\n            if (element.widget) {\n                element.widget.destroy();\n            }\n            element.widget = this.createWidget(index);\n            if (element.widget) {\n                element.widget.attach(element);\n                if (this.refs.prefix && this.refs.prefix[index]) {\n                    element.widget.addPrefix(this.refs.prefix[index]);\n                }\n                if (this.refs.suffix && this.refs.suffix[index]) {\n                    element.widget.addSuffix(this.refs.suffix[index]);\n                }\n            }\n            this.addFocusBlurEvents(element);\n            if (this.options.submitOnEnter) {\n                this.addEventListener(element, 'keypress', event => {\n                    const key = event.keyCode || event.which;\n                    if (key === 13) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.emit('submitButton');\n                    }\n                });\n            }\n        }\n        createWidget(index) {\n            if (!this.component.widget) {\n                return null;\n            }\n            const settings = typeof this.component.widget === 'string' ? { type: this.component.widget } : this.component.widget;\n            if (!Widgets.hasOwnProperty(settings.type)) {\n                return null;\n            }\n            const widget = new Widgets[settings.type](settings, this.component);\n            widget.on('update', () => this.updateValue(widget.getValue(), { modified: true }, index), true);\n            widget.on('redraw', () => this.redraw(), true);\n            return widget;\n        }\n        detach() {\n            super.detach();\n            if (this.refs && this.refs.input) {\n                for (let i = 0; i <= this.refs.input.length; i++) {\n                    const widget = this.getWidget(i);\n                    if (widget) {\n                        widget.destroy();\n                    }\n                }\n            }\n        }\n        addFocusBlurEvents(element) {\n            this.addEventListener(element, 'focus', () => {\n                if (this.root.focusedComponent !== this) {\n                    if (this.root.pendingBlur) {\n                        this.root.pendingBlur();\n                    }\n                    this.root.focusedComponent = this;\n                    this.emit('focus', this);\n                } else if (this.root.focusedComponent === this && this.root.pendingBlur) {\n                    this.root.pendingBlur.cancel();\n                    this.root.pendingBlur = null;\n                }\n            });\n            this.addEventListener(element, 'blur', () => {\n                this.root.pendingBlur = a.delay(() => {\n                    this.emit('blur', this);\n                    if (this.component.validateOn === 'blur') {\n                        this.root.triggerChange({}, {\n                            instance: this,\n                            component: this.component,\n                            value: this.dataValue,\n                            flags: {}\n                        });\n                    }\n                    this.root.focusedComponent = null;\n                    this.root.pendingBlur = null;\n                });\n            });\n        }\n    };\n});"]}