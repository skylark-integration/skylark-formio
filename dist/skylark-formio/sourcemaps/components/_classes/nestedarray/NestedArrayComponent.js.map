{"version":3,"sources":["components/_classes/nestedarray/NestedArrayComponent.js"],"names":["define","_","Component","NestedDataComponent","[object Object]","component","this","iteratableRows","rowIndex","data","Error","super","value","_rowIndex","flags","row","rootValue","checkRows","prototype","checkData","call","method","opts","defaultValue","reduce","valid","checkRow","components","maxLength","get","conditionalAddButton","disableAddingRemovingRows","options","readOnly","disabled","fullMode","preview","length","evaluate","dataValue"],"mappings":";;;;;;;AAAAA,QACI,iBACA,yBACA,qCACD,SAAUC,EAAGC,EAAWC,GACvB,aAEA,qBAA0CA,EACtCC,iBAAiBC,GACb,OAAOC,KAAKC,eAAeF,EAAUG,UAAUC,KAEnDF,qBACI,MAAM,IAAIG,MAAM,+CAEpBF,eACI,OAAOG,MAAMH,SAEjBA,aAAaI,GACTN,KAAKO,UAAYD,EAErBR,UAAUK,EAAMK,EAAOC,GAInB,OAHAN,EAAOA,GAAQH,KAAKU,UACpBF,EAAQA,MACRC,EAAMA,GAAOT,KAAKG,KACXH,KAAKW,UAAU,YAAaR,EAAMK,EAAOZ,EAAUgB,UAAUC,UAAUC,KAAKd,KAAMG,EAAMK,EAAOC,IAE1GX,UAAUiB,EAAQZ,EAAMa,EAAMC,GAC1B,OAAOjB,KAAKC,eAAeiB,OAAO,CAACC,EAAOV,IAAQT,KAAKoB,SAASL,EAAQZ,EAAMa,EAAMP,EAAIN,KAAMM,EAAIY,aAAeF,EAAOF,GAE5HnB,SAASiB,EAAQZ,EAAMa,EAAMP,EAAKY,GAC9B,OAAO1B,EAAEuB,OAAOG,EAAY,CAACF,EAAOpB,IAAcA,EAAUgB,GAAQZ,EAAMa,EAAMP,IAAQU,GAAO,GAEnGrB,eACI,MAAMwB,EAAY3B,EAAE4B,IAAIvB,KAAKD,UAAW,sBAClCyB,EAAuB7B,EAAE4B,IAAIvB,KAAKD,UAAW,wBACnD,OAAQC,KAAKD,UAAU0B,4BAA8BzB,KAAK0B,QAAQC,WAAa3B,KAAK4B,UAAY5B,KAAK6B,WAAa7B,KAAK0B,QAAQI,WAAaR,GAAatB,KAAKC,eAAe8B,OAAST,MAAgBE,GAAwBxB,KAAKgC,SAASR,GAAwBlB,MAAON,KAAKiC,WAAa","file":"../../../../components/_classes/nestedarray/NestedArrayComponent.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../component/Component',\n    '../nesteddata/NestedDataComponent'\n], function (_, Component, NestedDataComponent) {\n    'use strict';\n    'use strict';\n    return class NestedArrayComponent extends NestedDataComponent {\n        componentContext(component) {\n            return this.iteratableRows[component.rowIndex].data;\n        }\n        get iteratableRows() {\n            throw new Error('Getter #iteratableRows() is not implemented');\n        }\n        get rowIndex() {\n            return super.rowIndex;\n        }\n        set rowIndex(value) {\n            this._rowIndex = value;\n        }\n        checkData(data, flags, row) {\n            data = data || this.rootValue;\n            flags = flags || {};\n            row = row || this.data;\n            return this.checkRows('checkData', data, flags, Component.prototype.checkData.call(this, data, flags, row));\n        }\n        checkRows(method, data, opts, defaultValue) {\n            return this.iteratableRows.reduce((valid, row) => this.checkRow(method, data, opts, row.data, row.components) && valid, defaultValue);\n        }\n        checkRow(method, data, opts, row, components) {\n            return _.reduce(components, (valid, component) => component[method](data, opts, row) && valid, true);\n        }\n        hasAddButton() {\n            const maxLength = _.get(this.component, 'validate.maxLength');\n            const conditionalAddButton = _.get(this.component, 'conditionalAddButton');\n            return !this.component.disableAddingRemovingRows && !this.options.readOnly && !this.disabled && this.fullMode && !this.options.preview && (!maxLength || this.iteratableRows.length < maxLength) && (!conditionalAddButton || this.evaluate(conditionalAddButton, { value: this.dataValue }, 'show'));\n        }\n    };\n});"]}