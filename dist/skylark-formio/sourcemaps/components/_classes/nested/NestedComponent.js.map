{"version":3,"sources":["components/_classes/nested/NestedComponent.js"],"names":["define","_","Field","Components","NativePromise","NestedComponent","[object Object]","extend","schema","tree","component","options","data","super","this","type","_collapsed","collapsed","defaultSchema","components","uniqBy","getComponents","map","value","redraw","visible","isVisible","forceShow","show","key","forceHide","hide","forEach","conditionallyVisible","error","parentVisible","disabled","parentDisabled","ready","all","currentForm","instance","rowIndex","_rowIndex","eachComponent","_data","componentContext","fn","each","index","everyComponent","result","comp","flattenAs","path","Array","isArray","remainingPath","isString","length","getComponent","id","before","parent","root","skipInit","create","thisPath","allowData","init","internal","findIndex","splice","push","element","componentComponents","nestedKey","templateName","addComponents","hook","addComponent","noAdd","createComponent","children","render","renderTemplate","renderComponents","superPromise","attach","loadRefs","header","childPromise","resolve","refs","attachComponents","collapsible","addEventListener","container","promises","prototype","slice","call","child","getAttribute","destroy","remove","removeComponent","getComponentById","flags","reduce","changed","updateValue","dirty","row","input","shouldSkipValidation","builderMode","rootValue","valid","checkData","checkConditions","clearOnHide","hasValue","dataValue","defaultValue","restoreComponentsContext","next","beforePage","beforeSubmit","calculateValue","pages","page","isValid","checkCondition","check","checkValidity","setCustomValidity","checkAsyncValidity","then","results","pristine","setPristine","detach","destroyComponents","errors","thisErrors","concat","resetValue","unset","dataReady","setValue","get","rootPristine","noValidate","setNestedValue"],"mappings":"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","file":"../../../../components/_classes/nested/NestedComponent.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../field/Field',\n    '../../Components',\n    '../../../vendors/getify/npo'\n], function (_, Field, Components, NativePromise) {\n    'use strict';\n    'use strict';\n    return class NestedComponent extends Field {\n        static schema(...extend) {\n            return Field.schema({ tree: false }, ...extend);\n        }\n        constructor(component, options, data) {\n            super(component, options, data);\n            this.type = 'components';\n            this._collapsed = !!this.component.collapsed;\n        }\n        get defaultSchema() {\n            return NestedComponent.schema();\n        }\n        get schema() {\n            const schema = super.schema;\n            const components = _.uniqBy(this.getComponents(), 'component.key');\n            schema.components = _.map(components, 'schema');\n            return schema;\n        }\n        get collapsed() {\n            return this._collapsed;\n        }\n        set collapsed(value) {\n            this._collapsed = value;\n            this.redraw();\n        }\n        set visible(value) {\n            super.visible = value;\n            const isVisible = this.visible;\n            const forceShow = this.options.show && this.options.show[this.component.key];\n            const forceHide = this.options.hide && this.options.hide[this.component.key];\n            this.components.forEach(component => {\n                const conditionallyVisible = component.conditionallyVisible();\n                if (forceShow || conditionallyVisible) {\n                    component.visible = true;\n                } else if (forceHide || !isVisible || !conditionallyVisible) {\n                    component.visible = false;\n                }\n                if (!component.visible) {\n                    component.error = '';\n                }\n                component.parentVisible = isVisible;\n            });\n        }\n        get visible() {\n            return super.visible;\n        }\n        set parentVisible(value) {\n            super.parentVisible = value;\n            this.components.forEach(component => {\n                component.parentVisible = this.visible;\n            });\n        }\n        get parentVisible() {\n            return super.parentVisible;\n        }\n        get disabled() {\n            return super.disabled;\n        }\n        set disabled(disabled) {\n            super.disabled = disabled;\n            this.components.forEach(component => component.parentDisabled = disabled);\n        }\n        set parentDisabled(value) {\n            super.parentDisabled = value;\n            this.components.forEach(component => {\n                component.parentDisabled = this.disabled;\n            });\n        }\n        get parentDisabled() {\n            return super.parentDisabled;\n        }\n        get ready() {\n            return NativePromise.all(this.getComponents().map(component => component.ready));\n        }\n        get currentForm() {\n            return super.currentForm;\n        }\n        set currentForm(instance) {\n            super.currentForm = instance;\n            this.getComponents().forEach(component => {\n                component.currentForm = instance;\n            });\n        }\n        get rowIndex() {\n            return this._rowIndex;\n        }\n        set rowIndex(value) {\n            this._rowIndex = value;\n            this.eachComponent(component => {\n                component.rowIndex = value;\n            });\n        }\n        componentContext() {\n            return this._data;\n        }\n        get data() {\n            return this._data;\n        }\n        set data(value) {\n            this._data = value;\n            this.eachComponent(component => {\n                component.data = this.componentContext(component);\n            });\n        }\n        getComponents() {\n            return this.components || [];\n        }\n        everyComponent(fn) {\n            const components = this.getComponents();\n            _.each(components, (component, index) => {\n                if (fn(component, components, index) === false) {\n                    return false;\n                }\n                if (typeof component.everyComponent === 'function') {\n                    if (component.everyComponent(fn) === false) {\n                        return false;\n                    }\n                }\n            });\n        }\n        hasComponent(component) {\n            let result = false;\n            this.everyComponent(comp => {\n                if (comp === component) {\n                    result = true;\n                    return false;\n                }\n            });\n            return result;\n        }\n        flattenComponents() {\n            const result = {};\n            this.everyComponent(component => {\n                result[component.component.flattenAs || component.key] = component;\n            });\n            return result;\n        }\n        eachComponent(fn) {\n            _.each(this.getComponents(), (component, index) => {\n                if (fn(component, index) === false) {\n                    return false;\n                }\n            });\n        }\n        getComponent(path, fn) {\n            path = Array.isArray(path) ? path : [path];\n            const [key, ...remainingPath] = path;\n            let comp = null;\n            if (!_.isString(key)) {\n                return comp;\n            }\n            this.everyComponent((component, components) => {\n                if (component.component.key === key) {\n                    comp = component;\n                    if (remainingPath.length > 0 && 'getComponent' in component) {\n                        comp = component.getComponent(remainingPath, fn);\n                    } else if (fn) {\n                        fn(component, components);\n                    }\n                    return false;\n                }\n            });\n            return comp;\n        }\n        getComponentById(id, fn) {\n            let comp = null;\n            this.everyComponent((component, components) => {\n                if (component.id === id) {\n                    comp = component;\n                    if (fn) {\n                        fn(component, components);\n                    }\n                    return false;\n                }\n            });\n            return comp;\n        }\n        createComponent(component, options, data, before) {\n            if (!component) {\n                return;\n            }\n            options = options || this.options;\n            data = data || this.data;\n            options.parent = this;\n            options.parentVisible = this.visible;\n            options.root = this.root || this;\n            options.skipInit = true;\n            const comp = Components.create(component, options, data, true);\n            if (component.key) {\n                let thisPath = this;\n                while (thisPath && !thisPath.allowData && thisPath.parent) {\n                    thisPath = thisPath.parent;\n                }\n                comp.path = thisPath.path ? `${ thisPath.path }.` : '';\n                comp.path += component.key;\n            }\n            comp.init();\n            if (component.internal) {\n                return comp;\n            }\n            if (before) {\n                const index = _.findIndex(this.components, { id: before.id });\n                if (index !== -1) {\n                    this.components.splice(index, 0, comp);\n                } else {\n                    this.components.push(comp);\n                }\n            } else {\n                this.components.push(comp);\n            }\n            return comp;\n        }\n        getContainer() {\n            return this.element;\n        }\n        get componentComponents() {\n            return this.component.components || [];\n        }\n        get nestedKey() {\n            return `nested-${ this.key }`;\n        }\n        get templateName() {\n            return 'container';\n        }\n        init() {\n            this.components = this.components || [];\n            this.addComponents();\n            return super.init();\n        }\n        addComponents(data, options) {\n            data = data || this.data;\n            options = options || this.options;\n            if (options.components) {\n                this.components = options.components;\n            } else {\n                const components = this.hook('addComponents', this.componentComponents, this) || [];\n                components.forEach(component => this.addComponent(component, data));\n            }\n        }\n        addComponent(component, data, before, noAdd) {\n            data = data || this.data;\n            component = this.hook('addComponent', component, data, before, noAdd);\n            const comp = this.createComponent(component, this.options, data, before ? before : null);\n            if (noAdd) {\n                return comp;\n            }\n            return comp;\n        }\n        render(children) {\n            return super.render(children || this.renderTemplate(this.templateName, {\n                children: this.renderComponents(),\n                nestedKey: this.nestedKey,\n                collapsed: this.collapsed\n            }));\n        }\n        renderComponents(components) {\n            components = components || this.getComponents();\n            const children = components.map(component => component.render());\n            return this.renderTemplate('components', {\n                children,\n                components\n            });\n        }\n        attach(element) {\n            const superPromise = super.attach(element);\n            this.loadRefs(element, {\n                header: 'single',\n                collapsed: this.collapsed,\n                [this.nestedKey]: 'single'\n            });\n            let childPromise = NativePromise.resolve();\n            if (this.refs[this.nestedKey]) {\n                childPromise = this.attachComponents(this.refs[this.nestedKey]);\n            }\n            if (this.component.collapsible && this.refs.header) {\n                this.addEventListener(this.refs.header, 'click', () => {\n                    this.collapsed = !this.collapsed;\n                });\n            }\n            return NativePromise.all([\n                superPromise,\n                childPromise\n            ]);\n        }\n        attachComponents(element, components, container) {\n            components = components || this.components;\n            container = container || this.component.components;\n            element = this.hook('attachComponents', element, components, container, this);\n            if (!element) {\n                return new NativePromise(() => {\n                });\n            }\n            let index = 0;\n            const promises = [];\n            Array.prototype.slice.call(element.children).forEach(child => {\n                if (!child.getAttribute('data-noattach') && components[index]) {\n                    promises.push(components[index].attach(child));\n                    index++;\n                }\n            });\n            return NativePromise.all(promises);\n        }\n        removeComponent(component, components) {\n            components = components || this.components;\n            component.destroy();\n            _.remove(components, { id: component.id });\n        }\n        removeComponentByKey(key, fn) {\n            const comp = this.getComponent(key, (component, components) => {\n                this.removeComponent(component, components);\n                if (fn) {\n                    fn(component, components);\n                }\n            });\n            if (!comp) {\n                if (fn) {\n                    fn(null);\n                }\n                return null;\n            }\n        }\n        removeComponentById(id, fn) {\n            const comp = this.getComponentById(id, (component, components) => {\n                this.removeComponent(component, components);\n                if (fn) {\n                    fn(component, components);\n                }\n            });\n            if (!comp) {\n                if (fn) {\n                    fn(null);\n                }\n                return null;\n            }\n        }\n        updateValue(value, flags = {}) {\n            return this.components.reduce((changed, comp) => {\n                return comp.updateValue(null, flags) || changed;\n            }, super.updateValue(value, flags));\n        }\n        shouldSkipValidation(data, dirty, row) {\n            if (!this.component.input) {\n                return true;\n            } else {\n                return super.shouldSkipValidation(data, dirty, row);\n            }\n        }\n        checkData(data, flags, row, components) {\n            if (this.builderMode) {\n                return true;\n            }\n            data = data || this.rootValue;\n            flags = flags || {};\n            row = row || this.data;\n            components = components || this.getComponents();\n            return components.reduce((valid, comp) => {\n                return comp.checkData(data, flags, row) && valid;\n            }, super.checkData(data, flags, row));\n        }\n        checkConditions(data, flags, row) {\n            this.getComponents().forEach(comp => comp.checkConditions(data, flags, row));\n            return super.checkConditions(data, flags, row);\n        }\n        clearOnHide(show) {\n            super.clearOnHide(show);\n            if (this.component.clearOnHide) {\n                if (this.allowData && !this.hasValue()) {\n                    this.dataValue = this.defaultValue;\n                }\n                if (this.hasValue()) {\n                    this.restoreComponentsContext();\n                }\n            }\n            this.getComponents().forEach(component => component.clearOnHide(show));\n        }\n        restoreComponentsContext() {\n            this.getComponents().forEach(component => component.data = this.dataValue);\n        }\n        beforePage(next) {\n            return NativePromise.all(this.getComponents().map(comp => comp.beforePage(next)));\n        }\n        beforeSubmit() {\n            return NativePromise.all(this.getComponents().map(comp => comp.beforeSubmit()));\n        }\n        calculateValue(data, flags, row) {\n            if (!this.conditionallyVisible()) {\n                return false;\n            }\n            return this.getComponents().reduce((changed, comp) => comp.calculateValue(data, flags, row) || changed, super.calculateValue(data, flags, row));\n        }\n        isLastPage() {\n            return this.pages.length - 1 === this.page;\n        }\n        isValid(data, dirty) {\n            return this.getComponents().reduce((valid, comp) => comp.isValid(data, dirty) && valid, super.isValid(data, dirty));\n        }\n        checkValidity(data, dirty, row) {\n            if (!this.checkCondition(row, data)) {\n                this.setCustomValidity('');\n                return true;\n            }\n            return this.getComponents().reduce((check, comp) => comp.checkValidity(data, dirty, row) && check, super.checkValidity(data, dirty, row));\n        }\n        checkAsyncValidity(data, dirty, row) {\n            const promises = [super.checkAsyncValidity(data, dirty, row)];\n            this.eachComponent(component => promises.push(component.checkAsyncValidity(data, dirty, row)));\n            return NativePromise.all(promises).then(results => results.reduce((valid, result) => valid && result, true));\n        }\n        setPristine(pristine) {\n            super.setPristine(pristine);\n            this.getComponents().forEach(comp => comp.setPristine(pristine));\n        }\n        detach() {\n            this.components.forEach(component => {\n                component.detach();\n            });\n            super.detach();\n        }\n        destroy() {\n            this.destroyComponents();\n            super.destroy();\n        }\n        destroyComponents() {\n            const components = this.getComponents().slice();\n            components.forEach(comp => this.removeComponent(comp, this.components));\n            this.components = [];\n        }\n        get errors() {\n            const thisErrors = this.error ? [this.error] : [];\n            return this.getComponents().reduce((errors, comp) => errors.concat(comp.errors || []), thisErrors);\n        }\n        getValue() {\n            return this.data;\n        }\n        resetValue() {\n            this.getComponents().forEach(comp => comp.resetValue());\n            this.unset();\n            this.setPristine(true);\n        }\n        get dataReady() {\n            return NativePromise.all(this.getComponents().map(component => component.dataReady));\n        }\n        setNestedValue(component, value, flags = {}) {\n            component._data = this.componentContext(component);\n            if (component.type === 'button') {\n                return false;\n            }\n            if (component.type === 'components') {\n                return component.setValue(value, flags);\n            } else if (value && component.hasValue(value)) {\n                return component.setValue(_.get(value, component.key), flags);\n            } else if (!this.rootPristine || component.visible) {\n                flags.noValidate = !flags.dirty;\n                flags.resetValue = true;\n                return component.setValue(component.defaultValue, flags);\n            }\n        }\n        setValue(value, flags = {}) {\n            if (!value) {\n                return false;\n            }\n            return this.getComponents().reduce((changed, component) => {\n                return this.setNestedValue(component, value, flags, changed) || changed;\n            }, false);\n        }\n    };\n});"]}