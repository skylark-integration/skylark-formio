{"version":3,"sources":["components/_classes/component/Component.js"],"names":["define","langx","conformToMask","NativePromise","Tooltip","_","isMobile","Formio","FormioUtils","Validator","Templates","utils","Element","ComponentModal","QUILL_URL","Component","[object Object]","sources","mixin","input","key","placeholder","prefix","customClass","suffix","multiple","defaultValue","protected","unique","persistent","hidden","clearOnHide","refreshOn","redrawOn","tableView","modalEdit","label","labelPosition","description","errorLabel","tooltip","hideLabel","tabindex","disabled","autofocus","dbIndex","customDefaultValue","calculateValue","widget","attributes","validateOn","validate","required","custom","customPrivate","strictDateValidation","conditional","show","when","eq","overlay","style","left","top","width","height","allowCalculateOverride","encrypted","showCharCount","showWordCount","properties","allowMultipleMasks","value","options","component","data","super","Object","assign","renderMode","attachMode","this","_hasCondition","refs","components","type","validator","path","mergeSchema","originalComponent","fastCloneDeep","attached","rendered","_data","id","error","row","_disabled","boolValue","root","pristine","parent","name","validators","_path","_parentVisible","hasOwnProperty","parentVisible","_visible","conditionallyVisible","_parentDisabled","lastChanged","triggerArgs","_triggerChange","debounce","args","changing","isEmpty","flags","onChange","triggerChange","length","triggerRedraw","redraw","bind","tooltips","invalid","allowData","visible","hasValue","dataValue","info","elementInfo","hook","skipInit","init","defaultsDeep","defaultSchema","ready","resolve","labelInfo","labelIsHidden","className","tooltipClass","iconClass","hasInput","attr","for","shouldDisabled","destroy","detach","readOnly","isInputComponent","schema","get","parentDisabled","builderMode","showHiddenFields","hide","currentForm","_currentForm","instance","fullMode","calculatedPath","includes","tree","labelWidth","labelMargin","isAdvancedLabel","labelPositions","split","direction","isRightPosition","rightDirection","isRightAlign","labelStyles","contentStyles","recursion","modified","forEach","val","isArray","isObject","subModified","getModifiedSchema","omit","text","params","rootValue","nsSeparator","keySeparator","pluralSeparator","contextSeparator","i18next","t","inDataGrid","dataGridLabel","inputsOnly","transform","current","names","modes","Array","push","result","templates","checkTemplate","frameworkTemplates","template","templatesByName","defaultTemplates","templateByMode","checkTemplateMode","form","mode","modeOption","self","builder","render","console","warn","renderTemplate","interpolate","replace","charAt","toUpperCase","substring","getTemplate","dirty","sanitize","nav","window","navigator","browserLanguagePropertyKeys","language","languages","i","beforePage","submissionTimezone","element","ref","querySelector","querySelectorAll","componentModal","setOpenModalElement","getValueAsString","empty","setContent","attach","children","topLevel","isVisible","classes","styles","customStyle","loadRefs","messageContainer","index","title","getAttribute","trigger","placement","html","attachLogic","shortcut","addShortcut","removeShortcut","removeEventListeners","detachLogic","dispose","refreshData","changed","changePath","refresh","inContext","checkRefresh","refreshOnChanged","isEqual","refreshOnValue","clearOnRefresh","setValue","viewOnly","viewAsHtml","ce","defaultViewOnlyValue","noInputWidget","values","widge","getWidgetValueAsString","join","isPlainObject","JSON","stringify","undefined","toString","restoreValue","forceUseValue","valueProperty","map","item","itemValueForHTMLMode","itemValue","dialog","call","dialogOverlay","dialogContents","dialogClose","appendChild","document","body","classList","add","close","remove","dispatchEvent","CustomEvent","addEventListener","removeChildFrom","event","preventDefault","customCSS","additional","evalContext","rowIndex","submission","_submission","_form","splice","triggerRootChange","spinning","iconset","defaultIconset","errors","content","HTMLElement","innerHTML","parentNode","clear","prototype","indexOf","outerHTML","hasClass","addClass","removeClass","hasCondition","checkCondition","fieldLogic","checkComponentConditions","logic","logics","newComponent","reduce","checkTrigger","applyActions","actions","userAgent","msie","parseInt","rv","edge","action","setActionProperty","property","oldValue","getValue","newValue","evaluate","clone","schemaDefinition","message","elements","addMessages","setErrorClasses","messages","level","hasErrors","hasMessages","clearErrorClasses","performInputMapping","highlightErrors","componentErrorClass","rootPristine","noUpdateEvent","deleteValue","fromRoot","getElement","noValidate","emit","wysiwygDefault","quill","theme","modules","toolbar","size","header","font","script","color","background","list","indent","align","ace","maxLines","minLines","tabSize","ckeditor","image","tiny","default","settings","base64Upload","mediaEmbed","previewsInData","requireLibrary","then","ClassicEditor","create","editor","model","on","reject","merge","src","Quill","txtArea","createElement","setAttribute","addContainer","qlSource","display","setContents","clipboard","convert","focus","elm","d","Deferred","require","edit","removeAllListeners","setOptions","getSession","setMode","e","promise","tinyApiKey","target","init_instance_callback","getContent","emptyValue","has","unset","set","noDefault","preview","defaultMask","conformedValue","matchInputMask","getValueAt","updateValue","fromSubmission","setValueAt","mask","textMaskInputElement","update","hasSetValue","resetValue","normalizeValue","hasChanged","updateOnChange","updateComponentValue","allowOverride","firstPass","calculatedValue","convertNumberOrBoolToString","calculateComponentValue","labelElement","innerText","ignoreCondition","checkComponent","invalidMessage","filter","setCustomValidity","async","shouldSkipValidation","check","setComponentValidity","checkComponentValidity","checkRefreshOn","noCheck","isDirty","alwaysDirty","validationValue","isEmptyArray","valueA","valueB","external","editing","isValueHidden","some","pred","dataReady","removeAttribute","loading","loader","class","appendTo","select","tag","option","attrs","selected","optionElement","onchange","onselect","prependTo","off","inputType","lang","defaults","changeEvent"],"mappings":";;;;;;;AAAAA,QACI,gBACA,mDACA,8BACA,sCACA,iBACA,uCACA,kBACA,uBACA,+BACA,+BACA,uBACA,mBACA,oCACD,SAAUC,EAAMC,EAAeC,EAAeC,EAASC,EAAGC,EAAUC,EAAQC,EAAaC,EAAWC,EAAWC,EAAOC,EAASC,GAC9H,aACA,MACMC,EAAY,kCAGlB,aAAaC,UAAkBH,EAC3BI,iBAAiBC,GACb,OAAOhB,EAAMiB,OACTC,OAAO,EACPC,IAAK,GACLC,YAAa,GACbC,OAAQ,GACRC,YAAa,GACbC,OAAQ,GACRC,UAAU,EACVC,aAAc,KACdC,WAAW,EACXC,QAAQ,EACRC,YAAY,EACZC,QAAQ,EACRC,aAAa,EACbC,UAAW,GACXC,SAAU,GACVC,WAAW,EACXC,WAAW,EACXC,MAAO,GACPC,cAAe,MACfC,YAAa,GACbC,WAAY,GACZC,QAAS,GACTC,WAAW,EACXC,SAAU,GACVC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,mBAAoB,GACpBC,eAAgB,GAChBC,OAAQ,KACRC,cACAC,WAAY,SACZC,UACIC,UAAU,EACVC,OAAQ,GACRC,eAAe,EACfC,sBAAsB,EACtB9B,UAAU,EACVG,QAAQ,GAEZ4B,aACIC,KAAM,KACNC,KAAM,KACNC,GAAI,IAERC,SACIC,MAAO,GACPC,KAAM,GACNC,IAAK,GACLC,MAAO,GACPC,OAAQ,IAEZC,wBAAwB,EACxBC,WAAW,EACXC,eAAe,EACfC,eAAe,EACfC,cACAC,oBAAoB,MAClBtD,GAEVD,iBAAiBwD,EAAOC,IAExBzD,YAAY0D,EAAWD,EAASE,GAC5BC,MAAMC,OAAOC,QACTC,WAAY,OACZC,WAAY,QACbP,QACHQ,KAAKC,cAAgB,KACrBD,KAAKE,QACDT,GAAaO,KAAKR,QAAQW,YAAcH,KAAKR,QAAQW,WAAWV,EAAUW,OAC1EpF,EAAMiB,MAAMwD,EAAWO,KAAKR,QAAQW,WAAWV,EAAUW,OAE7DJ,KAAKK,UAAY7E,EACjBwE,KAAKM,KAAO,GACZN,KAAKP,UAAYO,KAAKO,YAAYd,OAClCO,KAAKQ,kBAAoB9E,EAAM+E,cAAcT,KAAKP,WAClDO,KAAKU,UAAW,EAChBV,KAAKW,UAAW,EAChBX,KAAKY,MAAQlB,MACbM,KAAKP,UAAUoB,GAAKb,KAAKa,GACzBb,KAAKc,MAAQ,GACbd,KAAKzC,QAAU,GACfyC,KAAKe,IAAMf,KAAKR,QAAQuB,IACxBf,KAAKgB,YAAYtF,EAAMuF,UAAUjB,KAAKP,UAAU/B,WAAYsC,KAAKP,UAAU/B,SAC3EsC,KAAKkB,KAAOlB,KAAKR,QAAQ0B,KACzBlB,KAAKmB,UAAW,EAChBnB,KAAKoB,OAASpB,KAAKR,QAAQ4B,OAC3BpB,KAAKR,QAAQ6B,KAAOrB,KAAKR,QAAQ6B,MAAQ,OACzCrB,KAAKsB,YACD,WACA,YACA,YACA,WACA,WACA,SACA,UACA,OACA,QAEJtB,KAAKuB,MAAQ,GACbvB,KAAKwB,gBAAiBxB,KAAKR,QAAQiC,eAAe,kBAAmBzB,KAAKR,QAAQkC,cAClF1B,KAAK2B,SAAW3B,KAAKwB,gBAAkBxB,KAAK4B,qBAAqB,KAAMlC,GACvEM,KAAK6B,iBAAkB,EACvB,IAAIC,EAAc,KACdC,KACJ,MAAMC,EAAiBhH,EAAMiH,SAAS,IAAIC,KAClClC,KAAKkB,OACLlB,KAAKkB,KAAKiB,UAAW,GAEzBJ,MACKG,EAAK,IAAMJ,IACZI,EAAK,GAAKJ,GAEV9G,EAAMoH,QAAQF,EAAK,KAAOJ,IAC1BI,EAAK,GAAKJ,EAAYO,OAE1BP,EAAc,KACP9B,KAAKsC,YAAYJ,IACzB,KACHlC,KAAKuC,cAAgB,KAAIL,KACjBA,EAAK,KACLJ,EAAcI,EAAK,IAEnBlC,KAAKkB,OACLlB,KAAKkB,KAAKiB,UAAW,GAErBD,EAAKM,SACLT,EAAcG,GAEXF,KAAkBD,KAE7B/B,KAAKyC,cAAgBzH,EAAMiH,SAASjC,KAAK0C,OAAOC,KAAK3C,MAAO,KAC5DA,KAAK4C,YACL5C,KAAK6C,SAAU,EACX7C,KAAKP,YACLO,KAAKI,KAAOJ,KAAKP,UAAUW,KACvBJ,KAAK8C,WAAa9C,KAAK7D,MACvB6D,KAAKR,QAAQ6B,UAAarB,KAAK7D,QAC3B6D,KAAK+C,SAAY/C,KAAKP,UAAU3C,cAC3BkD,KAAKgD,WAGNhD,KAAKiD,UAAYjD,KAAKiD,UAFtBjD,KAAKiD,UAAYjD,KAAKvD,eAMlCuD,KAAKkD,KAAOlD,KAAKmD,eAErBnD,KAAKoD,KAAK,aACLpD,KAAKR,QAAQ6D,UACdrD,KAAKsD,OAGb5D,WACI,OAAOM,KAAKY,MAEhBlB,SAASH,GACLS,KAAKY,MAAQrB,EAEjBxD,YAAY0D,MACR,OAAOrE,EAAEmI,aAAa9D,EAAWO,KAAKwD,eAE1CC,YACI,OAAOvI,EAAcwI,QAAQ1D,MAEjC2D,gBACI,MAAMxG,KAcN,OAbAA,EAAMN,OAASmD,KAAK4D,gBACpBzG,EAAM0G,UAAY,GAClB1G,EAAMC,cAAgB4C,KAAKP,UAAUrC,cACrCD,EAAM2G,gBAAmB9D,KAAK+D,UAAU,8BACpC/D,KAAKgE,UAAYhE,KAAKP,UAAUvB,UAAYxC,EAAMuF,UAAUjB,KAAKP,UAAUvB,SAASC,YACpFhB,EAAM0G,WAAa,mBAEnB1G,EAAMN,SACNM,EAAM0G,WAAa,0BAEnB7D,KAAKkD,KAAKe,KAAKpD,KACf1D,EAAM+G,IAAMlE,KAAKkD,KAAKe,KAAKpD,IAExB1D,EAEXpB,OACIiE,KAAKtC,SAAWsC,KAAKmE,eAEzBpI,UACI4D,MAAMyE,UACNpE,KAAKqE,SAETF,qBACI,OAAOnE,KAAKR,QAAQ8E,UAAYtE,KAAKP,UAAU/B,UAAYsC,KAAKR,QAAQiC,eAAe,aAAezB,KAAKR,QAAQ9B,SAASsC,KAAK7D,KAErIoI,uBACI,OAAQvE,KAAKP,UAAUgC,eAAe,UAAYzB,KAAKP,UAAUvD,MAErE4G,gBACI,OAAO9C,KAAKgE,SAEhBA,eACI,OAAOhE,KAAKuE,kBAAoBvE,KAAKE,KAAKhE,OAAS8D,KAAKE,KAAKhE,MAAMsG,OAEvEgB,oBACI,OAAO1H,EAAU0I,SAErBrI,UACI,OAAOnB,EAAMyJ,IAAIzE,KAAKP,UAAW,MAAO,IAE5CiC,kBAAkBnC,GACVS,KAAKwB,iBAAmBjC,IACxBS,KAAKwB,eAAiBjC,EACtBS,KAAKlD,cACLkD,KAAK0C,UAGbhB,oBACI,OAAO1B,KAAKwB,eAEhBkD,mBAAmBnF,GACXS,KAAK6B,kBAAoBtC,IACzBS,KAAK6B,gBAAkBtC,EACvBS,KAAKlD,cACLkD,KAAK0C,UAGbgC,qBACI,OAAO1E,KAAK6B,gBAEhBkB,YAAYxD,GACJS,KAAK2B,WAAapC,IAClBS,KAAK2B,SAAWpC,EAChBS,KAAKlD,cACLkD,KAAK0C,UAGbK,cACI,SAAI/C,KAAK2E,cAAe3E,KAAKR,QAAQoF,qBAGjC5E,KAAKR,QAAQqF,OAAQ7E,KAAKR,QAAQqF,KAAK7E,KAAKP,UAAUtD,WAGtD6D,KAAKR,QAAQhB,OAAQwB,KAAKR,QAAQhB,KAAKwB,KAAKP,UAAUtD,OAGnD6D,KAAK2B,UAAY3B,KAAKwB,gBAEjCsD,kBACI,OAAO9E,KAAK+E,aAEhBD,gBAAgBE,GACZhF,KAAK+E,aAAeC,EAExBC,eACI,MAAmC,SAA5BjF,KAAKR,QAAQO,WAExB4E,kBACI,MAAmC,YAA5B3E,KAAKR,QAAQO,WAExBmF,qBACI,GAAIlF,KAAKuB,MACL,OAAOvB,KAAKuB,MAGhB,GADAvB,KAAKuB,MAAQvB,KAAK7D,KACb6D,KAAKkB,KACN,OAAOlB,KAAKuB,MAEhB,IAAIH,EAASpB,KAAKoB,OAClB,KAAOA,GAAUA,EAAOP,KAAOb,KAAKkB,KAAKL,MAE7B,WACA,YACA,YACFsE,SAAS/D,EAAOhB,OAASgB,EAAOgE,QAClCpF,KAAKuB,SAAYH,EAAOjF,OAAS6D,KAAKuB,SAE1CH,EAASA,EAAOA,OAEpB,OAAOpB,KAAKuB,MAEhBnE,oBACI,OAAO4C,KAAKP,UAAUrC,cAE1BiI,iBACI,OAAOrF,KAAKP,UAAU4F,YAAc,GAExCC,kBACI,OAAOtF,KAAKP,UAAU6F,aAAe,EAEzCC,sBACI,OACI,YACA,aACA,aACA,eACFJ,SAASnF,KAAK5C,eAEpBoI,qBACI,OAAOxF,KAAK5C,cAAcqI,MAAM,KAEpC1J,eAAe2J,GACX,MAAqB,UAAdA,EAEX3J,eACI,MAAM4J,EAAkB3F,KAAK4F,eAAe5F,KAAKwF,eAAe,IAShE,OACIG,gBAAAA,EACAE,aAViB7F,KAAK4F,eAAe5F,KAAKwF,eAAe,IAWzDM,6BATD9F,KAAKqF,sBACXM,EAAkB,cAAgB,kBAAoB3F,KAAKsF,sBASpDS,+BAND,IAAM/F,KAAKqF,WAAarF,KAAKsF,sBASpCvJ,kBAAkByI,EAAQhB,EAAewC,GACrC,MAAMC,KACN,OAAKzC,GAGLxI,EAAMkL,QAAQ1B,EAAQ,CAAC2B,EAAKhK,KACxB,IAAKnB,EAAMoL,QAAQD,IAAQnL,EAAMqL,SAASF,IAAQ3C,EAAc/B,eAAetF,GAAM,CACjF,MAAMmK,EAActG,KAAKuG,kBAAkBJ,EAAK3C,EAAcrH,IAAM,GAC/DnB,EAAMoH,QAAQkE,KACfL,EAAS9J,GAAOmK,QAEbtL,EAAMoL,QAAQD,GACF,IAAfA,EAAI3D,SACJyD,EAAS9J,GAAOgK,KAEZH,GAAqB,SAAR7J,IAAmB6J,GAAqB,QAAR7J,IAAkB6J,GAAqB,UAAR7J,IAAoB6J,GAAqB,UAAR7J,IAAoB6J,GAAqB,cAAR7J,GAA+B,KAARgK,IAAe3C,EAAc/B,eAAetF,IAAgB,KAARgK,GAAcA,IAAQ3C,EAAcrH,MACrQ8J,EAAS9J,GAAOgK,KAGjBF,GAhBIzB,EAkBfA,aACI,OAAO9I,EAAM+E,cAAcT,KAAKuG,kBAAkBnL,EAAEoL,KAAKxG,KAAKP,UAAW,MAAOO,KAAKwD,gBAEzFzH,EAAE0K,EAAMC,GACJ,IAAKD,EACD,MAAO,GAWX,OATAC,EAASA,OACFhH,KAAOM,KAAK2G,UACnBD,EAAO3F,IAAMf,KAAKN,KAClBgH,EAAOjH,UAAYO,KAAKP,UACxBiH,EAAOE,YAAc,KACrBF,EAAOG,aAAe,MACtBH,EAAOI,gBAAkB,MACzBJ,EAAOK,iBAAmB,MACP/G,KAAKgH,QAAQC,EAAER,EAAMC,IACnBD,EAEzB1K,gBACI,OAAQiE,KAAKP,UAAUtC,QAAU6C,KAAKkH,YAAclH,KAAKP,UAAUjC,WAAawC,KAAKkH,aAAelH,KAAKP,UAAU0H,eAAiBnH,KAAKR,QAAQ4H,WAErJC,gBACI,OAAO5L,EAAU6L,QAAQ7F,eAAe,aAAehG,EAAU6L,QAAQD,UAAU1E,KAAKlH,EAAU6L,SAAW,CAAClH,EAAMb,IAAUA,EAElIxD,YAAYwL,EAAOC,GACfA,EAAQC,MAAMrB,QAAQoB,GAASA,GAASA,GACxCD,EAAQE,MAAMrB,QAAQmB,GAASA,GAASA,GACnCC,EAAMrC,SAAS,SAChBqC,EAAME,KAAK,QAEf,IAAIC,EAAS,KACb,GAAI3H,KAAKR,QAAQoI,YACbD,EAAS3H,KAAK6H,cAAc7H,KAAKR,QAAQoI,UAAWL,EAAOC,IAEvD,OAAOG,EAGf,MAAMG,EAAqB9H,KAAKR,QAAQuI,SAAWtM,EAAUmM,UAAU5H,KAAKR,QAAQuI,UAAYtM,EAAU6L,QAE1G,GADAK,EAAS3H,KAAK6H,cAAcC,EAAoBP,EAAOC,GAEnD,OAAOG,EAEX,MAAMtG,EAAOkG,EAAMA,EAAM/E,OAAS,GAC5BwF,EAAkBvM,EAAUwM,iBAAiB5G,GACnD,IAAK2G,EACD,2BAA6B3G,IAEjC,MAAM6G,EAAiBlI,KAAKmI,kBAAkBH,EAAiBR,GAC/D,OAAIU,GAGGF,EAAgBI,KAE3BrM,cAAc6L,EAAWL,EAAOC,GAC5B,IAAK,MAAMnG,KAAQkG,EAAO,CACtB,MAAMS,EAAkBJ,EAAUvG,GAClC,GAAI2G,EAAiB,CACjB,MAAME,EAAiBlI,KAAKmI,kBAAkBH,EAAiBR,GAC/D,GAAIU,EACA,OAAOA,GAInB,OAAO,KAEXnM,kBAAkBiM,EAAiBR,GAC/B,IAAK,MAAMa,KAAQb,EAAO,CACtB,MAAMU,EAAiBF,EAAgBK,GACvC,GAAIH,EACA,OAAOA,EAGf,OAAO,KAEXnM,eAAesF,EAAM3B,KAAW4I,GAC5B,MAAMD,EAAOC,GAActI,KAAKR,QAAQM,YAAc,OACtDJ,EAAKD,UAAYO,KAAKP,UACtBC,EAAK6I,KAAOvI,KACZN,EAAKF,QAAUQ,KAAKR,QACpBE,EAAK4E,SAAWtE,KAAKR,QAAQ8E,SAC7B5E,EAAKqE,UAAY/D,KAAK+D,UAAUpB,KAAK3C,MACrCN,EAAKuH,EAAIjH,KAAKiH,EAAEtE,KAAK3C,MACrBN,EAAK2H,UAAYrH,KAAKqH,UACtB3H,EAAKmB,GAAKnB,EAAKmB,IAAMb,KAAKa,GAC1BnB,EAAKvD,IAAMuD,EAAKvD,KAAO6D,KAAK7D,IAC5BuD,EAAKH,MAAQG,EAAKH,OAASS,KAAKiD,UAChCvD,EAAKhC,SAAWsC,KAAKtC,SACrBgC,EAAK8I,QAAUxI,KAAK2E,YACpBjF,EAAK+I,OAAS,KAAIvG,KACdwG,QAAQC,KAAK,6QAGN3I,KAAK4I,kBAAkB1G,KAElCxC,EAAKvC,MAAQ6C,KAAK2D,UAClBjE,EAAKnC,QAAUyC,KAAK6I,YAAY7I,KAAKP,UAAUlC,SAAW,IAAIuL,QAAQ,kBAAmB,UACzF,MAAMvB,MACElG,KAAUrB,KAAKP,UAAUW,QAAUJ,KAAK7D,SACxCkF,KAAUrB,KAAKP,UAAUW,UACzBiB,KAAUrB,KAAK7D,SACfkF,KAER,OAAOrB,KAAKoD,cAAe/B,EAAK0H,OAAO,GAAGC,cAAgB3H,EAAK4H,UAAU,EAAG5H,EAAKmB,UAAYxC,KAAK6I,YAAY7I,KAAKkJ,YAAY3B,EAAOc,GAAO3I,GAAOA,EAAM2I,GAE9JtM,SAASoN,GACL,OAAO5N,EAAY6N,SAASD,EAAOnJ,KAAKR,SAE5CzD,aAAagM,EAAUrI,GACnB,OAAKqI,EAGE/H,KAAK6I,YAAYd,EAAUrI,GAFvB,GAIf3D,oBAAoBG,GAChB,OAAOA,EAEXH,qBACI,MAAMsN,EAAMC,OAAOC,UACbC,GACF,WACA,kBACA,iBACA,gBAEJ,IAAIC,EACJ,GAAIhC,MAAMrB,QAAQiD,EAAIK,WAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAIK,UAAUlH,OAAQmH,IAEtC,IADAF,EAAWJ,EAAIK,UAAUC,KACTF,EAASjH,OACrB,OAAOiH,EAAShE,MAAM,KAAK,GAIvC,IAAK,IAAIkE,EAAI,EAAGA,EAAIH,EAA4BhH,OAAQmH,IAEpD,IADAF,EAAWJ,EAAIG,EAA4BG,MAC3BF,EAASjH,OACrB,OAAOiH,EAAShE,MAAM,KAAK,GAGnC,OAAO,KAEX1J,aACI,OAAOb,EAAcwI,SAAQ,GAEjC3H,aACI,OAAOiE,KAAK4J,YAAW,GAE3B7N,eACI,OAAOb,EAAcwI,SAAQ,GAEjCmG,yBAEI,OADA7J,KAAKR,QAAQqK,mBAAqB7J,KAAKR,QAAQqK,oBAAsB7O,EAAMyJ,IAAIzE,KAAKkB,KAAM,8BACnFlB,KAAKR,QAAQqK,mBAExB9N,SAAS+N,EAAS5J,GACd,IAAK,MAAM6J,KAAO7J,EACI,WAAdA,EAAK6J,GACL/J,KAAKE,KAAK6J,GAAOD,EAAQE,uBAAwBD,OAEjD/J,KAAKE,KAAK6J,GAAOD,EAAQG,0BAA2BF,OAIhEhO,sBACI,MAAMgM,0CACoB/H,KAAKP,UAAUtC,8IAGzC6C,KAAKkK,eAAeC,oBAAoBpC,GAE5ChM,0BACI,8CAC0BiE,KAAKP,UAAUtC,6GACqC6C,KAAKoK,iBAAiBpK,KAAKiD,sBAE7GlH,MAAM+N,GAIF,OAHAA,EAAUA,GAAW9J,KAAK8J,QAC1B9J,KAAKqK,MAAMP,GACX9J,KAAKsK,WAAWR,EAAS9J,KAAKyI,UACvBzI,KAAKuK,OAAOT,GAEvB/N,OAAOyO,wBAAkCxK,KAAKP,UAAUW,OAASqK,GAAW,GACxE,MAAMC,EAAY1K,KAAK+C,QAEvB,OADA/C,KAAKW,UAAW,GACXX,KAAK2E,aAAe3E,KAAKP,UAAUvC,UAC7BtB,EAAe6M,OAAOzI,MACzB+C,QAAS2H,EACT7J,GAAIb,KAAKa,GACT8J,QAAS3K,KAAK6D,UACd+G,OAAQ5K,KAAK6K,YACbL,SAAAA,GACDC,GAEIzK,KAAK4I,eAAe,aACvB7F,QAAS2H,EACT7J,GAAIb,KAAKa,GACT8J,QAAS3K,KAAK6D,UACd+G,OAAQ5K,KAAK6K,YACbL,SAAAA,GACDC,GAGX1O,OAAO+N,IACE9J,KAAK2E,aAAe3E,KAAKP,UAAUvC,YACpC8C,KAAKkK,eAAiB,IAAItO,EAAeoE,KAAM8J,GAC/C9J,KAAKmK,uBAETnK,KAAKU,UAAW,EAChBV,KAAK8J,QAAUA,EACfA,EAAQrK,UAAYO,KAChBA,KAAK8J,QAAQjJ,KACbb,KAAKa,GAAKb,KAAK8J,QAAQjJ,IAE3Bb,KAAK8K,SAAShB,GACViB,iBAAkB,SAClBxN,QAAS,aAEbyC,KAAKE,KAAK3C,QAAQ2I,QAAQ,CAAC3I,EAASyN,KAChC,MAAMC,EAAQjL,KAAK6I,YAAYtL,EAAQ2N,aAAa,eAAiBlL,KAAKiH,EAAEjH,KAAKP,UAAUlC,UAAUuL,QAAQ,kBAAmB,UAChI9I,KAAK4C,SAASoI,GAAS,IAAI7P,EAAQoC,GAC/B4N,QAAS,oBACTC,UAAW,QACXC,MAAM,EACNJ,MAAOA,EACPlD,SAAU,2LAOlB/H,KAAKsL,cACLtL,KAAKrC,YACLqC,KAAKoD,KAAK,kBAAmB0G,EAAS9J,MACtC,MAAMI,EAAOJ,KAAKP,UAAUW,KAI5B,OAHIA,GACAJ,KAAKoD,cAAehD,EAAK2I,OAAO,GAAGC,cAAgB5I,EAAK6I,UAAU,EAAG7I,EAAKoC,UAAYsH,EAAS9J,MAE5F9E,EAAcwI,UAEzB3H,YAAY+N,EAASyB,GACZzB,GAAY9J,KAAKkB,MAAQlB,KAAKkB,OAASlB,OAGvCuL,IACDA,EAAWvL,KAAKP,UAAU8L,UAE9BvL,KAAKkB,KAAKsK,YAAY1B,EAASyB,IAEnCxP,eAAe+N,EAASyB,GACfzB,GAAW9J,KAAKkB,OAASlB,OAGzBuL,IACDA,EAAWvL,KAAKP,UAAU8L,UAE9BvL,KAAKkB,KAAKuK,eAAe3B,EAASyB,IAEtCxP,SACIiE,KAAKE,QACLF,KAAK0L,uBACL1L,KAAK2L,cACD3L,KAAKzC,SACLyC,KAAKzC,QAAQqO,UAGrB7P,aAAa8P,EAAaC,GACtB,MAAMC,EAAa/Q,EAAMyJ,IAAIqH,EAAS,2BAA2B,GAC7DC,GAAc/L,KAAKkF,iBAAmB6G,IAGtB,SAAhBF,EACA7L,KAAKgM,QAAQhM,KAAKN,MACXqM,GAAcA,IAAeF,GAAeC,GAAWA,EAAQ9G,UAAYhF,KAAKiM,UAAUH,EAAQ9G,WACzGhF,KAAKgM,QAAQF,EAAQvM,QAG7BxD,eAAe+P,GACX,MAAM/O,EAAYiD,KAAKP,UAAU1C,WAAaiD,KAAKP,UAAUzC,SACzDD,IACI0K,MAAMrB,QAAQrJ,GACdA,EAAUmJ,QAAQ2F,IACd7L,KAAKkM,aAAaL,EAAaC,KAGnC9L,KAAKkM,aAAanP,EAAW+O,IAIzC/P,QAAQwD,GACAS,KAAKyB,eAAe,kBACpBzB,KAAKmM,kBAAoBnR,EAAMoR,QAAQ7M,EAAOS,KAAKqM,gBAEnDrM,KAAKmM,kBAAmB,EAE5BnM,KAAKqM,eAAiB3Q,EAAM+E,cAAclB,GACtCS,KAAKmM,mBACDnM,KAAKP,UAAU6M,gBACftM,KAAKuM,SAAS,MAElBvM,KAAKyC,iBAGb1G,UAAU0D,GACN,GAAIA,EAAUC,OAASM,KAAKN,KACxB,OAAO,EAEX,IAAI0B,EAASpB,KAAKoB,OAClB,KAAOA,GAAQ,CACX,GAAIA,EAAO1B,OAASD,EAAUC,KAC1B,OAAO,EAEX0B,EAASA,EAAOA,OAEpB,OAAO,EAEXoL,eACI,OAAOxM,KAAKR,QAAQ8E,UAAYtE,KAAKR,QAAQiN,WAEjD1Q,wBAKI,OAJAiE,KAAK8J,QAAU9J,KAAK0M,GAAG,MAAQ7L,GAAIb,KAAKa,KACpCb,KAAK8J,UACL9J,KAAK8J,QAAQrK,UAAYO,MAEtBA,KAAK8J,QAEhB6C,2BACI,MAAO,IAEX5Q,uBAAuBwD,GACnB,MAAMqN,GAAiB5M,KAAKE,KAAKhE,QAAU8D,KAAKE,KAAKhE,MAAM,KAAO8D,KAAKE,KAAKhE,MAAM,GAAG6B,OACrF,IAAKwB,GAASqN,EACV,OAAOrN,EAEX,GAAIkI,MAAMrB,QAAQ7G,GAAQ,CACtB,MAAMsN,KAON,OANAtN,EAAM2G,QAAQ,CAACC,EAAK6E,KAChB,MAAMjN,EAASiC,KAAKE,KAAKhE,MAAM8O,IAAUhL,KAAKE,KAAKhE,MAAM8O,GAAO8B,MAC5D/O,GACA8O,EAAOnF,KAAK3J,EAAOqM,iBAAiBjE,MAGrC0G,EAGX,OADe7M,KAAKE,KAAKhE,MAAM,GAAG6B,OACpBqM,iBAAiB7K,GAEnCxD,iBAAiBwD,GACb,OAAKA,GAGLA,EAAQS,KAAK+M,uBAAuBxN,GAChCkI,MAAMrB,QAAQ7G,GACPA,EAAMyN,KAAK,MAElBhS,EAAMiS,cAAc1N,GACb2N,KAAKC,UAAU5N,GAEZ,OAAVA,QAA4B6N,IAAV7N,EACX,GAEJA,EAAM8N,YAZF,GAcftR,QAAQwD,GACJ,OAAIS,KAAKP,UAAU/C,UACR,oBAEJsD,KAAKoK,iBAAiB7K,GAEjCxD,eAAemG,GACXlC,KAAKsN,eACLtN,KAAKsC,YAAYJ,GAErBnG,UAAU2D,EAAM6N,GAAgB,GAC5B,GAAIvS,EAAMqL,SAAS3G,GAAO,CACtB,GAAIM,KAAKwN,cACL,OAAOxS,EAAMyJ,IAAI/E,EAAMM,KAAKwN,eAEhC,GAAID,EACA,OAAO7N,EAAKH,MAGpB,OAAOG,EAEX3D,qBAAqBwD,GACjB,GAAIkI,MAAMrB,QAAQ7G,GAAQ,CAEtB,OADeA,EAAMkO,IAAIC,GAAQjG,MAAMrB,QAAQsH,GAAQ1N,KAAK2N,qBAAqBD,GAAQ1N,KAAK4N,UAAUF,IAC1FV,KAAK,MAEvB,OAAOhN,KAAK4N,UAAUrO,GAE1BxD,YAAY+N,EAAS7F,GACjB,MAAM4J,EAAS7N,KAAK0M,GAAG,MAAOzI,OAC9BjE,KAAKsK,WAAWuD,EAAQ7N,KAAK4I,eAAe,WAC5CiF,EAAO3N,QACPF,KAAK8K,SAASgD,KAAKD,EAAQA,GACvBE,cAAe,SACfC,eAAgB,SAChBC,YAAa,WAEjBJ,EAAO3N,KAAK8N,eAAeE,YAAYpE,GACvCqE,SAASC,KAAKF,YAAYL,GAC1BM,SAASC,KAAKC,UAAUC,IAAI,cAC5BT,EAAOU,MAAQ,MACXJ,SAASC,KAAKC,UAAUG,OAAO,cAC/BX,EAAOY,cAAc,IAAIC,YAAY,YAEzC1O,KAAK2O,iBAAiBd,EAAQ,QAAS,IAAM7N,KAAK4O,gBAAgBf,EAAQM,SAASC,OACnF,MAAMG,EAAQM,IACVA,EAAMC,iBACNjB,EAAOU,SAIX,OAFAvO,KAAK2O,iBAAiBd,EAAO3N,KAAK6N,cAAe,QAASQ,GAC1DvO,KAAK2O,iBAAiBd,EAAO3N,KAAK+N,YAAa,QAASM,GACjDV,EAEXhK,gBACI,IAAIA,EAAY7D,KAAKgE,SAAW,2BAA6B,GAoB7D,OAnBAH,wCAAmD7D,KAAKP,UAAUW,QAC9DJ,KAAK7D,MACL0H,uBAAkC7D,KAAK7D,QAEvC6D,KAAKP,UAAUjD,WACfqH,GAAa,8BAEb7D,KAAKP,UAAUnD,cACfuH,GAAa7D,KAAKP,UAAUnD,aAE5B0D,KAAKgE,UAAYhE,KAAKP,UAAUvB,UAAYxC,EAAMuF,UAAUjB,KAAKP,UAAUvB,SAASC,YACpF0F,GAAa,aAEb7D,KAAK4D,kBACLC,GAAa,kCAEZ7D,KAAK+C,UACNc,GAAa,kBAEVA,EAEXgH,kBACI,IAAIkE,EAAY,GAMhB,OALA/T,EAAMkL,QAAQlG,KAAKP,UAAUb,MAAO,CAACW,EAAOpD,KAC1B,KAAVoD,IACAwP,MAAiB5S,KAASoD,QAG3BwP,EAEX1T,eACI,OAAOA,IAEXU,aACI,OAAOiE,KAAK8J,QAEhB/N,YAAYiT,GACR,OAAOrP,MAAMsP,YAAYrP,OAAOC,QAC5BJ,UAAWO,KAAKP,UAChBsB,IAAKf,KAAKN,KACVwP,SAAUlP,KAAKkP,SACfxP,KAAMM,KAAK2G,UACX5C,UAAW/D,KAAK+D,UAAUpB,KAAK3C,MAC/BmP,WAAYnP,KAAKkB,KAAOlB,KAAKkB,KAAKkO,eAClChH,KAAMpI,KAAKkB,KAAOlB,KAAKkB,KAAKmO,UAC7BL,IAEPjT,YAAYoF,GACRnB,KAAKmB,SAAWA,EAEpBpF,YAAYiP,GACRhL,KAAKsP,OAAOtE,GACZhL,KAAK0C,SACL1C,KAAKsN,eACLtN,KAAKuP,oBAETxT,UAAUsF,EAAMmO,GACZ,MAAMC,EAAUzP,KAAKR,QAAQiQ,SAAWhU,EAAU6L,QAAQoI,gBAAkB,KAC5E,OAAOjU,EAAU6L,QAAQ7F,eAAe,aAAehG,EAAU6L,QAAQvD,UAAU0L,EAASpO,EAAMmO,GAAqC,OAAzBxP,KAAKR,QAAQiQ,QAAmBhU,EAAUwM,iBAAiBlE,UAAU0L,EAASpO,EAAMmO,GAAYnO,EAElNA,WACI,OAAOrB,KAAKiH,EAAEjH,KAAKP,UAAUtC,OAAS6C,KAAKP,UAAUrD,aAAe4D,KAAK7D,KAE7EmB,iBACI,OAAO0C,KAAKiH,EAAEjH,KAAKP,UAAUnC,YAAc0C,KAAKP,UAAUtC,OAAS6C,KAAKP,UAAUrD,aAAe4D,KAAK7D,KAE1GJ,aAAaqE,GACT,OAAOJ,KAAKP,UAAUkQ,QAAU3P,KAAKP,UAAUkQ,OAAOvP,GAAQJ,KAAKP,UAAUkQ,OAAOvP,GAAQA,EAEhGrE,WAAW+N,EAAS8F,GAChB,OAAI9F,aAAmB+F,cACnB/F,EAAQgG,UAAY9P,KAAKoJ,SAASwG,IAC3B,GAIf7T,SACI,IAAKiE,KAAK8J,UAAY9J,KAAK8J,QAAQiG,WAC/B,OAAO7U,EAAcwI,UAEzB1D,KAAKgQ,QACL,MAAM5O,EAASpB,KAAK8J,QAAQiG,WACtB/E,EAAQvD,MAAMwI,UAAUC,QAAQpC,KAAK1M,EAAOoJ,SAAUxK,KAAK8J,SAGjE,OAFA9J,KAAK8J,QAAQqG,UAAYnQ,KAAKoJ,SAASpJ,KAAKyI,UAC5CzI,KAAK8J,QAAU1I,EAAOoJ,SAASQ,GACxBhL,KAAKuK,OAAOvK,KAAK8J,SAE5B/N,UAGI,OAFAiE,KAAKoE,UACLpE,KAAKsD,OACEtD,KAAK0C,SAEhB3G,uBACI4D,MAAM+L,uBACN1L,KAAK4C,SAASsD,QAAQ3I,GAAWA,EAAQqO,WACzC5L,KAAK4C,YACL5C,KAAKE,KAAKhE,SAEdH,SAAS+N,EAASjG,GACd,GAAKiG,EAGL,OAAOnK,MAAMyQ,SAAStG,EAAS9J,KAAKqH,UAAU,QAASxD,IAE3D9H,SAAS+N,EAASjG,GACd,GAAKiG,EAGL,OAAOnK,MAAM0Q,SAASvG,EAAS9J,KAAKqH,UAAU,QAASxD,IAE3D9H,YAAY+N,EAASjG,GACjB,GAAKiG,EAGL,OAAOnK,MAAM2Q,YAAYxG,EAAS9J,KAAKqH,UAAU,QAASxD,IAE9D9H,eACI,OAA2B,OAAvBiE,KAAKC,cACED,KAAKC,eAEhBD,KAAKC,cAAgB1E,EAAYgV,aAAavQ,KAAKP,WAC5CO,KAAKC,eAEhBlE,qBAAqB2D,EAAMqB,GAGvB,OAFArB,EAAOA,GAAQM,KAAK2G,UACpB5F,EAAMA,GAAOf,KAAKN,KACdM,KAAK2E,cAAgB3E,KAAKuQ,gBAClBvQ,KAAKP,UAAU5C,QAE3B6C,EAAOA,IAASM,KAAKkB,KAAOlB,KAAKkB,KAAKxB,SAC/BM,KAAKwQ,eAAezP,EAAKrB,IAEpC3D,eAAegF,EAAKrB,GAChB,OAAOnE,EAAYiV,eAAexQ,KAAKP,UAAWsB,GAAOf,KAAKN,KAAMA,GAAQM,KAAK2G,UAAW3G,KAAKkB,KAAOlB,KAAKkB,KAAKmO,SAAYrP,MAElIjE,yBAAyB2D,EAAM2C,EAAOtB,GAClCrB,EAAOA,GAAQM,KAAK2G,UACpBtE,EAAQA,MACRtB,EAAMA,GAAOf,KAAKN,MACbM,KAAK2E,aAAe3E,KAAKyQ,WAAW/Q,EAAMqB,IAC3Cf,KAAK0C,SAET,MAAMK,EAAU/C,KAAK4B,qBAAqBlC,EAAMqB,GAIhD,OAHIf,KAAK+C,UAAYA,IACjB/C,KAAK+C,QAAUA,GAEZA,EAEXhH,gBAAgB2D,EAAM2C,EAAOtB,GAIzB,OAHArB,EAAOA,GAAQM,KAAK2G,UACpBtE,EAAQA,MACRtB,EAAMA,GAAOf,KAAKN,KACXM,KAAK0Q,yBAAyBhR,EAAM2C,EAAOtB,GAEtD4P,YACI,OAAO3Q,KAAKP,UAAUkR,UAE1B5U,WAAW2D,EAAMqB,GACbrB,EAAOA,GAAQM,KAAK2G,UACpB5F,EAAMA,GAAOf,KAAKN,KAClB,MAAMkR,EAAS5Q,KAAK2Q,MACpB,GAAsB,IAAlBC,EAAOpO,OACP,OAEJ,MAAMqO,EAAenV,EAAM+E,cAAcT,KAAKQ,mBAC9C,IAAIsL,EAAU8E,EAAOE,OAAO,CAAChF,EAAS6E,KAClC,MAAMhJ,EAASpM,EAAYwV,aAAaF,EAAcF,EAAMxF,QAASpK,EAAKrB,EAAMM,KAAKkB,KAAOlB,KAAKkB,KAAKmO,SAAYrP,MAClH,QAAQ2H,GAAS3H,KAAKgR,aAAaH,EAAcF,EAAMM,QAAStJ,EAAQ5G,EAAKrB,IAAkBoM,IAChG,GAMH,OALK9Q,EAAMoR,QAAQpM,KAAKP,UAAWoR,KAC/B7Q,KAAKP,UAAYoR,EACjB7Q,KAAKtC,SAAWsC,KAAKmE,eACrB2H,GAAU,GAEPA,EAEX/P,OACI,MAAMmV,EAAY5H,OAAOC,UAAU2H,UAC7BC,EAAOD,EAAUhB,QAAQ,SAC/B,GAAIiB,EAAO,EACP,OAAOC,SAASF,EAAUjI,UAAUkI,EAAO,EAAGD,EAAUhB,QAAQ,IAAKiB,IAAQ,IAGjF,GADgBD,EAAUhB,QAAQ,YACpB,EAAG,CACb,MAAMmB,EAAKH,EAAUhB,QAAQ,OAC7B,OAAOkB,SAASF,EAAUjI,UAAUoI,EAAK,EAAGH,EAAUhB,QAAQ,IAAKmB,IAAM,IAE7E,MAAMC,EAAOJ,EAAUhB,QAAQ,SAC/B,OAAIoB,EAAO,GACAF,SAASF,EAAUjI,UAAUqI,EAAO,EAAGJ,EAAUhB,QAAQ,IAAKoB,IAAQ,IAIrFvV,aAAa8U,EAAcI,EAAStJ,EAAQ5G,EAAKrB,GAG7C,OAFAA,EAAOA,GAAQM,KAAK2G,UACpB5F,EAAMA,GAAOf,KAAKN,KACXuR,EAAQH,OAAO,CAAChF,EAASyF,KAC5B,OAAQA,EAAOnR,MACf,IAAK,WAAY,CACT7E,EAAYiW,kBAAkBX,EAAcU,EAAQ5J,EAAQ5G,EAAKrB,EAAMM,MACvE,MAAMyR,EAAWF,EAAOE,SAASlS,MAC5BvE,EAAMoR,QAAQpR,EAAMyJ,IAAIzE,KAAKP,UAAWgS,GAAWzW,EAAMyJ,IAAIoM,EAAcY,MAC5E3F,GAAU,GAEd,MAER,IAAK,QAAS,CACN,MAAM4F,EAAW1R,KAAK2R,WAChBC,EAAW5R,KAAK6R,SAASN,EAAOhS,OAClCA,MAAOvE,EAAM8W,MAAMJ,GACnBhS,KAAAA,EACAqB,IAAAA,EACAtB,UAAWoR,EACXlJ,OAAAA,GACD,SACE3M,EAAMoR,QAAQsF,EAAUE,KACzB5R,KAAKuM,SAASqF,GACV5R,KAAKwM,WACLxM,KAAKiD,UAAY2O,GAErB9F,GAAU,GAEd,MAER,IAAK,uBAAwB,CACrB,MAAMtH,EAASxE,KAAK6R,SAASN,EAAOQ,kBAChCxS,MAAOvE,EAAM8W,MAAM9R,KAAK2R,YACxBjS,KAAAA,EACAqB,IAAAA,EACAtB,UAAWoR,EACXlJ,OAAAA,GACD,UACH3M,EAAMiB,MAAM4U,EAAcrM,GACrBxJ,EAAMoR,QAAQpM,KAAKP,UAAWoR,KAC/B/E,GAAU,GAEd,OAGR,OAAOA,IACR,GAEP/P,cAAciW,EAAS7I,EAAO8I,GAC1BjS,KAAKkS,YAAYF,GACjBhS,KAAKmS,gBAAgBF,EAAU9I,IAAS6I,GAE5CjW,iBAAiBkW,GACbjS,KAAKmS,gBAAgBF,GAAU,GAAM,GAEzClW,YAAYqW,GACHA,IAGmB,iBAAbA,IACPA,GACIA,SAAAA,EACAC,MAAO,UAGV5K,MAAMrB,QAAQgM,KACfA,GAAYA,IAEZpS,KAAKE,KAAK6K,kBACV/K,KAAKsK,WAAWtK,KAAKE,KAAK6K,iBAAkBqH,EAAS3E,IAAIuE,GAAWhS,KAAK4I,eAAe,UAAWoJ,IAAUhF,KAAK,MAG1HjR,gBAAgBkW,EAAU9I,EAAOmJ,EAAWC,GACxCvS,KAAKwS,oBACLP,EAAS/L,QAAQ4D,GAAW9J,KAAKsQ,YAAYtQ,KAAKyS,oBAAoB3I,GAAU,eAC5EwI,IACAL,EAAS/L,QAAQhK,GAAS8D,KAAKqQ,SAASrQ,KAAKyS,oBAAoBvW,GAAQ,eACrEiN,GAASnJ,KAAKR,QAAQkT,gBACtB1S,KAAKqQ,SAASrQ,KAAK8J,QAAS9J,KAAKR,QAAQmT,qBAEzC3S,KAAKqQ,SAASrQ,KAAK8J,QAAS,cAGhCyI,GACAvS,KAAKqQ,SAASrQ,KAAK8J,QAAS,eAGpC/N,cACSiE,KAAK4S,eAA+C,IAA/B5S,KAAKP,UAAU3C,aAA0BkD,KAAKR,QAAQ8E,UAAatE,KAAKR,QAAQoF,mBACjG5E,KAAK+C,QAEE/C,KAAKgD,YACbhD,KAAKuM,SAASvM,KAAKvD,cAAgBoW,eAAe,IAFlD7S,KAAK8S,eAMjB/W,qBAAqBmG,GACblC,KAAKR,QAAQ8C,SACbtC,KAAKR,QAAQ8C,YAAYJ,GAClBlC,KAAKkB,MACZlB,KAAKkB,KAAKqB,iBAAiBL,GAGnCnG,SAASsG,EAAO0Q,IACZ1Q,EAAQA,OACE4D,WACNjG,KAAKmB,UAAW,EAChBnB,KAAKqQ,SAASrQ,KAAKgT,aAAc,oBAEH,SAA9BhT,KAAKP,UAAUxB,YAA0B+B,KAAK2P,OAAOnN,SACrDH,EAAM4Q,YAAa,GAEnBjT,KAAKP,UAAU6C,UACftC,KAAK6R,SAAS7R,KAAKP,UAAU6C,UAAYD,MAAAA,IAE7C,MAAMyJ,GACF9G,SAAUhF,KACVP,UAAWO,KAAKP,UAChBF,MAAOS,KAAKiD,UACZZ,MAAOA,GAEXrC,KAAKkT,KAAK,kBAAmBpH,GAC7B,IAAI7F,GAAW,EAQf,OAPI5D,EAAM4D,WACNA,GAAW,SACJ5D,EAAM4D,UAEZ8M,GACD/S,KAAKuP,kBAAkBlN,EAAOyJ,EAAS7F,GAEpC6F,EAEXqH,qBACI,OACIC,OACIC,MAAO,OACPjX,YAAa4D,KAAKiH,EAAEjH,KAAKP,UAAUrD,aACnCkX,SACIC,WAEYC,MACI,SACA,EACA,QACA,YAIJC,QACI,EACA,EACA,EACA,EACA,EACA,GACA,OAGTC,WAEC,OACA,SACA,YACA,UACEC,OAAU,QACVA,OAAU,SACZ,WAGEC,WACAC,kBAGAC,KAAQ,YACRA,KAAQ,WACRC,OAAU,OACVA,OAAU,OACVC,YAGF,aACA,eAGA,OACA,QACA,QACA,UACA,aAKhBC,KACIZ,MAAO,kBACPa,SAAU,GACVC,SAAU,GACVC,QAAS,EACT/L,KAAM,aACNjM,YAAa4D,KAAKiH,EAAEjH,KAAKP,UAAUrD,cAEvCiY,UACIC,OACIf,SACI,uBACA,IACA,kBACA,uBACA,yBACA,yBAEJ3I,QACI,OACA,YACA,cACA,gBAIZ2J,MAAQlB,MAAO,UACfmB,YAGRzY,OAAO+N,EAAS2K,EAAUnS,GAKtB,OAJAmS,EAAWzZ,EAAMoH,QAAQqS,MAAiBA,GACjCC,cAAe,EACxBD,EAASE,YAAeC,gBAAgB,GACxCH,EAAWzZ,EAAMiB,MAAM+D,KAAKmT,eAAekB,SAAUrZ,EAAMyJ,IAAIzE,KAAKR,QAAS,gCAAkCiV,GACxGnZ,EAAOuZ,eAAe,WAAY,gBAAiB7Z,EAAMyJ,IAAIzE,KAAKR,QAAS,uBAnqCzE,oDAmqC4G,GAAMsV,KAAK,IACvHhL,EAAQiG,WAGNgF,cAAcC,OAAOlL,EAAS2K,GAAUK,KAAKG,IAChDA,EAAOC,MAAM/G,SAASgH,GAAG,SAAU,IAAM7S,EAAS2S,EAAOvV,KAAK+E,QACvDwQ,IAJA/Z,EAAcka,UAQjCrZ,SAAS+N,EAAS2K,EAAUnS,GAOxB,OANAmS,EAAWrZ,EAAEgH,QAAQqS,GAAYzU,KAAKmT,eAAeC,MAAQqB,EAC7DA,EAAWrZ,EAAEia,MAAMrV,KAAKmT,eAAeC,MAAOhY,EAAEqJ,IAAIzE,KAAKR,QAAS,6BAA+BiV,GACjGnZ,EAAOuZ,4BAA6BJ,EAASpB,QAAU,UAC/CjT,KAAM,SACNkV,OAASzZ,WAAqB4Y,EAASpB,eACvC,GACD/X,EAAOuZ,eAAe,QAAS,QAASzZ,EAAEqJ,IAAIzE,KAAKR,QAAS,uBAAyB3D,mBAA4B,GAAMiZ,KAAK,KAC/H,IAAKhL,EAAQiG,WACT,OAAO7U,EAAcka,SAEzBpV,KAAKoT,MAAQ,IAAImC,MAAMzL,EAAS2K,GAChC,MAAMe,EAAUrH,SAASsH,cAAc,YACvCD,EAAQE,aAAa,QAAS,qBAC9B1V,KAAKoT,MAAMuC,aAAa,aAAazH,YAAYsH,GACjD,MAAMI,EAAW9L,EAAQiG,WAAW/F,cAAc,cAC9C4L,GACA5V,KAAK2O,iBAAiBiH,EAAU,QAAS/G,IACrCA,EAAMC,iBACwB,YAA1B0G,EAAQ5W,MAAMiX,SACd7V,KAAKoT,MAAM0C,YAAY9V,KAAKoT,MAAM2C,UAAUC,QAAQR,EAAQjW,QAEhEiW,EAAQ5W,MAAMiX,QAAoC,SAA1BL,EAAQ5W,MAAMiX,QAAqB,UAAY,SAG/E7V,KAAK2O,iBAAiB7E,EAAS,QAAS,IAAM9J,KAAKoT,MAAM6C,SACzD,MAAMC,EAAM/H,SAASlE,iBAAiB,wBACtC,IAAK,IAAIN,EAAI,EAAGA,EAAIuM,EAAI1T,OAAQmH,IAC5BuM,EAAIvM,GAAG+L,aAAa,WAAY,MAMpC,OAJA1V,KAAKoT,MAAM+B,GAAG,cAAe,KACzBK,EAAQjW,MAAQS,KAAKoT,MAAMlS,KAAK4O,UAChCxN,EAASkT,KAENxV,KAAKoT,QAGpBrX,OAAO+N,EAAS2K,EAAUnS,GACtBmS,EAAWzZ,EAAMiB,MAAM+D,KAAKmT,eAAec,IAAKjZ,EAAMyJ,IAAIzE,KAAKR,QAAS,2BAA6BiV,OAErG,IAAI0B,EAAI,IAAInb,EAAMob,SAalB,OAZAC,SAAS,eAAe,SAASpC,GAC7B,IAAIgB,EAAShB,EAAIqC,KAAKxM,GACtBmL,EAAOsB,mBAAmB,UAC1BtB,EAAOuB,WAAW/B,GAClBQ,EAAOwB,aAAaC,oBAAqBjC,EAASpM,QAClD4M,EAAOE,GAAG,SAAU,IAAM7S,EAAS2S,EAAOtD,aAE1CwE,EAAEzS,QAAQuR,IACZ,SAAS0B,GACPR,EAAEf,OAAOuB,KAGNR,EAAES,QAEb7a,QAAQ+N,EAAS2K,EAAUnS,GACvB,OAAOhH,EAAOuZ,eAAe,UAAW,UAluC5B,+DAkuCmD/L,QAAQ,aAAc2L,EAASoC,aAAa,GAAM/B,KAAKG,GAC3GA,EAAO3R,SACPmR,EACHqC,OAAQhN,EACRiN,uBAAwB9B,IACpBA,EAAOE,GAAG,SAAU,IAAM7S,EAAS2S,EAAO+B,mBAK1D5R,WACI,OAAOpF,KAAKP,UAAU2F,OAAQ,EAElC6R,iBACI,OAAO,KAEXlb,SAAS2D,GACL,OAAOtE,EAAE8b,IAAIxX,GAAQM,KAAKN,KAAMM,KAAK7D,KAEzCwK,gBACI,OAAO3G,KAAKkB,KAAOlB,KAAKkB,KAAKxB,KAAOM,KAAKN,KAE7CkT,mBACI,OAAO5X,EAAMyJ,IAAIzE,KAAM,iBAAiB,GAE5CiD,gBACI,IAAKjD,KAAK7D,MAAQ6D,KAAK+C,SAAW/C,KAAKP,UAAU3C,cAAgBkD,KAAK4S,aAClE,OAAO5S,KAAKiX,WAEhB,IAAKjX,KAAKgD,WAAY,CAClB,MAAMqH,EAAQrK,KAAKP,UAAUjD,YAAgBwD,KAAKiX,WAIlD,OAHKjX,KAAK4S,eACN5S,KAAKiD,UAAYoH,GAEdA,EAEX,OAAOrP,EAAMyJ,IAAIzE,KAAKY,MAAOZ,KAAK7D,KAEtC8G,cAAc1D,GACV,OAAKS,KAAK8C,WAAc9C,KAAK7D,MAAQ6D,KAAK+C,UAAW/C,KAAKP,UAAU3C,aAAgBkD,KAAK4S,eAG3E,OAAVrT,QAA4B6N,IAAV7N,IAClBA,EAAQS,KAAKoD,KAAK,eAAgB7D,EAAOS,KAAK7D,IAAK6D,KAAKY,QAE9C,OAAVrB,QAA4B6N,IAAV7N,GAClBS,KAAKmX,QACE5X,IAEXnE,EAAEgc,IAAIpX,KAAKY,MAAOZ,KAAK7D,IAAKoD,GACrBA,IAVIA,EAYfxD,OAAOiP,GACH,GAAIhL,KAAKgD,WAAY,CACjB,MAAMC,EAAYjD,KAAKiD,cACnBjI,EAAMoL,QAAQnD,IAAcA,EAAUxB,eAAeuJ,KACrD/H,EAAUqM,OAAOtE,EAAO,GACxBhL,KAAKiD,UAAYA,EACjBjD,KAAKuC,kBAIjBxG,QACIX,EAAE+b,MAAMnX,KAAKY,MAAOZ,KAAK7D,KAE7BJ,cACIiE,KAAKuM,SAAS,MACVsG,eAAe,EACfwE,WAAW,IAEfrX,KAAKmX,QAET1a,mBACI,IAAIA,EAAeuD,KAAKiX,WAiBxB,OAhBIjX,KAAKP,UAAUhD,eACfA,EAAeuD,KAAKP,UAAUhD,cAE9BuD,KAAKP,UAAU5B,qBAAuBmC,KAAKR,QAAQ8X,UACnD7a,EAAeuD,KAAK6R,SAAS7R,KAAKP,UAAU5B,oBAAsB0B,MAAO,IAAM,UAE/ES,KAAKuX,cACuB,iBAAjB9a,GACPA,EAAexB,EAAcwB,EAAcuD,KAAKuX,aAAaC,eACxDjc,EAAYkc,eAAehb,EAAcuD,KAAKuX,eAC/C9a,EAAe,KAGnBA,EAAe,IAGhBzB,EAAM8W,MAAMrV,GAEvBV,WACI,IAAKiE,KAAKgE,UAAYhE,KAAKwM,WAAaxM,KAAKE,KAAKhE,QAAU8D,KAAKE,KAAKhE,MAAMsG,OACxE,OAAOxC,KAAKiD,UAEhB,MAAM4J,KACN,IAAK,MAAMlD,KAAK3J,KAAKE,KAAKhE,MACtB,GAAI8D,KAAKE,KAAKhE,MAAMuF,eAAekI,GAAI,CACnC,IAAK3J,KAAKP,UAAUjD,SAChB,OAAOwD,KAAK0X,WAAW/N,GAE3BkD,EAAOnF,KAAK1H,KAAK0X,WAAW/N,IAGpC,OAAsB,IAAlBkD,EAAOrK,QAAiBxC,KAAKP,UAAUjD,SAGpCqQ,EAFI,GAIf9Q,WAAWiP,GACP,MAAM9O,EAAQ8D,KAAKyS,oBAAoBzS,KAAKE,KAAKhE,MAAM8O,IACvD,OAAO9O,EAAQA,EAAMqD,WAAQ6N,EAEjCrR,SAASwD,EAAO8C,MACZ,MAAMyJ,EAAU9L,KAAK2X,YAAYpY,EAAO8C,GAKxC,GAJIrC,KAAKkK,gBAAkB7H,GAASA,EAAMuV,gBACtC5X,KAAKkK,eAAeqC,SAAShN,GAEjCA,EAAQS,KAAKiD,WACRjD,KAAKgE,SACN,OAAO8H,EAEX,MAAM1F,EAAUqB,MAAMrB,QAAQ7G,GAC1B6G,GAAWqB,MAAMrB,QAAQpG,KAAKvD,eAAiBuD,KAAKE,KAAKuB,eAAe,UAAYzB,KAAKE,KAAKhE,OAAS8D,KAAKE,KAAKhE,MAAMsG,SAAWjD,EAAMiD,QACxIxC,KAAK0C,SAET,IAAK,MAAMiH,KAAK3J,KAAKE,KAAKhE,MAClB8D,KAAKE,KAAKhE,MAAMuF,eAAekI,IAC/B3J,KAAK6X,WAAWlO,EAAGvD,EAAU7G,EAAMoK,GAAKpK,EAAO8C,GAGvD,OAAOyJ,EAEX/P,WAAWiP,EAAOzL,EAAO8C,MAChBA,EAAMgV,WAAwB,OAAV9X,QAA4B6N,IAAV7N,GAAyBS,KAAKP,UAAUjD,WAC/E+C,EAAQS,KAAKvD,cAEjB,MAAMP,EAAQ8D,KAAKyS,oBAAoBzS,KAAKE,KAAKhE,MAAM8O,IACnD9O,EAAM4b,KACN5b,EAAM4b,KAAKC,qBAAqBC,OAAOzY,GAChCrD,EAAM6B,QAAU7B,EAAM6B,OAAOwO,SACpCrQ,EAAM6B,OAAOwO,SAAShN,GAEtBrD,EAAMqD,MAAQA,EAGtB0Y,kBACI,OAAOjY,KAAKgD,aAAehD,KAAKoC,QAAQpC,KAAKiD,WAEjDlH,eACI,GAAIiE,KAAKiY,YACLjY,KAAKuM,SAASvM,KAAKiD,WAAa4P,eAAe,SAE/C,GAAI7S,KAAKvD,aAAc,CACnB,MAAMA,EAAeuD,KAAKP,UAAUjD,WAAawD,KAAKiD,UAAUT,UAAcxC,KAAKvD,aACnFuD,KAAKuM,SAAS9P,GAAgBoW,eAAe,KAIzD9W,eAAewD,GAIX,OAHIS,KAAKP,UAAUjD,WAAaiL,MAAMrB,QAAQ7G,KAC1CA,EAAQA,GAASA,OAEdA,EAEXxD,qBAAqBwD,EAAO8C,MACxB,IAAIuP,EAAYvP,EAAM6V,iBAAyB9K,IAAV7N,GAAiC,OAAVA,EAAoCA,EAAlBS,KAAK2R,WAEnF,MAAM7F,OAAuBsB,KAD7BwE,EAAW5R,KAAKmY,eAAevG,EAAUvP,KACArC,KAAKoY,WAAWxG,EAAU5R,KAAKiD,WAKxE,OAJI6I,IACA9L,KAAKiD,UAAY2O,EACjB5R,KAAKqY,eAAehW,EAAOyJ,IAExBA,EAEX/P,eAAemG,GACX,OAAOlC,KAAKsY,wBAAwBpW,GAExCnG,QAAQsF,EAAMuO,EAAShF,EAAQb,EAAM,QACjC,OAAO/J,KAAK4I,eAAe,QACvB/E,UAAW7D,KAAK+D,UAAU1C,GAC1B0I,IAAAA,EACAa,OAAAA,EACAgF,QAAAA,IAGR7T,aACIiE,KAAKuM,SAASvM,KAAKiX,YACfpE,eAAe,EACfI,YAAY,EACZiF,YAAY,IAEhBlY,KAAKmX,QAETpb,WAAW6V,EAAUF,GACjB,YAAkBtE,IAAbwE,GAAuC,OAAbA,QAAoCxE,IAAbsE,GAAuC,OAAbA,IAAqB1R,KAAKoC,QAAQsP,WAGjGtE,IAAbwE,GAAuC,OAAbA,IAAsB5R,KAAKgD,aAGjDhI,EAAMoR,QAAQwF,EAAUF,IAEpC3V,eAAesG,KAAYyJ,GAAU,GACjC,QAAKzJ,EAAMwQ,gBAAiB/G,KACxB9L,KAAKuC,cAAcF,IACZ,GAIftG,4BAA4BwD,GACxB,MAAqB,iBAAVA,GAAuC,kBAAVA,EAC7BA,EAAM8N,WAEV9N,EAEXxD,wBAAwB2D,EAAM2C,EAAOtB,GACjC,IAAKf,KAAKP,UAAU3B,kBAAoBkC,KAAK+C,SAAW/C,KAAKP,UAAU5C,SAAWmD,KAAKP,UAAU3C,cAAgBkD,KAAK4S,aAClH,OAAO,EAEX,MAAM2F,EAAgBvY,KAAKP,UAAUR,uBACrC,IAAIuZ,GAAY,EAChB,MAAMvV,EAAYjD,KAAKiD,UAKvB,QAJ6BmK,IAAzBpN,KAAKyY,kBACLD,GAAY,EACZxY,KAAKyY,gBAAkB,MAEvBF,GAAiBvY,KAAKyY,kBAAoBzd,EAAMoR,QAAQnJ,EAAWjD,KAAK0Y,4BAA4B1Y,KAAKyY,kBACzG,OAAO,EAEX,MAAMA,EAAkBzY,KAAK6R,SAAS7R,KAAKP,UAAU3B,gBACjDyB,MAAO0D,EACPvD,KAAAA,EACAqB,IAAKA,GAAOf,KAAKN,MAClB,SACH,GAAI6Y,GAAiBC,IAAcxY,KAAKoC,QAAQa,KAAejI,EAAMoR,QAAQnJ,EAAWjD,KAAK0Y,4BAA4BD,IAErH,OADAzY,KAAKyY,gBAAkBA,GAChB,EAEX,MAAM3M,EAAU9L,KAAKuM,SAASkM,EAAiBpW,GAE/C,OADArC,KAAKyY,gBAAkBzY,KAAKiD,UACrB6I,EAEX/P,eAAe2D,EAAM2C,EAAOtB,GAIxB,OAHArB,EAAOA,GAAQM,KAAK2G,UACpBtE,EAAQA,MACRtB,EAAMA,GAAOf,KAAKN,KACXM,KAAK2Y,wBAAwBjZ,EAAM2C,EAAOtB,GAErD5D,YACI,OAAO6C,KAAKP,UAAUtC,MAE1BA,UAAUoC,GACNS,KAAKP,UAAUtC,MAAQoC,EACnBS,KAAK4Y,eACL5Y,KAAK4Y,aAAaC,UAAYtZ,GAGtCxD,UACI,OAAOiE,KAAKkB,KAEhBnF,eAAe2D,EAAMyJ,EAAO2P,EAAiB/X,GACzC,OAAK+X,GAAoB9Y,KAAKwQ,eAAezP,EAAKrB,GAG9CM,KAAK6C,QACE7C,KAAK6C,SAEX7C,KAAKgE,WAAamF,GAASnJ,KAAKmB,SAC1B,GAEJnG,EAAMyS,IAAIjS,EAAUud,eAAe/Y,KAAMN,GAAO,WAAWsN,KAAK,QAR5D,GAUfjR,QAAQ2D,EAAMyJ,GACV,OAAQnJ,KAAKgZ,eAAetZ,EAAMyJ,GAEtCpN,qBAAqBqW,EAAUjJ,GAC3B,MAAMmJ,IAAcF,EAAS6G,OAAOjH,GAA6B,UAAlBA,EAAQK,OAAmB7P,OAM1E,OALI4P,EAAS5P,SAAW2G,GAAUnJ,KAAKmB,SAGnCnB,KAAKkZ,kBAAkB,IAFvBlZ,KAAKkZ,kBAAkB9G,EAAUjJ,IAI7BmJ,EAEZvW,uBAAuB2D,EAAMyJ,EAAOpI,EAAKoY,GAAQ,GAG7C,GAFAzZ,EAAOA,GAAQM,KAAK2G,UACpB5F,EAAMA,GAAOf,KAAKN,KACdM,KAAKoZ,qBAAqB1Z,EAAMyJ,EAAOpI,GAEvC,OADAf,KAAKkZ,kBAAkB,KAChBC,GAAQje,EAAcwI,SAAQ,GAEzC,MAAM2V,EAAQ7d,EAAUud,eAAe/Y,KAAMN,EAAMqB,GAAK,EAAMoY,GAC9D,OAAOA,EAAQE,EAAMvE,KAAK1C,GAAYpS,KAAKsZ,qBAAqBlH,EAAUjJ,IAAUnJ,KAAKsZ,qBAAqBD,EAAOlQ,GAEzHpN,cAAc2D,EAAMyJ,EAAOpI,GAGvB,OAFArB,EAAOA,GAAQM,KAAK2G,UACpB5F,EAAMA,GAAOf,KAAKN,KACXM,KAAKuZ,uBAAuB7Z,EAAMyJ,EAAOpI,GAEpDhF,mBAAmB2D,EAAMyJ,EAAOpI,GAC5B,OAAO7F,EAAcwI,QAAQ1D,KAAKuZ,uBAAuB7Z,EAAMyJ,EAAOpI,GAAK,IAE/EhF,UAAU2D,EAAM2C,EAAOtB,GAKnB,GAJArB,EAAOA,GAAQM,KAAK2G,UACpBtE,EAAQA,MACRtB,EAAMA,GAAOf,KAAKN,KAClBM,KAAKwZ,eAAenX,EAAMyJ,SACtBzJ,EAAMoX,QACN,OAAO,EAIX,GAFAzZ,KAAK2Y,wBAAwBjZ,EAAM2C,EAAOtB,GAC1Cf,KAAK0Q,yBAAyBhR,EAAM2C,EAAOtB,GACvCsB,EAAM4Q,WACN,OAAO,EAEX,IAAIyG,GAAW1Z,KAAK2E,cAAgB3E,KAAKR,QAAQ8X,UAAYtX,KAAKoC,QAAQpC,KAAKvD,eAAiBuD,KAAKoM,QAAQpM,KAAKvD,aAAcuD,KAAKiD,WAOrI,OANIjD,KAAKR,QAAQma,aAAetX,EAAM8G,SAClCuQ,GAAU,GAEVrX,EAAMuV,gBAAkB5X,KAAKgD,SAAStD,KACtCga,GAAU,GAEP1Z,KAAKuZ,uBAAuB7Z,EAAMga,EAAS3Y,GAEtD6Y,sBACI,OAAO5Z,KAAKiD,UAEhBlH,QAAQwD,EAAQS,KAAKiD,WACjB,MAAM4W,KAAe7e,EAAMoL,QAAQ7G,IAA2B,IAAjBA,EAAMiD,SAAexH,EAAMoR,QAAQ7M,EAAM,GAAIS,KAAKiX,YAC/F,OAAgB,MAAT1X,GAAkC,IAAjBA,EAAMiD,QAAgBxH,EAAMoR,QAAQ7M,EAAOS,KAAKiX,aAAe4C,EAE3F9d,QAAQ+d,EAAQC,EAAS/Z,KAAKiD,WAC1B,OAAOjD,KAAKoC,QAAQ0X,IAAW9Z,KAAKoC,QAAQ2X,IAAW/e,EAAMoR,QAAQ0N,EAAQC,GAEjFhe,mBACI,OAAO,EAEX4T,aACI,OAAO3P,KAAKc,OAASd,KAAKc,UAE9B/E,oBACIiE,KAAKsQ,YAAYtQ,KAAK8J,QAAS9J,KAAKR,QAAQmT,qBAC5C3S,KAAKsQ,YAAYtQ,KAAK8J,QAAS,sBAC/B9J,KAAKsQ,YAAYtQ,KAAK8J,QAAS,aAC/B9J,KAAKsQ,YAAYtQ,KAAK8J,QAAS,eAEnC/N,kBAAkBqW,EAAUjJ,EAAO6Q,GACP,iBAAb5H,GAAyBA,IAChCA,GACIC,MAAO,QACPL,QAASI,IAGZ3K,MAAMrB,QAAQgM,KAEXA,EADAA,GACYA,OAKpB,MAAME,IAAcF,EAAS6G,OAAOjH,GAA6B,UAAlBA,EAAQK,OAAmB7P,OACtE4P,EAAS5P,QACLxC,KAAKE,KAAK6K,kBACV/K,KAAKqK,MAAMrK,KAAKE,KAAK6K,kBAEzB/K,KAAKc,OACDrB,UAAWO,KAAKP,UAChBuS,QAASI,EAAS,GAAGJ,QACrBI,SAAAA,EACA4H,WAAYA,GAEhBha,KAAKkT,KAAK,iBAAkBlT,KAAKc,OACjCd,KAAKkS,YAAYE,EAAUjJ,EAAOnJ,KAAKE,KAAKhE,OACxC8D,KAAKE,KAAKhE,OACV8D,KAAKmS,gBAAgBnS,KAAKE,KAAKhE,MAAOiN,EAAOmJ,IAAaF,EAAS5P,SAEhExC,KAAKc,OAASd,KAAKc,MAAMkZ,aAAeA,IAC3Cha,KAAKE,KAAK6K,kBACV/K,KAAKqK,MAAMrK,KAAKE,KAAK6K,kBAEzB/K,KAAKc,MAAQ,KACTd,KAAKE,KAAKhE,OACV8D,KAAKmS,gBAAgBnS,KAAKE,KAAKhE,MAAOiN,EAAOmJ,IAAaF,EAAS5P,QAEvExC,KAAKwS,qBAGbzW,gBACI,SAAKiE,KAAKkB,OAASlB,KAAKkB,KAAKO,eAAe,iBAGvCzB,KAAKkB,OAASlB,KAAKkB,KAAK+Y,WAGtBja,KAAKP,UAAU/C,YAAcsD,KAAKP,UAAU7C,YAA4C,gBAA9BoD,KAAKP,UAAU7C,aAEpFb,qBAAqB2D,EAAMyJ,EAAOpI,GAO9B,OALI,IAAMf,KAAKmE,eACX,IAAMnE,KAAKka,gBACX,KAAOla,KAAK+C,QACZ,KAAO/C,KAAKwQ,eAAezP,EAAKrB,IAEvBya,KAAKC,GAAQA,KAE9Bre,YAEI,OADA2M,QAAQC,KAAK,0FACN3I,KAAKqa,UAEhBA,gBACI,OAAOnf,EAAcwI,UAEzB3H,SAASwD,GAEL,OADAA,EAAQA,GAASS,KAAK2R,YACdlK,MAAMrB,QAAQ7G,GAASA,GAASA,IAAQkO,IAAIrS,EAAEiS,UAAUL,KAAK,MAEzEtP,eACI,OAAOsC,KAAKgB,WAAahB,KAAK0E,eAElChH,aAAaA,GACTsC,KAAKgB,UAAYtD,EAErB3B,YAAY+N,EAASpM,GACZoM,IAGLA,EAAQpM,SAAWA,EACfA,EACAoM,EAAQ4L,aAAa,WAAY,YAEjC5L,EAAQwQ,gBAAgB,aAGhCve,WAAW+N,EAASyQ,GACXzQ,GAAWA,EAAQyQ,UAAYA,IAGpCzQ,EAAQyQ,QAAUA,GACbzQ,EAAQ0Q,QAAUD,IACnBzQ,EAAQ0Q,OAASxa,KAAK0M,GAAG,KAAO+N,SAAWza,KAAK+D,UAAU,WAAW,0BAErE+F,EAAQ0Q,SACJD,EACAva,KAAK0a,SAAS5Q,EAAQ0Q,OAAQ1Q,GAE9B9J,KAAK4O,gBAAgB9E,EAAQ0Q,OAAQ1Q,KAIjD/N,cAAc4e,EAAQC,EAAKpb,EAAS/C,GAChCzB,EAAMkL,QAAQ1G,EAASqb,IACnB,MAAMC,GAAUvb,MAAOsb,EAAOtb,YACT6N,IAAjB3Q,GAA8Boe,EAAOtb,QAAU9C,IAC/Cqe,EAAMC,SAAW,YAErB,MAAMC,EAAgBhb,KAAK0M,GAAG,SAAUoO,GACxCE,EAAc9M,YAAYlO,KAAKyG,KAAKoU,EAAO1d,QAC3Cwd,EAAOzM,YAAY8M,KAG3Bjf,eAAe4e,EAAQpb,GACnB,MAAMC,EAAUmb,EAAO1Q,iBAAiB,UACxCjP,EAAMkL,QAAQ1G,EAASqb,IACfA,EAAOtb,QAAUA,EACjBsb,EAAOnF,aAAa,WAAY,YAEhCmF,EAAOP,gBAAgB,cAG3BK,EAAOM,UACPN,EAAOM,WAEPN,EAAOO,UACPP,EAAOO,WAGfnf,QACIiE,KAAKqE,SACLrE,KAAKqK,MAAMrK,KAAKgT,cAEpBjX,OAAO+N,GACH9J,KAAK0a,SAAS5Q,EAAS9J,KAAK8J,SAEhC/N,QAAQ+N,GACJ9J,KAAKmb,UAAUrR,EAAS9J,KAAK8J,SAEjC/N,YAAY+N,GACR9J,KAAK4O,gBAAgB9E,EAAS9J,KAAK8J,SAEvC/N,cACIiE,KAAK2Q,MAAMzK,QAAQyK,IACf,GAA2B,UAAvBA,EAAMxF,QAAQ/K,KAAkB,CAChC,MAAMyO,EAAQ7O,KAAK6I,YAAY8H,EAAMxF,QAAQ0D,OAC7C7O,KAAKob,IAAIvM,MAIrB9S,cACQiE,KAAK2E,aAGT3E,KAAK2Q,MAAMzK,QAAQyK,IACf,GAA2B,UAAvBA,EAAMxF,QAAQ/K,KAAkB,CAChC,MAAMyO,EAAQ7O,KAAK6I,YAAY8H,EAAMxF,QAAQ0D,OAC7C7O,KAAKmV,GAAGtG,EAAO,IAAI3M,KACf,MAAM2O,EAAenV,EAAM+E,cAAcT,KAAKQ,mBAC1CR,KAAKgR,aAAaH,EAAcF,EAAMM,QAAS/O,KAC1ClH,EAAMoR,QAAQpM,KAAKP,UAAWoR,KAC/B7Q,KAAKP,UAAYoR,GAErB7Q,KAAK0C,YAEV,MAIf3G,cACI,MAAMiC,GACFqD,KAAMrB,KAAKR,QAAQ6B,KACnBjB,KAAMJ,KAAKP,UAAU4b,WAAa,OAClCZ,MAAO,eACPa,KAAMtb,KAAKR,QAAQiK,UAYvB,OAVIzJ,KAAKP,UAAUrD,cACf4B,EAAW5B,YAAc4D,KAAKiH,EAAEjH,KAAKP,UAAUrD,cAE/C4D,KAAKP,UAAUhC,WACfO,EAAWP,SAAWuC,KAAKP,UAAUhC,UAErCuC,KAAKtC,WACLM,EAAWN,SAAW,YAE1BtC,EAAEmgB,SAASvd,EAAYgC,KAAKP,UAAUzB,aAElCoC,KAAM,QACNX,UAAWO,KAAKP,UAChB+b,YAAa,SACbvX,KAAMjG,GAGdjC,YACQiE,KAAKP,UAAU9B,YAAcqC,KAAK2E,aAClC3E,KAAKmV,GAAG,SAAU,IAAMnV,KAAKiW,SAAS,GAG9Cla,QACQiE,KAAKE,KAAKhE,OAAS8D,KAAKE,KAAKhE,MAAM,IACnC8D,KAAKE,KAAKhE,MAAM,GAAG+Z","file":"../../../../components/_classes/component/Component.js","sourcesContent":["define([\n    \"skylark-langx\",\n    '../../../vendors/vanilla-text-mask/conformToMask',\n    '../../../vendors/getify/npo',\n    '../../../vendors/tooltip-js/Tooltip',\n    'skylark-lodash',\n    '../../../vendors/ismobilejs/isMobile',\n    '../../../Formio',\n    '../../../utils/utils',\n    '../../../validator/Validator',\n    '../../../templates/Templates',\n    '../../../utils/utils',\n    '../../../Element',\n    '../componentModal/ComponentModal'\n], function (langx,conformToMask, NativePromise, Tooltip, _, isMobile, Formio, FormioUtils, Validator, Templates, utils, Element, ComponentModal) {\n    'use strict';\n    const CKEDITOR = 'https://cdn.form.io/ckeditor/16.0.0/ckeditor.js';\n    const QUILL_URL = 'https://cdn.form.io/quill/1.3.7';\n    const ACE_URL = 'https://cdn.form.io/ace/1.4.8/ace.js';\n    const TINYMCE_URL = 'https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js';\n    return class Component extends Element {\n        static schema(...sources) {\n            return langx.mixin({  //_.merge \n                input: true,\n                key: '',\n                placeholder: '',\n                prefix: '',\n                customClass: '',\n                suffix: '',\n                multiple: false,\n                defaultValue: null,\n                protected: false,\n                unique: false,\n                persistent: true,\n                hidden: false,\n                clearOnHide: true,\n                refreshOn: '',\n                redrawOn: '',\n                tableView: false,\n                modalEdit: false,\n                label: '',\n                labelPosition: 'top',\n                description: '',\n                errorLabel: '',\n                tooltip: '',\n                hideLabel: false,\n                tabindex: '',\n                disabled: false,\n                autofocus: false,\n                dbIndex: false,\n                customDefaultValue: '',\n                calculateValue: '',\n                widget: null,\n                attributes: {},\n                validateOn: 'change',\n                validate: {\n                    required: false,\n                    custom: '',\n                    customPrivate: false,\n                    strictDateValidation: false,\n                    multiple: false,\n                    unique: false\n                },\n                conditional: {\n                    show: null,\n                    when: null,\n                    eq: ''\n                },\n                overlay: {\n                    style: '',\n                    left: '',\n                    top: '',\n                    width: '',\n                    height: ''\n                },\n                allowCalculateOverride: false,\n                encrypted: false,\n                showCharCount: false,\n                showWordCount: false,\n                properties: {},\n                allowMultipleMasks: false\n            }, ...sources);\n        }\n        static tableView(value, options) {\n        }\n        constructor(component, options, data) {\n            super(Object.assign({\n                renderMode: 'form',\n                attachMode: 'full'\n            }, options || {}));\n            this._hasCondition = null;\n            this.refs = {};\n            if (component && this.options.components && this.options.components[component.type]) {\n                langx.mixin(component, this.options.components[component.type]); //_.merge\n            }\n            this.validator = Validator;\n            this.path = '';\n            this.component = this.mergeSchema(component || {});\n            this.originalComponent = utils.fastCloneDeep(this.component);\n            this.attached = false;\n            this.rendered = false;\n            this._data = data || {};\n            this.component.id = this.id;\n            this.error = '';\n            this.tooltip = '';\n            this.row = this.options.row;\n            this._disabled = utils.boolValue(this.component.disabled) ? this.component.disabled : false;\n            this.root = this.options.root;\n            this.pristine = true;\n            this.parent = this.options.parent;\n            this.options.name = this.options.name || 'data';\n            this.validators = [\n                'required',\n                'minLength',\n                'maxLength',\n                'minWords',\n                'maxWords',\n                'custom',\n                'pattern',\n                'json',\n                'mask'\n            ];\n            this._path = '';\n            this._parentVisible = this.options.hasOwnProperty('parentVisible') ? this.options.parentVisible : true;\n            this._visible = this._parentVisible && this.conditionallyVisible(null, data);\n            this._parentDisabled = false;\n            let lastChanged = null;\n            let triggerArgs = [];\n            const _triggerChange = langx.debounce((...args) => {\n                if (this.root) {\n                    this.root.changing = false;\n                }\n                triggerArgs = [];\n                if (!args[1] && lastChanged) {\n                    args[1] = lastChanged;\n                }\n                if (langx.isEmpty(args[0]) && lastChanged) {\n                    args[0] = lastChanged.flags;\n                }\n                lastChanged = null;\n                return this.onChange(...args);\n            }, 100);\n            this.triggerChange = (...args) => {\n                if (args[1]) {\n                    lastChanged = args[1];\n                }\n                if (this.root) {\n                    this.root.changing = true;\n                }\n                if (args.length) {\n                    triggerArgs = args;\n                }\n                return _triggerChange(...triggerArgs);\n            };\n            this.triggerRedraw = langx.debounce(this.redraw.bind(this), 100);\n            this.tooltips = [];\n            this.invalid = false;\n            if (this.component) {\n                this.type = this.component.type;\n                if (this.allowData && this.key) {\n                    this.options.name += `[${ this.key }]`;\n                    if (this.visible || !this.component.clearOnHide) {\n                        if (!this.hasValue()) {\n                            this.dataValue = this.defaultValue;\n                        } else {\n                            this.dataValue = this.dataValue;\n                        }\n                    }\n                }\n                this.info = this.elementInfo();\n            }\n            this.hook('component');\n            if (!this.options.skipInit) {\n                this.init();\n            }\n        }\n        get data() {\n            return this._data;\n        }\n        set data(value) {\n            this._data = value;\n        }\n        mergeSchema(component = {}) {\n            return _.defaultsDeep(component, this.defaultSchema);\n        }\n        get ready() {\n            return NativePromise.resolve(this);\n        }\n        get labelInfo() {\n            const label = {};\n            label.hidden = this.labelIsHidden();\n            label.className = '';\n            label.labelPosition = this.component.labelPosition;\n            label.tooltipClass = `${ this.iconClass('question-sign') } text-muted`;\n            if (this.hasInput && this.component.validate && utils.boolValue(this.component.validate.required)) {\n                label.className += ' field-required';\n            }\n            if (label.hidden) {\n                label.className += ' control-label--hidden';\n            }\n            if (this.info.attr.id) {\n                label.for = this.info.attr.id;\n            }\n            return label;\n        }\n        init() {\n            this.disabled = this.shouldDisabled;\n        }\n        destroy() {\n            super.destroy();\n            this.detach();\n        }\n        get shouldDisabled() {\n            return this.options.readOnly || this.component.disabled || this.options.hasOwnProperty('disabled') && this.options.disabled[this.key];\n        }\n        get isInputComponent() {\n            return !this.component.hasOwnProperty('input') || this.component.input;\n        }\n        get allowData() {\n            return this.hasInput;\n        }\n        get hasInput() {\n            return this.isInputComponent || this.refs.input && this.refs.input.length;\n        }\n        get defaultSchema() {\n            return Component.schema();\n        }\n        get key() {\n            return langx.get(this.component, 'key', '');\n        }\n        set parentVisible(value) {\n            if (this._parentVisible !== value) {\n                this._parentVisible = value;\n                this.clearOnHide();\n                this.redraw();\n            }\n        }\n        get parentVisible() {\n            return this._parentVisible;\n        }\n        set parentDisabled(value) {\n            if (this._parentDisabled !== value) {\n                this._parentDisabled = value;\n                this.clearOnHide();\n                this.redraw();\n            }\n        }\n        get parentDisabled() {\n            return this._parentDisabled;\n        }\n        set visible(value) {\n            if (this._visible !== value) {\n                this._visible = value;\n                this.clearOnHide();\n                this.redraw();\n            }\n        }\n        get visible() {\n            if (this.builderMode || this.options.showHiddenFields) {\n                return true;\n            }\n            if (this.options.hide && this.options.hide[this.component.key]) {\n                return false;\n            }\n            if (this.options.show && this.options.show[this.component.key]) {\n                return true;\n            }\n            return this._visible && this._parentVisible;\n        }\n        get currentForm() {\n            return this._currentForm;\n        }\n        set currentForm(instance) {\n            this._currentForm = instance;\n        }\n        get fullMode() {\n            return this.options.attachMode === 'full';\n        }\n        get builderMode() {\n            return this.options.attachMode === 'builder';\n        }\n        get calculatedPath() {\n            if (this._path) {\n                return this._path;\n            }\n            this._path = this.key;\n            if (!this.root) {\n                return this._path;\n            }\n            let parent = this.parent;\n            while (parent && parent.id !== this.root.id) {\n                if ([\n                        'datagrid',\n                        'container',\n                        'editgrid'\n                    ].includes(parent.type) || parent.tree) {\n                    this._path = `${ parent.key }.${ this._path }`;\n                }\n                parent = parent.parent;\n            }\n            return this._path;\n        }\n        get labelPosition() {\n            return this.component.labelPosition;\n        }\n        get labelWidth() {\n            return this.component.labelWidth || 30;\n        }\n        get labelMargin() {\n            return this.component.labelMargin || 3;\n        }\n        get isAdvancedLabel() {\n            return [\n                'left-left',\n                'left-right',\n                'right-left',\n                'right-right'\n            ].includes(this.labelPosition);\n        }\n        get labelPositions() {\n            return this.labelPosition.split('-');\n        }\n        rightDirection(direction) {\n            return direction === 'right';\n        }\n        getLabelInfo() {\n            const isRightPosition = this.rightDirection(this.labelPositions[0]);\n            const isRightAlign = this.rightDirection(this.labelPositions[1]);\n            const labelStyles = `\n      flex: ${ this.labelWidth };\n      ${ isRightPosition ? 'margin-left' : 'margin-right' }:${ this.labelMargin }%;\n    `;\n            const contentStyles = `\n      flex: ${ 100 - this.labelWidth - this.labelMargin };\n    `;\n            return {\n                isRightPosition,\n                isRightAlign,\n                labelStyles,\n                contentStyles\n            };\n        }\n        getModifiedSchema(schema, defaultSchema, recursion) {\n            const modified = {};\n            if (!defaultSchema) {\n                return schema;\n            }\n            langx.forEach(schema, (val, key) => { //_.each\n                if (!langx.isArray(val) && langx.isObject(val) && defaultSchema.hasOwnProperty(key)) {\n                    const subModified = this.getModifiedSchema(val, defaultSchema[key], true);\n                    if (!langx.isEmpty(subModified)) {\n                        modified[key] = subModified;\n                    }\n                } else if (langx.isArray(val)) {\n                    if (val.length !== 0) {\n                        modified[key] = val;\n                    }\n                } else if (!recursion && key === 'type' || !recursion && key === 'key' || !recursion && key === 'label' || !recursion && key === 'input' || !recursion && key === 'tableView' || val !== '' && !defaultSchema.hasOwnProperty(key) || val !== '' && val !== defaultSchema[key]) {\n                    modified[key] = val;\n                }\n            });\n            return modified;\n        }\n        get schema() {\n            return utils.fastCloneDeep(this.getModifiedSchema(_.omit(this.component, 'id'), this.defaultSchema));\n        }\n        t(text, params) {\n            if (!text) {\n                return '';\n            }\n            params = params || {};\n            params.data = this.rootValue;\n            params.row = this.data;\n            params.component = this.component;\n            params.nsSeparator = '::';\n            params.keySeparator = '.|.';\n            params.pluralSeparator = '._.';\n            params.contextSeparator = '._.';\n            const translated = this.i18next.t(text, params);\n            return translated || text;\n        }\n        labelIsHidden() {\n            return !this.component.label || !this.inDataGrid && this.component.hideLabel || this.inDataGrid && !this.component.dataGridLabel || this.options.inputsOnly;\n        }\n        get transform() {\n            return Templates.current.hasOwnProperty('transform') ? Templates.current.transform.bind(Templates.current) : (type, value) => value;\n        }\n        getTemplate(names, modes) {\n            modes = Array.isArray(modes) ? modes : [modes];\n            names = Array.isArray(names) ? names : [names];\n            if (!modes.includes('form')) {\n                modes.push('form');\n            }\n            let result = null;\n            if (this.options.templates) {\n                result = this.checkTemplate(this.options.templates, names, modes);\n                if (result) {\n                    return result;\n                }\n            }\n            const frameworkTemplates = this.options.template ? Templates.templates[this.options.template] : Templates.current;\n            result = this.checkTemplate(frameworkTemplates, names, modes);\n            if (result) {\n                return result;\n            }\n            const name = names[names.length - 1];\n            const templatesByName = Templates.defaultTemplates[name];\n            if (!templatesByName) {\n                return `Unknown template: ${ name }`;\n            }\n            const templateByMode = this.checkTemplateMode(templatesByName, modes);\n            if (templateByMode) {\n                return templateByMode;\n            }\n            return templatesByName.form;\n        }\n        checkTemplate(templates, names, modes) {\n            for (const name of names) {\n                const templatesByName = templates[name];\n                if (templatesByName) {\n                    const templateByMode = this.checkTemplateMode(templatesByName, modes);\n                    if (templateByMode) {\n                        return templateByMode;\n                    }\n                }\n            }\n            return null;\n        }\n        checkTemplateMode(templatesByName, modes) {\n            for (const mode of modes) {\n                const templateByMode = templatesByName[mode];\n                if (templateByMode) {\n                    return templateByMode;\n                }\n            }\n            return null;\n        }\n        renderTemplate(name, data = {}, modeOption) {\n            const mode = modeOption || this.options.renderMode || 'form';\n            data.component = this.component;\n            data.self = this;\n            data.options = this.options;\n            data.readOnly = this.options.readOnly;\n            data.iconClass = this.iconClass.bind(this);\n            data.t = this.t.bind(this);\n            data.transform = this.transform;\n            data.id = data.id || this.id;\n            data.key = data.key || this.key;\n            data.value = data.value || this.dataValue;\n            data.disabled = this.disabled;\n            data.builder = this.builderMode;\n            data.render = (...args) => {\n                console.warn(`Form.io 'render' template function is deprecated.\n      If you need to render template (template A) inside of another template (template B),\n      pass pre-compiled template A (use this.renderTemplate('template_A_name') as template context variable for template B`);\n                return this.renderTemplate(...args);\n            };\n            data.label = this.labelInfo;\n            data.tooltip = this.interpolate(this.component.tooltip || '').replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n            const names = [\n                `${ name }-${ this.component.type }-${ this.key }`,\n                `${ name }-${ this.component.type }`,\n                `${ name }-${ this.key }`,\n                `${ name }`\n            ];\n            return this.hook(`render${ name.charAt(0).toUpperCase() + name.substring(1, name.length) }`, this.interpolate(this.getTemplate(names, mode), data), data, mode);\n        }\n        sanitize(dirty) {\n            return FormioUtils.sanitize(dirty, this.options);\n        }\n        renderString(template, data) {\n            if (!template) {\n                return '';\n            }\n            return this.interpolate(template, data);\n        }\n        performInputMapping(input) {\n            return input;\n        }\n        getBrowserLanguage() {\n            const nav = window.navigator;\n            const browserLanguagePropertyKeys = [\n                'language',\n                'browserLanguage',\n                'systemLanguage',\n                'userLanguage'\n            ];\n            let language;\n            if (Array.isArray(nav.languages)) {\n                for (let i = 0; i < nav.languages.length; i++) {\n                    language = nav.languages[i];\n                    if (language && language.length) {\n                        return language.split(';')[0];\n                    }\n                }\n            }\n            for (let i = 0; i < browserLanguagePropertyKeys.length; i++) {\n                language = nav[browserLanguagePropertyKeys[i]];\n                if (language && language.length) {\n                    return language.split(';')[0];\n                }\n            }\n            return null;\n        }\n        beforePage() {\n            return NativePromise.resolve(true);\n        }\n        beforeNext() {\n            return this.beforePage(true);\n        }\n        beforeSubmit() {\n            return NativePromise.resolve(true);\n        }\n        get submissionTimezone() {\n            this.options.submissionTimezone = this.options.submissionTimezone || langx.get(this.root, 'options.submissionTimezone');\n            return this.options.submissionTimezone;\n        }\n        loadRefs(element, refs) {\n            for (const ref in refs) {\n                if (refs[ref] === 'single') {\n                    this.refs[ref] = element.querySelector(`[ref=\"${ ref }\"]`);\n                } else {\n                    this.refs[ref] = element.querySelectorAll(`[ref=\"${ ref }\"]`);\n                }\n            }\n        }\n        setOpenModalElement() {\n            const template = `\n      <label class=\"control-label\">${ this.component.label }</label><br>\n      <button lang='en' class='btn btn-light btn-md open-modal-button' ref='openModal'>Click to set value</button>\n    `;\n            this.componentModal.setOpenModalElement(template);\n        }\n        getModalPreviewTemplate() {\n            return `\n      <label class=\"control-label\">${ this.component.label }</label><br>\n      <button lang='en' class='btn btn-light btn-md open-modal-button' ref='openModal'>${ this.getValueAsString(this.dataValue) }</button>`;\n        }\n        build(element) {\n            element = element || this.element;\n            this.empty(element);\n            this.setContent(element, this.render());\n            return this.attach(element);\n        }\n        render(children = `Unknown component: ${ this.component.type }`, topLevel = false) {\n            const isVisible = this.visible;\n            this.rendered = true;\n            if (!this.builderMode && this.component.modalEdit) {\n                return ComponentModal.render(this, {\n                    visible: isVisible,\n                    id: this.id,\n                    classes: this.className,\n                    styles: this.customStyle,\n                    children\n                }, topLevel);\n            } else {\n                return this.renderTemplate('component', {\n                    visible: isVisible,\n                    id: this.id,\n                    classes: this.className,\n                    styles: this.customStyle,\n                    children\n                }, topLevel);\n            }\n        }\n        attach(element) {\n            if (!this.builderMode && this.component.modalEdit) {\n                this.componentModal = new ComponentModal(this, element);\n                this.setOpenModalElement();\n            }\n            this.attached = true;\n            this.element = element;\n            element.component = this;\n            if (this.element.id) {\n                this.id = this.element.id;\n            }\n            this.loadRefs(element, {\n                messageContainer: 'single',\n                tooltip: 'multiple'\n            });\n            this.refs.tooltip.forEach((tooltip, index) => {\n                const title = this.interpolate(tooltip.getAttribute('data-title') || this.t(this.component.tooltip)).replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n                this.tooltips[index] = new Tooltip(tooltip, {\n                    trigger: 'hover click focus',\n                    placement: 'right',\n                    html: true,\n                    title: title,\n                    template: `\n          <div class=\"tooltip\" style=\"opacity: 1;\" role=\"tooltip\">\n            <div class=\"tooltip-arrow\"></div>\n            <div class=\"tooltip-inner\"></div>\n          </div>`\n                });\n            });\n            this.attachLogic();\n            this.autofocus();\n            this.hook('attachComponent', element, this);\n            const type = this.component.type;\n            if (type) {\n                this.hook(`attach${ type.charAt(0).toUpperCase() + type.substring(1, type.length) }`, element, this);\n            }\n            return NativePromise.resolve();\n        }\n        addShortcut(element, shortcut) {\n            if (!element || !this.root || this.root === this) {\n                return;\n            }\n            if (!shortcut) {\n                shortcut = this.component.shortcut;\n            }\n            this.root.addShortcut(element, shortcut);\n        }\n        removeShortcut(element, shortcut) {\n            if (!element || this.root === this) {\n                return;\n            }\n            if (!shortcut) {\n                shortcut = this.component.shortcut;\n            }\n            this.root.removeShortcut(element, shortcut);\n        }\n        detach() {\n            this.refs = {};\n            this.removeEventListeners();\n            this.detachLogic();\n            if (this.tooltip) {\n                this.tooltip.dispose();\n            }\n        }\n        checkRefresh(refreshData, changed) {\n            const changePath = langx.get(changed, 'instance.calculatedPath', false);\n            if (changePath && this.calculatedPath === changePath) {\n                return;\n            }\n            if (refreshData === 'data') {\n                this.refresh(this.data);\n            } else if (changePath && changePath === refreshData && changed && changed.instance && this.inContext(changed.instance)) {\n                this.refresh(changed.value);\n            }\n        }\n        checkRefreshOn(changed) {\n            const refreshOn = this.component.refreshOn || this.component.redrawOn;\n            if (refreshOn) {\n                if (Array.isArray(refreshOn)) {\n                    refreshOn.forEach(refreshData => {\n                        this.checkRefresh(refreshData, changed);\n                    });\n                } else {\n                    this.checkRefresh(refreshOn, changed);\n                }\n            }\n        }\n        refresh(value) {\n            if (this.hasOwnProperty('refreshOnValue')) {\n                this.refreshOnChanged = !langx.isEqual(value, this.refreshOnValue);\n            } else {\n                this.refreshOnChanged = true;\n            }\n            this.refreshOnValue = utils.fastCloneDeep(value);\n            if (this.refreshOnChanged) {\n                if (this.component.clearOnRefresh) {\n                    this.setValue(null);\n                }\n                this.triggerRedraw();\n            }\n        }\n        inContext(component) {\n            if (component.data === this.data) {\n                return true;\n            }\n            let parent = this.parent;\n            while (parent) {\n                if (parent.data === component.data) {\n                    return true;\n                }\n                parent = parent.parent;\n            }\n            return false;\n        }\n        get viewOnly() {\n            return this.options.readOnly && this.options.viewAsHtml;\n        }\n        createViewOnlyElement() {\n            this.element = this.ce('dl', { id: this.id });\n            if (this.element) {\n                this.element.component = this;\n            }\n            return this.element;\n        }\n        get defaultViewOnlyValue() {\n            return '-';\n        }\n        getWidgetValueAsString(value) {\n            const noInputWidget = !this.refs.input || !this.refs.input[0] || !this.refs.input[0].widget;\n            if (!value || noInputWidget) {\n                return value;\n            }\n            if (Array.isArray(value)) {\n                const values = [];\n                value.forEach((val, index) => {\n                    const widget = this.refs.input[index] && this.refs.input[index].widge;\n                    if (widget) {\n                        values.push(widget.getValueAsString(val));\n                    }\n                });\n                return values;\n            }\n            const widget = this.refs.input[0].widget;\n            return widget.getValueAsString(value);\n        }\n        getValueAsString(value) {\n            if (!value) {\n                return '';\n            }\n            value = this.getWidgetValueAsString(value);\n            if (Array.isArray(value)) {\n                return value.join(', ');\n            }\n            if (langx.isPlainObject(value)) {\n                return JSON.stringify(value);\n            }\n            if (value === null || value === undefined) {\n                return '';\n            }\n            return value.toString();\n        }\n        getView(value) {\n            if (this.component.protected) {\n                return '--- PROTECTED ---';\n            }\n            return this.getValueAsString(value);\n        }\n        updateItems(...args) {\n            this.restoreValue();\n            this.onChange(...args);\n        }\n        itemValue(data, forceUseValue = false) {\n            if (langx.isObject(data)) {\n                if (this.valueProperty) {\n                    return langx.get(data, this.valueProperty);\n                }\n                if (forceUseValue) {\n                    return data.value;\n                }\n            }\n            return data;\n        }\n        itemValueForHTMLMode(value) {\n            if (Array.isArray(value)) {\n                const values = value.map(item => Array.isArray(item) ? this.itemValueForHTMLMode(item) : this.itemValue(item));\n                return values.join(', ');\n            }\n            return this.itemValue(value);\n        }\n        createModal(element, attr) {\n            const dialog = this.ce('div', attr || {});\n            this.setContent(dialog, this.renderTemplate('dialog'));\n            dialog.refs = {};\n            this.loadRefs.call(dialog, dialog, {\n                dialogOverlay: 'single',\n                dialogContents: 'single',\n                dialogClose: 'single'\n            });\n            dialog.refs.dialogContents.appendChild(element);\n            document.body.appendChild(dialog);\n            document.body.classList.add('modal-open');\n            dialog.close = () => {\n                document.body.classList.remove('modal-open');\n                dialog.dispatchEvent(new CustomEvent('close'));\n            };\n            this.addEventListener(dialog, 'close', () => this.removeChildFrom(dialog, document.body));\n            const close = event => {\n                event.preventDefault();\n                dialog.close();\n            };\n            this.addEventListener(dialog.refs.dialogOverlay, 'click', close);\n            this.addEventListener(dialog.refs.dialogClose, 'click', close);\n            return dialog;\n        }\n        get className() {\n            let className = this.hasInput ? 'form-group has-feedback ' : '';\n            className += `formio-component formio-component-${ this.component.type } `;\n            if (this.key) {\n                className += `formio-component-${ this.key } `;\n            }\n            if (this.component.multiple) {\n                className += 'formio-component-multiple ';\n            }\n            if (this.component.customClass) {\n                className += this.component.customClass;\n            }\n            if (this.hasInput && this.component.validate && utils.boolValue(this.component.validate.required)) {\n                className += ' required';\n            }\n            if (this.labelIsHidden()) {\n                className += ' formio-component-label-hidden';\n            }\n            if (!this.visible) {\n                className += ' formio-hidden';\n            }\n            return className;\n        }\n        get customStyle() {\n            let customCSS = '';\n            langx.forEach(this.component.style, (value, key) => { //_.each\n                if (value !== '') {\n                    customCSS += `${ key }:${ value };`;\n                }\n            });\n            return customCSS;\n        }\n        get isMobile() {\n            return isMobile();\n        }\n        getElement() {\n            return this.element;\n        }\n        evalContext(additional) {\n            return super.evalContext(Object.assign({\n                component: this.component,\n                row: this.data,\n                rowIndex: this.rowIndex,\n                data: this.rootValue,\n                iconClass: this.iconClass.bind(this),\n                submission: this.root ? this.root._submission : {},\n                form: this.root ? this.root._form : {}\n            }, additional));\n        }\n        setPristine(pristine) {\n            this.pristine = pristine;\n        }\n        removeValue(index) {\n            this.splice(index);\n            this.redraw();\n            this.restoreValue();\n            this.triggerRootChange();\n        }\n        iconClass(name, spinning) {\n            const iconset = this.options.iconset || Templates.current.defaultIconset || 'fa';\n            return Templates.current.hasOwnProperty('iconClass') ? Templates.current.iconClass(iconset, name, spinning) : this.options.iconset === 'fa' ? Templates.defaultTemplates.iconClass(iconset, name, spinning) : name;\n        }\n        get name() {\n            return this.t(this.component.label || this.component.placeholder || this.key);\n        }\n        get errorLabel() {\n            return this.t(this.component.errorLabel || this.component.label || this.component.placeholder || this.key);\n        }\n        errorMessage(type) {\n            return this.component.errors && this.component.errors[type] ? this.component.errors[type] : type;\n        }\n        setContent(element, content) {\n            if (element instanceof HTMLElement) {\n                element.innerHTML = this.sanitize(content);\n                return true;\n            }\n            return false;\n        }\n        redraw() {\n            if (!this.element || !this.element.parentNode) {\n                return NativePromise.resolve();\n            }\n            this.clear();\n            const parent = this.element.parentNode;\n            const index = Array.prototype.indexOf.call(parent.children, this.element);\n            this.element.outerHTML = this.sanitize(this.render());\n            this.element = parent.children[index];\n            return this.attach(this.element);\n        }\n        rebuild() {\n            this.destroy();\n            this.init();\n            return this.redraw();\n        }\n        removeEventListeners() {\n            super.removeEventListeners();\n            this.tooltips.forEach(tooltip => tooltip.dispose());\n            this.tooltips = [];\n            this.refs.input = [];\n        }\n        hasClass(element, className) {\n            if (!element) {\n                return;\n            }\n            return super.hasClass(element, this.transform('class', className));\n        }\n        addClass(element, className) {\n            if (!element) {\n                return;\n            }\n            return super.addClass(element, this.transform('class', className));\n        }\n        removeClass(element, className) {\n            if (!element) {\n                return;\n            }\n            return super.removeClass(element, this.transform('class', className));\n        }\n        hasCondition() {\n            if (this._hasCondition !== null) {\n                return this._hasCondition;\n            }\n            this._hasCondition = FormioUtils.hasCondition(this.component);\n            return this._hasCondition;\n        }\n        conditionallyVisible(data, row) {\n            data = data || this.rootValue;\n            row = row || this.data;\n            if (this.builderMode || !this.hasCondition()) {\n                return !this.component.hidden;\n            }\n            data = data || (this.root ? this.root.data : {});\n            return this.checkCondition(row, data);\n        }\n        checkCondition(row, data) {\n            return FormioUtils.checkCondition(this.component, row || this.data, data || this.rootValue, this.root ? this.root._form : {}, this);\n        }\n        checkComponentConditions(data, flags, row) {\n            data = data || this.rootValue;\n            flags = flags || {};\n            row = row || this.data;\n            if (!this.builderMode && this.fieldLogic(data, row)) {\n                this.redraw();\n            }\n            const visible = this.conditionallyVisible(data, row);\n            if (this.visible !== visible) {\n                this.visible = visible;\n            }\n            return visible;\n        }\n        checkConditions(data, flags, row) {\n            data = data || this.rootValue;\n            flags = flags || {};\n            row = row || this.data;\n            return this.checkComponentConditions(data, flags, row);\n        }\n        get logic() {\n            return this.component.logic || [];\n        }\n        fieldLogic(data, row) {\n            data = data || this.rootValue;\n            row = row || this.data;\n            const logics = this.logic;\n            if (logics.length === 0) {\n                return;\n            }\n            const newComponent = utils.fastCloneDeep(this.originalComponent);\n            let changed = logics.reduce((changed, logic) => {\n                const result = FormioUtils.checkTrigger(newComponent, logic.trigger, row, data, this.root ? this.root._form : {}, this);\n                return (result ? this.applyActions(newComponent, logic.actions, result, row, data) : false) || changed;\n            }, false);\n            if (!langx.isEqual(this.component, newComponent)) {\n                this.component = newComponent;\n                this.disabled = this.shouldDisabled;\n                changed = true;\n            }\n            return changed;\n        }\n        isIE() {\n            const userAgent = window.navigator.userAgent;\n            const msie = userAgent.indexOf('MSIE ');\n            if (msie > 0) {\n                return parseInt(userAgent.substring(msie + 5, userAgent.indexOf('.', msie)), 10);\n            }\n            const trident = userAgent.indexOf('Trident/');\n            if (trident > 0) {\n                const rv = userAgent.indexOf('rv:');\n                return parseInt(userAgent.substring(rv + 3, userAgent.indexOf('.', rv)), 10);\n            }\n            const edge = userAgent.indexOf('Edge/');\n            if (edge > 0) {\n                return parseInt(userAgent.substring(edge + 5, userAgent.indexOf('.', edge)), 10);\n            }\n            return false;\n        }\n        applyActions(newComponent, actions, result, row, data) {\n            data = data || this.rootValue;\n            row = row || this.data;\n            return actions.reduce((changed, action) => {\n                switch (action.type) {\n                case 'property': {\n                        FormioUtils.setActionProperty(newComponent, action, result, row, data, this);\n                        const property = action.property.value;\n                        if (!langx.isEqual(langx.get(this.component, property), langx.get(newComponent, property))) {\n                            changed = true;\n                        }\n                        break;\n                    }\n                case 'value': {\n                        const oldValue = this.getValue();\n                        const newValue = this.evaluate(action.value, {\n                            value: langx.clone(oldValue),\n                            data,\n                            row,\n                            component: newComponent,\n                            result\n                        }, 'value');\n                        if (!langx.isEqual(oldValue, newValue)) {\n                            this.setValue(newValue);\n                            if (this.viewOnly) {\n                                this.dataValue = newValue;\n                            }\n                            changed = true;\n                        }\n                        break;\n                    }\n                case 'mergeComponentSchema': {\n                        const schema = this.evaluate(action.schemaDefinition, {\n                            value: langx.clone(this.getValue()),\n                            data,\n                            row,\n                            component: newComponent,\n                            result\n                        }, 'schema');\n                        langx.mixin(newComponent, schema); //_.assign\n                        if (!langx.isEqual(this.component, newComponent)) {\n                            changed = true;\n                        }\n                        break;\n                    }\n                }\n                return changed;\n            }, false);\n        }\n        addInputError(message, dirty, elements) {\n            this.addMessages(message);\n            this.setErrorClasses(elements, dirty, !!message);\n        }\n        removeInputError(elements) {\n            this.setErrorClasses(elements, true, false);\n        }\n        addMessages(messages) {\n            if (!messages) {\n                return;\n            }\n            if (typeof messages === 'string') {\n                messages = {\n                    messages,\n                    level: 'error'\n                };\n            }\n            if (!Array.isArray(messages)) {\n                messages = [messages];\n            }\n            if (this.refs.messageContainer) {\n                this.setContent(this.refs.messageContainer, messages.map(message => this.renderTemplate('message', message)).join(''));\n            }\n        }\n        setErrorClasses(elements, dirty, hasErrors, hasMessages) {\n            this.clearErrorClasses();\n            elements.forEach(element => this.removeClass(this.performInputMapping(element), 'is-invalid'));\n            if (hasErrors) {\n                elements.forEach(input => this.addClass(this.performInputMapping(input), 'is-invalid'));\n                if (dirty && this.options.highlightErrors) {\n                    this.addClass(this.element, this.options.componentErrorClass);\n                } else {\n                    this.addClass(this.element, 'has-error');\n                }\n            }\n            if (hasMessages) {\n                this.addClass(this.element, 'has-message');\n            }\n        }\n        clearOnHide() {\n            if (!this.rootPristine && this.component.clearOnHide !== false && !this.options.readOnly && !this.options.showHiddenFields) {\n                if (!this.visible) {\n                    this.deleteValue();\n                } else if (!this.hasValue()) {\n                    this.setValue(this.defaultValue, { noUpdateEvent: true });\n                }\n            }\n        }\n        triggerRootChange(...args) {\n            if (this.options.onChange) {\n                this.options.onChange(...args);\n            } else if (this.root) {\n                this.root.triggerChange(...args);\n            }\n        }\n        onChange(flags, fromRoot) {\n            flags = flags || {};\n            if (flags.modified) {\n                this.pristine = false;\n                this.addClass(this.getElement(), 'formio-modified');\n            }\n            if (this.component.validateOn === 'blur' && !this.errors.length) {\n                flags.noValidate = true;\n            }\n            if (this.component.onChange) {\n                this.evaluate(this.component.onChange, { flags });\n            }\n            const changed = {\n                instance: this,\n                component: this.component,\n                value: this.dataValue,\n                flags: flags\n            };\n            this.emit('componentChange', changed);\n            let modified = false;\n            if (flags.modified) {\n                modified = true;\n                delete flags.modified;\n            }\n            if (!fromRoot) {\n                this.triggerRootChange(flags, changed, modified);\n            }\n            return changed;\n        }\n        get wysiwygDefault() {\n            return {\n                quill: {\n                    theme: 'snow',\n                    placeholder: this.t(this.component.placeholder),\n                    modules: {\n                        toolbar: [\n                            [{\n                                    'size': [\n                                        'small',\n                                        false,\n                                        'large',\n                                        'huge'\n                                    ]\n                                }],\n                            [{\n                                    'header': [\n                                        1,\n                                        2,\n                                        3,\n                                        4,\n                                        5,\n                                        6,\n                                        false\n                                    ]\n                                }],\n                            [{ 'font': [] }],\n                            [\n                                'bold',\n                                'italic',\n                                'underline',\n                                'strike',\n                                { 'script': 'sub' },\n                                { 'script': 'super' },\n                                'clean'\n                            ],\n                            [\n                                { 'color': [] },\n                                { 'background': [] }\n                            ],\n                            [\n                                { 'list': 'ordered' },\n                                { 'list': 'bullet' },\n                                { 'indent': '-1' },\n                                { 'indent': '+1' },\n                                { 'align': [] }\n                            ],\n                            [\n                                'blockquote',\n                                'code-block'\n                            ],\n                            [\n                                'link',\n                                'image',\n                                'video',\n                                'formula',\n                                'source'\n                            ]\n                        ]\n                    }\n                },\n                ace: {\n                    theme: 'ace/theme/xcode',\n                    maxLines: 12,\n                    minLines: 12,\n                    tabSize: 2,\n                    mode: 'javascript',\n                    placeholder: this.t(this.component.placeholder)\n                },\n                ckeditor: {\n                    image: {\n                        toolbar: [\n                            'imageTextAlternative',\n                            '|',\n                            'imageStyle:full',\n                            'imageStyle:alignLeft',\n                            'imageStyle:alignCenter',\n                            'imageStyle:alignRight'\n                        ],\n                        styles: [\n                            'full',\n                            'alignLeft',\n                            'alignCenter',\n                            'alignRight'\n                        ]\n                    }\n                },\n                tiny: { theme: 'silver' },\n                default: {}\n            };\n        }\n        addCKE(element, settings, onChange) {\n            settings = langx.isEmpty(settings) ? {} : settings;\n            settings.base64Upload = true;\n            settings.mediaEmbed = { previewsInData: true };\n            settings = langx.mixin(this.wysiwygDefault.ckeditor, langx.get(this.options, 'editors.ckeditor.settings', {}), settings); //_.merge\n            return Formio.requireLibrary('ckeditor', 'ClassicEditor', langx.get(this.options, 'editors.ckeditor.src', CKEDITOR), true).then(() => {\n                if (!element.parentNode) {\n                    return NativePromise.reject();\n                }\n                return ClassicEditor.create(element, settings).then(editor => {\n                    editor.model.document.on('change', () => onChange(editor.data.get()));\n                    return editor;\n                });\n            });\n        }\n        addQuill(element, settings, onChange) {\n            settings = _.isEmpty(settings) ? this.wysiwygDefault.quill : settings;\n            settings = _.merge(this.wysiwygDefault.quill, _.get(this.options, 'editors.quill.settings', {}), settings);\n            Formio.requireLibrary(`quill-css-${ settings.theme }`, 'Quill', [{\n                    type: 'styles',\n                    src: `${ QUILL_URL }/quill.${ settings.theme }.css`\n                }], true);\n            return Formio.requireLibrary('quill', 'Quill', _.get(this.options, 'editors.quill.src', `${ QUILL_URL }/quill.min.js`), true).then(() => {\n                if (!element.parentNode) {\n                    return NativePromise.reject();\n                }\n                this.quill = new Quill(element, settings);\n                const txtArea = document.createElement('textarea');\n                txtArea.setAttribute('class', 'quill-source-code');\n                this.quill.addContainer('ql-custom').appendChild(txtArea);\n                const qlSource = element.parentNode.querySelector('.ql-source');\n                if (qlSource) {\n                    this.addEventListener(qlSource, 'click', event => {\n                        event.preventDefault();\n                        if (txtArea.style.display === 'inherit') {\n                            this.quill.setContents(this.quill.clipboard.convert(txtArea.value));\n                        }\n                        txtArea.style.display = txtArea.style.display === 'none' ? 'inherit' : 'none';\n                    });\n                }\n                this.addEventListener(element, 'click', () => this.quill.focus());\n                const elm = document.querySelectorAll('.ql-formats > button');\n                for (let i = 0; i < elm.length; i++) {\n                    elm[i].setAttribute('tabindex', '-1');\n                }\n                this.quill.on('text-change', () => {\n                    txtArea.value = this.quill.root.innerHTML;\n                    onChange(txtArea);\n                });\n                return this.quill;\n            });\n        }\n        addAce(element, settings, onChange) {\n            settings = langx.mixin(this.wysiwygDefault.ace, langx.get(this.options, 'editors.ace.settings', {}), settings || {}); //_.merge\n            //return Formio.requireLibrary('ace', 'ace', langx.get(this.options, 'editors.ace.src', ACE_URL), true).then(editor => { // modified by lwf\n            var d = new langx.Deferred();\n            require([\"skylark-ace\"],function(ace){    \n                let editor = ace.edit(element);\n                editor.removeAllListeners('change');\n                editor.setOptions(settings);\n                editor.getSession().setMode(`ace/mode/${ settings.mode }`);\n                editor.on('change', () => onChange(editor.getValue()));\n                //return editor;\n                d.resolve(editor)\n            },function(e){\n                d.reject(e);\n            });\n\n            return d.promise;\n        }\n        addTiny(element, settings, onChange) {\n            return Formio.requireLibrary('tinymce', 'tinymce', TINYMCE_URL.replace('no-api-key', settings.tinyApiKey), true).then(editor => {\n                return editor.init({\n                    ...settings,\n                    target: element,\n                    init_instance_callback: editor => {\n                        editor.on('Change', () => onChange(editor.getContent()));\n                    }\n                });\n            });\n        }\n        get tree() {\n            return this.component.tree || false;\n        }\n        get emptyValue() {\n            return null;\n        }\n        hasValue(data) {\n            return _.has(data || this.data, this.key);\n        }\n        get rootValue() {\n            return this.root ? this.root.data : this.data;\n        }\n        get rootPristine() {\n            return langx.get(this, 'root.pristine', false);\n        }\n        get dataValue() {\n            if (!this.key || !this.visible && this.component.clearOnHide && !this.rootPristine) {\n                return this.emptyValue;\n            }\n            if (!this.hasValue()) {\n                const empty = this.component.multiple ? [] : this.emptyValue;\n                if (!this.rootPristine) {\n                    this.dataValue = empty;\n                }\n                return empty;\n            }\n            return langx.get(this._data, this.key);\n        }\n        set dataValue(value) {\n            if (!this.allowData || !this.key || !this.visible && this.component.clearOnHide && !this.rootPristine) {\n                return value;\n            }\n            if (value !== null && value !== undefined) {\n                value = this.hook('setDataValue', value, this.key, this._data);\n            }\n            if (value === null || value === undefined) {\n                this.unset();\n                return value;\n            }\n            _.set(this._data, this.key, value);\n            return value;\n        }\n        splice(index) {\n            if (this.hasValue()) {\n                const dataValue = this.dataValue || [];\n                if (langx.isArray(dataValue) && dataValue.hasOwnProperty(index)) {\n                    dataValue.splice(index, 1);\n                    this.dataValue = dataValue;\n                    this.triggerChange();\n                }\n            }\n        }\n        unset() {\n            _.unset(this._data, this.key);\n        }\n        deleteValue() {\n            this.setValue(null, {\n                noUpdateEvent: true,\n                noDefault: true\n            });\n            this.unset();\n        }\n        get defaultValue() {\n            let defaultValue = this.emptyValue;\n            if (this.component.defaultValue) {\n                defaultValue = this.component.defaultValue;\n            }\n            if (this.component.customDefaultValue && !this.options.preview) {\n                defaultValue = this.evaluate(this.component.customDefaultValue, { value: '' }, 'value');\n            }\n            if (this.defaultMask) {\n                if (typeof defaultValue === 'string') {\n                    defaultValue = conformToMask(defaultValue, this.defaultMask).conformedValue;\n                    if (!FormioUtils.matchInputMask(defaultValue, this.defaultMask)) {\n                        defaultValue = '';\n                    }\n                } else {\n                    defaultValue = '';\n                }\n            }\n            return langx.clone(defaultValue); //_.cloneDeep\n        }\n        getValue() {\n            if (!this.hasInput || this.viewOnly || !this.refs.input || !this.refs.input.length) {\n                return this.dataValue;\n            }\n            const values = [];\n            for (const i in this.refs.input) {\n                if (this.refs.input.hasOwnProperty(i)) {\n                    if (!this.component.multiple) {\n                        return this.getValueAt(i);\n                    }\n                    values.push(this.getValueAt(i));\n                }\n            }\n            if (values.length === 0 && !this.component.multiple) {\n                return '';\n            }\n            return values;\n        }\n        getValueAt(index) {\n            const input = this.performInputMapping(this.refs.input[index]);\n            return input ? input.value : undefined;\n        }\n        setValue(value, flags = {}) {\n            const changed = this.updateValue(value, flags);\n            if (this.componentModal && flags && flags.fromSubmission) {\n                this.componentModal.setValue(value);\n            }\n            value = this.dataValue;\n            if (!this.hasInput) {\n                return changed;\n            }\n            const isArray = Array.isArray(value);\n            if (isArray && Array.isArray(this.defaultValue) && this.refs.hasOwnProperty('input') && this.refs.input && this.refs.input.length !== value.length) {\n                this.redraw();\n            }\n            for (const i in this.refs.input) {\n                if (this.refs.input.hasOwnProperty(i)) {\n                    this.setValueAt(i, isArray ? value[i] : value, flags);\n                }\n            }\n            return changed;\n        }\n        setValueAt(index, value, flags = {}) {\n            if (!flags.noDefault && (value === null || value === undefined) && !this.component.multiple) {\n                value = this.defaultValue;\n            }\n            const input = this.performInputMapping(this.refs.input[index]);\n            if (input.mask) {\n                input.mask.textMaskInputElement.update(value);\n            } else if (input.widget && input.widget.setValue) {\n                input.widget.setValue(value);\n            } else {\n                input.value = value;\n            }\n        }\n        get hasSetValue() {\n            return this.hasValue() && !this.isEmpty(this.dataValue);\n        }\n        restoreValue() {\n            if (this.hasSetValue) {\n                this.setValue(this.dataValue, { noUpdateEvent: true });\n            } else {\n                if (this.defaultValue) {\n                    const defaultValue = this.component.multiple && !this.dataValue.length ? [] : this.defaultValue;\n                    this.setValue(defaultValue, { noUpdateEvent: true });\n                }\n            }\n        }\n        normalizeValue(value) {\n            if (this.component.multiple && !Array.isArray(value)) {\n                value = value ? [value] : [];\n            }\n            return value;\n        }\n        updateComponentValue(value, flags = {}) {\n            let newValue = !flags.resetValue && (value === undefined || value === null) ? this.getValue() : value;\n            newValue = this.normalizeValue(newValue, flags);\n            const changed = newValue !== undefined ? this.hasChanged(newValue, this.dataValue) : false;\n            if (changed) {\n                this.dataValue = newValue;\n                this.updateOnChange(flags, changed);\n            }\n            return changed;\n        }\n        updateValue(...args) {\n            return this.updateComponentValue(...args);\n        }\n        getIcon(name, content, styles, ref = 'icon') {\n            return this.renderTemplate('icon', {\n                className: this.iconClass(name),\n                ref,\n                styles,\n                content\n            });\n        }\n        resetValue() {\n            this.setValue(this.emptyValue, {\n                noUpdateEvent: true,\n                noValidate: true,\n                resetValue: true\n            });\n            this.unset();\n        }\n        hasChanged(newValue, oldValue) {\n            if ((newValue === undefined || newValue === null) && (oldValue === undefined || oldValue === null || this.isEmpty(oldValue))) {\n                return false;\n            }\n            if (newValue !== undefined && newValue !== null && !this.hasValue()) {\n                return true;\n            }\n            return !langx.isEqual(newValue, oldValue);\n        }\n        updateOnChange(flags = {}, changed = false) {\n            if (!flags.noUpdateEvent && changed) {\n                this.triggerChange(flags);\n                return true;\n            }\n            return false;\n        }\n        convertNumberOrBoolToString(value) {\n            if (typeof value === 'number' || typeof value === 'boolean') {\n                return value.toString();\n            }\n            return value;\n        }\n        calculateComponentValue(data, flags, row) {\n            if (!this.component.calculateValue || (!this.visible || this.component.hidden) && this.component.clearOnHide && !this.rootPristine) {\n                return false;\n            }\n            const allowOverride = this.component.allowCalculateOverride;\n            let firstPass = false;\n            const dataValue = this.dataValue;\n            if (this.calculatedValue === undefined) {\n                firstPass = true;\n                this.calculatedValue = null;\n            }\n            if (allowOverride && this.calculatedValue && !langx.isEqual(dataValue, this.convertNumberOrBoolToString(this.calculatedValue))) {\n                return false;\n            }\n            const calculatedValue = this.evaluate(this.component.calculateValue, {\n                value: dataValue,\n                data,\n                row: row || this.data\n            }, 'value');\n            if (allowOverride && firstPass && !this.isEmpty(dataValue) && !langx.isEqual(dataValue, this.convertNumberOrBoolToString(calculatedValue))) {\n                this.calculatedValue = calculatedValue;\n                return true;\n            }\n            const changed = this.setValue(calculatedValue, flags);\n            this.calculatedValue = this.dataValue;\n            return changed;\n        }\n        calculateValue(data, flags, row) {\n            data = data || this.rootValue;\n            flags = flags || {};\n            row = row || this.data;\n            return this.calculateComponentValue(data, flags, row);\n        }\n        get label() {\n            return this.component.label;\n        }\n        set label(value) {\n            this.component.label = value;\n            if (this.labelElement) {\n                this.labelElement.innerText = value;\n            }\n        }\n        getRoot() {\n            return this.root;\n        }\n        invalidMessage(data, dirty, ignoreCondition, row) {\n            if (!ignoreCondition && !this.checkCondition(row, data)) {\n                return '';\n            }\n            if (this.invalid) {\n                return this.invalid;\n            }\n            if (!this.hasInput || !dirty && this.pristine) {\n                return '';\n            }\n            return langx.map(Validator.checkComponent(this, data), 'message').join('\\n\\n');\n        }\n        isValid(data, dirty) {\n            return !this.invalidMessage(data, dirty);\n        }\n        setComponentValidity(messages, dirty) {\n            const hasErrors = !!messages.filter(message => message.level === 'error').length;\n            if (messages.length && (dirty || !this.pristine)) {\n                this.setCustomValidity(messages, dirty);\n            } else {\n                this.setCustomValidity('');\n            }\n            return !hasErrors;\n        }\n        checkComponentValidity(data, dirty, row, async = false) {\n            data = data || this.rootValue;\n            row = row || this.data;\n            if (this.shouldSkipValidation(data, dirty, row)) {\n                this.setCustomValidity('');\n                return async ? NativePromise.resolve(true) : true;\n            }\n            const check = Validator.checkComponent(this, data, row, true, async);\n            return async ? check.then(messages => this.setComponentValidity(messages, dirty)) : this.setComponentValidity(check, dirty);\n        }\n        checkValidity(data, dirty, row) {\n            data = data || this.rootValue;\n            row = row || this.data;\n            return this.checkComponentValidity(data, dirty, row);\n        }\n        checkAsyncValidity(data, dirty, row) {\n            return NativePromise.resolve(this.checkComponentValidity(data, dirty, row, true));\n        }\n        checkData(data, flags, row) {\n            data = data || this.rootValue;\n            flags = flags || {};\n            row = row || this.data;\n            this.checkRefreshOn(flags.changed);\n            if (flags.noCheck) {\n                return true;\n            }\n            this.calculateComponentValue(data, flags, row);\n            this.checkComponentConditions(data, flags, row);\n            if (flags.noValidate) {\n                return true;\n            }\n            let isDirty = !this.builderMode && !this.options.preview && !this.isEmpty(this.defaultValue) && this.isEqual(this.defaultValue, this.dataValue);\n            if (this.options.alwaysDirty || flags.dirty) {\n                isDirty = true;\n            }\n            if (flags.fromSubmission && this.hasValue(data)) {\n                isDirty = true;\n            }\n            return this.checkComponentValidity(data, isDirty, row);\n        }\n        get validationValue() {\n            return this.dataValue;\n        }\n        isEmpty(value = this.dataValue) {\n            const isEmptyArray = langx.isArray(value) && value.length === 1 ? langx.isEqual(value[0], this.emptyValue) : false;\n            return value == null || value.length === 0 || langx.isEqual(value, this.emptyValue) || isEmptyArray;\n        }\n        isEqual(valueA, valueB = this.dataValue) {\n            return this.isEmpty(valueA) && this.isEmpty(valueB) || langx.isEqual(valueA, valueB);\n        }\n        validateMultiple() {\n            return true;\n        }\n        get errors() {\n            return this.error ? [this.error] : [];\n        }\n        clearErrorClasses() {\n            this.removeClass(this.element, this.options.componentErrorClass);\n            this.removeClass(this.element, 'alert alert-danger');\n            this.removeClass(this.element, 'has-error');\n            this.removeClass(this.element, 'has-message');\n        }\n        setCustomValidity(messages, dirty, external) {\n            if (typeof messages === 'string' && messages) {\n                messages = {\n                    level: 'error',\n                    message: messages\n                };\n            }\n            if (!Array.isArray(messages)) {\n                if (messages) {\n                    messages = [messages];\n                } else {\n                    messages = [];\n                }\n            }\n            const hasErrors = !!messages.filter(message => message.level === 'error').length;\n            if (messages.length) {\n                if (this.refs.messageContainer) {\n                    this.empty(this.refs.messageContainer);\n                }\n                this.error = {\n                    component: this.component,\n                    message: messages[0].message,\n                    messages,\n                    external: !!external\n                };\n                this.emit('componentError', this.error);\n                this.addMessages(messages, dirty, this.refs.input);\n                if (this.refs.input) {\n                    this.setErrorClasses(this.refs.input, dirty, hasErrors, !!messages.length);\n                }\n            } else if (this.error && this.error.external === !!external) {\n                if (this.refs.messageContainer) {\n                    this.empty(this.refs.messageContainer);\n                }\n                this.error = null;\n                if (this.refs.input) {\n                    this.setErrorClasses(this.refs.input, dirty, hasErrors, !!messages.length);\n                }\n                this.clearErrorClasses();\n            }\n        }\n        isValueHidden() {\n            if (!this.root || !this.root.hasOwnProperty('editing')) {\n                return false;\n            }\n            if (!this.root || !this.root.editing) {\n                return false;\n            }\n            return this.component.protected || !this.component.persistent || this.component.persistent === 'client-only';\n        }\n        shouldSkipValidation(data, dirty, row) {\n            const rules = [\n                () => this.shouldDisabled,\n                () => this.isValueHidden(),\n                () => !this.visible,\n                () => !this.checkCondition(row, data)\n            ];\n            return rules.some(pred => pred());\n        }\n        whenReady() {\n            console.warn('The whenReady() method has been deprecated. Please use the dataReady property instead.');\n            return this.dataReady;\n        }\n        get dataReady() {\n            return NativePromise.resolve();\n        }\n        asString(value) {\n            value = value || this.getValue();\n            return (Array.isArray(value) ? value : [value]).map(_.toString).join(', ');\n        }\n        get disabled() {\n            return this._disabled || this.parentDisabled;\n        }\n        set disabled(disabled) {\n            this._disabled = disabled;\n        }\n        setDisabled(element, disabled) {\n            if (!element) {\n                return;\n            }\n            element.disabled = disabled;\n            if (disabled) {\n                element.setAttribute('disabled', 'disabled');\n            } else {\n                element.removeAttribute('disabled');\n            }\n        }\n        setLoading(element, loading) {\n            if (!element || element.loading === loading) {\n                return;\n            }\n            element.loading = loading;\n            if (!element.loader && loading) {\n                element.loader = this.ce('i', { class: `${ this.iconClass('refresh', true) } button-icon-right` });\n            }\n            if (element.loader) {\n                if (loading) {\n                    this.appendTo(element.loader, element);\n                } else {\n                    this.removeChildFrom(element.loader, element);\n                }\n            }\n        }\n        selectOptions(select, tag, options, defaultValue) {\n            langx.forEach(options, option => {  //_.each\n                const attrs = { value: option.value };\n                if (defaultValue !== undefined && option.value === defaultValue) {\n                    attrs.selected = 'selected';\n                }\n                const optionElement = this.ce('option', attrs);\n                optionElement.appendChild(this.text(option.label));\n                select.appendChild(optionElement);\n            });\n        }\n        setSelectValue(select, value) {\n            const options = select.querySelectorAll('option');\n            langx.forEach(options, option => { //_.each\n                if (option.value === value) {\n                    option.setAttribute('selected', 'selected');\n                } else {\n                    option.removeAttribute('selected');\n                }\n            });\n            if (select.onchange) {\n                select.onchange();\n            }\n            if (select.onselect) {\n                select.onselect();\n            }\n        }\n        clear() {\n            this.detach();\n            this.empty(this.getElement());\n        }\n        append(element) {\n            this.appendTo(element, this.element);\n        }\n        prepend(element) {\n            this.prependTo(element, this.element);\n        }\n        removeChild(element) {\n            this.removeChildFrom(element, this.element);\n        }\n        detachLogic() {\n            this.logic.forEach(logic => {\n                if (logic.trigger.type === 'event') {\n                    const event = this.interpolate(logic.trigger.event);\n                    this.off(event);\n                }\n            });\n        }\n        attachLogic() {\n            if (this.builderMode) {\n                return;\n            }\n            this.logic.forEach(logic => {\n                if (logic.trigger.type === 'event') {\n                    const event = this.interpolate(logic.trigger.event);\n                    this.on(event, (...args) => {\n                        const newComponent = utils.fastCloneDeep(this.originalComponent);\n                        if (this.applyActions(newComponent, logic.actions, args)) {\n                            if (!langx.isEqual(this.component, newComponent)) {\n                                this.component = newComponent;\n                            }\n                            this.redraw();\n                        }\n                    }, true);\n                }\n            });\n        }\n        elementInfo() {\n            const attributes = {\n                name: this.options.name,\n                type: this.component.inputType || 'text',\n                class: 'form-control',\n                lang: this.options.language\n            };\n            if (this.component.placeholder) {\n                attributes.placeholder = this.t(this.component.placeholder);\n            }\n            if (this.component.tabindex) {\n                attributes.tabindex = this.component.tabindex;\n            }\n            if (this.disabled) {\n                attributes.disabled = 'disabled';\n            }\n            _.defaults(attributes, this.component.attributes);\n            return {\n                type: 'input',\n                component: this.component,\n                changeEvent: 'change',\n                attr: attributes\n            };\n        }\n        autofocus() {\n            if (this.component.autofocus && !this.builderMode) {\n                this.on('render', () => this.focus(), true);\n            }\n        }\n        focus() {\n            if (this.refs.input && this.refs.input[0]) {\n                this.refs.input[0].focus();\n            }\n        }\n    };\n    Component.externalLibraries = {};\n    Component.requireLibrary = function (name, property, src, polling) {\n        if (!Component.externalLibraries.hasOwnProperty(name)) {\n            Component.externalLibraries[name] = {};\n            Component.externalLibraries[name].ready = new NativePromise((resolve, reject) => {\n                Component.externalLibraries[name].resolve = resolve;\n                Component.externalLibraries[name].reject = reject;\n            });\n            const callbackName = `${ name }Callback`;\n            if (!polling && !window[callbackName]) {\n                window[callbackName] = function () {\n                    this.resolve();\n                }.bind(Component.externalLibraries[name]);\n            }\n            const plugin = langx.get(window, property);\n            if (plugin) {\n                Component.externalLibraries[name].resolve(plugin);\n            } else {\n                src = Array.isArray(src) ? src : [src];\n                src.forEach(lib => {\n                    let attrs = {};\n                    let elementType = '';\n                    if (typeof lib === 'string') {\n                        lib = {\n                            type: 'script',\n                            src: lib\n                        };\n                    }\n                    switch (lib.type) {\n                    case 'script':\n                        elementType = 'script';\n                        attrs = {\n                            src: lib.src,\n                            type: 'text/javascript',\n                            defer: true,\n                            async: true\n                        };\n                        break;\n                    case 'styles':\n                        elementType = 'link';\n                        attrs = {\n                            href: lib.src,\n                            rel: 'stylesheet'\n                        };\n                        break;\n                    }\n                    const script = document.createElement(elementType);\n                    for (const attr in attrs) {\n                        script.setAttribute(attr, attrs[attr]);\n                    }\n                    document.getElementsByTagName('head')[0].appendChild(script);\n                });\n                if (polling) {\n                    setTimeout(function checkLibrary() {\n                        const plugin = langx.get(window, property);\n                        if (plugin) {\n                            Component.externalLibraries[name].resolve(plugin);\n                        } else {\n                            setTimeout(checkLibrary, 200);\n                        }\n                    }, 200);\n                }\n            }\n        }\n        return Component.externalLibraries[name].ready;\n    };\n    Component.libraryReady = function (name) {\n        if (Component.externalLibraries.hasOwnProperty(name) && Component.externalLibraries[name].ready) {\n            return Component.externalLibraries[name].ready;\n        }\n        return NativePromise.reject(`${ name } library was not required.`);\n    };\n});"]}