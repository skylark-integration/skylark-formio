{"version":3,"sources":["components/_classes/multivalue/Multivalue.js"],"names":["define","Field","_","dataValue","parent","super","this","component","multiple","value","defaultValue","isArray","length","emptyValue","addAnother","t","[object Object]","hasOwnProperty","useWrapper","render","renderElement","Array","renderTemplate","rows","map","renderRow","bind","join","disabled","index","element","dom","superAttach","attach","loadRefs","addButton","input","removeRow","mask","select","refs","forEach","attachElement","removeButton","addEventListener","event","preventDefault","removeValue","addValue","destroy","widget","detach","inputInfo","changeEvent","textCase","get","selectionStart","selectionEnd","toUpperCase","toLowerCase","updateValue","modified","type","setTimeout","attachMultiMask","setInputMask","updateMask","target","maskInput","getMaskPattern","maskName","multiMasks","inputMasks","find","inputMask","label","isMultipleMasksField","maskSelect","onchange","onSelectMaskHandler","placeholder","undefined","concat","push","addNewValue","redraw","checkConditions","isEmpty","restoreValue","root","onChange"],"mappings":"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","file":"../../../../components/_classes/multivalue/Multivalue.js","sourcesContent":["define([\n    '../field/Field',\n    'skylark-lodash'\n], function (Field, _) {\n    'use strict';\n    return class Multivalue extends Field {\n        get dataValue() {\n            const parent = super.dataValue;\n            if (!parent && this.component.multiple) {\n                return [];\n            }\n            return parent;\n        }\n        set dataValue(value) {\n            super.dataValue = value;\n        }\n        get defaultValue() {\n            let value = super.defaultValue;\n            if (this.component.multiple) {\n                if (_.isArray(value)) {\n                    value = !value.length ? [super.emptyValue] : value;\n                } else {\n                    value = [value];\n                }\n            }\n            return value;\n        }\n        get addAnother() {\n            return this.t(this.component.addAnother || ' Add Another');\n        }\n        useWrapper() {\n            return this.component.hasOwnProperty('multiple') && this.component.multiple;\n        }\n        render() {\n            if (!this.useWrapper()) {\n                return super.render(`<div ref=\"element\">${ this.renderElement(this.dataValue) }</div>`);\n            }\n            let dataValue = this.dataValue;\n            if (!Array.isArray(dataValue)) {\n                dataValue = dataValue ? [dataValue] : [];\n            }\n            return super.render(this.renderTemplate('multiValueTable', {\n                rows: dataValue.map(this.renderRow.bind(this)).join(''),\n                disabled: this.disabled,\n                addAnother: this.addAnother\n            }));\n        }\n        renderElement() {\n            return '';\n        }\n        renderRow(value, index) {\n            return this.renderTemplate('multiValueRow', {\n                index,\n                disabled: this.disabled,\n                element: `${ this.renderElement(value, index) }`\n            });\n        }\n        attach(dom) {\n            const superAttach = super.attach(dom);\n            this.loadRefs(dom, {\n                addButton: 'multiple',\n                input: 'multiple',\n                removeRow: 'multiple',\n                mask: 'multiple',\n                select: 'multiple'\n            });\n            this.refs.input.forEach(this.attachElement.bind(this));\n            if (!this.component.multiple) {\n                return;\n            }\n            this.refs.removeRow.forEach((removeButton, index) => {\n                this.addEventListener(removeButton, 'click', event => {\n                    event.preventDefault();\n                    this.removeValue(index);\n                });\n            });\n            this.refs.addButton.forEach(addButton => {\n                this.addEventListener(addButton, 'click', event => {\n                    event.preventDefault();\n                    this.addValue();\n                });\n            });\n            return superAttach;\n        }\n        detach() {\n            if (this.refs.input && this.refs.input.length) {\n                this.refs.input.forEach(input => {\n                    if (input.mask) {\n                        input.mask.destroy();\n                    }\n                    if (input.widget) {\n                        input.widget.destroy();\n                    }\n                });\n            }\n            if (this.refs.mask && this.refs.mask.length) {\n                this.refs.mask.forEach(input => {\n                    if (input.mask) {\n                        input.mask.destroy();\n                    }\n                });\n            }\n            super.detach();\n        }\n        attachElement(element, index) {\n            this.addEventListener(element, this.inputInfo.changeEvent, () => {\n                const textCase = _.get(this.component, 'case', 'mixed');\n                if (textCase !== 'mixed') {\n                    const {selectionStart, selectionEnd} = element;\n                    if (textCase === 'uppercase' && element.value) {\n                        element.value = element.value.toUpperCase();\n                    }\n                    if (textCase === 'lowercase' && element.value) {\n                        element.value = element.value.toLowerCase();\n                    }\n                    if (element.selectionStart && element.selectionEnd) {\n                        element.selectionStart = selectionStart;\n                        element.selectionEnd = selectionEnd;\n                    }\n                }\n                if (element.mask) {\n                    setTimeout(() => {\n                        return this.updateValue(null, { modified: this.component.type !== 'hidden' }, index);\n                    }, 1);\n                } else {\n                    return this.updateValue(null, { modified: this.component.type !== 'hidden' }, index);\n                }\n            });\n            if (!this.attachMultiMask(index)) {\n                this.setInputMask(element);\n            }\n        }\n        onSelectMaskHandler(event) {\n            this.updateMask(event.target.maskInput, this.getMaskPattern(event.target.value));\n        }\n        getMaskPattern(maskName) {\n            if (!this.multiMasks) {\n                this.multiMasks = {};\n            }\n            if (this.multiMasks[maskName]) {\n                return this.multiMasks[maskName];\n            }\n            const mask = this.component.inputMasks.find(inputMask => inputMask.label === maskName);\n            this.multiMasks[maskName] = mask ? mask.mask : this.component.inputMasks[0].mask;\n            return this.multiMasks[maskName];\n        }\n        attachMultiMask(index) {\n            if (!(this.isMultipleMasksField && this.component.inputMasks.length && this.refs.input.length)) {\n                return false;\n            }\n            const maskSelect = this.refs.select[index];\n            maskSelect.onchange = this.onSelectMaskHandler.bind(this);\n            maskSelect.maskInput = this.refs.mask[index];\n            this.setInputMask(maskSelect.maskInput, this.component.inputMasks[0].mask);\n            return true;\n        }\n        updateMask(input, mask) {\n            if (!mask) {\n                return;\n            }\n            this.setInputMask(input, mask, !this.component.placeholder);\n            this.updateValue();\n        }\n        addNewValue(value) {\n            if (value === undefined) {\n                value = this.component.defaultValue ? this.component.defaultValue : this.emptyValue;\n                if (Array.isArray(value) && value.length === 0) {\n                    value = this.emptyValue;\n                }\n            }\n            let dataValue = this.dataValue || [];\n            if (!Array.isArray(dataValue)) {\n                dataValue = [dataValue];\n            }\n            if (Array.isArray(value)) {\n                dataValue = dataValue.concat(value);\n            } else {\n                dataValue.push(value);\n            }\n            this.dataValue = dataValue;\n        }\n        addValue() {\n            this.addNewValue();\n            this.redraw();\n            this.checkConditions();\n            if (!this.isEmpty(this.dataValue)) {\n                this.restoreValue();\n            }\n            if (this.root) {\n                this.root.onChange();\n            }\n        }\n    };\n});"]}