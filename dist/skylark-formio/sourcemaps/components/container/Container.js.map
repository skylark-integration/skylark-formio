{"version":3,"sources":["components/container/Container.js"],"names":["define","_","Component","NestedDataComponent","ContainerComponent","[object Object]","extend","schema","label","type","key","clearOnHide","input","tree","hideLabel","components","builderInfo","title","icon","group","documentation","weight","args","super","this","data","options","addComponents","dataValue","defaultSchema","emptyValue","templateName","value","flags","changed","hasValue","isEmpty","noValidate","isObject","defaultValue","setValue","updateOnChange","row","rootValue","getComponents","reduce","valid","comp","checkData","prototype","call"],"mappings":";;;;;;;AAAAA,QACI,iBACA,kCACA,8CACD,SAAUC,EAAGC,EAAWC,GACvB,aACA,aAAaC,UAA2BD,EACpCE,iBAAiBC,GACb,OAAOH,EAAoBI,QACvBC,MAAO,YACPC,KAAM,YACNC,IAAK,YACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,WAAW,EACXC,kBACET,GAEVU,yBACI,OACIC,MAAO,YACPC,KAAM,cACNC,MAAO,OACPC,cAAe,2CACfC,OAAQ,GACRd,OAAQH,EAAmBG,UAGnCF,eAAeiB,GACXC,SAASD,GACTE,KAAKf,KAAO,YAEhBJ,cAAcoB,EAAMC,GAChB,OAAOH,MAAMI,cAAcH,KAAKI,UAAWF,GAE/CG,oBACI,OAAOzB,EAAmBG,SAE9BuB,iBACI,SAEJC,mBACI,MAAO,YAEX1B,mBACI,OAAOmB,KAAKI,UAEhBvB,SAAS2B,EAAOC,MACZ,IAAIC,GAAU,EACd,MAAMC,EAAWX,KAAKW,WAUtB,OATIA,GAAYlC,EAAEmC,QAAQZ,KAAKI,aAC3BK,EAAMI,YAAa,GAElBL,GAAU/B,EAAEqC,SAASN,IAAWG,IACjCD,GAAU,EACVV,KAAKI,UAAYJ,KAAKe,cAE1BL,EAAUX,MAAMiB,SAASR,EAAOC,IAAUC,EAC1CV,KAAKiB,eAAeR,EAAOC,GACpBA,EAEX7B,UAAUoB,EAAMQ,EAAOS,EAAK3B,GAKxB,OAJAU,EAAOA,GAAQD,KAAKmB,UACpBV,EAAQA,MACRS,EAAMA,GAAOlB,KAAKC,MAClBV,EAAaA,GAAcS,KAAKoB,iBACdC,OAAO,CAACC,EAAOC,IACtBA,EAAKC,UAAUvB,EAAMQ,EAAOT,KAAKI,YAAckB,EACvD5C,EAAU+C,UAAUD,UAAUE,KAAK1B,KAAMC,EAAMQ,EAAOS","file":"../../../components/container/Container.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../_classes/component/Component',\n    '../_classes/nesteddata/NestedDataComponent'\n], function (_, Component, NestedDataComponent) {\n    'use strict';\n    return class ContainerComponent extends NestedDataComponent {\n        static schema(...extend) {\n            return NestedDataComponent.schema({\n                label: 'Container',\n                type: 'container',\n                key: 'container',\n                clearOnHide: true,\n                input: true,\n                tree: true,\n                hideLabel: true,\n                components: []\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Container',\n                icon: 'folder-open',\n                group: 'data',\n                documentation: 'http://help.form.io/userguide/#container',\n                weight: 10,\n                schema: ContainerComponent.schema()\n            };\n        }\n        constructor(...args) {\n            super(...args);\n            this.type = 'container';\n        }\n        addComponents(data, options) {\n            return super.addComponents(this.dataValue, options);\n        }\n        get defaultSchema() {\n            return ContainerComponent.schema();\n        }\n        get emptyValue() {\n            return {};\n        }\n        get templateName() {\n            return 'container';\n        }\n        componentContext() {\n            return this.dataValue;\n        }\n        setValue(value, flags = {}) {\n            let changed = false;\n            const hasValue = this.hasValue();\n            if (hasValue && _.isEmpty(this.dataValue)) {\n                flags.noValidate = true;\n            }\n            if (!value || !_.isObject(value) || !hasValue) {\n                changed = true;\n                this.dataValue = this.defaultValue;\n            }\n            changed = super.setValue(value, flags) || changed;\n            this.updateOnChange(flags, changed);\n            return changed;\n        }\n        checkData(data, flags, row, components) {\n            data = data || this.rootValue;\n            flags = flags || {};\n            row = row || this.data;\n            components = components || this.getComponents();\n            return components.reduce((valid, comp) => {\n                return comp.checkData(data, flags, this.dataValue) && valid;\n            }, Component.prototype.checkData.call(this, data, flags, row));\n        }\n    };\n});"]}