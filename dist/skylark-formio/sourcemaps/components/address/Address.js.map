{"version":3,"sources":["components/address/Address.js"],"names":["define","autocompleter","_","Formio","GoogleAddressProvider","Field","NestedComponent","ContainerComponent","AddressComponentMode","ChildConditional","AddressComponent","[object Object]","extend","schema","type","label","key","switchToManualModeLabel","provider","providerOptions","manualModeViewString","hideLabel","disableClearIcon","enableManualMode","components","tableView","input","customConditional","builderInfo","title","group","icon","documentation","weight","component","defaultSchema","this","omit","defaultsDeep","builderMode","manualModeEnabled","prototype","addComponents","call","manualMode","address","init","initializeProvider","map","name","region","set","options","Providers","getProvider","emptyValue","mode","dataValue","value","autocompleteMode","Boolean","getComponents","forEach","data","setValue","noUpdateEvent","isValueInLegacyFormat","flags","changed","restoreComponentsContext","redraw","modeSwitcherRef","removeValueIconRef","searchInputRef","modeSwitcher","refs","removeValueIcon","searchInput","searchInputAttributes","attr","class","lang","language","tabindex","placeholder","t","disabled","defaults","attributes","templateName","super","render","renderTemplate","children","renderComponents","nestedKey","inputAttributes","ref","displayValue","getDisplayValue","autocomplete","manual","element","result","attach","loadRefs","debounceWaitMs","fetch","text","update","query","search","then","div","ce","textContent","onSelect","triggerChange","modified","updateRemoveIcon","addEventListener","clearAddress","checked","removeValueHandler","focus","modeSwitcherInFocus","document","activeElement","isEmpty","addClass","removeClass","normalizedValue","normalizeValue","valueInManualMode","interpolate","filter","hasValue","get","componentValue","getValueAsString","join"],"mappings":"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","file":"../../../components/address/Address.js","sourcesContent":["define([\n    '../../vendors/kraaden/autocompleter',\n    'skylark-lodash',\n    '../../Formio',\n    '../../providers/address/GoogleAddressProvider',\n    '../_classes/field/Field',\n    '../_classes/nested/NestedComponent',\n    '../container/Container'\n], function (autocompleter, _, Formio, GoogleAddressProvider, Field, NestedComponent, ContainerComponent) {\n    'use strict';\n    const AddressComponentMode = {\n        Autocomplete: 'autocomplete',\n        Manual: 'manual'\n    };\n    const RemoveValueIconHiddenClass = 'address-autocomplete-remove-value-icon--hidden';\n    const ChildConditional = \"show = _.get(instance, 'parent.manualMode', false);\";\n    return class AddressComponent extends ContainerComponent {\n        static schema(...extend) {\n            return ContainerComponent.schema({\n                type: 'address',\n                label: 'Address',\n                key: 'address',\n                switchToManualModeLabel: \"Can't find address? Switch to manual mode.\",\n                provider: '',\n                providerOptions: {},\n                manualModeViewString: '',\n                hideLabel: false,\n                disableClearIcon: false,\n                enableManualMode: false,\n                components: [\n                    {\n                        label: 'Address 1',\n                        tableView: false,\n                        key: 'address1',\n                        type: 'textfield',\n                        input: true,\n                        customConditional: ChildConditional\n                    },\n                    {\n                        label: 'Address 2',\n                        tableView: false,\n                        key: 'address2',\n                        type: 'textfield',\n                        input: true,\n                        customConditional: ChildConditional\n                    },\n                    {\n                        label: 'City',\n                        tableView: false,\n                        key: 'city',\n                        type: 'textfield',\n                        input: true,\n                        customConditional: ChildConditional\n                    },\n                    {\n                        label: 'State',\n                        tableView: false,\n                        key: 'state',\n                        type: 'textfield',\n                        input: true,\n                        customConditional: ChildConditional\n                    },\n                    {\n                        label: 'Country',\n                        tableView: false,\n                        key: 'country',\n                        type: 'textfield',\n                        input: true,\n                        customConditional: ChildConditional\n                    },\n                    {\n                        label: 'Zip Code',\n                        tableView: false,\n                        key: 'zip',\n                        type: 'textfield',\n                        input: true,\n                        customConditional: ChildConditional\n                    }\n                ]\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Address',\n                group: 'advanced',\n                icon: 'home',\n                documentation: 'http://help.form.io/userguide/#address',\n                weight: 35,\n                schema: AddressComponent.schema()\n            };\n        }\n        mergeSchema(component = {}) {\n            let {defaultSchema} = this;\n            if (component.components) {\n                defaultSchema = _.omit(defaultSchema, 'components');\n            }\n            return _.defaultsDeep(component, defaultSchema);\n        }\n        init() {\n            this.components = this.components || [];\n            if (this.builderMode || this.manualModeEnabled) {\n                NestedComponent.prototype.addComponents.call(this, this.manualMode ? this.address : {});\n            }\n            Field.prototype.init.call(this);\n            if (!this.builderMode) {\n                if (this.component.provider) {\n                    const {provider, providerOptions} = this.component;\n                    this.provider = this.initializeProvider(provider, providerOptions);\n                } else if (this.component.map) {\n                    this.component.provider = GoogleAddressProvider.name;\n                    this.component.providerOptions = this.component.providerOptions || {};\n                    const {map, provider, providerOptions} = this.component;\n                    const {key, region} = map;\n                    if (key) {\n                        _.set(providerOptions, 'params.key', key);\n                    }\n                    if (region) {\n                        _.set(providerOptions, 'params.region', region);\n                    }\n                    this.provider = this.initializeProvider(provider, providerOptions);\n                }\n            }\n        }\n        initializeProvider(provider, options = {}) {\n            const Provider = Formio.Providers.getProvider('address', provider);\n            return new Provider(options);\n        }\n        get emptyValue() {\n            return this.manualModeEnabled ? {\n                mode: AddressComponentMode.Autocomplete,\n                address: {}\n            } : {};\n        }\n        get mode() {\n            return this.manualModeEnabled ? this.dataValue ? this.dataValue.mode : this.dataValue : AddressComponentMode.Autocomplete;\n        }\n        set mode(value) {\n            if (this.manualModeEnabled) {\n                this.dataValue.mode = value;\n            }\n        }\n        get autocompleteMode() {\n            return this.mode === AddressComponentMode.Autocomplete;\n        }\n        get manualMode() {\n            return this.mode === AddressComponentMode.Manual;\n        }\n        get manualModeEnabled() {\n            return Boolean(this.component.enableManualMode);\n        }\n        restoreComponentsContext() {\n            this.getComponents().forEach(component => {\n                component.data = this.address;\n                component.setValue(component.dataValue, { noUpdateEvent: true });\n            });\n        }\n        get address() {\n            return this.manualModeEnabled && this.dataValue ? this.dataValue.address : this.dataValue;\n        }\n        set address(value) {\n            if (this.manualModeEnabled) {\n                this.dataValue.address = value;\n            } else {\n                this.dataValue = value;\n            }\n        }\n        get defaultSchema() {\n            return AddressComponent.schema();\n        }\n        isValueInLegacyFormat(value) {\n            return value && !value.mode;\n        }\n        normalizeValue(value) {\n            return this.manualModeEnabled && this.isValueInLegacyFormat(value) ? {\n                mode: AddressComponentMode.Autocomplete,\n                address: value\n            } : value;\n        }\n        setValue(value, flags = {}) {\n            const changed = Field.prototype.setValue.call(this, value, flags);\n            if (this.manualMode) {\n                this.restoreComponentsContext();\n            }\n            if (changed) {\n                this.redraw();\n            }\n            return changed;\n        }\n        static get modeSwitcherRef() {\n            return 'modeSwitcher';\n        }\n        static get removeValueIconRef() {\n            return 'removeValueIcon';\n        }\n        static get searchInputRef() {\n            return 'searchInput';\n        }\n        get modeSwitcher() {\n            return this.refs ? this.refs[AddressComponent.modeSwitcherRef] || null : null;\n        }\n        get removeValueIcon() {\n            return this.refs ? this.refs[AddressComponent.removeValueIconRef] || null : null;\n        }\n        get searchInput() {\n            return this.refs ? this.refs[AddressComponent.searchInputRef] || null : null;\n        }\n        get searchInputAttributes() {\n            const attr = {\n                name: this.options.name,\n                type: 'text',\n                class: 'form-control',\n                lang: this.options.language,\n                tabindex: this.component.tabindex || 0\n            };\n            if (this.component.placeholder) {\n                attr.placeholder = this.t(this.component.placeholder);\n            }\n            if (this.disabled) {\n                attr.disabled = 'disabled';\n            }\n            _.defaults(attr, this.component.attributes);\n            return attr;\n        }\n        get templateName() {\n            return 'address';\n        }\n        render() {\n            return super.render(this.renderTemplate(this.templateName, {\n                children: this.builderMode || this.manualModeEnabled ? this.renderComponents() : '',\n                nestedKey: this.nestedKey,\n                inputAttributes: this.searchInputAttributes,\n                ref: {\n                    modeSwitcher: AddressComponent.modeSwitcherRef,\n                    removeValueIcon: AddressComponent.removeValueIconRef,\n                    searchInput: AddressComponent.searchInputRef\n                },\n                displayValue: this.getDisplayValue(),\n                mode: {\n                    autocomplete: this.autocompleteMode,\n                    manual: this.manualMode\n                }\n            }));\n        }\n        attach(element) {\n            const result = (this.builderMode || this.manualMode ? super.attach : Field.prototype.attach).call(this, element);\n            if (!this.builderMode) {\n                if (!this.provider && this.component.provider) {\n                    const {provider, providerOptions} = this.component;\n                    this.provider = this.initializeProvider(provider, providerOptions);\n                }\n            }\n            this.loadRefs(element, {\n                [AddressComponent.modeSwitcherRef]: 'single',\n                [AddressComponent.removeValueIconRef]: 'single',\n                [AddressComponent.searchInputRef]: 'single'\n            });\n            if (!this.builderMode && this.searchInput && this.provider) {\n                autocompleter({\n                    input: this.searchInput,\n                    debounceWaitMs: 300,\n                    fetch: (text, update) => {\n                        const query = text;\n                        this.provider.search(query).then(update);\n                    },\n                    render: address => {\n                        const div = this.ce('div');\n                        div.textContent = this.getDisplayValue(address);\n                        return div;\n                    },\n                    onSelect: address => {\n                        this.address = address;\n                        this.triggerChange({ modified: true });\n                        if (this.searchInput) {\n                            this.searchInput.value = this.getDisplayValue();\n                        }\n                        this.updateRemoveIcon();\n                    }\n                });\n                this.addEventListener(this.searchInput, 'blur', () => {\n                    if (!this.searchInput) {\n                        return;\n                    }\n                    if (this.searchInput.value) {\n                        this.searchInput.value = this.getDisplayValue();\n                    }\n                });\n                this.addEventListener(this.searchInput, 'keyup', () => {\n                    if (!this.searchInput) {\n                        return;\n                    }\n                    if (!this.searchInput.value) {\n                        this.clearAddress();\n                    }\n                });\n            }\n            if (this.modeSwitcher) {\n                this.addEventListener(this.modeSwitcher, 'change', () => {\n                    if (!this.modeSwitcher) {\n                        return;\n                    }\n                    this.dataValue = this.emptyValue;\n                    this.mode = this.modeSwitcher.checked ? AddressComponentMode.Manual : AddressComponentMode.Autocomplete;\n                    if (!this.builderMode) {\n                        if (this.manualMode) {\n                            this.restoreComponentsContext();\n                        }\n                        this.triggerChange({ modified: true });\n                    }\n                    this.redraw();\n                });\n            }\n            if (!this.builderMode && this.removeValueIcon) {\n                this.updateRemoveIcon();\n                const removeValueHandler = () => {\n                    this.clearAddress();\n                    this.focus();\n                };\n                this.addEventListener(this.removeValueIcon, 'click', removeValueHandler);\n                this.addEventListener(this.removeValueIcon, 'keydown', ({key}) => {\n                    if (key === 'Enter') {\n                        removeValueHandler();\n                    }\n                });\n            }\n            return result;\n        }\n        addChildComponent(component) {\n            component.customConditional = ChildConditional;\n        }\n        redraw() {\n            const modeSwitcherInFocus = this.modeSwitcher && document.activeElement === this.modeSwitcher;\n            return super.redraw().then(result => {\n                if (modeSwitcherInFocus && this.modeSwitcher) {\n                    this.modeSwitcher.focus();\n                }\n                return result;\n            });\n        }\n        clearAddress() {\n            if (!this.isEmpty()) {\n                this.triggerChange();\n            }\n            this.dataValue = this.emptyValue;\n            if (this.searchInput) {\n                this.searchInput.value = '';\n            }\n            this.updateRemoveIcon();\n        }\n        getDisplayValue(value = this.address) {\n            return this.provider && !this.manualMode ? this.provider.getDisplayValue(value) : '';\n        }\n        validateMultiple() {\n            return false;\n        }\n        updateRemoveIcon() {\n            if (this.removeValueIcon) {\n                if (this.isEmpty() || this.disabled) {\n                    this.addClass(this.removeValueIcon, RemoveValueIconHiddenClass);\n                } else {\n                    this.removeClass(this.removeValueIcon, RemoveValueIconHiddenClass);\n                }\n            }\n        }\n        getValueAsString(value) {\n            if (!value) {\n                return '';\n            }\n            const normalizedValue = this.normalizeValue(value);\n            const {address, mode} = this.manualModeEnabled ? normalizedValue : {\n                address: normalizedValue,\n                mode: AddressComponentMode.Autocomplete\n            };\n            const valueInManualMode = mode === AddressComponentMode.Manual;\n            if (this.provider && !valueInManualMode) {\n                return this.getDisplayValue(address);\n            }\n            if (valueInManualMode) {\n                if (this.component.manualModeViewString) {\n                    return this.interpolate(this.component.manualModeViewString, {\n                        address,\n                        data: this.data,\n                        component: this.component\n                    });\n                }\n                return this.getComponents().filter(component => component.hasValue(address)).map(component => [\n                    component,\n                    _.get(address, component.key)\n                ]).filter(([component, componentValue]) => !component.isEmpty(componentValue)).map(([component, componentValue]) => component.getValueAsString(componentValue)).join(', ');\n            }\n            return super.getValueAsString(address);\n        }\n        focus() {\n            if (this.searchInput) {\n                this.searchInput.focus();\n            }\n        }\n    };\n});"]}