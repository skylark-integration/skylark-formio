{"version":3,"sources":["components/form/Form.js"],"names":["define","_","Component","EventEmitter","NativePromise","a","Formio","Form","FormComponent","[object Object]","extend","schema","label","type","key","src","reference","form","path","tableView","builderInfo","title","icon","group","documentation","weight","super","init","this","formObj","display","component","settings","components","subForm","formSrc","options","formio","project","getBaseUrl","isMongoId","getProjectUrl","rootSrc","formsUrl","parts","split","pop","join","revision","dataReady","subFormReady","resolve","defaultValue","defaultSchema","emptyValue","data","ready","base","readOnly","breadcrumbSettings","buttonSettings","clone","viewAsHtml","language","template","templates","renderMode","attachMode","iconset","events","createEmitter","set","builderMode","render","subform","renderTemplate","value","getValueAsString","_id","Object","keys","length","element","attach","then","createSubForm","empty","builder","setContent","ce","class","text","detach","currentForm","_currentForm","instance","getComponents","forEach","destroy","redraw","args","everyComponent","loadSubForm","eachComponent","action","hidden","getSubOptions","parent","parentVisible","visible","on","dataValue","getValue","triggerChange","noEmit","url","nosubmit","root","restoreValue","isHidden","Array","isArray","config","loadForm","params","live","dirty","row","checkValidity","checkComponentValidity","flags","checkComponentConditions","hasCondition","checkConditions","calculateValue","pristine","setPristine","shouldSubmit","hasOwnProperty","get","getSubmission","rejectOnError","submitForm","result","loading","submission","catch","err","onSubmissionError","reject","getSubFormData","next","submitSubForm","beforePage","beforeSubmit","rootValue","changed","setValue","isEmpty","submissionUrl","setUrl","loadSubmission","errors","concat","updateSubFormVisibility","event","emitter","wildcard","maxListeners","nativeEmit","emit","that","eventType","replace","namespace","call","isInternalEvent","noUpdateEvent","noDefault","unset"],"mappings":"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","file":"../../../components/form/Form.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../_classes/component/Component',\n    '../../vendors/eventemitter2/EventEmitter2',\n    '../../vendors/getify/npo',\n    '../../utils/utils',\n    '../../Formio',\n    '../../Form'\n], function (_, Component, EventEmitter, NativePromise, a, Formio, Form) {\n    'use strict';\n    return class FormComponent extends Component {\n        static schema(...extend) {\n            return Component.schema({\n                label: 'Form',\n                type: 'form',\n                key: 'form',\n                src: '',\n                reference: true,\n                form: '',\n                path: '',\n                tableView: true\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Nested Form',\n                icon: 'wpforms',\n                group: 'premium',\n                documentation: 'http://help.form.io/userguide/#form',\n                weight: 110,\n                schema: FormComponent.schema()\n            };\n        }\n        init() {\n            super.init();\n            this.formObj = {\n                display: this.component.display,\n                settings: this.component.settings,\n                components: this.component.components\n            };\n            this.subForm = null;\n            this.formSrc = '';\n            if (this.component.src) {\n                this.formSrc = this.component.src;\n            }\n            if (!this.component.src && !this.options.formio && (this.component.form || this.component.path)) {\n                if (this.component.project) {\n                    this.formSrc = Formio.getBaseUrl();\n                    if (a.isMongoId(this.component.project)) {\n                        this.formSrc += '/project';\n                    }\n                    this.formSrc += `/${ this.component.project }`;\n                    this.options.project = this.formSrc;\n                } else {\n                    this.formSrc = Formio.getProjectUrl();\n                    this.options.project = this.formSrc;\n                }\n                if (this.component.form) {\n                    this.formSrc += `/form/${ this.component.form }`;\n                } else if (this.component.path) {\n                    this.formSrc += `/${ this.component.path }`;\n                }\n            }\n            if (!this.formSrc && this.options.formio) {\n                const rootSrc = this.options.formio.formsUrl;\n                if (this.component.path) {\n                    const parts = rootSrc.split('/');\n                    parts.pop();\n                    this.formSrc = `${ parts.join('/') }/${ this.component.path }`;\n                }\n                if (this.component.form) {\n                    this.formSrc = `${ rootSrc }/${ this.component.form }`;\n                }\n            }\n            if (this.component.revision || this.component.revision === 0) {\n                this.formSrc += `/v/${ this.component.revision }`;\n            }\n        }\n        get dataReady() {\n            return this.subFormReady || NativePromise.resolve();\n        }\n        get defaultValue() {\n            return this.subForm ? super.defaultValue : null;\n        }\n        get defaultSchema() {\n            return FormComponent.schema();\n        }\n        get emptyValue() {\n            return { data: {} };\n        }\n        get ready() {\n            return this.subFormReady || NativePromise.resolve();\n        }\n        getSubOptions(options = {}) {\n            if (!this.options) {\n                return options;\n            }\n            if (this.options.base) {\n                options.base = this.options.base;\n            }\n            if (this.options.project) {\n                options.project = this.options.project;\n            }\n            if (this.options.readOnly) {\n                options.readOnly = this.options.readOnly;\n            }\n            if (this.options.breadcrumbSettings) {\n                options.breadcrumbSettings = this.options.breadcrumbSettings;\n            }\n            if (this.options.buttonSettings) {\n                options.buttonSettings = _.clone(this.options.buttonSettings);\n            }\n            if (this.options.viewAsHtml) {\n                options.viewAsHtml = this.options.viewAsHtml;\n            }\n            if (this.options.language) {\n                options.language = this.options.language;\n            }\n            if (this.options.template) {\n                options.template = this.options.template;\n            }\n            if (this.options.templates) {\n                options.templates = this.options.templates;\n            }\n            if (this.options.renderMode) {\n                options.renderMode = this.options.renderMode;\n            }\n            if (this.options.attachMode) {\n                options.attachMode = this.options.attachMode;\n            }\n            if (this.options.iconset) {\n                options.iconset = this.options.iconset;\n            }\n            options.events = this.createEmitter();\n            _.set(options, 'buttonSettings.showSubmit', false);\n            return options;\n        }\n        render() {\n            if (this.builderMode) {\n                return super.render(this.component.label || 'Nested form');\n            }\n            const subform = this.subForm ? this.subForm.render() : this.renderTemplate('loading');\n            return super.render(subform);\n        }\n        asString(value) {\n            return this.getValueAsString(value);\n        }\n        getValueAsString(value) {\n            if (!value) {\n                return 'No data provided';\n            }\n            if (!value.data && value._id) {\n                return value._id;\n            }\n            if (!value.data || !Object.keys(value.data).length) {\n                return 'No data provided';\n            }\n            return '[Complex Data]';\n        }\n        attach(element) {\n            if (this.builderMode) {\n                return super.attach(element);\n            }\n            return super.attach(element).then(() => this.createSubForm()).then(() => {\n                this.empty(element);\n                if (this.options.builder) {\n                    this.setContent(element, this.ce('div', { class: 'text-muted text-center p-2' }, this.text(this.formObj.title)));\n                    return;\n                }\n                this.setContent(element, this.render());\n                if (this.subForm) {\n                    this.subForm.attach(element);\n                }\n            });\n        }\n        detach() {\n            if (this.subForm) {\n                this.subForm.detach();\n            }\n            super.detach();\n        }\n        get currentForm() {\n            return this._currentForm;\n        }\n        set currentForm(instance) {\n            this._currentForm = instance;\n            if (!this.subForm) {\n                return;\n            }\n            this.subForm.getComponents().forEach(component => {\n                component.currentForm = this;\n            });\n        }\n        destroy() {\n            if (this.subForm) {\n                this.subForm.destroy();\n                this.subForm = null;\n                this.subFormReady = null;\n            }\n            super.destroy();\n        }\n        redraw() {\n            if (this.subForm) {\n                this.subForm.form = this.formObj;\n            }\n            return super.redraw();\n        }\n        everyComponent(...args) {\n            if (this.subForm) {\n                this.subForm.everyComponent(...args);\n            }\n        }\n        createSubForm() {\n            this.subFormReady = this.loadSubForm().then(form => {\n                if (!form) {\n                    return;\n                }\n                a.eachComponent(form.components, component => {\n                    if (component.type === 'button' && (component.action === 'submit' || !component.action)) {\n                        component.hidden = true;\n                    }\n                });\n                if (this.subForm) {\n                    this.subForm.destroy();\n                }\n                return new Form(form, this.getSubOptions()).ready.then(instance => {\n                    this.subForm = instance;\n                    this.subForm.currentForm = this;\n                    this.subForm.parent = this;\n                    this.subForm.parentVisible = this.visible;\n                    this.subForm.on('change', () => {\n                        if (this.subForm) {\n                            this.dataValue = this.subForm.getValue();\n                            this.triggerChange({ noEmit: true });\n                        }\n                    });\n                    this.subForm.url = this.formSrc;\n                    this.subForm.nosubmit = true;\n                    this.subForm.root = this.root;\n                    this.restoreValue();\n                    return this.subForm;\n                });\n            });\n            return this.subFormReady;\n        }\n        loadSubForm() {\n            if (this.builderMode || this.isHidden()) {\n                return NativePromise.resolve();\n            }\n            if (this.formObj && this.formObj.components && Array.isArray(this.formObj.components) && this.formObj.components.length) {\n                if (this.root && this.root.form && this.root.form.config && !this.formObj.config) {\n                    this.formObj.config = this.root.form.config;\n                }\n                return NativePromise.resolve(this.formObj);\n            } else if (this.formSrc) {\n                return new Formio(this.formSrc).loadForm({ params: { live: 1 } }).then(formObj => {\n                    this.formObj = formObj;\n                    return formObj;\n                });\n            }\n            return NativePromise.resolve();\n        }\n        checkComponentValidity(data, dirty, row) {\n            if (this.subForm) {\n                return this.subForm.checkValidity(this.dataValue.data, dirty);\n            }\n            return super.checkComponentValidity(data, dirty, row);\n        }\n        checkComponentConditions(data, flags, row) {\n            const visible = super.checkComponentConditions(data, flags, row);\n            if (!visible) {\n                return visible;\n            }\n            if (this.subForm && this.subForm.hasCondition()) {\n                return this.subForm.checkConditions(this.dataValue.data);\n            }\n            return visible;\n        }\n        calculateValue(data, flags, row) {\n            if (this.subForm) {\n                return this.subForm.calculateValue(this.dataValue.data, flags);\n            }\n            return super.calculateValue(data, flags, row);\n        }\n        setPristine(pristine) {\n            super.setPristine(pristine);\n            if (this.subForm) {\n                this.subForm.setPristine(pristine);\n            }\n        }\n        get shouldSubmit() {\n            return this.subFormReady && (!this.component.hasOwnProperty('reference') || this.component.reference) && !this.isHidden();\n        }\n        getSubFormData() {\n            if (_.get(this.subForm, 'form.display') === 'pdf') {\n                return this.subForm.getSubmission();\n            } else {\n                return NativePromise.resolve(this.dataValue);\n            }\n        }\n        submitSubForm(rejectOnError) {\n            if (this.shouldSubmit) {\n                const subFormReady = this.subFormReady || this.createSubForm();\n                return subFormReady.then(() => {\n                    if (!this.subForm) {\n                        return this.dataValue;\n                    }\n                    this.subForm.nosubmit = false;\n                    return this.subForm.submitForm().then(result => {\n                        this.subForm.loading = false;\n                        this.dataValue = result.submission;\n                        return this.dataValue;\n                    }).catch(err => {\n                        if (rejectOnError) {\n                            this.subForm.onSubmissionError(err);\n                            return NativePromise.reject(err);\n                        } else {\n                            return {};\n                        }\n                    });\n                });\n            }\n            return this.getSubFormData();\n        }\n        beforePage(next) {\n            return this.submitSubForm(true).then(() => super.beforePage(next));\n        }\n        beforeSubmit() {\n            const submission = this.dataValue;\n            if (submission && submission._id && submission.form) {\n                this.dataValue = submission;\n                return NativePromise.resolve(this.dataValue);\n            }\n            return this.submitSubForm(false).then(() => {\n                return this.dataValue;\n            }).then(() => super.beforeSubmit());\n        }\n        isHidden() {\n            if (!this.visible) {\n                return true;\n            }\n            return !super.checkConditions(this.rootValue);\n        }\n        setValue(submission, flags = {}) {\n            const changed = super.setValue(submission, flags);\n            if (this.subForm) {\n                if (submission && submission._id && this.subForm.formio && _.isEmpty(submission.data)) {\n                    const submissionUrl = `${ this.subForm.formio.formsUrl }/${ submission.form }/submission/${ submission._id }`;\n                    this.subForm.setUrl(submissionUrl, this.options);\n                    this.subForm.loadSubmission();\n                } else {\n                    this.subForm.setValue(submission, flags);\n                }\n            }\n            return changed;\n        }\n        getValue() {\n            if (this.subForm) {\n                return this.subForm.getValue();\n            }\n            return this.dataValue;\n        }\n        get errors() {\n            let errors = super.errors;\n            if (this.subForm) {\n                errors = errors.concat(this.subForm.errors);\n            }\n            return errors;\n        }\n        updateSubFormVisibility() {\n            if (this.subForm) {\n                this.subForm.parentVisible = this.visible;\n            }\n        }\n        get visible() {\n            return super.visible;\n        }\n        set visible(value) {\n            super.visible = value;\n            this.updateSubFormVisibility();\n        }\n        get parentVisible() {\n            return super.parentVisible;\n        }\n        set parentVisible(value) {\n            super.parentVisible = value;\n            this.updateSubFormVisibility();\n        }\n        isInternalEvent(event) {\n            switch (event) {\n            case 'focus':\n            case 'blur':\n            case 'componentChange':\n            case 'componentError':\n            case 'error':\n            case 'formLoad':\n            case 'languageChanged':\n            case 'render':\n            case 'checkValidity':\n            case 'initialized':\n            case 'submit':\n            case 'submitButton':\n            case 'nosubmit':\n            case 'updateComponent':\n            case 'submitDone':\n            case 'submissionDeleted':\n            case 'requestDone':\n            case 'nextPage':\n            case 'prevPage':\n            case 'wizardNavigationClicked':\n            case 'updateWizardNav':\n            case 'restoreDraft':\n            case 'saveDraft':\n            case 'saveComponent':\n            case 'pdfUploaded':\n                return true;\n            default:\n                return false;\n            }\n        }\n        createEmitter() {\n            const emitter = new EventEmitter({\n                wildcard: false,\n                maxListeners: 0\n            });\n            const nativeEmit = emitter.emit;\n            const that = this;\n            emitter.emit = function (event, ...args) {\n                const eventType = event.replace(`${ that.options.namespace }.`, '');\n                nativeEmit.call(this, event, ...args);\n                if (!that.isInternalEvent(eventType)) {\n                    that.emit(eventType, ...args);\n                }\n            };\n            return emitter;\n        }\n        deleteValue() {\n            super.setValue(null, {\n                noUpdateEvent: true,\n                noDefault: true\n            });\n            this.unset();\n        }\n    };\n});"]}