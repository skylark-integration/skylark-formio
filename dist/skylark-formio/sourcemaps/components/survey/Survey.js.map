{"version":3,"sources":["components/survey/Survey.js"],"names":["define","_","Field","a","SurveyComponent","[object Object]","extend","schema","type","label","key","questions","values","builderInfo","title","group","icon","weight","documentation","defaultSchema","super","render","this","renderTemplate","element","loadRefs","input","superAttach","attach","refs","forEach","disabled","setAttribute","addEventListener","updateValue","modified","setValue","dataValue","value","flags","each","component","question","name","getInputName","checked","emptyValue","viewOnly","length","setting","boolValue","reduce","result","Boolean","options"],"mappings":";;;;;;;AAAAA,QACI,iBACA,0BACA,qBACD,SAAUC,EAAGC,EAAOC,GACnB,aACA,aAAaC,UAAwBF,EACjCG,iBAAiBC,GACb,OAAOJ,EAAMK,QACTC,KAAM,SACNC,MAAO,SACPC,IAAK,SACLC,aACAC,cACEN,GAEVO,yBACI,OACIC,MAAO,SACPC,MAAO,WACPC,KAAM,OACNC,OAAQ,IACRC,cAAe,wCACfX,OAAQH,EAAgBG,UAGhCY,oBACI,OAAOf,EAAgBG,SAE3BF,SACI,OAAOe,MAAMC,OAAOC,KAAKC,eAAe,WAE5ClB,OAAOmB,GACHF,KAAKG,SAASD,GAAWE,MAAO,aAChC,MAAMC,EAAcP,MAAMQ,OAAOJ,GASjC,OARAF,KAAKO,KAAKH,MAAMI,QAAQJ,IAChBJ,KAAKS,SACLL,EAAMM,aAAa,WAAY,YAE/BV,KAAKW,iBAAiBP,EAAO,SAAU,IAAMJ,KAAKY,YAAY,MAAQC,UAAU,OAGxFb,KAAKc,SAASd,KAAKe,WACZV,EAEXtB,SAASiC,EAAOC,MACZ,QAAKD,IAGLrC,EAAEuC,KAAKlB,KAAKmB,UAAU9B,UAAW+B,IAC7BzC,EAAEuC,KAAKlB,KAAKO,KAAKH,MAAOA,IAChBA,EAAMiB,OAASrB,KAAKsB,aAAaF,KACjChB,EAAMmB,QAAUnB,EAAMY,QAAUA,EAAMI,EAASJ,YAIpDhB,KAAKY,YAAYI,EAAOC,IAEnCO,iBACI,SAEJzC,WACI,GAAIiB,KAAKyB,WAAazB,KAAKO,KAAKH,QAAUJ,KAAKO,KAAKH,MAAMsB,OACtD,OAAO1B,KAAKe,UAEhB,MAAMC,KASN,OARArC,EAAEuC,KAAKlB,KAAKmB,UAAU9B,UAAW+B,IAC7BzC,EAAEuC,KAAKlB,KAAKO,KAAKH,MAAOA,IACpB,GAAIA,EAAMmB,SAAWnB,EAAMiB,OAASrB,KAAKsB,aAAaF,GAElD,OADAJ,EAAMI,EAASJ,OAASZ,EAAMY,OACvB,MAIZA,EAEXP,aAAaA,GACTX,MAAMW,SAAWA,EACjB9B,EAAEuC,KAAKlB,KAAKO,KAAKH,MAAOA,IACpBA,EAAMK,UAAW,IAGzBA,eACI,OAAOX,MAAMW,SAEjB1B,iBAAiB4C,EAASX,GACtB,OAAKnC,EAAE+C,UAAUD,IAGV3B,KAAKmB,UAAU9B,UAAUwC,OAAO,CAACC,EAAQV,IAAaU,GAAUC,QAAQf,EAAMI,EAASJ,SAAS,GAE3GjC,aAAaqC,GACT,SAAWpB,KAAKgC,QAAQX,QAAUD,EAASJ","file":"../../../components/survey/Survey.js","sourcesContent":["define([\n    'skylark-lodash',\n    '../_classes/field/Field',\n    '../../utils/utils'\n], function (_, Field, a) {\n    'use strict';\n    return class SurveyComponent extends Field {\n        static schema(...extend) {\n            return Field.schema({\n                type: 'survey',\n                label: 'Survey',\n                key: 'survey',\n                questions: [],\n                values: []\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Survey',\n                group: 'advanced',\n                icon: 'list',\n                weight: 110,\n                documentation: 'http://help.form.io/userguide/#survey',\n                schema: SurveyComponent.schema()\n            };\n        }\n        get defaultSchema() {\n            return SurveyComponent.schema();\n        }\n        render() {\n            return super.render(this.renderTemplate('survey'));\n        }\n        attach(element) {\n            this.loadRefs(element, { input: 'multiple' });\n            const superAttach = super.attach(element);\n            this.refs.input.forEach(input => {\n                if (this.disabled) {\n                    input.setAttribute('disabled', 'disabled');\n                } else {\n                    this.addEventListener(input, 'change', () => this.updateValue(null, { modified: true }));\n                }\n            });\n            this.setValue(this.dataValue);\n            return superAttach;\n        }\n        setValue(value, flags = {}) {\n            if (!value) {\n                return false;\n            }\n            _.each(this.component.questions, question => {\n                _.each(this.refs.input, input => {\n                    if (input.name === this.getInputName(question)) {\n                        input.checked = input.value === value[question.value];\n                    }\n                });\n            });\n            return this.updateValue(value, flags);\n        }\n        get emptyValue() {\n            return {};\n        }\n        getValue() {\n            if (this.viewOnly || !this.refs.input || !this.refs.input.length) {\n                return this.dataValue;\n            }\n            const value = {};\n            _.each(this.component.questions, question => {\n                _.each(this.refs.input, input => {\n                    if (input.checked && input.name === this.getInputName(question)) {\n                        value[question.value] = input.value;\n                        return false;\n                    }\n                });\n            });\n            return value;\n        }\n        set disabled(disabled) {\n            super.disabled = disabled;\n            _.each(this.refs.input, input => {\n                input.disabled = true;\n            });\n        }\n        get disabled() {\n            return super.disabled;\n        }\n        validateRequired(setting, value) {\n            if (!a.boolValue(setting)) {\n                return true;\n            }\n            return this.component.questions.reduce((result, question) => result && Boolean(value[question.value]), true);\n        }\n        getInputName(question) {\n            return `${ this.options.name }[${ question.value }]`;\n        }\n    };\n});"]}