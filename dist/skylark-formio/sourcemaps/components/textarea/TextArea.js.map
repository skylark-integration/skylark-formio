{"version":3,"sources":["components/textarea/TextArea.js"],"names":["define","TextFieldComponent","_","NativePromise","a","TextAreaComponent","[object Object]","extend","schema","type","label","key","rows","wysiwyg","editor","inputFormat","validate","minWords","maxWords","builderInfo","title","group","icon","documentation","weight","super","init","this","editors","editorsReady","updateSizes","options","submitOnEnter","defaultSchema","inputInfo","info","component","attr","isJsonValue","value","index","content","readOnly","disabled","renderTemplate","children","nestedKey","input","autoExpand","newValue","getConvertedValue","removeBlanks","dataValue","multiple","Array","isArray","newArray","clone","isEqual","isEmpty","updateValue","modified","autoModified","element","isPlain","htmlView","nodeName","addAutoExpanding","settings","wysiwygDefault","default","editorReady","mode","as","addAce","updateEditorValue","then","ace","setValue","setConvertedValue","catch","err","console","warn","hasOwnProperty","quill","addQuill","root","innerHTML","isUploadEnabled","_this","getModule","addHandler","imageHandler","call","spellcheck","disable","setContents","clipboard","convert","addCKE","isReadOnly","numRows","parseInt","isFinite","has","editorHeight","ui","view","editable","editableElement","style","height","data","set","addTiny","tiny","setContent","attachElement","attached","attach","restoreValue","quillInstance","fileInput","container","querySelector","document","createElement","setAttribute","classList","add","addEventListener","files","range","getSelection","length","enable","uploadStorage","uploadUrl","uploadOptions","uploadDir","fileKey","requestData","formio","uploadFile","uniqueName","name","result","downloadFile","Delta","Quill","import","updateContents","retain","delete","insert","image","url","alt","JSON","stringify","sources","USER","error","appendChild","click","flags","setValueAt","setEditorsValue","skipWysiwyg","setAsyncConvertedValue","map","val","getValue","refs","interpolate","isNil","isString","setReadOnlyValue","htmlDoc","DOMParser","parseFromString","images","getElementsByTagName","setImagesUrl","firstElementChild","XMLSerializer","serializeToString","resolve","all","parse","getAttribute","textarea","heightOffset","previousHeight","changeOverflow","width","offsetWidth","overflowY","resize","scrollHeight","changeSize","nodeScrolls","parentNode","Element","scrollTop","push","node","forEach","nodeScroll","preventParentScroll","update","debounce","styleHeight","Math","round","parseFloat","computed","window","getComputedStyle","currentHeight","offsetHeight","computedStyle","borderTopWidth","borderBottomWidth","on","replace","trim","fromRoot","changed","onChange","updateSize","oldValue","hasChanged","defaultValue","destroy","removeEventListener"],"mappings":"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","file":"../../../components/textarea/TextArea.js","sourcesContent":["define([\n    '../textfield/TextField',\n    'skylark-lodash',\n    '../../vendors/getify/npo',\n    '../../utils/utils'\n], function (TextFieldComponent, _, NativePromise, a) {\n    'use strict';\n    return class TextAreaComponent extends TextFieldComponent {\n        static schema(...extend) {\n            return TextFieldComponent.schema({\n                type: 'textarea',\n                label: 'Text Area',\n                key: 'textArea',\n                rows: 3,\n                wysiwyg: false,\n                editor: '',\n                inputFormat: 'html',\n                validate: {\n                    minWords: '',\n                    maxWords: ''\n                }\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Text Area',\n                group: 'basic',\n                icon: 'font',\n                documentation: 'http://help.form.io/userguide/#textarea',\n                weight: 20,\n                schema: TextAreaComponent.schema()\n            };\n        }\n        init() {\n            super.init();\n            this.editors = [];\n            this.editorsReady = [];\n            this.updateSizes = [];\n            this.options.submitOnEnter = false;\n        }\n        get defaultSchema() {\n            return TextAreaComponent.schema();\n        }\n        get inputInfo() {\n            const info = super.inputInfo;\n            info.type = this.component.wysiwyg ? 'div' : 'textarea';\n            if (this.component.rows) {\n                info.attr.rows = this.component.rows;\n            }\n            return info;\n        }\n        validateMultiple() {\n            return !this.isJsonValue;\n        }\n        renderElement(value, index) {\n            const info = this.inputInfo;\n            info.attr = info.attr || {};\n            info.content = value;\n            if (this.options.readOnly || this.disabled) {\n                return this.renderTemplate('well', {\n                    children: '<div ref=\"input\"></div>',\n                    nestedKey: this.key,\n                    value\n                });\n            }\n            if (this.component.editor || this.component.wysiwyg) {\n                return '<div ref=\"input\"></div>';\n            }\n            return this.renderTemplate('input', {\n                input: info,\n                value,\n                index\n            });\n        }\n        get autoExpand() {\n            return this.component.autoExpand;\n        }\n        updateEditorValue(index, newValue) {\n            newValue = this.getConvertedValue(this.removeBlanks(newValue));\n            const dataValue = this.dataValue;\n            if (this.component.multiple && Array.isArray(dataValue)) {\n                const newArray = _.clone(dataValue);\n                newArray[index] = newValue;\n                newValue = newArray;\n            }\n            if (!_.isEqual(newValue, dataValue) && (!_.isEmpty(newValue) || !_.isEmpty(dataValue))) {\n                this.updateValue(newValue, { modified: !this.autoModified });\n            }\n            this.autoModified = false;\n        }\n        attachElement(element, index) {\n            if (this.autoExpand && (this.isPlain || this.options.readOnly || this.options.htmlView)) {\n                if (element.nodeName === 'TEXTAREA') {\n                    this.addAutoExpanding(element, index);\n                }\n            }\n            if (this.options.readOnly) {\n                return element;\n            }\n            if (this.component.wysiwyg && !this.component.editor) {\n                this.component.editor = 'ckeditor';\n            }\n            let settings = _.isEmpty(this.component.wysiwyg) ? this.wysiwygDefault[this.component.editor] || this.wysiwygDefault.default : this.component.wysiwyg;\n            this.editorsReady[index] = new NativePromise(editorReady => {\n                switch (this.component.editor) {\n                case 'ace':\n                    if (!settings) {\n                        settings = {};\n                    }\n                    settings.mode = this.component.as;\n                    this.addAce(element, settings, newValue => this.updateEditorValue(index, newValue)).then(ace => {\n                        this.editors[index] = ace;\n                        let dataValue = this.dataValue;\n                        dataValue = this.component.multiple && Array.isArray(dataValue) ? dataValue[index] : dataValue;\n                        ace.setValue(this.setConvertedValue(dataValue, index));\n                        editorReady(ace);\n                        return ace;\n                    }).catch(err => console.warn(err));\n                    break;\n                case 'quill':\n                    if (settings.hasOwnProperty('toolbarGroups') || settings.hasOwnProperty('toolbar')) {\n                        console.warn('The WYSIWYG settings are configured for CKEditor. For this renderer, you will need to use configurations for the Quill Editor. See https://quilljs.com/docs/configuration for more information.');\n                        settings = this.wysiwygDefault.quill;\n                    }\n                    this.addQuill(element, settings, () => this.updateEditorValue(index, this.editors[index].root.innerHTML)).then(quill => {\n                        this.editors[index] = quill;\n                        if (this.component.isUploadEnabled) {\n                            const _this = this;\n                            quill.getModule('toolbar').addHandler('image', function () {\n                                _this.imageHandler.call(_this, this);\n                            });\n                        }\n                        quill.root.spellcheck = this.component.spellcheck;\n                        if (this.options.readOnly || this.component.disabled) {\n                            quill.disable();\n                        }\n                        let dataValue = this.dataValue;\n                        dataValue = this.component.multiple && Array.isArray(dataValue) ? dataValue[index] : dataValue;\n                        quill.setContents(quill.clipboard.convert(this.setConvertedValue(dataValue, index)));\n                        editorReady(quill);\n                        return quill;\n                    }).catch(err => console.warn(err));\n                    break;\n                case 'ckeditor':\n                    settings = settings || {};\n                    settings.rows = this.component.rows;\n                    this.addCKE(element, settings, newValue => this.updateEditorValue(index, newValue)).then(editor => {\n                        this.editors[index] = editor;\n                        if (this.options.readOnly || this.component.disabled) {\n                            editor.isReadOnly = true;\n                        }\n                        const numRows = parseInt(this.component.rows, 10);\n                        if (_.isFinite(numRows) && _.has(editor, 'ui.view.editable.editableElement')) {\n                            const editorHeight = numRows * 31 + 14;\n                            editor.ui.view.editable.editableElement.style.height = `${ editorHeight }px`;\n                        }\n                        let dataValue = this.dataValue;\n                        dataValue = this.component.multiple && Array.isArray(dataValue) ? dataValue[index] : dataValue;\n                        editor.data.set(this.setConvertedValue(dataValue, index));\n                        editorReady(editor);\n                        return editor;\n                    });\n                    break;\n                case 'tiny':\n                    if (!settings) {\n                        settings = {};\n                    }\n                    settings.mode = this.component.as || 'javascript';\n                    this.addTiny(element, settings, newValue => this.updateEditorValue(newValue)).then(tiny => {\n                        this.editors[index] = tiny;\n                        tiny.setContent(this.setConvertedValue(this.dataValue));\n                        editorReady(tiny);\n                        return tiny;\n                    }).catch(err => console.warn(err));\n                    break;\n                default:\n                    super.attachElement(element, index);\n                    break;\n                }\n            });\n            return element;\n        }\n        attach(element) {\n            const attached = super.attach(element);\n            this.restoreValue();\n            return attached;\n        }\n        imageHandler(quillInstance) {\n            let fileInput = quillInstance.container.querySelector('input.ql-image[type=file]');\n            if (fileInput == null) {\n                fileInput = document.createElement('input');\n                fileInput.setAttribute('type', 'file');\n                fileInput.setAttribute('accept', 'image/*');\n                fileInput.classList.add('ql-image');\n                this.addEventListener(fileInput, 'change', () => {\n                    const files = fileInput.files;\n                    const range = quillInstance.quill.getSelection(true);\n                    if (!files || !files.length) {\n                        console.warn('No files selected');\n                        return;\n                    }\n                    quillInstance.quill.enable(false);\n                    const {uploadStorage, uploadUrl, uploadOptions, uploadDir, fileKey} = this.component;\n                    let requestData;\n                    this.root.formio.uploadFile(uploadStorage, files[0], a.uniqueName(files[0].name), uploadDir || '', null, uploadUrl, uploadOptions, fileKey).then(result => {\n                        requestData = result;\n                        return this.root.formio.downloadFile(result);\n                    }).then(result => {\n                        quillInstance.quill.enable(true);\n                        const Delta = Quill.import('delta');\n                        quillInstance.quill.updateContents(new Delta().retain(range.index).delete(range.length).insert({ image: result.url }, { alt: JSON.stringify(requestData) }), Quill.sources.USER);\n                        fileInput.value = '';\n                    }).catch(error => {\n                        console.warn('Quill image upload failed');\n                        console.warn(error);\n                        quillInstance.quill.enable(true);\n                    });\n                });\n                quillInstance.container.appendChild(fileInput);\n            }\n            fileInput.click();\n        }\n        get isPlain() {\n            return !this.component.wysiwyg && !this.component.editor;\n        }\n        get htmlView() {\n            return this.options.readOnly && (this.component.editor || this.component.wysiwyg);\n        }\n        setValueAt(index, value, flags = {}) {\n            super.setValueAt(index, value, flags);\n            if (this.editorsReady[index]) {\n                const setEditorsValue = flags => editor => {\n                    this.autoModified = true;\n                    if (!flags.skipWysiwyg) {\n                        switch (this.component.editor) {\n                        case 'ace':\n                            editor.setValue(this.setConvertedValue(value, index));\n                            break;\n                        case 'quill':\n                            if (this.component.isUploadEnabled) {\n                                this.setAsyncConvertedValue(value).then(result => {\n                                    editor.setContents(editor.clipboard.convert(result));\n                                });\n                            } else {\n                                editor.setContents(editor.clipboard.convert(this.setConvertedValue(value, index)));\n                            }\n                            break;\n                        case 'ckeditor':\n                            editor.data.set(this.setConvertedValue(value, index));\n                            break;\n                        case 'tiny':\n                            editor.setContent(this.setConvertedValue(value));\n                            break;\n                        }\n                    }\n                };\n                this.editorsReady[index].then(setEditorsValue(_.clone(flags)));\n            }\n        }\n        setValue(value, flags = {}) {\n            if (this.isPlain || this.options.readOnly || this.disabled) {\n                value = this.component.multiple && Array.isArray(value) ? value.map((val, index) => this.setConvertedValue(val, index)) : this.setConvertedValue(value);\n                return super.setValue(value, flags);\n            }\n            flags.skipWysiwyg = _.isEqual(value, this.getValue());\n            return super.setValue(value, flags);\n        }\n        setReadOnlyValue(value, index) {\n            index = index || 0;\n            if (this.options.readOnly || this.disabled) {\n                if (this.refs.input && this.refs.input[index]) {\n                    this.setContent(this.refs.input[index], this.interpolate(value));\n                }\n            }\n        }\n        get isJsonValue() {\n            return this.component.as && this.component.as === 'json';\n        }\n        setConvertedValue(value, index) {\n            if (this.isJsonValue && !_.isNil(value)) {\n                try {\n                    value = JSON.stringify(value, null, 2);\n                } catch (err) {\n                    console.warn(err);\n                }\n            }\n            if (!_.isString(value)) {\n                value = '';\n            }\n            this.setReadOnlyValue(value, index);\n            return value;\n        }\n        setAsyncConvertedValue(value) {\n            if (this.isJsonValue && value) {\n                try {\n                    value = JSON.stringify(value, null, 2);\n                } catch (err) {\n                    console.warn(err);\n                }\n            }\n            if (!_.isString(value)) {\n                value = '';\n            }\n            const htmlDoc = new DOMParser().parseFromString(value, 'text/html');\n            const images = htmlDoc.getElementsByTagName('img');\n            if (images.length) {\n                return this.setImagesUrl(images).then(() => {\n                    value = htmlDoc.getElementsByTagName('body')[0].firstElementChild;\n                    return new XMLSerializer().serializeToString(value);\n                });\n            } else {\n                return NativePromise.resolve(value);\n            }\n        }\n        setImagesUrl(images) {\n            return NativePromise.all(_.map(images, image => {\n                let requestData;\n                try {\n                    requestData = JSON.parse(image.getAttribute('alt'));\n                } catch (error) {\n                    console.warn(error);\n                }\n                return this.root.formio.downloadFile(requestData).then(result => {\n                    image.setAttribute('src', result.url);\n                });\n            }));\n        }\n        addAutoExpanding(textarea, index) {\n            let heightOffset = null;\n            let previousHeight = null;\n            const changeOverflow = value => {\n                const width = textarea.style.width;\n                textarea.style.width = '0px';\n                textarea.offsetWidth;\n                textarea.style.width = width;\n                textarea.style.overflowY = value;\n            };\n            const preventParentScroll = (element, changeSize) => {\n                const nodeScrolls = [];\n                while (element && element.parentNode && element.parentNode instanceof Element) {\n                    if (element.parentNode.scrollTop) {\n                        nodeScrolls.push({\n                            node: element.parentNode,\n                            scrollTop: element.parentNode.scrollTop\n                        });\n                    }\n                    element = element.parentNode;\n                }\n                changeSize();\n                nodeScrolls.forEach(nodeScroll => {\n                    nodeScroll.node.scrollTop = nodeScroll.scrollTop;\n                });\n            };\n            const resize = () => {\n                if (textarea.scrollHeight === 0) {\n                    return;\n                }\n                preventParentScroll(textarea, () => {\n                    textarea.style.height = '';\n                    textarea.style.height = `${ textarea.scrollHeight + heightOffset }px`;\n                });\n            };\n            const update = _.debounce(() => {\n                resize();\n                const styleHeight = Math.round(parseFloat(textarea.style.height));\n                const computed = window.getComputedStyle(textarea, null);\n                let currentHeight = textarea.offsetHeight;\n                if (currentHeight < styleHeight && computed.overflowY === 'hidden') {\n                    changeOverflow('scroll');\n                } else if (computed.overflowY !== 'hidden') {\n                    changeOverflow('hidden');\n                }\n                resize();\n                currentHeight = textarea.offsetHeight;\n                if (previousHeight !== currentHeight) {\n                    previousHeight = currentHeight;\n                    update();\n                }\n            }, 200);\n            const computedStyle = window.getComputedStyle(textarea, null);\n            textarea.style.resize = 'none';\n            heightOffset = parseFloat(computedStyle.borderTopWidth) + parseFloat(computedStyle.borderBottomWidth) || 0;\n            if (window) {\n                this.addEventListener(window, 'resize', update);\n            }\n            this.addEventListener(textarea, 'input', update);\n            this.on('initialized', update);\n            this.updateSizes[index] = update;\n            update();\n        }\n        removeBlanks(value) {\n            if (!value) {\n                return value;\n            }\n            const removeBlanks = function (input) {\n                if (typeof input !== 'string') {\n                    return input;\n                }\n                return input.replace(/<p>&nbsp;<\\/p>|<p><br><\\/p>|<p><br>&nbsp;<\\/p>/g, '').trim();\n            };\n            if (Array.isArray(value)) {\n                value.forEach((input, index) => {\n                    value[index] = removeBlanks(input);\n                });\n            } else {\n                value = removeBlanks(value);\n            }\n            return value;\n        }\n        onChange(flags, fromRoot) {\n            const changed = super.onChange(flags, fromRoot);\n            this.updateSizes.forEach(updateSize => updateSize());\n            return changed;\n        }\n        hasChanged(newValue, oldValue) {\n            return super.hasChanged(this.removeBlanks(newValue), this.removeBlanks(oldValue));\n        }\n        isEmpty(value = this.dataValue) {\n            return super.isEmpty(this.removeBlanks(value));\n        }\n        get defaultValue() {\n            let defaultValue = super.defaultValue;\n            if (this.component.editor === 'quill' && !defaultValue) {\n                defaultValue = '<p><br></p>';\n            }\n            return defaultValue;\n        }\n        getConvertedValue(value) {\n            if (this.isJsonValue && value) {\n                try {\n                    value = JSON.parse(value);\n                } catch (err) {\n                }\n            }\n            return value;\n        }\n        detach() {\n            this.editors.forEach(editor => {\n                if (editor.destroy) {\n                    editor.destroy();\n                }\n            });\n            this.editors = [];\n            this.editorsReady = [];\n            this.updateSizes.forEach(updateSize => this.removeEventListener(window, 'resize', updateSize));\n            this.updateSizes = [];\n        }\n        getValue() {\n            if (this.isPlain) {\n                return this.getConvertedValue(super.getValue());\n            }\n            return this.dataValue;\n        }\n    };\n});"]}