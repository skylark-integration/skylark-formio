{"version":3,"sources":["components/number/Number.js"],"names":["define","maskInput","conformToMask","_","maskAddons","Input","utils","NumberComponent","[object Object]","extend","schema","type","label","key","validate","min","max","step","integer","builderInfo","title","icon","group","documentation","weight","args","super","this","validators","concat","separators","getNumberSeparators","options","language","decimalSeparator","component","delimiter","hasOwnProperty","console","warn","thousandsSeparator","requireDecimal","get","decimalLimit","getNumberDecimalLimit","has","override","numberMask","undefined","createNumberMask","prefix","suffix","thousandsSeparatorSymbol","decimalSymbol","allowNegative","allowDecimal","defaultSchema","defaultValue","value","split","join","replace","parseInt","parseFloat","input","numberPattern","setAttribute","mask","inputElement","inputInfo","info","attr","inputmode","changeEvent","index","refs","length","val","parseNumber","flags","setValueAt","formatValue","parseValue","isNaN","String","includes","repeat","focus","setSelectionRange","toString","conformedValue","getWidgetValueAsString","Array","isArray","map","getMaskedValue","element","addFocusBlurEvents","addEventListener","getValueAsString","dataValue"],"mappings":"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","file":"../../../components/number/Number.js","sourcesContent":["define([\n    '../../vendors/vanilla-text-mask/maskInput',\n    '../../vendors/vanilla-text-mask/conformToMask',\n    'skylark-lodash',\n    '../../vendors/text-mask-addons/index',\n    '../_classes/input/Input',\n    '../../utils/utils'\n], function (maskInput,conformToMask, _, maskAddons, Input, utils) {\n    'use strict';\n    return class NumberComponent extends Input {\n        static schema(...extend) {\n            return Input.schema({\n                type: 'number',\n                label: 'Number',\n                key: 'number',\n                validate: {\n                    min: '',\n                    max: '',\n                    step: 'any',\n                    integer: ''\n                }\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Number',\n                icon: 'hashtag',\n                group: 'basic',\n                documentation: 'http://help.form.io/userguide/#number',\n                weight: 30,\n                schema: NumberComponent.schema()\n            };\n        }\n        constructor(...args) {\n            super(...args);\n            this.validators = this.validators.concat([\n                'min',\n                'max'\n            ]);\n            const separators = utils.getNumberSeparators(this.options.language);\n            this.decimalSeparator = this.options.decimalSeparator = this.options.decimalSeparator || separators.decimalSeparator;\n            if (this.component.delimiter) {\n                if (this.options.hasOwnProperty('thousandsSeparator')) {\n                    console.warn(\"Property 'thousandsSeparator' is deprecated. Please use i18n to specify delimiter.\");\n                }\n                this.delimiter = this.options.thousandsSeparator || separators.delimiter;\n            } else {\n                this.delimiter = '';\n            }\n            const requireDecimal = _.get(this.component, 'requireDecimal', false);\n            this.decimalLimit = utils.getNumberDecimalLimit(this.component, requireDecimal ? 2 : 20);\n            if (_.has(this.options, `languageOverride.${ this.options.language }`)) {\n                const override = _.get(this.options, `languageOverride.${ this.options.language }`);\n                this.decimalSeparator = override.decimalSeparator;\n                this.delimiter = override.delimiter;\n            }\n            this.numberMask = this.undefined();\n        }\n        createNumberMask() {\n            return maskAddons.createNumberMask({\n                prefix: '',\n                suffix: '',\n                requireDecimal: _.get(this.component, 'requireDecimal', false),\n                thousandsSeparatorSymbol: _.get(this.component, 'thousandsSeparator', this.delimiter),\n                decimalSymbol: _.get(this.component, 'decimalSymbol', this.decimalSeparator),\n                decimalLimit: _.get(this.component, 'decimalLimit', this.decimalLimit),\n                allowNegative: _.get(this.component, 'allowNegative', true),\n                allowDecimal: _.get(this.component, 'allowDecimal', !(this.component.validate && this.component.validate.integer))\n            });\n        }\n        get defaultSchema() {\n            return NumberComponent.schema();\n        }\n        get defaultValue() {\n            let defaultValue = super.defaultValue;\n            if (!defaultValue && this.component.defaultValue === 0) {\n                defaultValue = this.component.defaultValue;\n            }\n            return defaultValue;\n        }\n        parseNumber(value) {\n            value = value.split(this.delimiter).join('').replace(this.decimalSeparator, '.');\n            if (this.component.validate && this.component.validate.integer) {\n                return parseInt(value, 10);\n            } else {\n                return parseFloat(value);\n            }\n        }\n        setInputMask(input) {\n            let numberPattern = '[0-9';\n            numberPattern += this.decimalSeparator || '';\n            numberPattern += this.delimiter || '';\n            numberPattern += ']*';\n            input.setAttribute('pattern', numberPattern);\n            input.mask = maskInput({\n                inputElement: input,\n                mask: this.numberMask\n            });\n        }\n        get inputInfo() {\n            const info = super.inputInfo;\n            if (this.component.mask) {\n                info.attr.type = 'password';\n            } else {\n                info.attr.type = 'text';\n            }\n            info.attr.inputmode = 'numeric';\n            info.changeEvent = 'input';\n            return info;\n        }\n        getValueAt(index) {\n            if (!this.refs.input.length || !this.refs.input[index]) {\n                return null;\n            }\n            const val = this.refs.input[index].value;\n            return val ? this.parseNumber(val) : null;\n        }\n        setValueAt(index, value, flags = {}) {\n            return super.setValueAt(index, this.formatValue(this.parseValue(value)), flags);\n        }\n        parseValue(input) {\n            let value = parseFloat(input);\n            if (!_.isNaN(value)) {\n                value = String(value).replace('.', this.decimalSeparator);\n            } else {\n                value = null;\n            }\n            return value;\n        }\n        formatValue(value) {\n            if (this.component.requireDecimal && value && !value.includes(this.decimalSeparator)) {\n                return `${ value }${ this.decimalSeparator }${ _.repeat('0', this.decimalLimit) }`;\n            } else if (this.component.requireDecimal && value && value.includes(this.decimalSeparator)) {\n                return `${ value }${ _.repeat('0', this.decimalLimit - value.split(this.decimalSeparator)[1].length) }`;\n            }\n            return value;\n        }\n        focus() {\n            const input = this.refs.input[0];\n            if (input) {\n                input.focus();\n                input.setSelectionRange(0, input.value.length);\n            }\n        }\n        getMaskedValue(value) {\n            return conformToMask(value === null ? '0' : value.toString(), this.numberMask).conformedValue;\n        }\n        getValueAsString(value) {\n            if (!value && value !== 0) {\n                return '';\n            }\n            value = this.getWidgetValueAsString(value);\n            if (Array.isArray(value)) {\n                return value.map(this.getMaskedValue).join(', ');\n            }\n            return this.getMaskedValue(value);\n        }\n        addFocusBlurEvents(element) {\n            super.addFocusBlurEvents(element);\n            this.addEventListener(element, 'blur', () => {\n                element.value = this.getValueAsString(this.formatValue(this.parseValue(this.dataValue)));\n            });\n        }\n    };\n});"]}