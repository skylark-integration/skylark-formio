{"version":3,"sources":["components/currency/Currency.js"],"names":["define","textMasks","_","utils","NumberComponent","CurrencyComponent","[object Object]","extend","schema","type","label","key","builderInfo","title","group","icon","documentation","weight","component","options","data","hasOwnProperty","delimiter","super","decimalLimit","get","this","affixes","getCurrencyAffixes","currency","decimalSeparator","lang","language","prefix","suffix","createNumberMask","thousandsSeparatorSymbol","decimalSymbol","allowNegative","allowDecimal","defaultSchema","value","parseNumber","stripPrefixSuffix","parseValue","integerPart","decimalPart","decimalPartNumbers","includes","split","length","push","formattedValue","join","formatValue","stringValue","getValueAsString","addZerosAndFormatValue","disabled","hasPrefix","hasSuffix","hasDelimiter","hasDecimalSeparator","replace","Number","isNaN","err","element","addFocusBlurEvents","addEventListener","dataValue"],"mappings":"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","file":"../../../components/currency/Currency.js","sourcesContent":["define([\n    '..//../vendors/text-mask-addons/index',\n    'skylark-lodash',\n    '../../utils/utils',\n    '../number/Number'\n], function (textMasks, _, utils, NumberComponent) {\n    'use strict';\n    return class CurrencyComponent extends NumberComponent {\n        static schema(...extend) {\n            return NumberComponent.schema({\n                type: 'currency',\n                label: 'Currency',\n                key: 'currency'\n            }, ...extend);\n        }\n        static get builderInfo() {\n            return {\n                title: 'Currency',\n                group: 'advanced',\n                icon: 'usd',\n                documentation: 'http://help.form.io/userguide/#currency',\n                weight: 70,\n                schema: CurrencyComponent.schema()\n            };\n        }\n        constructor(component, options, data) {\n            if (component && !component.hasOwnProperty('delimiter')) {\n                component.delimiter = true;\n            }\n            super(component, options, data);\n        }\n        createNumberMask() {\n            const decimalLimit = _.get(this.component, 'decimalLimit', 2);\n            const affixes = utils.getCurrencyAffixes({\n                currency: this.component.currency,\n                decimalLimit: decimalLimit,\n                decimalSeparator: this.decimalSeparator,\n                lang: this.options.language\n            });\n            this.prefix = this.options.prefix || affixes.prefix;\n            this.suffix = this.options.suffix || affixes.suffix;\n            return textMasks.createNumberMask({\n                prefix: this.prefix,\n                suffix: this.suffix,\n                thousandsSeparatorSymbol: _.get(this.component, 'thousandsSeparator', this.delimiter),\n                decimalSymbol: _.get(this.component, 'decimalSymbol', this.decimalSeparator),\n                decimalLimit: decimalLimit,\n                allowNegative: _.get(this.component, 'allowNegative', true),\n                allowDecimal: _.get(this.component, 'allowDecimal', true)\n            });\n        }\n        get defaultSchema() {\n            return CurrencyComponent.schema();\n        }\n        parseNumber(value) {\n            return super.parseNumber(this.stripPrefixSuffix(value));\n        }\n        parseValue(value) {\n            return super.parseValue(this.stripPrefixSuffix(value));\n        }\n        addZerosAndFormatValue(value) {\n            if (!value && value !== 0)\n                return;\n            const decimalLimit = _.get(this.component, 'decimalLimit', 2);\n            let integerPart;\n            let decimalPart = '';\n            let decimalPartNumbers = [];\n            if (value.includes(this.decimalSeparator)) {\n                [integerPart, decimalPart] = value.split(this.decimalSeparator);\n                decimalPartNumbers = [...decimalPart.split('')];\n            } else {\n                integerPart = value;\n            }\n            if (decimalPart.length < decimalLimit) {\n                while (decimalPartNumbers.length < decimalLimit) {\n                    decimalPartNumbers.push('0');\n                }\n            }\n            const formattedValue = `${ integerPart }${ this.decimalSeparator }${ decimalPartNumbers.join('') }`;\n            return super.formatValue(formattedValue);\n        }\n        getValueAsString(value) {\n            const stringValue = super.getValueAsString(value);\n            if (value || value == '0') {\n                return this.addZerosAndFormatValue(stringValue);\n            }\n            return stringValue;\n        }\n        formatValue(value) {\n            if (value && this.disabled) {\n                return this.addZerosAndFormatValue(value);\n            }\n            return super.formatValue(value);\n        }\n        stripPrefixSuffix(value) {\n            if (typeof value === 'string') {\n                try {\n                    const hasPrefix = this.prefix ? value.includes(this.prefix) : false;\n                    const hasSuffix = this.suffix ? value.includes(this.suffix) : false;\n                    const hasDelimiter = value.includes(this.delimiter);\n                    const hasDecimalSeparator = value.includes(this.decimalSeparator);\n                    if (this.prefix) {\n                        value = value.replace(this.prefix, '');\n                    }\n                    if (this.suffix) {\n                        value = value.replace(this.suffix, '');\n                    }\n                    if ((hasPrefix || hasSuffix) && !hasDelimiter && !hasDecimalSeparator && (Number.isNaN(+value) || !value)) {\n                        value = '0';\n                    }\n                } catch (err) {\n                }\n            }\n            return value;\n        }\n        addFocusBlurEvents(element) {\n            super.addFocusBlurEvents(element);\n            this.addEventListener(element, 'blur', () => {\n                element.value = this.getValueAsString(this.addZerosAndFormatValue(this.parseValue(this.dataValue)));\n            });\n        }\n    };\n});"]}