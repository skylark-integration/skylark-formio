/**
 * skylark-formio - A version of formio.js that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-formio/
 * @license MIT
 */
define(["../../vendorssignature_pad/SignaturePad","../_classes/input/Input","skylark-lodash"],function(e,t,s){"use strict";return class i extends t{static schema(...e){return t.schema({type:"signature",label:"Signature",key:"signature",footer:"Sign above",width:"100%",height:"150px",penColor:"black",backgroundColor:"rgb(245,245,235)",minWidth:"0.5",maxWidth:"2.5"},...e)}static get builderInfo(){return{title:"Signature",group:"advanced",icon:"pencil",weight:120,documentation:"http://help.form.io/userguide/#signature",schema:i.schema()}}init(){super.init(),this.currentWidth=0,this.scale=1,this.component.width||(this.component.width="100%"),this.component.height||(this.component.height="200px")}get emptyValue(){return""}get defaultSchema(){return i.schema()}get inputInfo(){const e=super.inputInfo;return e.type="input",e.attr.type="hidden",e}get className(){return`${super.className} signature-pad`}labelIsHidden(){return!0}setValue(e,t={}){const s=super.setValue(e,t);return e&&this.refs.signatureImage&&this.options.readOnly&&(this.refs.signatureImage.setAttribute("src",e),this.showCanvas(!1)),this.signaturePad&&(e?s&&this.triggerChange():this.signaturePad.clear()),s}showCanvas(e){e?(this.refs.canvas&&(this.refs.canvas.style.display="inherit"),this.refs.signatureImage&&(this.refs.signatureImage.style.display="none")):(this.refs.canvas&&(this.refs.canvas.style.display="none"),this.refs.signatureImage&&(this.refs.signatureImage.style.display="inherit"))}onDisabled(){this.showCanvas(!super.disabled),this.signaturePad&&(super.disabled?(this.signaturePad.off(),this.refs.refresh&&this.refs.refresh.classList.add("disabled")):(this.signaturePad.on(),this.refs.refresh&&this.refs.refresh.classList.remove("disabled")))}checkSize(e,t){if(e||this.refs.padBody.offsetWidth!==this.currentWidth){this.scale=e?t:this.scale,this.currentWidth=this.refs.padBody.offsetWidth,this.refs.canvas.width=this.currentWidth*this.scale,this.refs.canvas.height=this.refs.padBody.offsetHeight*this.scale;const s=this.refs.canvas.getContext("2d");s.setTransform(1,0,0,1,0,0),s.scale(1/this.scale,1/this.scale),s.fillStyle=this.signaturePad.backgroundColor,s.fillRect(0,0,this.refs.canvas.width,this.refs.canvas.height),this.signaturePad.clear(),this.dataValue&&this.signaturePad.fromDataURL(this.dataValue)}}renderElement(e,t){return this.renderTemplate("signature",{element:super.renderElement(e,t),required:s.get(this.component,"validate.required",!1)})}setOpenModalElement(){const e=`\n      <label class="control-label">${this.component.label}</label><br>\n      <button lang='en' class='btn btn-light btn-md open-modal-button' ref='openModal'>Click to Sign</button>\n    `;this.componentModal.setOpenModalElement(e)}getModalPreviewTemplate(){return`\n      <label class="control-label">${this.component.label}</label><br>\n      <img src=${this.dataValue} ref='openModal' />\n    `}attach(t){this.loadRefs(t,{canvas:"single",refresh:"single",padBody:"single",signatureImage:"single"});const i=super.attach(t);return this.onDisabled(),this.refs.refresh&&this.options.readOnly&&this.refs.refresh.classList.add("disabled"),this.refs.canvas&&(this.signaturePad=new e(this.refs.canvas,{minWidth:this.component.minWidth,maxWidth:this.component.maxWidth,penColor:this.component.penColor,backgroundColor:this.component.backgroundColor}),this.signaturePad.onEnd=(()=>this.setValue(this.signaturePad.toDataURL())),this.refs.signatureImage.setAttribute("src",this.signaturePad.toDataURL()),this.refs.padBody&&(this.refs.padBody.style.maxWidth||(this.refs.padBody.style.maxWidth="100%"),this.addEventListener(window,"resize",s.debounce(()=>this.checkSize(),100)),setTimeout(function e(){this.refs.padBody&&this.refs.padBody.offsetWidth?this.checkSize():setTimeout(e.bind(this),200)}.bind(this),200))),this.addEventListener(this.refs.refresh,"click",e=>{e.preventDefault(),this.showCanvas(!0),this.signaturePad.clear(),this.setValue(this.defaultValue)}),this.setValue(this.dataValue),i}detach(){this.signaturePad&&this.signaturePad.off(),this.signaturePad=null,this.currentWidth=0,super.detach()}getValueAsString(e){return e?"Yes":"No"}focus(){this.refs.padBody.focus()}}});
//# sourceMappingURL=../../sourcemaps/components/signature/Signature.js.map
