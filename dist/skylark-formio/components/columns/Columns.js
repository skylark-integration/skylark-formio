/**
 * skylark-formio - A version of formio.js that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-formio/
 * @license MIT
 */
define(["skylark-lodash","../_classes/nested/NestedComponent"],function(e,t){"use strict";return class s extends t{static schema(...e){return t.schema({label:"Columns",key:"columns",type:"columns",columns:[{components:[],width:6,offset:0,push:0,pull:0,size:"md"},{components:[],width:6,offset:0,push:0,pull:0,size:"md"}],clearOnHide:!1,input:!1,tableView:!1,persistent:!1,autoAdjust:!1,hideOnChildrenHidden:!1},...e)}static get builderInfo(){return{title:"Columns",icon:"columns",group:"layout",documentation:"http://help.form.io/userguide/#columns",weight:10,schema:s.schema()}}constructor(e,t,s){super(e,t,s),this.rows=[]}get schema(){const t=e.omit(super.schema,["components"]);return t.columns.map((s,n)=>{s.components.map((s,o)=>{const c=e.clone(s);c.internal=!0;const i=this.createComponent(c);delete i.component.internal,t.columns[n].components[o]=i.schema})}),t}get defaultSchema(){return s.schema()}get className(){return`row ${super.className}`}get columnKey(){return`column-${this.id}`}init(){super.init(),this.columns=[],e.each(this.component.columns,(t,s)=>{this.columns[s]=[],t.size||(t.size="md"),Array.isArray(t.components)||(t.components=[]),e.each(t.components,e=>{e.hideOnChildrenHidden=this.component.hideOnChildrenHidden;const t=this.createComponent(e);t.column=s,this.columns[s].push(t)})}),this.rows=this.groupByRow()}labelIsHidden(){return!0}render(){return super.render(this.renderTemplate("columns",{columnKey:this.columnKey,columnComponents:this.columns.map(e=>this.renderComponents(e))}))}attach(e){this.loadRefs(e,{[this.columnKey]:"multiple"});const t=super.attach(e);return this.refs[this.columnKey].forEach((e,t)=>this.attachComponents(e,this.columns[t],this.component.columns[t].components)),t}get gridSize(){return 12}justifyRow(t){const s=e.filter(t,"visible"),n=t.length,o=s.length;if(n>0&&o>0){const t=Math.floor(this.gridSize/o),n=t*o,c=this.gridSize-n;e.each(s,e=>{e.component.width=t}),e.last(s).component.width+=c,e.each(s,e=>{e.element&&e.element.setAttribute("class",e.className)})}}groupByRow(){const t=e=>e.component.width,s=e.reduce(this.components,(s,n)=>{const o=[...s.stack,n];return e.sumBy(o,t)<=this.gridSize?(s.stack=o,s):(s.rows=[...s.rows,s.stack],s.stack=[n],s)},{stack:[],rows:[]});return e.concat(s.rows,[s.stack])}justify(){e.each(this.columns,this.justifyRow.bind(this))}checkComponentConditions(e,t,s){if(this.component.autoAdjust){const n=super.checkComponentConditions(e,t,s);return this.justify(),n}return super.checkComponentConditions(e,t,s)}detach(e){super.detach(e)}destroy(){super.destroy(),this.columns=[]}}});
//# sourceMappingURL=../../sourcemaps/components/columns/Columns.js.map
